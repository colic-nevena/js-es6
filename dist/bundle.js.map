{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/rxjs/Observable.js","webpack:///./node_modules/rxjs/Subscriber.js","webpack:///./node_modules/rxjs/util/subscribeToResult.js","webpack:///./node_modules/rxjs/OuterSubscriber.js","webpack:///./node_modules/rxjs/scheduler/async.js","webpack:///./node_modules/rxjs/Subscription.js","webpack:///./node_modules/rxjs/util/errorObject.js","webpack:///./node_modules/rxjs/Subject.js","webpack:///./node_modules/rxjs/util/tryCatch.js","webpack:///./node_modules/rxjs/util/root.js","webpack:///./node_modules/rxjs/util/isScheduler.js","webpack:///./node_modules/rxjs/util/isArray.js","webpack:///./node_modules/rxjs/observable/EmptyObservable.js","webpack:///./node_modules/rxjs/observable/ArrayObservable.js","webpack:///./node_modules/rxjs/operators/multicast.js","webpack:///./node_modules/rxjs/operators/reduce.js","webpack:///./node_modules/rxjs/util/ArgumentOutOfRangeError.js","webpack:///./node_modules/rxjs/operators/map.js","webpack:///./node_modules/rxjs/scheduler/AsyncScheduler.js","webpack:///./node_modules/rxjs/scheduler/AsyncAction.js","webpack:///./node_modules/rxjs/util/isNumeric.js","webpack:///./node_modules/rxjs/operators/mergeMap.js","webpack:///./node_modules/rxjs/Notification.js","webpack:///./node_modules/rxjs/observable/concat.js","webpack:///./node_modules/rxjs/symbol/iterator.js","webpack:///./node_modules/rxjs/operators/throttle.js","webpack:///./node_modules/rxjs/util/EmptyError.js","webpack:///./node_modules/rxjs/ReplaySubject.js","webpack:///./node_modules/rxjs/operators/zip.js","webpack:///./node_modules/rxjs/util/isDate.js","webpack:///./node_modules/rxjs/observable/merge.js","webpack:///./node_modules/rxjs/operators/mergeAll.js","webpack:///./node_modules/rxjs/operators/observeOn.js","webpack:///./node_modules/rxjs/operators/combineLatest.js","webpack:///./node_modules/rxjs/AsyncSubject.js","webpack:///./node_modules/rxjs/util/ObjectUnsubscribedError.js","webpack:///./node_modules/rxjs/symbol/observable.js","webpack:///./node_modules/rxjs/symbol/rxSubscriber.js","webpack:///./node_modules/rxjs/util/isFunction.js","webpack:///./node_modules/rxjs/operators/timestamp.js","webpack:///./node_modules/rxjs/operators/switchMap.js","webpack:///./node_modules/rxjs/operators/refCount.js","webpack:///./node_modules/rxjs/operators/takeLast.js","webpack:///./node_modules/rxjs/operators/scan.js","webpack:///./node_modules/rxjs/operators/audit.js","webpack:///./node_modules/rxjs/operators/find.js","webpack:///./node_modules/rxjs/operators/filter.js","webpack:///./node_modules/rxjs/operators/distinctUntilChanged.js","webpack:///./node_modules/rxjs/operators/defaultIfEmpty.js","webpack:///./node_modules/rxjs/operators/concatMap.js","webpack:///./node_modules/rxjs/operators/onErrorResumeNext.js","webpack:///./node_modules/rxjs/observable/race.js","webpack:///./node_modules/rxjs/operators/concatAll.js","webpack:///./node_modules/rxjs/observable/ScalarObservable.js","webpack:///./node_modules/rxjs/util/noop.js","webpack:///./node_modules/rxjs/util/pipe.js","webpack:///(webpack)/buildin/global.js","webpack:///./node_modules/rxjs/scheduler/VirtualTimeScheduler.js","webpack:///./node_modules/rxjs/util/applyMixins.js","webpack:///./node_modules/rxjs/testing/SubscriptionLog.js","webpack:///./node_modules/rxjs/testing/SubscriptionLoggable.js","webpack:///./node_modules/rxjs/operators/zipAll.js","webpack:///./node_modules/rxjs/operators/withLatestFrom.js","webpack:///./node_modules/rxjs/operators/windowWhen.js","webpack:///./node_modules/rxjs/operators/windowToggle.js","webpack:///./node_modules/rxjs/operators/windowTime.js","webpack:///./node_modules/rxjs/operators/windowCount.js","webpack:///./node_modules/rxjs/operators/window.js","webpack:///./node_modules/rxjs/operators/toArray.js","webpack:///./node_modules/rxjs/operators/timeoutWith.js","webpack:///./node_modules/rxjs/util/TimeoutError.js","webpack:///./node_modules/rxjs/operators/timeout.js","webpack:///./node_modules/rxjs/operators/timeInterval.js","webpack:///./node_modules/rxjs/operator/timeInterval.js","webpack:///./node_modules/rxjs/operators/throttleTime.js","webpack:///./node_modules/rxjs/operators/takeWhile.js","webpack:///./node_modules/rxjs/operators/takeUntil.js","webpack:///./node_modules/rxjs/operators/take.js","webpack:///./node_modules/rxjs/operators/switchMapTo.js","webpack:///./node_modules/rxjs/operators/switchAll.js","webpack:///./node_modules/timers-browserify/main.js","webpack:///./node_modules/rxjs/scheduler/asap.js","webpack:///./node_modules/rxjs/operators/startWith.js","webpack:///./node_modules/rxjs/operators/skipWhile.js","webpack:///./node_modules/rxjs/operators/skipUntil.js","webpack:///./node_modules/rxjs/operators/skipLast.js","webpack:///./node_modules/rxjs/operators/skip.js","webpack:///./node_modules/rxjs/operators/single.js","webpack:///./node_modules/rxjs/operators/shareReplay.js","webpack:///./node_modules/rxjs/operators/share.js","webpack:///./node_modules/rxjs/operators/sequenceEqual.js","webpack:///./node_modules/rxjs/operators/sampleTime.js","webpack:///./node_modules/rxjs/operators/sample.js","webpack:///./node_modules/rxjs/operators/retryWhen.js","webpack:///./node_modules/rxjs/operators/retry.js","webpack:///./node_modules/rxjs/operators/repeatWhen.js","webpack:///./node_modules/rxjs/operators/repeat.js","webpack:///./node_modules/rxjs/operators/race.js","webpack:///./node_modules/rxjs/operators/publishLast.js","webpack:///./node_modules/rxjs/operators/publishReplay.js","webpack:///./node_modules/rxjs/BehaviorSubject.js","webpack:///./node_modules/rxjs/operators/publishBehavior.js","webpack:///./node_modules/rxjs/operators/publish.js","webpack:///./node_modules/rxjs/operators/pluck.js","webpack:///./node_modules/rxjs/operators/partition.js","webpack:///./node_modules/rxjs/operators/pairwise.js","webpack:///./node_modules/rxjs/observable/ConnectableObservable.js","webpack:///./node_modules/rxjs/operators/min.js","webpack:///./node_modules/rxjs/operators/mergeScan.js","webpack:///./node_modules/rxjs/operators/mergeMapTo.js","webpack:///./node_modules/rxjs/operators/merge.js","webpack:///./node_modules/rxjs/operators/max.js","webpack:///./node_modules/rxjs/operators/materialize.js","webpack:///./node_modules/rxjs/operators/mapTo.js","webpack:///./node_modules/rxjs/operators/every.js","webpack:///./node_modules/rxjs/operators/last.js","webpack:///./node_modules/rxjs/operators/auditTime.js","webpack:///./node_modules/rxjs/operators/isEmpty.js","webpack:///./node_modules/rxjs/operators/ignoreElements.js","webpack:///./node_modules/rxjs/operators/groupBy.js","webpack:///./node_modules/rxjs/operators/first.js","webpack:///./node_modules/rxjs/operators/findIndex.js","webpack:///./node_modules/rxjs/operators/finalize.js","webpack:///./node_modules/rxjs/operators/elementAt.js","webpack:///./node_modules/rxjs/operators/expand.js","webpack:///./node_modules/rxjs/operators/exhaustMap.js","webpack:///./node_modules/rxjs/operators/exhaust.js","webpack:///./node_modules/rxjs/operators/tap.js","webpack:///./node_modules/rxjs/operators/distinctUntilKeyChanged.js","webpack:///./node_modules/rxjs/operators/distinct.js","webpack:///./node_modules/rxjs/operators/delayWhen.js","webpack:///./node_modules/rxjs/operators/delay.js","webpack:///./node_modules/rxjs/operators/debounceTime.js","webpack:///./node_modules/rxjs/operators/debounce.js","webpack:///./node_modules/rxjs/operators/dematerialize.js","webpack:///./node_modules/rxjs/operators/count.js","webpack:///./node_modules/rxjs/operators/concatMapTo.js","webpack:///./node_modules/rxjs/operators/concat.js","webpack:///./node_modules/rxjs/operators/combineAll.js","webpack:///./node_modules/rxjs/operators/catchError.js","webpack:///./node_modules/rxjs/operators/bufferWhen.js","webpack:///./node_modules/rxjs/operators/bufferToggle.js","webpack:///./node_modules/rxjs/operators/bufferTime.js","webpack:///./node_modules/rxjs/operators/bufferCount.js","webpack:///./node_modules/rxjs/operators/buffer.js","webpack:///./node_modules/rxjs/scheduler/queue.js","webpack:///./node_modules/rxjs/observable/dom/AjaxObservable.js","webpack:///./node_modules/rxjs/observable/timer.js","webpack:///./node_modules/rxjs/util/identity.js","webpack:///./node_modules/rxjs/observable/PromiseObservable.js","webpack:///./node_modules/rxjs/observable/FromObservable.js","webpack:///./node_modules/rxjs/observable/from.js","webpack:///./node_modules/rxjs/observable/of.js","webpack:///./node_modules/rxjs/util/isPromise.js","webpack:///./node_modules/rxjs/util/isArrayLike.js","webpack:///./node_modules/rxjs/SubjectSubscription.js","webpack:///./node_modules/rxjs/Observer.js","webpack:///./node_modules/rxjs/util/UnsubscriptionError.js","webpack:///./node_modules/rxjs/util/isObject.js","webpack:///./node_modules/rxjs/Rx.js","webpack:///./src/nastavnik.service.js","webpack:///./src/kursevi.service.js","webpack:///./src/draw.service.js","webpack:///./src/prijavljeni.service.js","webpack:///./src/reservation.service.js","webpack:///./src/index.js","webpack:///./src/random.service.js","webpack:///./node_modules/rxjs/operators.js","webpack:///./node_modules/rxjs/scheduler/AnimationFrameScheduler.js","webpack:///./node_modules/rxjs/util/AnimationFrame.js","webpack:///./node_modules/rxjs/scheduler/AnimationFrameAction.js","webpack:///./node_modules/rxjs/scheduler/animationFrame.js","webpack:///./node_modules/rxjs/testing/HotObservable.js","webpack:///./node_modules/rxjs/testing/ColdObservable.js","webpack:///./node_modules/rxjs/testing/TestScheduler.js","webpack:///./node_modules/rxjs/operator/zipAll.js","webpack:///./node_modules/rxjs/add/operator/zipAll.js","webpack:///./node_modules/rxjs/operator/zip.js","webpack:///./node_modules/rxjs/add/operator/zip.js","webpack:///./node_modules/rxjs/operator/withLatestFrom.js","webpack:///./node_modules/rxjs/add/operator/withLatestFrom.js","webpack:///./node_modules/rxjs/operator/windowWhen.js","webpack:///./node_modules/rxjs/add/operator/windowWhen.js","webpack:///./node_modules/rxjs/operator/windowToggle.js","webpack:///./node_modules/rxjs/add/operator/windowToggle.js","webpack:///./node_modules/rxjs/operator/windowTime.js","webpack:///./node_modules/rxjs/add/operator/windowTime.js","webpack:///./node_modules/rxjs/operator/windowCount.js","webpack:///./node_modules/rxjs/add/operator/windowCount.js","webpack:///./node_modules/rxjs/operator/window.js","webpack:///./node_modules/rxjs/add/operator/window.js","webpack:///./node_modules/rxjs/operator/toArray.js","webpack:///./node_modules/rxjs/add/operator/toArray.js","webpack:///./node_modules/rxjs/operator/timestamp.js","webpack:///./node_modules/rxjs/add/operator/timestamp.js","webpack:///./node_modules/rxjs/operator/timeoutWith.js","webpack:///./node_modules/rxjs/add/operator/timeoutWith.js","webpack:///./node_modules/rxjs/operator/timeout.js","webpack:///./node_modules/rxjs/add/operator/timeout.js","webpack:///./node_modules/rxjs/add/operator/timeInterval.js","webpack:///./node_modules/rxjs/operator/throttleTime.js","webpack:///./node_modules/rxjs/add/operator/throttleTime.js","webpack:///./node_modules/rxjs/operator/throttle.js","webpack:///./node_modules/rxjs/add/operator/throttle.js","webpack:///./node_modules/rxjs/operator/takeWhile.js","webpack:///./node_modules/rxjs/add/operator/takeWhile.js","webpack:///./node_modules/rxjs/operator/takeUntil.js","webpack:///./node_modules/rxjs/add/operator/takeUntil.js","webpack:///./node_modules/rxjs/operator/takeLast.js","webpack:///./node_modules/rxjs/add/operator/takeLast.js","webpack:///./node_modules/rxjs/operator/take.js","webpack:///./node_modules/rxjs/add/operator/take.js","webpack:///./node_modules/rxjs/operator/switchMapTo.js","webpack:///./node_modules/rxjs/add/operator/switchMapTo.js","webpack:///./node_modules/rxjs/operator/switchMap.js","webpack:///./node_modules/rxjs/add/operator/switchMap.js","webpack:///./node_modules/rxjs/operator/switch.js","webpack:///./node_modules/rxjs/add/operator/switch.js","webpack:///./node_modules/rxjs/scheduler/AsapScheduler.js","webpack:///./node_modules/process/browser.js","webpack:///./node_modules/setimmediate/setImmediate.js","webpack:///./node_modules/rxjs/util/Immediate.js","webpack:///./node_modules/rxjs/scheduler/AsapAction.js","webpack:///./node_modules/rxjs/observable/SubscribeOnObservable.js","webpack:///./node_modules/rxjs/operators/subscribeOn.js","webpack:///./node_modules/rxjs/operator/subscribeOn.js","webpack:///./node_modules/rxjs/add/operator/subscribeOn.js","webpack:///./node_modules/rxjs/operator/startWith.js","webpack:///./node_modules/rxjs/add/operator/startWith.js","webpack:///./node_modules/rxjs/operator/skipWhile.js","webpack:///./node_modules/rxjs/add/operator/skipWhile.js","webpack:///./node_modules/rxjs/operator/skipUntil.js","webpack:///./node_modules/rxjs/add/operator/skipUntil.js","webpack:///./node_modules/rxjs/operator/skipLast.js","webpack:///./node_modules/rxjs/add/operator/skipLast.js","webpack:///./node_modules/rxjs/operator/skip.js","webpack:///./node_modules/rxjs/add/operator/skip.js","webpack:///./node_modules/rxjs/operator/single.js","webpack:///./node_modules/rxjs/add/operator/single.js","webpack:///./node_modules/rxjs/operator/shareReplay.js","webpack:///./node_modules/rxjs/add/operator/shareReplay.js","webpack:///./node_modules/rxjs/operator/share.js","webpack:///./node_modules/rxjs/add/operator/share.js","webpack:///./node_modules/rxjs/operator/sequenceEqual.js","webpack:///./node_modules/rxjs/add/operator/sequenceEqual.js","webpack:///./node_modules/rxjs/operator/scan.js","webpack:///./node_modules/rxjs/add/operator/scan.js","webpack:///./node_modules/rxjs/operator/sampleTime.js","webpack:///./node_modules/rxjs/add/operator/sampleTime.js","webpack:///./node_modules/rxjs/operator/sample.js","webpack:///./node_modules/rxjs/add/operator/sample.js","webpack:///./node_modules/rxjs/operator/retryWhen.js","webpack:///./node_modules/rxjs/add/operator/retryWhen.js","webpack:///./node_modules/rxjs/operator/retry.js","webpack:///./node_modules/rxjs/add/operator/retry.js","webpack:///./node_modules/rxjs/operator/repeatWhen.js","webpack:///./node_modules/rxjs/add/operator/repeatWhen.js","webpack:///./node_modules/rxjs/operator/repeat.js","webpack:///./node_modules/rxjs/add/operator/repeat.js","webpack:///./node_modules/rxjs/operator/reduce.js","webpack:///./node_modules/rxjs/add/operator/reduce.js","webpack:///./node_modules/rxjs/operator/race.js","webpack:///./node_modules/rxjs/add/operator/race.js","webpack:///./node_modules/rxjs/operator/publishLast.js","webpack:///./node_modules/rxjs/add/operator/publishLast.js","webpack:///./node_modules/rxjs/operator/publishReplay.js","webpack:///./node_modules/rxjs/add/operator/publishReplay.js","webpack:///./node_modules/rxjs/operator/publishBehavior.js","webpack:///./node_modules/rxjs/add/operator/publishBehavior.js","webpack:///./node_modules/rxjs/operator/publish.js","webpack:///./node_modules/rxjs/add/operator/publish.js","webpack:///./node_modules/rxjs/operator/pluck.js","webpack:///./node_modules/rxjs/add/operator/pluck.js","webpack:///./node_modules/rxjs/util/not.js","webpack:///./node_modules/rxjs/operator/partition.js","webpack:///./node_modules/rxjs/add/operator/partition.js","webpack:///./node_modules/rxjs/operator/pairwise.js","webpack:///./node_modules/rxjs/add/operator/pairwise.js","webpack:///./node_modules/rxjs/operator/onErrorResumeNext.js","webpack:///./node_modules/rxjs/add/operator/onErrorResumeNext.js","webpack:///./node_modules/rxjs/operator/observeOn.js","webpack:///./node_modules/rxjs/add/operator/observeOn.js","webpack:///./node_modules/rxjs/operator/multicast.js","webpack:///./node_modules/rxjs/add/operator/multicast.js","webpack:///./node_modules/rxjs/operator/min.js","webpack:///./node_modules/rxjs/add/operator/min.js","webpack:///./node_modules/rxjs/operator/mergeScan.js","webpack:///./node_modules/rxjs/add/operator/mergeScan.js","webpack:///./node_modules/rxjs/operator/mergeMapTo.js","webpack:///./node_modules/rxjs/add/operator/mergeMapTo.js","webpack:///./node_modules/rxjs/operator/mergeMap.js","webpack:///./node_modules/rxjs/add/operator/mergeMap.js","webpack:///./node_modules/rxjs/operator/mergeAll.js","webpack:///./node_modules/rxjs/add/operator/mergeAll.js","webpack:///./node_modules/rxjs/operator/merge.js","webpack:///./node_modules/rxjs/add/operator/merge.js","webpack:///./node_modules/rxjs/operator/max.js","webpack:///./node_modules/rxjs/add/operator/max.js","webpack:///./node_modules/rxjs/operator/materialize.js","webpack:///./node_modules/rxjs/add/operator/materialize.js","webpack:///./node_modules/rxjs/operator/mapTo.js","webpack:///./node_modules/rxjs/add/operator/mapTo.js","webpack:///./node_modules/rxjs/operator/map.js","webpack:///./node_modules/rxjs/add/operator/map.js","webpack:///./node_modules/rxjs/operator/every.js","webpack:///./node_modules/rxjs/add/operator/every.js","webpack:///./node_modules/rxjs/operator/let.js","webpack:///./node_modules/rxjs/add/operator/let.js","webpack:///./node_modules/rxjs/operator/last.js","webpack:///./node_modules/rxjs/add/operator/last.js","webpack:///./node_modules/rxjs/operator/auditTime.js","webpack:///./node_modules/rxjs/add/operator/auditTime.js","webpack:///./node_modules/rxjs/operator/audit.js","webpack:///./node_modules/rxjs/add/operator/audit.js","webpack:///./node_modules/rxjs/operator/isEmpty.js","webpack:///./node_modules/rxjs/add/operator/isEmpty.js","webpack:///./node_modules/rxjs/operator/ignoreElements.js","webpack:///./node_modules/rxjs/add/operator/ignoreElements.js","webpack:///./node_modules/rxjs/util/FastMap.js","webpack:///./node_modules/rxjs/util/MapPolyfill.js","webpack:///./node_modules/rxjs/util/Map.js","webpack:///./node_modules/rxjs/operator/groupBy.js","webpack:///./node_modules/rxjs/add/operator/groupBy.js","webpack:///./node_modules/rxjs/operator/first.js","webpack:///./node_modules/rxjs/add/operator/first.js","webpack:///./node_modules/rxjs/operator/findIndex.js","webpack:///./node_modules/rxjs/add/operator/findIndex.js","webpack:///./node_modules/rxjs/operator/find.js","webpack:///./node_modules/rxjs/add/operator/find.js","webpack:///./node_modules/rxjs/operator/finally.js","webpack:///./node_modules/rxjs/add/operator/finally.js","webpack:///./node_modules/rxjs/operator/filter.js","webpack:///./node_modules/rxjs/add/operator/filter.js","webpack:///./node_modules/rxjs/operator/elementAt.js","webpack:///./node_modules/rxjs/add/operator/elementAt.js","webpack:///./node_modules/rxjs/operator/expand.js","webpack:///./node_modules/rxjs/add/operator/expand.js","webpack:///./node_modules/rxjs/operator/exhaustMap.js","webpack:///./node_modules/rxjs/add/operator/exhaustMap.js","webpack:///./node_modules/rxjs/operator/exhaust.js","webpack:///./node_modules/rxjs/add/operator/exhaust.js","webpack:///./node_modules/rxjs/operator/do.js","webpack:///./node_modules/rxjs/add/operator/do.js","webpack:///./node_modules/rxjs/operator/distinctUntilKeyChanged.js","webpack:///./node_modules/rxjs/add/operator/distinctUntilKeyChanged.js","webpack:///./node_modules/rxjs/operator/distinctUntilChanged.js","webpack:///./node_modules/rxjs/add/operator/distinctUntilChanged.js","webpack:///./node_modules/rxjs/util/Set.js","webpack:///./node_modules/rxjs/operator/distinct.js","webpack:///./node_modules/rxjs/add/operator/distinct.js","webpack:///./node_modules/rxjs/operator/delayWhen.js","webpack:///./node_modules/rxjs/add/operator/delayWhen.js","webpack:///./node_modules/rxjs/operator/delay.js","webpack:///./node_modules/rxjs/add/operator/delay.js","webpack:///./node_modules/rxjs/operator/defaultIfEmpty.js","webpack:///./node_modules/rxjs/add/operator/defaultIfEmpty.js","webpack:///./node_modules/rxjs/operator/debounceTime.js","webpack:///./node_modules/rxjs/add/operator/debounceTime.js","webpack:///./node_modules/rxjs/operator/debounce.js","webpack:///./node_modules/rxjs/add/operator/debounce.js","webpack:///./node_modules/rxjs/operator/dematerialize.js","webpack:///./node_modules/rxjs/add/operator/dematerialize.js","webpack:///./node_modules/rxjs/operator/count.js","webpack:///./node_modules/rxjs/add/operator/count.js","webpack:///./node_modules/rxjs/operator/concatMapTo.js","webpack:///./node_modules/rxjs/add/operator/concatMapTo.js","webpack:///./node_modules/rxjs/operator/concatMap.js","webpack:///./node_modules/rxjs/add/operator/concatMap.js","webpack:///./node_modules/rxjs/operator/concatAll.js","webpack:///./node_modules/rxjs/add/operator/concatAll.js","webpack:///./node_modules/rxjs/operator/concat.js","webpack:///./node_modules/rxjs/add/operator/concat.js","webpack:///./node_modules/rxjs/operator/combineLatest.js","webpack:///./node_modules/rxjs/add/operator/combineLatest.js","webpack:///./node_modules/rxjs/operator/combineAll.js","webpack:///./node_modules/rxjs/add/operator/combineAll.js","webpack:///./node_modules/rxjs/operator/catch.js","webpack:///./node_modules/rxjs/add/operator/catch.js","webpack:///./node_modules/rxjs/operator/bufferWhen.js","webpack:///./node_modules/rxjs/add/operator/bufferWhen.js","webpack:///./node_modules/rxjs/operator/bufferToggle.js","webpack:///./node_modules/rxjs/add/operator/bufferToggle.js","webpack:///./node_modules/rxjs/operator/bufferTime.js","webpack:///./node_modules/rxjs/add/operator/bufferTime.js","webpack:///./node_modules/rxjs/operator/bufferCount.js","webpack:///./node_modules/rxjs/add/operator/bufferCount.js","webpack:///./node_modules/rxjs/operator/buffer.js","webpack:///./node_modules/rxjs/add/operator/buffer.js","webpack:///./node_modules/rxjs/util/assign.js","webpack:///./node_modules/rxjs/scheduler/QueueScheduler.js","webpack:///./node_modules/rxjs/scheduler/QueueAction.js","webpack:///./node_modules/rxjs/observable/dom/WebSocketSubject.js","webpack:///./node_modules/rxjs/observable/dom/webSocket.js","webpack:///./node_modules/rxjs/add/observable/dom/webSocket.js","webpack:///./node_modules/rxjs/observable/dom/ajax.js","webpack:///./node_modules/rxjs/add/observable/dom/ajax.js","webpack:///./node_modules/rxjs/observable/zip.js","webpack:///./node_modules/rxjs/add/observable/zip.js","webpack:///./node_modules/rxjs/observable/TimerObservable.js","webpack:///./node_modules/rxjs/add/observable/timer.js","webpack:///./node_modules/rxjs/observable/ErrorObservable.js","webpack:///./node_modules/rxjs/observable/throw.js","webpack:///./node_modules/rxjs/add/observable/throw.js","webpack:///./node_modules/rxjs/observable/UsingObservable.js","webpack:///./node_modules/rxjs/observable/using.js","webpack:///./node_modules/rxjs/add/observable/using.js","webpack:///./node_modules/rxjs/observable/RangeObservable.js","webpack:///./node_modules/rxjs/observable/range.js","webpack:///./node_modules/rxjs/add/observable/range.js","webpack:///./node_modules/rxjs/observable/PairsObservable.js","webpack:///./node_modules/rxjs/observable/pairs.js","webpack:///./node_modules/rxjs/add/observable/pairs.js","webpack:///./node_modules/rxjs/observable/onErrorResumeNext.js","webpack:///./node_modules/rxjs/add/observable/onErrorResumeNext.js","webpack:///./node_modules/rxjs/add/observable/of.js","webpack:///./node_modules/rxjs/observable/NeverObservable.js","webpack:///./node_modules/rxjs/observable/never.js","webpack:///./node_modules/rxjs/add/observable/never.js","webpack:///./node_modules/rxjs/add/observable/race.js","webpack:///./node_modules/rxjs/add/observable/merge.js","webpack:///./node_modules/rxjs/Scheduler.js","webpack:///./node_modules/rxjs/scheduler/Action.js","webpack:///./node_modules/rxjs/observable/IntervalObservable.js","webpack:///./node_modules/rxjs/observable/interval.js","webpack:///./node_modules/rxjs/add/observable/interval.js","webpack:///./node_modules/rxjs/observable/IfObservable.js","webpack:///./node_modules/rxjs/observable/if.js","webpack:///./node_modules/rxjs/add/observable/if.js","webpack:///./node_modules/rxjs/observable/GenerateObservable.js","webpack:///./node_modules/rxjs/observable/generate.js","webpack:///./node_modules/rxjs/add/observable/generate.js","webpack:///./node_modules/rxjs/observable/fromPromise.js","webpack:///./node_modules/rxjs/add/observable/fromPromise.js","webpack:///./node_modules/rxjs/observable/FromEventPatternObservable.js","webpack:///./node_modules/rxjs/observable/fromEventPattern.js","webpack:///./node_modules/rxjs/add/observable/fromEventPattern.js","webpack:///./node_modules/rxjs/observable/FromEventObservable.js","webpack:///./node_modules/rxjs/observable/fromEvent.js","webpack:///./node_modules/rxjs/add/observable/fromEvent.js","webpack:///./node_modules/rxjs/add/observable/from.js","webpack:///./node_modules/rxjs/observable/ForkJoinObservable.js","webpack:///./node_modules/rxjs/observable/forkJoin.js","webpack:///./node_modules/rxjs/add/observable/forkJoin.js","webpack:///./node_modules/rxjs/observable/empty.js","webpack:///./node_modules/rxjs/add/observable/empty.js","webpack:///./node_modules/rxjs/observable/DeferObservable.js","webpack:///./node_modules/rxjs/observable/defer.js","webpack:///./node_modules/rxjs/add/observable/defer.js","webpack:///./node_modules/rxjs/observable/ArrayLikeObservable.js","webpack:///./node_modules/rxjs/observable/IteratorObservable.js","webpack:///./node_modules/rxjs/add/observable/concat.js","webpack:///./node_modules/rxjs/InnerSubscriber.js","webpack:///./node_modules/rxjs/observable/combineLatest.js","webpack:///./node_modules/rxjs/add/observable/combineLatest.js","webpack:///./node_modules/rxjs/observable/BoundNodeCallbackObservable.js","webpack:///./node_modules/rxjs/observable/bindNodeCallback.js","webpack:///./node_modules/rxjs/add/observable/bindNodeCallback.js","webpack:///./node_modules/rxjs/observable/BoundCallbackObservable.js","webpack:///./node_modules/rxjs/observable/bindCallback.js","webpack:///./node_modules/rxjs/add/observable/bindCallback.js","webpack:///./node_modules/rxjs/util/toSubscriber.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","root_1","toSubscriber_1","observable_1","pipe_1","Observable","subscribe","this","_isScalar","_subscribe","lift","operator","observable","source","observerOrNext","error","complete","sink","toSubscriber","add","syncErrorThrowable","_trySubscribe","syncErrorThrown","syncErrorValue","err","forEach","next","PromiseCtor","_this","root","Rx","config","Promise","Error","resolve","reject","subscription","unsubscribe","subscriber","pipe","operations","_i","arguments","length","pipeFromArray","toPromise","x","create","__extends","b","__","constructor","isFunction_1","Subscription_1","Observer_1","rxSubscriber_1","Subscriber","_super","destinationOrNext","isStopped","destination","empty","isTrustedSubscriber","trustedSubscriber","rxSubscriber","SafeSubscriber","_next","_error","_complete","closed","_unsubscribeAndRecycle","_parent","_parents","Subscription","_parentSubscriber","context","isFunction","bind","_context","__tryOrSetError","__tryOrUnsub","wrappedComplete","fn","parent","_unsubscribe","obj","isArrayLike_1","isPromise_1","isObject_1","Observable_1","iterator_1","InnerSubscriber_1","subscribeToResult","outerSubscriber","result","outerValue","outerIndex","InnerSubscriber","isArrayLike","len","isPromise","then","setTimeout","iterator","item","done","obs","TypeError","msg","isObject","OuterSubscriber","apply","notifyNext","innerValue","innerIndex","innerSub","notifyError","notifyComplete","AsyncAction_1","AsyncScheduler_1","async","AsyncScheduler","AsyncAction","isArray_1","tryCatch_1","errorObject_1","UnsubscriptionError_1","_subscriptions","errors","hasErrors","index","remove","tryCatch","errorObject","e","UnsubscriptionError","flattenUnsubscriptionErrors","isArray","sub","concat","push","teardown","EMPTY","_addParent","tmp","subscriptions","subscriptionIndex","indexOf","splice","reduce","errs","Subscriber_1","ObjectUnsubscribedError_1","SubjectSubscription_1","SubjectSubscriber","Subject","observers","hasError","thrownError","subject","AnonymousSubject","ObjectUnsubscribedError","copy","slice","SubjectSubscription","asObservable","tryCatchTarget","tryCatcher","__window","window","__self","self","WorkerGlobalScope","_root","global","isScheduler","schedule","Array","EmptyObservable","scheduler","dispatch","arg","ScalarObservable_1","EmptyObservable_1","isScheduler_1","ArrayObservable","array","of","pop","ScalarObservable","state","count","ConnectableObservable_1","multicast","subjectOrSubjectFactory","selector","subjectFactory","MulticastOperator","connectable","connectableObservableDescriptor","scan_1","takeLast_1","defaultIfEmpty_1","accumulator","seed","scan","takeLast","defaultIfEmpty","acc","ArgumentOutOfRangeError","stack","message","map","project","thisArg","MapOperator","MapSubscriber","actions","active","scheduled","undefined","flush","action","execute","delay","shift","Scheduler","work","pending","id","recycleAsyncId","requestAsyncId","setInterval","clearInterval","_execute","errored","errorValue","Action","isNumeric","val","parseFloat","subscribeToResult_1","OuterSubscriber_1","mergeMap","resultSelector","concurrent","Number","POSITIVE_INFINITY","MergeMapOperator","observer","MergeMapSubscriber","hasCompleted","buffer","_tryNext","_innerSub","ish","_notifyResultSelector","Notification","kind","hasValue","observe","do","accept","nextOrObserver","toObservable","throw","createNext","undefinedValueNotification","createError","createComplete","completeNotification","of_1","from_1","concatAll_1","observables","from","concatAll","symbolIteratorPonyfill","Symbol","Set_1","Set","Map_1","Map","keys","getOwnPropertyNames","key","$$iterator","defaultThrottleConfig","leading","trailing","throttle","durationSelector","ThrottleOperator","ThrottleSubscriber","_leading","_trailing","_hasTrailingValue","throttled","_trailingValue","duration","tryDurationSelector","_sendTrailing","_a","EmptyError","Subject_1","queue_1","observeOn_1","ReplaySubject","bufferSize","windowTime","_events","_bufferSize","_windowTime","now","_getNow","ReplayEvent","_trimBufferThenGetEvents","ObserveOnSubscriber","queue","eventsCount","spliceCount","time","Math","max","ArrayObservable_1","zipStatic","ZipOperator","zip","ZipSubscriber","values","iterators","StaticArrayIterator","StaticIterator","ZipBufferIterator","stillUnsubscribed","notifyInactive","checkIterators","shouldComplete","args","_tryProject","nextResult","isComplete","isDate","Date","isNaN","mergeAll_1","merge","last","mergeAll","mergeMap_1","identity_1","identity","Notification_1","observeOn","ObserveOnOperator","notification","scheduleMessage","ObserveOnMessage","none","combineLatest","CombineLatestOperator","CombineLatestSubscriber","toRespond","unused","oldVal","AsyncSubject","hasNext","getSymbolObservable","$$observable","for","$$rxSubscriber","async_1","map_1","timestamp","Timestamp","switchMap","SwitchMapOperator","SwitchMapSubscriber","innerSubscription","_tryNotifyNext","refCount","RefCountOperator","_refCount","refCounter","RefCountSubscriber","connection","connect","sharedConnection","_connection","ArgumentOutOfRangeError_1","TakeLastOperator","total","TakeLastSubscriber","ring","idx","hasSeed","ScanOperator","ScanSubscriber","_seed","set","audit","AuditOperator","AuditSubscriber","clearThrottle","find","predicate","FindValueOperator","yieldIndex","FindValueSubscriber","filter","FilterOperator","FilterSubscriber","distinctUntilChanged","compare","keySelector","DistinctUntilChangedOperator","DistinctUntilChangedSubscriber","hasKey","y","Boolean","defaultValue","DefaultIfEmptyOperator","DefaultIfEmptySubscriber","isEmpty","concatMap","FromObservable_1","onErrorResumeNext","nextSources","OnErrorResumeNextOperator","onErrorResumeNextStatic","FromObservable","OnErrorResumeNextSubscriber","subscribeToNextSource","race","RaceOperator","RaceSubscriber","hasFirst","noop","noop_1","fns","input","prev","g","Function","eval","VirtualTimeScheduler","SchedulerAction","maxFrames","VirtualAction","frame","frameTimeFactor","sort","sortActions","a","applyMixins","derivedCtor","baseCtors","baseCtor","propertyKeys","j","len2","name_1","SubscriptionLog","subscribedFrame","unsubscribedFrame","SubscriptionLog_1","SubscriptionLoggable","logSubscribedFrame","logUnsubscribedFrame","subscriptionLogs","oldSubscriptionLog","zip_1","zipAll","withLatestFrom","WithLatestFromOperator","WithLatestFromSubscriber","found","windowWhen","closingSelector","WindowOperator","WindowSubscriber","openWindow","unsubscribeClosingNotification","closingNotification","prevWindow","closingNotifier","windowToggle","openings","WindowToggleOperator","WindowToggleSubscriber","contexts","openSubscription","window_1","closeWindow","inner","isNumeric_1","windowTimeSpan","windowCreationInterval","maxWindowSize","WindowTimeOperator","WindowTimeSubscriber","CountedSubject","_numberOfNextedValues","windows","closeState","creationState","dispatchWindowClose","dispatchWindowCreation","timeSpanOnlyState","dispatchWindowTimeSpanOnly","numberOfNextedValues","window_2","timeSpanState","windowCount","windowSize","startWindowEvery","WindowCountOperator","WindowCountSubscriber","windowBoundaries","windowSubscriber","sourceSubscription","newWindow","reduce_1","toArrayReducer","arr","toArray","isDate_1","timeoutWith","due","withObservable","absoluteTimeout","waitFor","abs","TimeoutWithOperator","TimeoutWithSubscriber","scheduleTimeout","dispatchTimeout","TimeoutError","TimeoutError_1","timeout","TimeoutOperator","errorInstance","TimeoutSubscriber","timeInterval","TimeIntervalOperator","TimeInterval","interval","TimeIntervalSubscriber","lastTime","span","timeInterval_1","throttle_1","throttleTime","ThrottleTimeOperator","ThrottleTimeSubscriber","dispatchNext","takeWhile","TakeWhileOperator","TakeWhileSubscriber","nextOrComplete","predicateResult","takeUntil","notifier","TakeUntilOperator","TakeUntilSubscriber","take","TakeOperator","TakeSubscriber","switchMapTo","innerObservable","SwitchMapToOperator","SwitchMapToSubscriber","tryResultSelector","switchMap_1","switchAll","Timeout","clearFn","_id","_clearFn","clearTimeout","close","unref","ref","enroll","msecs","_idleTimeoutId","_idleTimeout","unenroll","_unrefActive","_onTimeout","setImmediate","clearImmediate","AsapAction_1","AsapScheduler_1","asap","AsapScheduler","AsapAction","concat_1","startWith","skipWhile","SkipWhileOperator","SkipWhileSubscriber","skipping","tryCallPredicate","skipUntil","SkipUntilOperator","SkipUntilSubscriber","isInnerStopped","skipLast","SkipLastOperator","_skipCount","SkipLastSubscriber","_count","_ring","skipCount","currentIndex","oldValue","skip","SkipOperator","SkipSubscriber","EmptyError_1","single","SingleOperator","SingleSubscriber","seenValue","applySingleValue","singleValue","tryNext","ReplaySubject_1","shareReplay","shareReplayOperator","multicast_1","refCount_1","shareSubjectFactory","share","sequenceEqual","compareTo","comparor","SequenceEqualOperator","SequenceEqualSubscriber","_b","_oneComplete","SequenceEqualCompareToSubscriber","emit","checkValues","areEqual","nextB","sampleTime","period","SampleTimeOperator","SampleTimeSubscriber","dispatchNotification","lastValue","sample","SampleOperator","sampleSubscriber","SampleSubscriber","emitValue","retryWhen","RetryWhenOperator","RetryWhenSubscriber","retries","retriesSubscription","retry","RetryOperator","RetrySubscriber","repeatWhen","RepeatWhenOperator","RepeatWhenSubscriber","sourceIsBeingSubscribedTo","subscribeToRetries","notifications","repeat","RepeatOperator","RepeatSubscriber","race_1","AsyncSubject_1","publishLast","publishReplay","selectorOrScheduler","BehaviorSubject","_value","getValue","BehaviorSubject_1","publishBehavior","publish","pluck","properties","props","currentProp","plucker","not_1","filter_1","partition","not","pairwise","PairwiseOperator","PairwiseSubscriber","hasPrev","ConnectableObservable","_isComplete","getSubject","_subject","ConnectableSubscriber","connectableProto","writable","min","comparer","mergeScan","MergeScanOperator","MergeScanSubscriber","mergeMapTo","MergeMapToOperator","MergeMapToSubscriber","trySelectResult","merge_1","merge_2","mergeStatic","materialize","MaterializeOperator","MaterializeSubscriber","mapTo","MapToOperator","MapToSubscriber","every","EveryOperator","EverySubscriber","everyValueMatch","LastOperator","LastSubscriber","_tryPredicate","_tryResultSelector","audit_1","timer_1","auditTime","timer","IsEmptyOperator","IsEmptySubscriber","ignoreElements","IgnoreElementsOperator","IgnoreElementsSubscriber","FastMap_1","groupBy","elementSelector","subjectSelector","GroupByOperator","GroupBySubscriber","groups","attemptedToUnsubscribe","_group","FastMap","element","group","groupedObservable","GroupedObservable","GroupDurationSubscriber","clear","removeGroup","delete","groupSubject","refCountSubscription","InnerRefCountSubscription","first","FirstOperator","FirstSubscriber","_emitted","_emit","_emitFinal","find_1","findIndex","finalize","callback","FinallyOperator","FinallySubscriber","elementAt","ElementAtOperator","ElementAtSubscriber","expand","ExpandOperator","ExpandSubscriber","subscribeToProjection","exhaustMap","SwitchFirstMapOperator","SwitchFirstMapSubscriber","hasSubscription","exhaust","SwitchFirstOperator","SwitchFirstSubscriber","tap","DoOperator","DoSubscriber","safeSubscriber","distinctUntilChanged_1","distinctUntilKeyChanged","distinct","flushes","DistinctOperator","DistinctSubscriber","_useKeySelector","_finalizeNext","has","delayWhen","delayDurationSelector","subscriptionDelay","SubscriptionDelayObservable","DelayWhenOperator","DelayWhenSubscriber","completed","delayNotifierSubscriptions","removeSubscription","tryComplete","delayNotifier","tryDelay","subscriptionIdx","notifierSubscription","SubscriptionDelaySubscriber","sourceSubscribed","subscribeToSource","delayFor","DelayOperator","DelaySubscriber","delay_1","_schedule","scheduleNotification","DelayMessage","debounceTime","dueTime","DebounceTimeOperator","DebounceTimeSubscriber","debouncedSubscription","clearDebounce","debouncedNext","debounce","DebounceOperator","DebounceSubscriber","durationSubscription","dematerialize","DeMaterializeOperator","DeMaterializeSubscriber","CountOperator","CountSubscriber","concatMap_1","concatMapTo","concat_2","concatStatic","combineLatest_1","combineAll","catchError","CatchOperator","caught","CatchSubscriber","err2","bufferWhen","BufferWhenOperator","BufferWhenSubscriber","subscribing","openBuffer","closingSubscription","bufferToggle","BufferToggleOperator","BufferToggleSubscriber","closeBuffer","trySubscribe","bufferTime","bufferTimeSpan","bufferCreationInterval","maxBufferSize","BufferTimeOperator","BufferTimeSubscriber","Context","openContext","timespanOnly","closeAction","dispatchBufferTimeSpanOnly","dispatchBufferClose","dispatchBufferCreation","filledBufferContext","onBufferFull","closeContext","prevContext","bufferCount","startBufferEvery","BufferCountOperator","subscriberClass","BufferSkipCountSubscriber","BufferCountSubscriber","buffers","BufferOperator","BufferSubscriber","QueueAction_1","QueueScheduler_1","QueueScheduler","QueueAction","ajaxGet","url","headers","AjaxObservable","method","ajaxPost","body","ajaxDelete","ajaxPut","ajaxPatch","mapResponse","response","ajaxGetJSON","responseType","urlOrRequest","request","createXHR","crossDomain","XMLHttpRequest","XDomainRequest","progId","progIds","ActiveXObject","getXMLHttpRequest","withCredentials","prop","AjaxSubscriber","post","put","patch","getJSON","FormData","serializeBody","send","xhr","AjaxResponse","user","password","setupEvents","open","setHeaders","contentType","splitIndex","substring","encodeURI","join","JSON","stringify","setRequestHeader","progressSubscriber","xhrTimeout","AjaxTimeoutError","ontimeout","upload","xhrProgress_1","xhrError_1","onprogress","AjaxError","onerror","xhrReadyStateChange","readyState","status_1","status","responseText","onreadystatechange","abort","originalEvent","parseXhrResponse","parse","responseXML","TimerObservable_1","TimerObservable","PromiseObservable","promise","dispatchError","PromiseObservable_1","IteratorObservable_1","ArrayLikeObservable_1","IteratorObservable","ArrayLikeObservable","subscriberIndex","toString","timestamp_1","TestScheduler_1","TestScheduler","VirtualTimeScheduler_1","AjaxObservable_1","asap_1","animationFrame_1","_operators","operators","animationFrame","NastavnikService","[object Object]","fetch","json","KursService","draw_service_DrawService","rating","document","getElementById","el","createElement","className","innerHTML","appendChild","teacher","par","licno_ime","par2","button","dataset","bid","glasDiv","fromEvent","rejt","toFixed","teach","elem","kursevi","course","ell","style","backgroundColor","ime","x1","el1","PrijavljeniService","onclick","sel","querySelector","selValueDan","options","selectedIndex","sell","selValueVreme","dan","vreme","niz","kurs","tmp1","dani","tmp2","sati","ShowCourse","divz","lab1","input1","type","lab2","input2","btnProsledi","selk","selValueKurs","ime1","charAt","toUpperCase","prezime1","prezime","duz","Accept","Content-Type","res","reservation_service_dodajPrijavu","mesta_na_kursu","science","zabrana_rez","visibility","src_randserv","getRandomNumb","parseInt","random","all","nastavnici","curr","ShowSchoolRating","teachs","r1","round","ShowTeacherRating","teachs2","showTeacher","num","arr_nast","showTeacherDay","cs1","ShowScience","cs2","ShowLang","nauke","ratsc1","ShowScienceRating","langs","ratlg","ShowLangRating","auditTime_1","buffer_1","bufferCount_1","bufferTime_1","bufferToggle_1","bufferWhen_1","catchError_1","combineAll_1","concatMapTo_1","count_1","debounce_1","debounceTime_1","delayWhen_1","dematerialize_1","distinct_1","distinctUntilKeyChanged_1","elementAt_1","every_1","exhaust_1","exhaustMap_1","expand_1","finalize_1","findIndex_1","first_1","groupBy_1","ignoreElements_1","isEmpty_1","last_1","mapTo_1","materialize_1","max_1","mergeMap_2","flatMap","mergeMapTo_1","mergeScan_1","min_1","onErrorResumeNext_1","pairwise_1","partition_1","pluck_1","publish_1","publishBehavior_1","publishLast_1","publishReplay_1","repeat_1","repeatWhen_1","retry_1","retryWhen_1","sample_1","sampleTime_1","sequenceEqual_1","share_1","shareReplay_1","single_1","skip_1","skipLast_1","skipUntil_1","skipWhile_1","startWith_1","switchAll_1","switchMapTo_1","take_1","takeUntil_1","takeWhile_1","tap_1","throttleTime_1","timeout_1","timeoutWith_1","toArray_1","windowCount_1","windowTime_1","windowToggle_1","windowWhen_1","withLatestFrom_1","zipAll_1","AnimationFrameScheduler","RequestAnimationFrameDefinition","requestAnimationFrame","cancelAnimationFrame","mozRequestAnimationFrame","mozCancelAnimationFrame","webkitRequestAnimationFrame","webkitCancelAnimationFrame","msRequestAnimationFrame","msCancelAnimationFrame","oRequestAnimationFrame","oCancelAnimationFrame","cb","AnimationFrame","AnimationFrame_1","AnimationFrameAction","AnimationFrameAction_1","AnimationFrameScheduler_1","SubscriptionLoggable_1","applyMixins_1","HotObservable","messages","setup","messagesLength","ColdObservable","scheduleMessages","ColdObservable_1","HotObservable_1","defaultMaxFrame","assertDeepEqual","hotObservables","coldObservables","flushTests","createTime","marbles","createColdObservable","parseMarbles","cold","createHotObservable","materializeInnerObservable","outerFrame","expectObservable","unsubscriptionMarbles","actual","flushTest","ready","unsubscriptionFrame","parseMarblesAsSubscriptions","toBe","expected","expectSubscriptions","actualSubscriptionLogs","marblesArray","readyFlushTests","test","groupStart","subscriptionFrame","materializeInnerObservables","testMessages","subIndex","frameOffset","zipProto","_switch","switch_1","switch","cachedSetTimeout","cachedClearTimeout","process","defaultSetTimout","defaultClearTimeout","runTimeout","fun","currentQueue","draining","queueIndex","cleanUpNextTick","drainQueue","run","marker","runClearTimeout","Item","nextTick","title","browser","env","argv","version","versions","on","addListener","once","off","removeListener","removeAllListeners","prependListener","prependOnceListener","listeners","binding","cwd","chdir","dir","umask","registerImmediate","html","channel","messagePrefix","onGlobalMessage","nextHandle","tasksByHandle","currentlyRunningATask","doc","attachTo","getPrototypeOf","handle","runIfPresent","postMessage","importScripts","postMessageIsAsynchronous","oldOnMessage","onmessage","canUsePostMessage","MessageChannel","port1","event","data","port2","documentElement","script","removeChild","addEventListener","attachEvent","task","ImmediateDefinition","canUseProcessNextTick","createProcessNextTickSetImmediate","createPostMessageSetImmediate","canUseMessageChannel","createMessageChannelSetImmediate","canUseReadyStateChange","createReadyStateChangeSetImmediate","createSetTimeoutSetImmediate","ci","instance","identify","postMessageIsAsynchronous_1","partiallyApplied","handler","addFromSetImmediateArguments","globalMessageHandler","Immediate","Immediate_1","SubscribeOnObservable","delayTime","SubscribeOnObservable_1","subscribeOn","SubscribeOnOperator","subscribeOn_1","race_2","raceStatic","pred","notPred","flatMapTo","letProto","func","let_1","let","letBind","MapPolyfill","size","_values","_keys","MapPolyfill_1","_finally","finally_1","finally","_do","do_1","minimalSetImpl","MinimalSet","_catch","catch_1","catch","assignImpl","target","sources","k","getAssign","assign","assign_1","WebSocketSubject","urlConfigOrSource","WebSocketCtor","WebSocket","_output","sock","_resetState","socket","multiplex","subMsg","unsubMsg","messageFilter","_connectSocket","protocol","binaryType","onopen","openObserver","closingObserver","code","reason","onclose","closeObserver","wasClean","WebSocketSubject_1","webSocket","webSocket_1","ajax","ajax_1","initialDelay","ErrorObservable","ErrorObservable_1","_throw","throw_1","UsingObservable","resourceFactory","observableFactory","resource","UsingSubscriber","tryUse","UsingObservable_1","using","using_1","RangeObservable","start","RangeObservable_1","range","range_1","PairsObservable","PairsObservable_1","pairs","pairs_1","NeverObservable","NeverObservable_1","never","never_1","IntervalObservable","IntervalObservable_1","interval_1","IfObservable","condition","thenSource","elseSource","IfSubscriber","tryIf","IfObservable_1","_if","if_1","if","selfSelector","GenerateObservable","initialState","iterate","initialStateOrOptions","resultSelectorOrObservable","conditionResult","needIterate","GenerateObservable_1","generate","generate_1","fromPromise","fromPromise_1","FromEventPatternObservable","addHandler","removeHandler","_callSelector","retValue","_callAddHandler","errorSubscriber","FromEventPatternObservable_1","fromEventPattern","fromEventPattern_1","FromEventObservable","sourceObj","eventName","setupSubscription","isNodeList","isHTMLCollection","removeEventListener","isEventTarget","source_1","isJQueryStyleEventEmitter","source_2","isNodeStyleEventEmitter","source_3","FromEventObservable_1","fromEvent_1","ForkJoinObservable","ForkJoinSubscriber","haveValues","_hasValue","ForkJoinObservable_1","forkJoin","forkJoin_1","empty_1","DeferObservable","DeferSubscriber","factory","tryDefer","_callFactory","DeferObservable_1","defer","defer_1","arrayLike","StringIterator","ArrayIterator","getIterator","return","str","isFinite","valueAsNumber","sign","floor","maxSafeInteger","toLength","pow","BoundNodeCallbackObservable","callbackFunc","handlerFn","innerArgs","result_1","result_2","BoundNodeCallbackObservable_1","bindNodeCallback","bindNodeCallback_1","BoundCallbackObservable","BoundCallbackObservable_1","bindCallback","bindCallback_1"],"mappings":"aACA,IAAAA,KAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAC,QAGA,IAAAC,EAAAJ,EAAAE,IACAG,EAAAH,EACAI,GAAA,EACAH,YAUA,OANAI,EAAAL,GAAAM,KAAAJ,EAAAD,QAAAC,IAAAD,QAAAF,GAGAG,EAAAE,GAAA,EAGAF,EAAAD,QAKAF,EAAAQ,EAAAF,EAGAN,EAAAS,EAAAV,EAGAC,EAAAU,EAAA,SAAAR,EAAAS,EAAAC,GACAZ,EAAAa,EAAAX,EAAAS,IACAG,OAAAC,eAAAb,EAAAS,GACAK,cAAA,EACAC,YAAA,EACAC,IAAAN,KAMAZ,EAAAmB,EAAA,SAAAjB,GACAY,OAAAC,eAAAb,EAAA,cAAiDkB,OAAA,KAIjDpB,EAAAqB,EAAA,SAAAlB,GACA,IAAAS,EAAAT,KAAAmB,WACA,WAA2B,OAAAnB,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAH,EAAAU,EAAAE,EAAA,IAAAA,GACAA,GAIAZ,EAAAa,EAAA,SAAAU,EAAAC,GAAsD,OAAAV,OAAAW,UAAAC,eAAAnB,KAAAgB,EAAAC,IAGtDxB,EAAA2B,EAAA,GAIA3B,IAAA4B,EAAA,oCClEA,IAAIC,EAAS7B,EAAQ,GACjB8B,EAAiB9B,EAAQ,KACzB+B,EAAe/B,EAAQ,IACvBgC,EAAShC,EAAQ,IAOjBiC,EAAc,WAQd,SAASA,EAAWC,GAChBC,KAAKC,WAAY,EACbF,IACAC,KAAKE,WAAaH,GAuR1B,OA7QAD,EAAWR,UAAUa,KAAO,SAAUC,GAClC,IAAIC,EAAa,IAAIP,EAGrB,OAFAO,EAAWC,OAASN,KACpBK,EAAWD,SAAWA,EACfC,GAoHXP,EAAWR,UAAUS,UAAY,SAAUQ,EAAgBC,EAAOC,GAC9D,IAAIL,EAAWJ,KAAKI,SAChBM,EAAOf,EAAegB,aAAaJ,EAAgBC,EAAOC,GAO9D,GANIL,EACAA,EAAShC,KAAKsC,EAAMV,KAAKM,QAGzBI,EAAKE,IAAIZ,KAAKM,SAAWI,EAAKG,mBAAqBb,KAAKE,WAAWQ,GAAQV,KAAKc,cAAcJ,IAE9FA,EAAKG,qBACLH,EAAKG,oBAAqB,EACtBH,EAAKK,iBACL,MAAML,EAAKM,eAGnB,OAAON,GAEXZ,EAAWR,UAAUwB,cAAgB,SAAUJ,GAC3C,IACI,OAAOV,KAAKE,WAAWQ,GAE3B,MAAOO,GACHP,EAAKK,iBAAkB,EACvBL,EAAKM,eAAiBC,EACtBP,EAAKF,MAAMS,KAUnBnB,EAAWR,UAAU4B,QAAU,SAAUC,EAAMC,GAC3C,IAAIC,EAAQrB,KASZ,GARKoB,IACG1B,EAAO4B,KAAKC,IAAM7B,EAAO4B,KAAKC,GAAGC,QAAU9B,EAAO4B,KAAKC,GAAGC,OAAOC,QACjEL,EAAc1B,EAAO4B,KAAKC,GAAGC,OAAOC,QAE/B/B,EAAO4B,KAAKG,UACjBL,EAAc1B,EAAO4B,KAAKG,WAG7BL,EACD,MAAM,IAAIM,MAAM,yBAEpB,OAAO,IAAIN,EAAY,SAAUO,EAASC,GAGtC,IAAIC,EACJA,EAAeR,EAAMtB,UAAU,SAAUd,GACrC,GAAI4C,EAKA,IACIV,EAAKlC,GAET,MAAOgC,GACHW,EAAOX,GACPY,EAAaC,mBAUjBX,EAAKlC,IAEV2C,EAAQD,MAGnB7B,EAAWR,UAAUY,WAAa,SAAU6B,GACxC,OAAO/B,KAAKM,OAAOP,UAAUgC,IAOjCjC,EAAWR,UAAUM,EAAaS,YAAc,WAC5C,OAAOL,MAqBXF,EAAWR,UAAU0C,KAAO,WAExB,IADA,IAAIC,KACKC,EAAK,EAAGA,EAAKC,UAAUC,OAAQF,IACpCD,EAAWC,EAAK,GAAKC,UAAUD,GAEnC,OAA0B,IAAtBD,EAAWG,OACJpC,KAEJH,EAAOwC,cAAcJ,EAArBpC,CAAiCG,OAG5CF,EAAWR,UAAUgD,UAAY,SAAUlB,GACvC,IAAIC,EAAQrB,KASZ,GARKoB,IACG1B,EAAO4B,KAAKC,IAAM7B,EAAO4B,KAAKC,GAAGC,QAAU9B,EAAO4B,KAAKC,GAAGC,OAAOC,QACjEL,EAAc1B,EAAO4B,KAAKC,GAAGC,OAAOC,QAE/B/B,EAAO4B,KAAKG,UACjBL,EAAc1B,EAAO4B,KAAKG,WAG7BL,EACD,MAAM,IAAIM,MAAM,yBAEpB,OAAO,IAAIN,EAAY,SAAUO,EAASC,GACtC,IAAI3C,EACJoC,EAAMtB,UAAU,SAAUwC,GAAK,OAAOtD,EAAQsD,GAAM,SAAUtB,GAAO,OAAOW,EAAOX,IAAS,WAAc,OAAOU,EAAQ1C,QAajIa,EAAW0C,OAAS,SAAUzC,GAC1B,OAAO,IAAID,EAAWC,IAEnBD,EAlSO,GAoSlB/B,EAAQ+B,WAAaA,gCC9SrB,IAAI2C,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/EE,EAAehF,EAAQ,IACvBiF,EAAiBjF,EAAQ,GACzBkF,EAAalF,EAAQ,KACrBmF,EAAiBnF,EAAQ,IAWzBoF,EAAc,SAAUC,GAUxB,SAASD,EAAWE,EAAmB3C,EAAOC,GAM1C,OALAyC,EAAO9E,KAAK4B,MACZA,KAAKgB,eAAiB,KACtBhB,KAAKe,iBAAkB,EACvBf,KAAKa,oBAAqB,EAC1Bb,KAAKoD,WAAY,EACTjB,UAAUC,QACd,KAAK,EACDpC,KAAKqD,YAAcN,EAAWO,MAC9B,MACJ,KAAK,EACD,IAAKH,EAAmB,CACpBnD,KAAKqD,YAAcN,EAAWO,MAC9B,MAEJ,GAAiC,iBAAtBH,EAAgC,CAGvC,GAAII,EAAoBJ,GAAoB,CACxC,IAAIK,EAAoBL,EAAkBH,EAAeS,gBACzDzD,KAAKa,mBAAqB2C,EAAkB3C,mBAC5Cb,KAAKqD,YAAcG,EACnBA,EAAkB5C,IAAIZ,WAGtBA,KAAKa,oBAAqB,EAC1Bb,KAAKqD,YAAc,IAAIK,EAAe1D,KAAMmD,GAEhD,MAER,QACInD,KAAKa,oBAAqB,EAC1Bb,KAAKqD,YAAc,IAAIK,EAAe1D,KAAMmD,EAAmB3C,EAAOC,IAuFlF,OAhIAgC,EAAUQ,EAAYC,GA6CtBD,EAAW3D,UAAU0D,EAAeS,cAAgB,WAAc,OAAOzD,MAYzEiD,EAAWT,OAAS,SAAUrB,EAAMX,EAAOC,GACvC,IAAIsB,EAAa,IAAIkB,EAAW9B,EAAMX,EAAOC,GAE7C,OADAsB,EAAWlB,oBAAqB,EACzBkB,GASXkB,EAAW3D,UAAU6B,KAAO,SAAUlC,GAC7Be,KAAKoD,WACNpD,KAAK2D,MAAM1E,IAUnBgE,EAAW3D,UAAUkB,MAAQ,SAAUS,GAC9BjB,KAAKoD,YACNpD,KAAKoD,WAAY,EACjBpD,KAAK4D,OAAO3C,KASpBgC,EAAW3D,UAAUmB,SAAW,WACvBT,KAAKoD,YACNpD,KAAKoD,WAAY,EACjBpD,KAAK6D,cAGbZ,EAAW3D,UAAUwC,YAAc,WAC3B9B,KAAK8D,SAGT9D,KAAKoD,WAAY,EACjBF,EAAO5D,UAAUwC,YAAY1D,KAAK4B,QAEtCiD,EAAW3D,UAAUqE,MAAQ,SAAU1E,GACnCe,KAAKqD,YAAYlC,KAAKlC,IAE1BgE,EAAW3D,UAAUsE,OAAS,SAAU3C,GACpCjB,KAAKqD,YAAY7C,MAAMS,GACvBjB,KAAK8B,eAETmB,EAAW3D,UAAUuE,UAAY,WAC7B7D,KAAKqD,YAAY5C,WACjBT,KAAK8B,eAETmB,EAAW3D,UAAUyE,uBAAyB,WAC1C,IAAeC,EAANhE,KAAmBgE,QAASC,EAA5BjE,KAA0CiE,SAQnD,OAPAjE,KAAKgE,QAAU,KACfhE,KAAKiE,SAAW,KAChBjE,KAAK8B,cACL9B,KAAK8D,QAAS,EACd9D,KAAKoD,WAAY,EACjBpD,KAAKgE,QAAUA,EACfhE,KAAKiE,SAAWA,EACTjE,MAEJiD,EAjIO,CAkIhBH,EAAeoB,cACjBnG,EAAQkF,WAAaA,EAMrB,IAAIS,EAAkB,SAAUR,GAE5B,SAASQ,EAAeS,EAAmB5D,EAAgBC,EAAOC,GAG9D,IAAIU,EAFJ+B,EAAO9E,KAAK4B,MACZA,KAAKmE,kBAAoBA,EAEzB,IAAIC,EAAUpE,KACV6C,EAAawB,WAAW9D,GACxBY,EAAOZ,EAEFA,IACLY,EAAOZ,EAAeY,KACtBX,EAAQD,EAAeC,MACvBC,EAAWF,EAAeE,SACtBF,IAAmBwC,EAAWO,QAC9Bc,EAAUzF,OAAO6D,OAAOjC,GACpBsC,EAAawB,WAAWD,EAAQtC,cAChC9B,KAAKY,IAAIwD,EAAQtC,YAAYwC,KAAKF,IAEtCA,EAAQtC,YAAc9B,KAAK8B,YAAYwC,KAAKtE,QAGpDA,KAAKuE,SAAWH,EAChBpE,KAAK2D,MAAQxC,EACbnB,KAAK4D,OAASpD,EACdR,KAAK6D,UAAYpD,EAmFrB,OA3GAgC,EAAUiB,EAAgBR,GA0B1BQ,EAAepE,UAAU6B,KAAO,SAAUlC,GACtC,IAAKe,KAAKoD,WAAapD,KAAK2D,MAAO,CAC/B,IAAIQ,EAAoBnE,KAAKmE,kBACxBA,EAAkBtD,mBAGdb,KAAKwE,gBAAgBL,EAAmBnE,KAAK2D,MAAO1E,IACzDe,KAAK8B,cAHL9B,KAAKyE,aAAazE,KAAK2D,MAAO1E,KAO1CyE,EAAepE,UAAUkB,MAAQ,SAAUS,GACvC,IAAKjB,KAAKoD,UAAW,CACjB,IAAIe,EAAoBnE,KAAKmE,kBAC7B,GAAInE,KAAK4D,OACAO,EAAkBtD,oBAKnBb,KAAKwE,gBAAgBL,EAAmBnE,KAAK4D,OAAQ3C,GACrDjB,KAAK8B,gBALL9B,KAAKyE,aAAazE,KAAK4D,OAAQ3C,GAC/BjB,KAAK8B,mBAOR,KAAKqC,EAAkBtD,mBAExB,MADAb,KAAK8B,cACCb,EAGNkD,EAAkBnD,eAAiBC,EACnCkD,EAAkBpD,iBAAkB,EACpCf,KAAK8B,iBAIjB4B,EAAepE,UAAUmB,SAAW,WAChC,IAAIY,EAAQrB,KACZ,IAAKA,KAAKoD,UAAW,CACjB,IAAIe,EAAoBnE,KAAKmE,kBAC7B,GAAInE,KAAK6D,UAAW,CAChB,IAAIa,EAAkB,WAAc,OAAOrD,EAAMwC,UAAUzF,KAAKiD,EAAMkD,WACjEJ,EAAkBtD,oBAKnBb,KAAKwE,gBAAgBL,EAAmBO,GACxC1E,KAAK8B,gBALL9B,KAAKyE,aAAaC,GAClB1E,KAAK8B,oBAQT9B,KAAK8B,gBAIjB4B,EAAepE,UAAUmF,aAAe,SAAUE,EAAI1F,GAClD,IACI0F,EAAGvG,KAAK4B,KAAKuE,SAAUtF,GAE3B,MAAOgC,GAEH,MADAjB,KAAK8B,cACCb,IAGdyC,EAAepE,UAAUkF,gBAAkB,SAAUI,EAAQD,EAAI1F,GAC7D,IACI0F,EAAGvG,KAAK4B,KAAKuE,SAAUtF,GAE3B,MAAOgC,GAGH,OAFA2D,EAAO5D,eAAiBC,EACxB2D,EAAO7D,iBAAkB,GAClB,EAEX,OAAO,GAEX2C,EAAepE,UAAUuF,aAAe,WACpC,IAAIV,EAAoBnE,KAAKmE,kBAC7BnE,KAAKuE,SAAW,KAChBvE,KAAKmE,kBAAoB,KACzBA,EAAkBrC,eAEf4B,EA5GW,CA6GpBT,GACF,SAASM,EAAoBuB,GACzB,OAAOA,aAAe7B,GAAe,uBAAwB6B,GAAOA,EAAI9B,EAAeS,6CC3Q3F,IAAI/D,EAAS7B,EAAQ,GACjBkH,EAAgBlH,EAAQ,KACxBmH,EAAcnH,EAAQ,KACtBoH,EAAapH,EAAQ,KACrBqH,EAAerH,EAAQ,GACvBsH,EAAatH,EAAQ,IACrBuH,EAAoBvH,EAAQ,KAC5B+B,EAAe/B,EAAQ,IAqE3BE,EAAQsH,kBApER,SAA2BC,EAAiBC,EAAQC,EAAYC,GAC5D,IAAIpC,EAAc,IAAI+B,EAAkBM,gBAAgBJ,EAAiBE,EAAYC,GACrF,GAAIpC,EAAYS,OACZ,OAAO,KAEX,GAAIyB,aAAkBL,EAAapF,WAC/B,OAAIyF,EAAOtF,WACPoD,EAAYlC,KAAKoE,EAAOtG,OACxBoE,EAAY5C,WACL,OAGP4C,EAAYxC,oBAAqB,EAC1B0E,EAAOxF,UAAUsD,IAG3B,GAAI0B,EAAcY,YAAYJ,GAAS,CACxC,IAAK,IAAItH,EAAI,EAAG2H,EAAML,EAAOnD,OAAQnE,EAAI2H,IAAQvC,EAAYS,OAAQ7F,IACjEoF,EAAYlC,KAAKoE,EAAOtH,IAEvBoF,EAAYS,QACbT,EAAY5C,eAGf,IAAIuE,EAAYa,UAAUN,GAW3B,OAVAA,EAAOO,KAAK,SAAU7G,GACboE,EAAYS,SACbT,EAAYlC,KAAKlC,GACjBoE,EAAY5C,aAEjB,SAAUQ,GAAO,OAAOoC,EAAY7C,MAAMS,KACxC6E,KAAK,KAAM,SAAU7E,GAEtBvB,EAAO4B,KAAKyE,WAAW,WAAc,MAAM9E,MAExCoC,EAEN,GAAIkC,GAAiD,mBAAhCA,EAAOJ,EAAWa,UAExC,IADA,IAAIA,EAAWT,EAAOJ,EAAWa,cAC9B,CACC,IAAIC,EAAOD,EAAS7E,OACpB,GAAI8E,EAAKC,KAAM,CACX7C,EAAY5C,WACZ,MAGJ,GADA4C,EAAYlC,KAAK8E,EAAKhH,OAClBoE,EAAYS,OACZ,WAIP,GAAIyB,GAAqD,mBAApCA,EAAO3F,EAAaS,YAA4B,CACtE,IAAI8F,EAAMZ,EAAO3F,EAAaS,cAC9B,GAA6B,mBAAlB8F,EAAIpG,UAIX,OAAOoG,EAAIpG,UAAU,IAAIqF,EAAkBM,gBAAgBJ,EAAiBE,EAAYC,IAHxFpC,EAAY7C,MAAM,IAAI4F,UAAU,uEAMnC,CACD,IACIC,EAAO,iBADCpB,EAAWqB,SAASf,GAAU,oBAAsB,IAAMA,EAAS,KAC1C,4FAErClC,EAAY7C,MAAM,IAAI4F,UAAUC,KAEpC,OAAO,oCC1EX,IAAI5D,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAQ/E4D,EAAmB,SAAUrD,GAE7B,SAASqD,IACLrD,EAAOsD,MAAMxG,KAAMmC,WAWvB,OAbAM,EAAU8D,EAAiBrD,GAI3BqD,EAAgBjH,UAAUmH,WAAa,SAAUjB,EAAYkB,EAAYjB,EAAYkB,EAAYC,GAC7F5G,KAAKqD,YAAYlC,KAAKuF,IAE1BH,EAAgBjH,UAAUuH,YAAc,SAAUrG,EAAOoG,GACrD5G,KAAKqD,YAAY7C,MAAMA,IAE3B+F,EAAgBjH,UAAUwH,eAAiB,SAAUF,GACjD5G,KAAKqD,YAAY5C,YAEd8F,EAdY,CANJ1I,EAAQ,GAqBZoF,YACflF,EAAQwI,gBAAkBA,gCC3B1B,IAAIQ,EAAgBlJ,EAAQ,IACxBmJ,EAAmBnJ,EAAQ,IA2C/BE,EAAQkJ,MAAQ,IAAID,EAAiBE,eAAeH,EAAcI,2CC5ClE,IAAIC,EAAYvJ,EAAQ,IACpBoH,EAAapH,EAAQ,KACrBgF,EAAehF,EAAQ,IACvBwJ,EAAaxJ,EAAQ,GACrByJ,EAAgBzJ,EAAQ,GACxB0J,EAAwB1J,EAAQ,KAahCqG,EAAgB,WAKhB,SAASA,EAAapC,GAKlB9B,KAAK8D,QAAS,EACd9D,KAAKgE,QAAU,KACfhE,KAAKiE,SAAW,KAChBjE,KAAKwH,eAAiB,KAClB1F,IACA9B,KAAK6E,aAAe/C,GAoJN,IAAUwB,EAIhC,OA/IAY,EAAa5E,UAAUwC,YAAc,WACjC,IACI2F,EADAC,GAAY,EAEhB,IAAI1H,KAAK8D,OAAT,CAGA,IAAeE,EAANhE,KAAmBgE,QAASC,EAA5BjE,KAA0CiE,SAAUY,EAApD7E,KAAsE6E,aAAc2C,EAApFxH,KAAwGwH,eACjHxH,KAAK8D,QAAS,EACd9D,KAAKgE,QAAU,KACfhE,KAAKiE,SAAW,KAGhBjE,KAAKwH,eAAiB,KAKtB,IAJA,IAAIG,GAAS,EACT/B,EAAM3B,EAAWA,EAAS7B,OAAS,EAGhC4B,GACHA,EAAQ4D,OAAO5H,MAGfgE,IAAY2D,EAAQ/B,GAAO3B,EAAS0D,IAAU,KAElD,GAAI9E,EAAawB,WAAWQ,GACZwC,EAAWQ,SAAShD,GAAczG,KAAK4B,QACrCsH,EAAcQ,cACxBJ,GAAY,EACZD,EAASA,IAAWH,EAAcQ,YAAYC,aAAaR,EAAsBS,oBAC7EC,EAA4BX,EAAcQ,YAAYC,EAAEN,SAAWH,EAAcQ,YAAYC,KAGzG,GAAIX,EAAUc,QAAQV,GAGlB,IAFAG,GAAS,EACT/B,EAAM4B,EAAepF,SACZuF,EAAQ/B,GAAK,CAClB,IAAIuC,EAAMX,EAAeG,GACzB,GAAI1C,EAAWqB,SAAS6B,GAEpB,GADYd,EAAWQ,SAASM,EAAIrG,aAAa1D,KAAK+J,KACxCb,EAAcQ,YAAa,CACrCJ,GAAY,EACZD,EAASA,MACT,IAAIxG,EAAMqG,EAAcQ,YAAYC,EAChC9G,aAAesG,EAAsBS,oBACrCP,EAASA,EAAOW,OAAOH,EAA4BhH,EAAIwG,SAGvDA,EAAOY,KAAKpH,IAMhC,GAAIyG,EACA,MAAM,IAAIH,EAAsBS,oBAAoBP,KAqB5DvD,EAAa5E,UAAUsB,IAAM,SAAU0H,GACnC,IAAKA,GAAaA,IAAapE,EAAaqE,MACxC,OAAOrE,EAAaqE,MAExB,GAAID,IAAatI,KACb,OAAOA,KAEX,IAAI6B,EAAeyG,EACnB,cAAeA,GACX,IAAK,WACDzG,EAAe,IAAIqC,EAAaoE,GACpC,IAAK,SACD,GAAIzG,EAAaiC,QAA8C,mBAA7BjC,EAAaC,YAC3C,OAAOD,EAEN,GAAI7B,KAAK8D,OAEV,OADAjC,EAAaC,cACND,EAEN,GAAuC,mBAA5BA,EAAa2G,WAA6C,CACtE,IAAIC,EAAM5G,GACVA,EAAe,IAAIqC,GACNsD,gBAAkBiB,GAEnC,MACJ,QACI,MAAM,IAAI/G,MAAM,yBAA2B4G,EAAW,2BAK9D,OAHoBtI,KAAKwH,iBAAmBxH,KAAKwH,oBACnCa,KAAKxG,GACnBA,EAAa2G,WAAWxI,MACjB6B,GAQXqC,EAAa5E,UAAUsI,OAAS,SAAU/F,GACtC,IAAI6G,EAAgB1I,KAAKwH,eACzB,GAAIkB,EAAe,CACf,IAAIC,EAAoBD,EAAcE,QAAQ/G,IACnB,IAAvB8G,GACAD,EAAcG,OAAOF,EAAmB,KAIpDzE,EAAa5E,UAAUkJ,WAAa,SAAU5D,GAC1C,IAAeZ,EAANhE,KAAmBgE,QAASC,EAA5BjE,KAA0CiE,SAC9CD,GAAWA,IAAYY,EAKlBX,GAK6B,IAA9BA,EAAS2E,QAAQhE,IAEtBX,EAASoE,KAAKzD,GAJd5E,KAAKiE,UAAYW,GALjB5E,KAAKgE,QAAUY,GAYvBV,EAAaqE,QAAmBjF,EAG9B,IAAIY,GAFIJ,QAAS,EACRR,GAEJY,EAvKS,GA0KpB,SAAS+D,EAA4BR,GACjC,OAAOA,EAAOqB,OAAO,SAAUC,EAAM9H,GAAO,OAAO8H,EAAKX,OAAQnH,aAAesG,EAAsBS,oBAAuB/G,EAAIwG,OAASxG,QAF7IlD,EAAQmG,aAAeA,gCC1LvBnG,EAAQ+J,aAAgBC,oCCDxB,IAAItF,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/EuC,EAAerH,EAAQ,GACvBmL,EAAenL,EAAQ,GACvBiF,EAAiBjF,EAAQ,GACzBoL,EAA4BpL,EAAQ,IACpCqL,EAAwBrL,EAAQ,KAChCmF,EAAiBnF,EAAQ,IAIzBsL,EAAqB,SAAUjG,GAE/B,SAASiG,EAAkB9F,GACvBH,EAAO9E,KAAK4B,KAAMqD,GAClBrD,KAAKqD,YAAcA,EAEvB,OALAZ,EAAU0G,EAAmBjG,GAKtBiG,EANc,CAOvBH,EAAa/F,YACflF,EAAQoL,kBAAoBA,EAI5B,IAAIC,EAAW,SAAUlG,GAErB,SAASkG,IACLlG,EAAO9E,KAAK4B,MACZA,KAAKqJ,aACLrJ,KAAK8D,QAAS,EACd9D,KAAKoD,WAAY,EACjBpD,KAAKsJ,UAAW,EAChBtJ,KAAKuJ,YAAc,KAyFvB,OAhGA9G,EAAU2G,EAASlG,GASnBkG,EAAQ9J,UAAU0D,EAAeS,cAAgB,WAC7C,OAAO,IAAI0F,EAAkBnJ,OAEjCoJ,EAAQ9J,UAAUa,KAAO,SAAUC,GAC/B,IAAIoJ,EAAU,IAAIC,EAAiBzJ,KAAMA,MAEzC,OADAwJ,EAAQpJ,SAAWA,EACZoJ,GAEXJ,EAAQ9J,UAAU6B,KAAO,SAAUlC,GAC/B,GAAIe,KAAK8D,OACL,MAAM,IAAImF,EAA0BS,wBAExC,IAAK1J,KAAKoD,UAIN,IAHA,IAAIiG,EAAYrJ,KAAKqJ,UACjBzD,EAAMyD,EAAUjH,OAChBuH,EAAON,EAAUO,QACZ3L,EAAI,EAAGA,EAAI2H,EAAK3H,IACrB0L,EAAK1L,GAAGkD,KAAKlC,IAIzBmK,EAAQ9J,UAAUkB,MAAQ,SAAUS,GAChC,GAAIjB,KAAK8D,OACL,MAAM,IAAImF,EAA0BS,wBAExC1J,KAAKsJ,UAAW,EAChBtJ,KAAKuJ,YAActI,EACnBjB,KAAKoD,WAAY,EAIjB,IAHA,IAAIiG,EAAYrJ,KAAKqJ,UACjBzD,EAAMyD,EAAUjH,OAChBuH,EAAON,EAAUO,QACZ3L,EAAI,EAAGA,EAAI2H,EAAK3H,IACrB0L,EAAK1L,GAAGuC,MAAMS,GAElBjB,KAAKqJ,UAAUjH,OAAS,GAE5BgH,EAAQ9J,UAAUmB,SAAW,WACzB,GAAIT,KAAK8D,OACL,MAAM,IAAImF,EAA0BS,wBAExC1J,KAAKoD,WAAY,EAIjB,IAHA,IAAIiG,EAAYrJ,KAAKqJ,UACjBzD,EAAMyD,EAAUjH,OAChBuH,EAAON,EAAUO,QACZ3L,EAAI,EAAGA,EAAI2H,EAAK3H,IACrB0L,EAAK1L,GAAGwC,WAEZT,KAAKqJ,UAAUjH,OAAS,GAE5BgH,EAAQ9J,UAAUwC,YAAc,WAC5B9B,KAAKoD,WAAY,EACjBpD,KAAK8D,QAAS,EACd9D,KAAKqJ,UAAY,MAErBD,EAAQ9J,UAAUwB,cAAgB,SAAUiB,GACxC,GAAI/B,KAAK8D,OACL,MAAM,IAAImF,EAA0BS,wBAGpC,OAAOxG,EAAO5D,UAAUwB,cAAc1C,KAAK4B,KAAM+B,IAGzDqH,EAAQ9J,UAAUY,WAAa,SAAU6B,GACrC,GAAI/B,KAAK8D,OACL,MAAM,IAAImF,EAA0BS,wBAEnC,OAAI1J,KAAKsJ,UACVvH,EAAWvB,MAAMR,KAAKuJ,aACfzG,EAAeoB,aAAaqE,OAE9BvI,KAAKoD,WACVrB,EAAWtB,WACJqC,EAAeoB,aAAaqE,QAGnCvI,KAAKqJ,UAAUhB,KAAKtG,GACb,IAAImH,EAAsBW,oBAAoB7J,KAAM+B,KAGnEqH,EAAQ9J,UAAUwK,aAAe,WAC7B,IAAIzJ,EAAa,IAAI6E,EAAapF,WAElC,OADAO,EAAWC,OAASN,KACbK,GAEX+I,EAAQ5G,OAAS,SAAUa,EAAa/C,GACpC,OAAO,IAAImJ,EAAiBpG,EAAa/C,IAEtC8I,EAjGI,CAkGblE,EAAapF,YACf/B,EAAQqL,QAAUA,EAIlB,IAAIK,EAAoB,SAAUvG,GAE9B,SAASuG,EAAiBpG,EAAa/C,GACnC4C,EAAO9E,KAAK4B,MACZA,KAAKqD,YAAcA,EACnBrD,KAAKM,OAASA,EA6BlB,OAjCAmC,EAAUgH,EAAkBvG,GAM5BuG,EAAiBnK,UAAU6B,KAAO,SAAUlC,GACxC,IAAIoE,EAAcrD,KAAKqD,YACnBA,GAAeA,EAAYlC,MAC3BkC,EAAYlC,KAAKlC,IAGzBwK,EAAiBnK,UAAUkB,MAAQ,SAAUS,GACzC,IAAIoC,EAAcrD,KAAKqD,YACnBA,GAAeA,EAAY7C,OAC3BR,KAAKqD,YAAY7C,MAAMS,IAG/BwI,EAAiBnK,UAAUmB,SAAW,WAClC,IAAI4C,EAAcrD,KAAKqD,YACnBA,GAAeA,EAAY5C,UAC3BT,KAAKqD,YAAY5C,YAGzBgJ,EAAiBnK,UAAUY,WAAa,SAAU6B,GAE9C,OADa/B,KAAKM,OAEPN,KAAKM,OAAOP,UAAUgC,GAGtBe,EAAeoB,aAAaqE,OAGpCkB,EAlCa,CAmCtBL,GACFrL,EAAQ0L,iBAAmBA,gCCrK3B,IACIM,EADAzC,EAAgBzJ,EAAQ,GAE5B,SAASmM,IACL,IACI,OAAOD,EAAevD,MAAMxG,KAAMmC,WAEtC,MAAO4F,GAEH,OADAT,EAAcQ,YAAYC,EAAIA,EACvBT,EAAcQ,aAO7B/J,EAAQ8J,SAJR,SAAkBlD,GAEd,OADAoF,EAAiBpF,EACVqF,8CCVX,IAAIC,EAA6B,oBAAXC,QAA0BA,OAC5CC,EAAyB,oBAATC,MAAqD,oBAAtBC,mBAC/CD,gBAAgBC,mBAAqBD,KAErCE,EAAQL,QADqB,IAAXM,GAA0BA,GACZJ,EACpCpM,EAAQuD,KAAOgJ,EAIf,WACI,IAAKA,EACD,MAAM,IAAI5I,MAAM,iEAFxB,oDCTA3D,EAAQyM,YAHR,SAAqBvL,GACjB,OAAOA,GAAmC,mBAAnBA,EAAMwL,wCCDjC1M,EAAQmK,QAAUwC,MAAMxC,SAAY,SAAU3F,GAAK,OAAOA,GAAyB,iBAAbA,EAAEH,sCCAxE,IAAIK,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAQ/EgI,EAAmB,SAAUzH,GAE7B,SAASyH,EAAgBC,GACrB1H,EAAO9E,KAAK4B,MACZA,KAAK4K,UAAYA,EA6DrB,OAhEAnI,EAAUkI,EAAiBzH,GAgD3ByH,EAAgBnI,OAAS,SAAUoI,GAC/B,OAAO,IAAID,EAAgBC,IAE/BD,EAAgBE,SAAW,SAAUC,GAChBA,EAAI/I,WACVtB,YAEfkK,EAAgBrL,UAAUY,WAAa,SAAU6B,GAC7C,IAAI6I,EAAY5K,KAAK4K,UACrB,GAAIA,EACA,OAAOA,EAAUH,SAASE,EAAgBE,SAAU,GAAK9I,WAAYA,IAGrEA,EAAWtB,YAGZkK,EAjEY,CANJ9M,EAAQ,GAwEZiC,YACf/B,EAAQ4M,gBAAkBA,gCC9E1B,IAAIlI,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/EuC,EAAerH,EAAQ,GACvBkN,EAAqBlN,EAAQ,IAC7BmN,EAAoBnN,EAAQ,IAC5BoN,EAAgBpN,EAAQ,IAMxBqN,EAAmB,SAAUhI,GAE7B,SAASgI,EAAgBC,EAAOP,GAC5B1H,EAAO9E,KAAK4B,MACZA,KAAKmL,MAAQA,EACbnL,KAAK4K,UAAYA,EACZA,GAA8B,IAAjBO,EAAM/I,SACpBpC,KAAKC,WAAY,EACjBD,KAAKf,MAAQkM,EAAM,IA+F3B,OAtGA1I,EAAUyI,EAAiBhI,GAU3BgI,EAAgB1I,OAAS,SAAU2I,EAAOP,GACtC,OAAO,IAAIM,EAAgBC,EAAOP,IAsCtCM,EAAgBE,GAAK,WAEjB,IADA,IAAID,KACKjJ,EAAK,EAAGA,EAAKC,UAAUC,OAAQF,IACpCiJ,EAAMjJ,EAAK,GAAKC,UAAUD,GAE9B,IAAI0I,EAAYO,EAAMA,EAAM/I,OAAS,GACjC6I,EAAcT,YAAYI,GAC1BO,EAAME,MAGNT,EAAY,KAEhB,IAAIhF,EAAMuF,EAAM/I,OAChB,OAAIwD,EAAM,EACC,IAAIsF,EAAgBC,EAAOP,GAErB,IAARhF,EACE,IAAImF,EAAmBO,iBAAiBH,EAAM,GAAIP,GAGlD,IAAII,EAAkBL,gBAAgBC,IAGrDM,EAAgBL,SAAW,SAAUU,GACjC,IAAIJ,EAAQI,EAAMJ,MAAOxD,EAAQ4D,EAAM5D,MAAO6D,EAAQD,EAAMC,MAAOzJ,EAAawJ,EAAMxJ,WAClF4F,GAAS6D,EACTzJ,EAAWtB,YAGfsB,EAAWZ,KAAKgK,EAAMxD,IAClB5F,EAAW+B,SAGfyH,EAAM5D,MAAQA,EAAQ,EACtB3H,KAAKyK,SAASc,MAElBL,EAAgB5L,UAAUY,WAAa,SAAU6B,GAC7C,IACIoJ,EAAQnL,KAAKmL,MACbK,EAAQL,EAAM/I,OACdwI,EAAY5K,KAAK4K,UACrB,GAAIA,EACA,OAAOA,EAAUH,SAASS,EAAgBL,SAAU,GAChDM,MAAOA,EAAOxD,MANV,EAMwB6D,MAAOA,EAAOzJ,WAAYA,IAI1D,IAAK,IAAI9D,EAAI,EAAGA,EAAIuN,IAAUzJ,EAAW+B,OAAQ7F,IAC7C8D,EAAWZ,KAAKgK,EAAMlN,IAE1B8D,EAAWtB,YAGZyK,EAvGY,CAwGrBhG,EAAapF,YACf/B,EAAQmN,gBAAkBA,gCCvH1B,IAAIO,EAA0B5N,EAAQ,KAyCtCE,EAAQ2N,UApBR,SAAmBC,EAAyBC,GACxC,OAAO,SAAmCtL,GACtC,IAAIuL,EASJ,GAPIA,EADmC,mBAA5BF,EACUA,EAGA,WACb,OAAOA,GAGS,mBAAbC,EACP,OAAOtL,EAAOH,KAAK,IAAI2L,EAAkBD,EAAgBD,IAE7D,IAAIG,EAAcpN,OAAO6D,OAAOlC,EAAQmL,EAAwBO,iCAGhE,OAFAD,EAAYzL,OAASA,EACrByL,EAAYF,eAAiBA,EACtBE,IAIf,IAAID,EAAqB,WACrB,SAASA,EAAkBD,EAAgBD,GACvC5L,KAAK6L,eAAiBA,EACtB7L,KAAK4L,SAAWA,EASpB,OAPAE,EAAkBxM,UAAUlB,KAAO,SAAU2D,EAAYzB,GACrD,IAAIsL,EAAW5L,KAAK4L,SAChBpC,EAAUxJ,KAAK6L,iBACfhK,EAAe+J,EAASpC,GAASzJ,UAAUgC,GAE/C,OADAF,EAAajB,IAAIN,EAAOP,UAAUyJ,IAC3B3H,GAEJiK,EAZc,GAczB/N,EAAQ+N,kBAAoBA,gCCxD5B,IAAIG,EAASpO,EAAQ,IACjBqO,EAAarO,EAAQ,IACrBsO,EAAmBtO,EAAQ,IAC3BgC,EAAShC,EAAQ,IA+DrBE,EAAQ+K,OAjBR,SAAgBsD,EAAaC,GAMzB,OAAIlK,UAAUC,QAAU,EACb,SAAwC9B,GAC3C,OAAOT,EAAOmC,KAAKiK,EAAOK,KAAKF,EAAaC,GAAOH,EAAWK,SAAS,GAAIJ,EAAiBK,eAAeH,GAApGxM,CAA2GS,IAGnH,SAAgCA,GACnC,OAAOT,EAAOmC,KAAKiK,EAAOK,KAAK,SAAUG,EAAKxN,EAAO0I,GACjD,OAAOyE,EAAYK,EAAKxN,EAAO0I,EAAQ,KACvCuE,EAAWK,SAAS,GAFjB1M,CAEqBS,mCC/DpC,IAAImC,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAY/E+J,EAA2B,SAAUxJ,GAErC,SAASwJ,IACL,IAAIzL,EAAMiC,EAAO9E,KAAK4B,KAAM,yBAC5BA,KAAKxB,KAAOyC,EAAIzC,KAAO,0BACvBwB,KAAK2M,MAAQ1L,EAAI0L,MACjB3M,KAAK4M,QAAU3L,EAAI2L,QAEvB,OAPAnK,EAAUiK,EAAyBxJ,GAO5BwJ,EARoB,CAS7BhL,OACF3D,EAAQ2O,wBAA0BA,gCCzBlC,IAAIjK,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/EqG,EAAenL,EAAQ,GA0C3BE,EAAQ8O,IARR,SAAaC,EAASC,GAClB,OAAO,SAAsBzM,GACzB,GAAuB,mBAAZwM,EACP,MAAM,IAAI1G,UAAU,8DAExB,OAAO9F,EAAOH,KAAK,IAAI6M,EAAYF,EAASC,MAIpD,IAAIC,EAAe,WACf,SAASA,EAAYF,EAASC,GAC1B/M,KAAK8M,QAAUA,EACf9M,KAAK+M,QAAUA,EAKnB,OAHAC,EAAY1N,UAAUlB,KAAO,SAAU2D,EAAYzB,GAC/C,OAAOA,EAAOP,UAAU,IAAIkN,EAAclL,EAAY/B,KAAK8M,QAAS9M,KAAK+M,WAEtEC,EARQ,GAUnBjP,EAAQiP,YAAcA,EAMtB,IAAIC,EAAiB,SAAU/J,GAE3B,SAAS+J,EAAc5J,EAAayJ,EAASC,GACzC7J,EAAO9E,KAAK4B,KAAMqD,GAClBrD,KAAK8M,QAAUA,EACf9M,KAAKwL,MAAQ,EACbxL,KAAK+M,QAAUA,GAAW/M,KAe9B,OApBAyC,EAAUwK,EAAe/J,GASzB+J,EAAc3N,UAAUqE,MAAQ,SAAU1E,GACtC,IAAIsG,EACJ,IACIA,EAASvF,KAAK8M,QAAQ1O,KAAK4B,KAAK+M,QAAS9N,EAAOe,KAAKwL,SAEzD,MAAOvK,GAEH,YADAjB,KAAKqD,YAAY7C,MAAMS,GAG3BjB,KAAKqD,YAAYlC,KAAKoE,IAEnB0H,EArBU,CAsBnBjE,EAAa/F,0CCtFf,IAAIR,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAG/EuE,EAAkB,SAAUhE,GAE5B,SAASgE,IACLhE,EAAOsD,MAAMxG,KAAMmC,WACnBnC,KAAKkN,WAMLlN,KAAKmN,QAAS,EAOdnN,KAAKoN,eAAYC,EAuBrB,OAvCA5K,EAAUyE,EAAgBhE,GAkB1BgE,EAAe5H,UAAUgO,MAAQ,SAAUC,GACvC,IAAIL,EAAUlN,KAAKkN,QACnB,GAAIlN,KAAKmN,OACLD,EAAQ7E,KAAKkF,OADjB,CAIA,IAAI/M,EACJR,KAAKmN,QAAS,EACd,GACI,GAAI3M,EAAQ+M,EAAOC,QAAQD,EAAOhC,MAAOgC,EAAOE,OAC5C,YAECF,EAASL,EAAQQ,SAE1B,GADA1N,KAAKmN,QAAS,EACV3M,EAAO,CACP,KAAO+M,EAASL,EAAQQ,SACpBH,EAAOzL,cAEX,MAAMtB,KAGP0G,EAxCW,CADJrJ,EAAQ,KA0CZ8P,WACd5P,EAAQmJ,eAAiBA,gCChDzB,IAAIzE,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/EjD,EAAS7B,EAAQ,GAOjBsJ,EAAe,SAAUjE,GAEzB,SAASiE,EAAYyD,EAAWgD,GAC5B1K,EAAO9E,KAAK4B,KAAM4K,EAAWgD,GAC7B5N,KAAK4K,UAAYA,EACjB5K,KAAK4N,KAAOA,EACZ5N,KAAK6N,SAAU,EAuHnB,OA5HApL,EAAU0E,EAAajE,GAOvBiE,EAAY7H,UAAUmL,SAAW,SAAUc,EAAOkC,GAE9C,QADc,IAAVA,IAAoBA,EAAQ,GAC5BzN,KAAK8D,OACL,OAAO9D,KAGXA,KAAKuL,MAAQA,EAGbvL,KAAK6N,SAAU,EACf,IAAIC,EAAK9N,KAAK8N,GACVlD,EAAY5K,KAAK4K,UA4BrB,OANU,MAANkD,IACA9N,KAAK8N,GAAK9N,KAAK+N,eAAenD,EAAWkD,EAAIL,IAEjDzN,KAAKyN,MAAQA,EAEbzN,KAAK8N,GAAK9N,KAAK8N,IAAM9N,KAAKgO,eAAepD,EAAW5K,KAAK8N,GAAIL,GACtDzN,MAEXmH,EAAY7H,UAAU0O,eAAiB,SAAUpD,EAAWkD,EAAIL,GAE5D,YADc,IAAVA,IAAoBA,EAAQ,GACzB/N,EAAO4B,KAAK2M,YAAYrD,EAAU0C,MAAMhJ,KAAKsG,EAAW5K,MAAOyN,IAE1EtG,EAAY7H,UAAUyO,eAAiB,SAAUnD,EAAWkD,EAAIL,GAG5D,QAFc,IAAVA,IAAoBA,EAAQ,GAElB,OAAVA,GAAkBzN,KAAKyN,QAAUA,IAA0B,IAAjBzN,KAAK6N,QAC/C,OAAOC,EAIJpO,EAAO4B,KAAK4M,cAAcJ,IAMrC3G,EAAY7H,UAAUkO,QAAU,SAAUjC,EAAOkC,GAC7C,GAAIzN,KAAK8D,OACL,OAAO,IAAIpC,MAAM,gCAErB1B,KAAK6N,SAAU,EACf,IAAIrN,EAAQR,KAAKmO,SAAS5C,EAAOkC,GACjC,GAAIjN,EACA,OAAOA,GAEe,IAAjBR,KAAK6N,SAAgC,MAAX7N,KAAK8N,KAcpC9N,KAAK8N,GAAK9N,KAAK+N,eAAe/N,KAAK4K,UAAW5K,KAAK8N,GAAI,QAG/D3G,EAAY7H,UAAU6O,SAAW,SAAU5C,EAAOkC,GAC9C,IAAIW,GAAU,EACVC,OAAahB,EACjB,IACIrN,KAAK4N,KAAKrC,GAEd,MAAOxD,GACHqG,GAAU,EACVC,IAAetG,GAAKA,GAAK,IAAIrG,MAAMqG,GAEvC,GAAIqG,EAEA,OADApO,KAAK8B,cACEuM,GAGflH,EAAY7H,UAAUuF,aAAe,WACjC,IAAIiJ,EAAK9N,KAAK8N,GACVlD,EAAY5K,KAAK4K,UACjBsC,EAAUtC,EAAUsC,QACpBvF,EAAQuF,EAAQtE,QAAQ5I,MAC5BA,KAAK4N,KAAO,KACZ5N,KAAKuL,MAAQ,KACbvL,KAAK6N,SAAU,EACf7N,KAAK4K,UAAY,MACF,IAAXjD,GACAuF,EAAQrE,OAAOlB,EAAO,GAEhB,MAANmG,IACA9N,KAAK8N,GAAK9N,KAAK+N,eAAenD,EAAWkD,EAAI,OAEjD9N,KAAKyN,MAAQ,MAEVtG,EA7HQ,CANJtJ,EAAQ,KAoIZyQ,QACXvQ,EAAQoJ,YAAcA,gCC3ItB,IAAIC,EAAYvJ,EAAQ,IAQxBE,EAAQwQ,UAPR,SAAmBC,GAKf,OAAQpH,EAAUc,QAAQsG,IAASA,EAAMC,WAAWD,GAAO,GAAM,iCCNrE,IAAI/L,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/E+L,EAAsB7Q,EAAQ,GAC9B8Q,EAAoB9Q,EAAQ,GAsEhCE,EAAQ6Q,SAVR,SAAkB9B,EAAS+B,EAAgBC,GAEvC,YADmB,IAAfA,IAAyBA,EAAaC,OAAOC,mBAC1C,SAAkC1O,GAKrC,MAJ8B,iBAAnBuO,IACPC,EAAaD,EACbA,EAAiB,MAEdvO,EAAOH,KAAK,IAAI8O,EAAiBnC,EAAS+B,EAAgBC,MAIzE,IAAIG,EAAoB,WACpB,SAASA,EAAiBnC,EAAS+B,EAAgBC,QAC5B,IAAfA,IAAyBA,EAAaC,OAAOC,mBACjDhP,KAAK8M,QAAUA,EACf9M,KAAK6O,eAAiBA,EACtB7O,KAAK8O,WAAaA,EAKtB,OAHAG,EAAiB3P,UAAUlB,KAAO,SAAU8Q,EAAU5O,GAClD,OAAOA,EAAOP,UAAU,IAAIoP,EAAmBD,EAAUlP,KAAK8M,QAAS9M,KAAK6O,eAAgB7O,KAAK8O,cAE9FG,EAVa,GAYxBlR,EAAQkR,iBAAmBA,EAM3B,IAAIE,EAAsB,SAAUjM,GAEhC,SAASiM,EAAmB9L,EAAayJ,EAAS+B,EAAgBC,QAC3C,IAAfA,IAAyBA,EAAaC,OAAOC,mBACjD9L,EAAO9E,KAAK4B,KAAMqD,GAClBrD,KAAK8M,QAAUA,EACf9M,KAAK6O,eAAiBA,EACtB7O,KAAK8O,WAAaA,EAClB9O,KAAKoP,cAAe,EACpBpP,KAAKqP,UACLrP,KAAKmN,OAAS,EACdnN,KAAK2H,MAAQ,EA8DjB,OAxEAlF,EAAU0M,EAAoBjM,GAY9BiM,EAAmB7P,UAAUqE,MAAQ,SAAU1E,GACvCe,KAAKmN,OAASnN,KAAK8O,WACnB9O,KAAKsP,SAASrQ,GAGde,KAAKqP,OAAOhH,KAAKpJ,IAGzBkQ,EAAmB7P,UAAUgQ,SAAW,SAAUrQ,GAC9C,IAAIsG,EACAoC,EAAQ3H,KAAK2H,QACjB,IACIpC,EAASvF,KAAK8M,QAAQ7N,EAAO0I,GAEjC,MAAO1G,GAEH,YADAjB,KAAKqD,YAAY7C,MAAMS,GAG3BjB,KAAKmN,SACLnN,KAAKuP,UAAUhK,EAAQtG,EAAO0I,IAElCwH,EAAmB7P,UAAUiQ,UAAY,SAAUC,EAAKvQ,EAAO0I,GAC3D3H,KAAKY,IAAI8N,EAAoBrJ,kBAAkBrF,KAAMwP,EAAKvQ,EAAO0I,KAErEwH,EAAmB7P,UAAUuE,UAAY,WACrC7D,KAAKoP,cAAe,EACA,IAAhBpP,KAAKmN,QAAuC,IAAvBnN,KAAKqP,OAAOjN,QACjCpC,KAAKqD,YAAY5C,YAGzB0O,EAAmB7P,UAAUmH,WAAa,SAAUjB,EAAYkB,EAAYjB,EAAYkB,EAAYC,GAC5F5G,KAAK6O,eACL7O,KAAKyP,sBAAsBjK,EAAYkB,EAAYjB,EAAYkB,GAG/D3G,KAAKqD,YAAYlC,KAAKuF,IAG9ByI,EAAmB7P,UAAUmQ,sBAAwB,SAAUjK,EAAYkB,EAAYjB,EAAYkB,GAC/F,IAAIpB,EACJ,IACIA,EAASvF,KAAK6O,eAAerJ,EAAYkB,EAAYjB,EAAYkB,GAErE,MAAO1F,GAEH,YADAjB,KAAKqD,YAAY7C,MAAMS,GAG3BjB,KAAKqD,YAAYlC,KAAKoE,IAE1B4J,EAAmB7P,UAAUwH,eAAiB,SAAUF,GACpD,IAAIyI,EAASrP,KAAKqP,OAClBrP,KAAK4H,OAAOhB,GACZ5G,KAAKmN,SACDkC,EAAOjN,OAAS,EAChBpC,KAAK2D,MAAM0L,EAAO3B,SAEG,IAAhB1N,KAAKmN,QAAgBnN,KAAKoP,cAC/BpP,KAAKqD,YAAY5C,YAGlB0O,EAzEe,CA0ExBR,EAAkBpI,iBACpBxI,EAAQoR,mBAAqBA,gCC1K7B,IAAIjK,EAAerH,EAAQ,GAevB6R,EAAgB,WAChB,SAASA,EAAaC,EAAM1Q,EAAOuB,GAC/BR,KAAK2P,KAAOA,EACZ3P,KAAKf,MAAQA,EACbe,KAAKQ,MAAQA,EACbR,KAAK4P,SAAoB,MAATD,EAsGpB,OA/FAD,EAAapQ,UAAUuQ,QAAU,SAAUX,GACvC,OAAQlP,KAAK2P,MACT,IAAK,IACD,OAAOT,EAAS/N,MAAQ+N,EAAS/N,KAAKnB,KAAKf,OAC/C,IAAK,IACD,OAAOiQ,EAAS1O,OAAS0O,EAAS1O,MAAMR,KAAKQ,OACjD,IAAK,IACD,OAAO0O,EAASzO,UAAYyO,EAASzO,aAWjDiP,EAAapQ,UAAUwQ,GAAK,SAAU3O,EAAMX,EAAOC,GAE/C,OADWT,KAAK2P,MAEZ,IAAK,IACD,OAAOxO,GAAQA,EAAKnB,KAAKf,OAC7B,IAAK,IACD,OAAOuB,GAASA,EAAMR,KAAKQ,OAC/B,IAAK,IACD,OAAOC,GAAYA,MAY/BiP,EAAapQ,UAAUyQ,OAAS,SAAUC,EAAgBxP,EAAOC,GAC7D,OAAIuP,GAAiD,mBAAxBA,EAAe7O,KACjCnB,KAAK6P,QAAQG,GAGbhQ,KAAK8P,GAAGE,EAAgBxP,EAAOC,IAQ9CiP,EAAapQ,UAAU2Q,aAAe,WAElC,OADWjQ,KAAK2P,MAEZ,IAAK,IACD,OAAOzK,EAAapF,WAAWsL,GAAGpL,KAAKf,OAC3C,IAAK,IACD,OAAOiG,EAAapF,WAAWoQ,MAAMlQ,KAAKQ,OAC9C,IAAK,IACD,OAAO0E,EAAapF,WAAWwD,QAEvC,MAAM,IAAI5B,MAAM,uCASpBgO,EAAaS,WAAa,SAAUlR,GAChC,YAAqB,IAAVA,EACA,IAAIyQ,EAAa,IAAKzQ,GAE1ByQ,EAAaU,4BASxBV,EAAaW,YAAc,SAAUpP,GACjC,OAAO,IAAIyO,EAAa,SAAKrC,EAAWpM,IAM5CyO,EAAaY,eAAiB,WAC1B,OAAOZ,EAAaa,sBAExBb,EAAaa,qBAAuB,IAAIb,EAAa,KACrDA,EAAaU,2BAA6B,IAAIV,EAAa,SAAKrC,GACzDqC,EA3GS,GA6GpB3R,EAAQ2R,aAAeA,gCC5HvB,IAAIzE,EAAgBpN,EAAQ,IACxB2S,EAAO3S,EAAQ,KACf4S,EAAS5S,EAAQ,KACjB6S,EAAc7S,EAAQ,IAyG1BE,EAAQqK,OAVR,WAEI,IADA,IAAIuI,KACKzO,EAAK,EAAGA,EAAKC,UAAUC,OAAQF,IACpCyO,EAAYzO,EAAK,GAAKC,UAAUD,GAEpC,OAA2B,IAAvByO,EAAYvO,QAAwC,IAAvBuO,EAAYvO,QAAgB6I,EAAcT,YAAYmG,EAAY,IACxFF,EAAOG,KAAKD,EAAY,IAE5BD,EAAYG,WAAZH,CAAwBF,EAAKpF,GAAG5E,WAAM,EAAQmK,mCC1GzD,IAAIjR,EAAS7B,EAAQ,GACrB,SAASiT,EAAuBxP,GAC5B,IAAIyP,EAASzP,EAAKyP,OAClB,GAAsB,mBAAXA,EAIP,OAHKA,EAAO/K,WACR+K,EAAO/K,SAAW+K,EAAO,sBAEtBA,EAAO/K,SAId,IAAIgL,EAAQ1P,EAAK2P,IACjB,GAAID,GAA8C,mBAA9B,IAAIA,GAAQ,cAC5B,MAAO,aAEX,IAAIE,EAAQ5P,EAAK6P,IAEjB,GAAID,EAEA,IADA,IAAIE,EAAOzS,OAAO0S,oBAAoBH,EAAM5R,WACnCrB,EAAI,EAAGA,EAAImT,EAAKhP,SAAUnE,EAAG,CAClC,IAAIqT,EAAMF,EAAKnT,GAEf,GAAY,YAARqT,GAA6B,SAARA,GAAkBJ,EAAM5R,UAAUgS,KAASJ,EAAM5R,UAAN,QAChE,OAAOgS,EAInB,MAAO,aAGfvT,EAAQ+S,uBAAyBA,EACjC/S,EAAQiI,SAAW8K,EAAuBpR,EAAO4B,MAIjDvD,EAAQwT,WAAaxT,EAAQiI,uCCnC7B,IAAIvD,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/EgM,EAAoB9Q,EAAQ,GAC5B6Q,EAAsB7Q,EAAQ,GAClCE,EAAQyT,uBACJC,SAAS,EACTC,UAAU,GA8Cd3T,EAAQ4T,SAJR,SAAkBC,EAAkBpQ,GAEhC,YADe,IAAXA,IAAqBA,EAASzD,EAAQyT,uBACnC,SAAUlR,GAAU,OAAOA,EAAOH,KAAK,IAAI0R,EAAiBD,EAAkBpQ,EAAOiQ,QAASjQ,EAAOkQ,aAGhH,IAAIG,EAAoB,WACpB,SAASA,EAAiBD,EAAkBH,EAASC,GACjD1R,KAAK4R,iBAAmBA,EACxB5R,KAAKyR,QAAUA,EACfzR,KAAK0R,SAAWA,EAKpB,OAHAG,EAAiBvS,UAAUlB,KAAO,SAAU2D,EAAYzB,GACpD,OAAOA,EAAOP,UAAU,IAAI+R,EAAmB/P,EAAY/B,KAAK4R,iBAAkB5R,KAAKyR,QAASzR,KAAK0R,YAElGG,EATa,GAgBpBC,EAAsB,SAAU5O,GAEhC,SAAS4O,EAAmBzO,EAAauO,EAAkBG,EAAUC,GACjE9O,EAAO9E,KAAK4B,KAAMqD,GAClBrD,KAAKqD,YAAcA,EACnBrD,KAAK4R,iBAAmBA,EACxB5R,KAAK+R,SAAWA,EAChB/R,KAAKgS,UAAYA,EACjBhS,KAAKiS,mBAAoB,EA0D7B,OAjEAxP,EAAUqP,EAAoB5O,GAS9B4O,EAAmBxS,UAAUqE,MAAQ,SAAU1E,GAC3C,GAAIe,KAAKkS,UACDlS,KAAKgS,YACLhS,KAAKiS,mBAAoB,EACzBjS,KAAKmS,eAAiBlT,OAGzB,CACD,IAAImT,EAAWpS,KAAKqS,oBAAoBpT,GACpCmT,GACApS,KAAKY,IAAIZ,KAAKkS,UAAYxD,EAAoBrJ,kBAAkBrF,KAAMoS,IAEtEpS,KAAK+R,WACL/R,KAAKqD,YAAYlC,KAAKlC,GAClBe,KAAKgS,YACLhS,KAAKiS,mBAAoB,EACzBjS,KAAKmS,eAAiBlT,MAKtC6S,EAAmBxS,UAAU+S,oBAAsB,SAAUpT,GACzD,IACI,OAAOe,KAAK4R,iBAAiB3S,GAEjC,MAAOgC,GAEH,OADAjB,KAAKqD,YAAY7C,MAAMS,GAChB,OAGf6Q,EAAmBxS,UAAUuF,aAAe,WACxC,IAAeqN,EAANlS,KAAqBkS,UAArBlS,KAAoDmS,eAApDnS,KAA2FiS,kBAA3FjS,KAA6HgS,UACtIhS,KAAKmS,eAAiB,KACtBnS,KAAKiS,mBAAoB,EACrBC,IACAlS,KAAK4H,OAAOsK,GACZlS,KAAKkS,UAAY,KACjBA,EAAUpQ,gBAGlBgQ,EAAmBxS,UAAUgT,cAAgB,WACzC,IAAIC,EAAKvS,KAAMqD,EAAckP,EAAGlP,YAAa6O,EAAYK,EAAGL,UAAWF,EAAYO,EAAGP,UAAWG,EAAiBI,EAAGJ,eAAgBF,EAAoBM,EAAGN,kBACxJC,GAAaF,GAAaC,IAC1B5O,EAAYlC,KAAKgR,GACjBnS,KAAKmS,eAAiB,KACtBnS,KAAKiS,mBAAoB,IAGjCH,EAAmBxS,UAAUmH,WAAa,SAAUjB,EAAYkB,EAAYjB,EAAYkB,EAAYC,GAChG5G,KAAKsS,gBACLtS,KAAK6E,gBAETiN,EAAmBxS,UAAUwH,eAAiB,WAC1C9G,KAAKsS,gBACLtS,KAAK6E,gBAEFiN,EAlEe,CAmExBnD,EAAkBpI,+CC3IpB,IAAI9D,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAY/E6P,EAAc,SAAUtP,GAExB,SAASsP,IACL,IAAIvR,EAAMiC,EAAO9E,KAAK4B,KAAM,2BAC5BA,KAAKxB,KAAOyC,EAAIzC,KAAO,aACvBwB,KAAK2M,MAAQ1L,EAAI0L,MACjB3M,KAAK4M,QAAU3L,EAAI2L,QAEvB,OAPAnK,EAAU+P,EAAYtP,GAOfsP,EARO,CAShB9Q,OACF3D,EAAQyU,WAAaA,gCCzBrB,IAAI/P,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/E8P,EAAY5U,EAAQ,GACpB6U,EAAU7U,EAAQ,KAClBiF,EAAiBjF,EAAQ,GACzB8U,EAAc9U,EAAQ,IACtBoL,EAA4BpL,EAAQ,IACpCqL,EAAwBrL,EAAQ,KAIhC+U,EAAiB,SAAU1P,GAE3B,SAAS0P,EAAcC,EAAYC,EAAYlI,QACxB,IAAfiI,IAAyBA,EAAa9D,OAAOC,wBAC9B,IAAf8D,IAAyBA,EAAa/D,OAAOC,mBACjD9L,EAAO9E,KAAK4B,MACZA,KAAK4K,UAAYA,EACjB5K,KAAK+S,WACL/S,KAAKgT,YAAcH,EAAa,EAAI,EAAIA,EACxC7S,KAAKiT,YAAcH,EAAa,EAAI,EAAIA,EAmE5C,OA3EArQ,EAAUmQ,EAAe1P,GAUzB0P,EAActT,UAAU6B,KAAO,SAAUlC,GACrC,IAAIiU,EAAMlT,KAAKmT,UACfnT,KAAK+S,QAAQ1K,KAAK,IAAI+K,EAAYF,EAAKjU,IACvCe,KAAKqT,2BACLnQ,EAAO5D,UAAU6B,KAAK/C,KAAK4B,KAAMf,IAErC2T,EAActT,UAAUY,WAAa,SAAU6B,GAC3C,IAEIF,EAFAkR,EAAU/S,KAAKqT,2BACfzI,EAAY5K,KAAK4K,UAErB,GAAI5K,KAAK8D,OACL,MAAM,IAAImF,EAA0BS,wBAE/B1J,KAAKsJ,SACVzH,EAAeiB,EAAeoB,aAAaqE,MAEtCvI,KAAKoD,UACVvB,EAAeiB,EAAeoB,aAAaqE,OAG3CvI,KAAKqJ,UAAUhB,KAAKtG,GACpBF,EAAe,IAAIqH,EAAsBW,oBAAoB7J,KAAM+B,IAEnE6I,GACA7I,EAAWnB,IAAImB,EAAa,IAAI4Q,EAAYW,oBAAoBvR,EAAY6I,IAGhF,IADA,IAAIhF,EAAMmN,EAAQ3Q,OACTnE,EAAI,EAAGA,EAAI2H,IAAQ7D,EAAW+B,OAAQ7F,IAC3C8D,EAAWZ,KAAK4R,EAAQ9U,GAAGgB,OAQ/B,OANIe,KAAKsJ,SACLvH,EAAWvB,MAAMR,KAAKuJ,aAEjBvJ,KAAKoD,WACVrB,EAAWtB,WAERoB,GAEX+Q,EAActT,UAAU6T,QAAU,WAC9B,OAAQnT,KAAK4K,WAAa8H,EAAQa,OAAOL,OAE7CN,EAActT,UAAU+T,yBAA2B,WAU/C,IATA,IAAIH,EAAMlT,KAAKmT,UACXH,EAAchT,KAAKgT,YACnBC,EAAcjT,KAAKiT,YACnBF,EAAU/S,KAAK+S,QACfS,EAAcT,EAAQ3Q,OACtBqR,EAAc,EAIXA,EAAcD,KACZN,EAAMH,EAAQU,GAAaC,KAAQT,IAGxCQ,IAQJ,OANID,EAAcR,IACdS,EAAcE,KAAKC,IAAIH,EAAaD,EAAcR,IAElDS,EAAc,GACdV,EAAQlK,OAAO,EAAG4K,GAEfV,GAEJH,EA5EU,CA6EnBH,EAAUrJ,SACZrL,EAAQ6U,cAAgBA,EACxB,IAAIQ,EAAe,WAKf,OAJA,SAAqBM,EAAMzU,GACvBe,KAAK0T,KAAOA,EACZ1T,KAAKf,MAAQA,GAHF,iCC7FnB,IAAIwD,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/EkR,EAAoBhW,EAAQ,IAC5BuJ,EAAYvJ,EAAQ,IACpBmL,EAAenL,EAAQ,GACvB8Q,EAAoB9Q,EAAQ,GAC5B6Q,EAAsB7Q,EAAQ,GAC9BsH,EAAatH,EAAQ,IAkDzB,SAASiW,IAEL,IADA,IAAInD,KACKzO,EAAK,EAAGA,EAAKC,UAAUC,OAAQF,IACpCyO,EAAYzO,EAAK,GAAKC,UAAUD,GAEpC,IAAI4K,EAAU6D,EAAYA,EAAYvO,OAAS,GAI/C,MAHuB,mBAAZ0K,GACP6D,EAAYtF,MAET,IAAIwI,EAAkB3I,gBAAgByF,GAAaxQ,KAAK,IAAI4T,EAAYjH,IA1CnF/O,EAAQiW,IATR,WAEI,IADA,IAAIrD,KACKzO,EAAK,EAAGA,EAAKC,UAAUC,OAAQF,IACpCyO,EAAYzO,EAAK,GAAKC,UAAUD,GAEpC,OAAO,SAA6B5B,GAChC,OAAOA,EAAOH,KAAK/B,KAAK0V,EAAUtN,WAAM,GAASlG,GAAQ8H,OAAOuI,OA+CxE5S,EAAQ+V,UAAYA,EACpB,IAAIC,EAAe,WACf,SAASA,EAAYjH,GACjB9M,KAAK8M,QAAUA,EAKnB,OAHAiH,EAAYzU,UAAUlB,KAAO,SAAU2D,EAAYzB,GAC/C,OAAOA,EAAOP,UAAU,IAAIkU,EAAclS,EAAY/B,KAAK8M,WAExDiH,EAPQ,GASnBhW,EAAQgW,YAAcA,EAMtB,IAAIE,EAAiB,SAAU/Q,GAE3B,SAAS+Q,EAAc5Q,EAAayJ,EAASoH,QAC1B,IAAXA,IAAqBA,EAASvV,OAAO6D,OAAO,OAChDU,EAAO9E,KAAK4B,KAAMqD,GAClBrD,KAAKmU,aACLnU,KAAKmN,OAAS,EACdnN,KAAK8M,QAA8B,mBAAZA,EAA0BA,EAAU,KAC3D9M,KAAKkU,OAASA,EAsFlB,OA7FAzR,EAAUwR,EAAe/Q,GASzB+Q,EAAc3U,UAAUqE,MAAQ,SAAU1E,GACtC,IAAIkV,EAAYnU,KAAKmU,UACjB/M,EAAUc,QAAQjJ,GAClBkV,EAAU9L,KAAK,IAAI+L,EAAoBnV,IAEI,mBAA/BA,EAAMkG,EAAWa,UAC7BmO,EAAU9L,KAAK,IAAIgM,EAAepV,EAAMkG,EAAWa,cAGnDmO,EAAU9L,KAAK,IAAIiM,EAAkBtU,KAAKqD,YAAarD,KAAMf,KAGrEgV,EAAc3U,UAAUuE,UAAY,WAChC,IAAIsQ,EAAYnU,KAAKmU,UACjBvO,EAAMuO,EAAU/R,OACpB,GAAY,IAARwD,EAAJ,CAIA5F,KAAKmN,OAASvH,EACd,IAAK,IAAI3H,EAAI,EAAGA,EAAI2H,EAAK3H,IAAK,CAC1B,IAAI+H,EAAWmO,EAAUlW,GACrB+H,EAASuO,kBACTvU,KAAKY,IAAIoF,EAASjG,UAAUiG,EAAU/H,IAGtC+B,KAAKmN,eAVTnN,KAAKqD,YAAY5C,YAczBwT,EAAc3U,UAAUkV,eAAiB,WACrCxU,KAAKmN,SACe,IAAhBnN,KAAKmN,QACLnN,KAAKqD,YAAY5C,YAGzBwT,EAAc3U,UAAUmV,eAAiB,WAKrC,IAJA,IAAIN,EAAYnU,KAAKmU,UACjBvO,EAAMuO,EAAU/R,OAChBiB,EAAcrD,KAAKqD,YAEdpF,EAAI,EAAGA,EAAI2H,EAAK3H,IAAK,CAE1B,GAAiC,mBAD7B+H,EAAWmO,EAAUlW,IACL2R,WAA4B5J,EAAS4J,WACrD,OAGR,IAAI8E,GAAiB,EACjBC,KACJ,IAAS1W,EAAI,EAAGA,EAAI2H,EAAK3H,IAAK,CAC1B,IAAI+H,EACAT,GADAS,EAAWmO,EAAUlW,IACHkD,OAMtB,GAHI6E,EAASoJ,iBACTsF,GAAiB,GAEjBnP,EAAOW,KAEP,YADA7C,EAAY5C,WAGhBkU,EAAKtM,KAAK9C,EAAOtG,OAEjBe,KAAK8M,QACL9M,KAAK4U,YAAYD,GAGjBtR,EAAYlC,KAAKwT,GAEjBD,GACArR,EAAY5C,YAGpBwT,EAAc3U,UAAUsV,YAAc,SAAUD,GAC5C,IAAIpP,EACJ,IACIA,EAASvF,KAAK8M,QAAQtG,MAAMxG,KAAM2U,GAEtC,MAAO1T,GAEH,YADAjB,KAAKqD,YAAY7C,MAAMS,GAG3BjB,KAAKqD,YAAYlC,KAAKoE,IAEnB0O,EA9FU,CA+FnBjL,EAAa/F,YACflF,EAAQkW,cAAgBA,EACxB,IAAII,EAAkB,WAClB,SAASA,EAAerO,GACpBhG,KAAKgG,SAAWA,EAChBhG,KAAK6U,WAAa7O,EAAS7E,OAc/B,OAZAkT,EAAe/U,UAAUsQ,SAAW,WAChC,OAAO,GAEXyE,EAAe/U,UAAU6B,KAAO,WAC5B,IAAIoE,EAASvF,KAAK6U,WAElB,OADA7U,KAAK6U,WAAa7U,KAAKgG,SAAS7E,OACzBoE,GAEX8O,EAAe/U,UAAU8P,aAAe,WACpC,IAAIyF,EAAa7U,KAAK6U,WACtB,OAAOA,GAAcA,EAAW3O,MAE7BmO,EAjBW,GAmBlBD,EAAuB,WACvB,SAASA,EAAoBjJ,GACzBnL,KAAKmL,MAAQA,EACbnL,KAAK2H,MAAQ,EACb3H,KAAKoC,OAAS,EACdpC,KAAKoC,OAAS+I,EAAM/I,OAgBxB,OAdAgS,EAAoB9U,UAAU6F,EAAWa,UAAY,WACjD,OAAOhG,MAEXoU,EAAoB9U,UAAU6B,KAAO,SAAUlC,GAC3C,IAAIhB,EAAI+B,KAAK2H,QACTwD,EAAQnL,KAAKmL,MACjB,OAAOlN,EAAI+B,KAAKoC,QAAWnD,MAAOkM,EAAMlN,GAAIiI,MAAM,IAAYjH,MAAO,KAAMiH,MAAM,IAErFkO,EAAoB9U,UAAUsQ,SAAW,WACrC,OAAO5P,KAAKmL,MAAM/I,OAASpC,KAAK2H,OAEpCyM,EAAoB9U,UAAU8P,aAAe,WACzC,OAAOpP,KAAKmL,MAAM/I,SAAWpC,KAAK2H,OAE/ByM,EArBgB,GA4BvBE,EAAqB,SAAUpR,GAE/B,SAASoR,EAAkBjR,EAAauB,EAAQvE,GAC5C6C,EAAO9E,KAAK4B,KAAMqD,GAClBrD,KAAK4E,OAASA,EACd5E,KAAKK,WAAaA,EAClBL,KAAKuU,mBAAoB,EACzBvU,KAAKqP,UACLrP,KAAK8U,YAAa,EAsCtB,OA7CArS,EAAU6R,EAAmBpR,GAS7BoR,EAAkBhV,UAAU6F,EAAWa,UAAY,WAC/C,OAAOhG,MAIXsU,EAAkBhV,UAAU6B,KAAO,WAC/B,IAAIkO,EAASrP,KAAKqP,OAClB,OAAsB,IAAlBA,EAAOjN,QAAgBpC,KAAK8U,YACnB7V,MAAO,KAAMiH,MAAM,IAGnBjH,MAAOoQ,EAAO3B,QAASxH,MAAM,IAG9CoO,EAAkBhV,UAAUsQ,SAAW,WACnC,OAAO5P,KAAKqP,OAAOjN,OAAS,GAEhCkS,EAAkBhV,UAAU8P,aAAe,WACvC,OAA8B,IAAvBpP,KAAKqP,OAAOjN,QAAgBpC,KAAK8U,YAE5CR,EAAkBhV,UAAUwH,eAAiB,WACrC9G,KAAKqP,OAAOjN,OAAS,GACrBpC,KAAK8U,YAAa,EAClB9U,KAAK4E,OAAO4P,kBAGZxU,KAAKqD,YAAY5C,YAGzB6T,EAAkBhV,UAAUmH,WAAa,SAAUjB,EAAYkB,EAAYjB,EAAYkB,EAAYC,GAC/F5G,KAAKqP,OAAOhH,KAAK3B,GACjB1G,KAAK4E,OAAO6P,kBAEhBH,EAAkBhV,UAAUS,UAAY,SAAUd,EAAO0I,GACrD,OAAO+G,EAAoBrJ,kBAAkBrF,KAAMA,KAAKK,WAAYL,KAAM2H,IAEvE2M,EA9Cc,CA+CvB3F,EAAkBpI,+CCnRpBxI,EAAQgX,OAHR,SAAgB9V,GACZ,OAAOA,aAAiB+V,OAASC,OAAOhW,kCCD5C,IAAIiG,EAAerH,EAAQ,GACvBgW,EAAoBhW,EAAQ,IAC5BoN,EAAgBpN,EAAQ,IACxBqX,EAAarX,EAAQ,IAoFzBE,EAAQoX,MAtBR,WAEI,IADA,IAAIxE,KACKzO,EAAK,EAAGA,EAAKC,UAAUC,OAAQF,IACpCyO,EAAYzO,EAAK,GAAKC,UAAUD,GAEpC,IAAI4M,EAAaC,OAAOC,kBACpBpE,EAAY,KACZwK,EAAOzE,EAAYA,EAAYvO,OAAS,GAU5C,OATI6I,EAAcT,YAAY4K,IAC1BxK,EAAY+F,EAAYtF,MACpBsF,EAAYvO,OAAS,GAAoD,iBAAxCuO,EAAYA,EAAYvO,OAAS,KAClE0M,EAAa6B,EAAYtF,QAGR,iBAAT+J,IACZtG,EAAa6B,EAAYtF,OAEX,OAAdT,GAA6C,IAAvB+F,EAAYvO,QAAgBuO,EAAY,aAAczL,EAAapF,WAClF6Q,EAAY,GAEhBuE,EAAWG,SAASvG,EAApBoG,CAAgC,IAAIrB,EAAkB3I,gBAAgByF,EAAa/F,mCCrF9F,IAAI0K,EAAazX,EAAQ,IACrB0X,EAAa1X,EAAQ,KAiDzBE,EAAQsX,SAJR,SAAkBvG,GAEd,YADmB,IAAfA,IAAyBA,EAAaC,OAAOC,mBAC1CsG,EAAW1G,SAAS2G,EAAWC,SAAU,KAAM1G,kCChD1D,IAAIrM,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/EqG,EAAenL,EAAQ,GACvB4X,EAAiB5X,EAAQ,IAqD7BE,EAAQ2X,UANR,SAAmB9K,EAAW6C,GAE1B,YADc,IAAVA,IAAoBA,EAAQ,GACzB,SAAmCnN,GACtC,OAAOA,EAAOH,KAAK,IAAIwV,EAAkB/K,EAAW6C,MAI5D,IAAIkI,EAAqB,WACrB,SAASA,EAAkB/K,EAAW6C,QACpB,IAAVA,IAAoBA,EAAQ,GAChCzN,KAAK4K,UAAYA,EACjB5K,KAAKyN,MAAQA,EAKjB,OAHAkI,EAAkBrW,UAAUlB,KAAO,SAAU2D,EAAYzB,GACrD,OAAOA,EAAOP,UAAU,IAAIuT,EAAoBvR,EAAY/B,KAAK4K,UAAW5K,KAAKyN,SAE9EkI,EATc,GAWzB5X,EAAQ4X,kBAAoBA,EAM5B,IAAIrC,EAAuB,SAAUpQ,GAEjC,SAASoQ,EAAoBjQ,EAAauH,EAAW6C,QACnC,IAAVA,IAAoBA,EAAQ,GAChCvK,EAAO9E,KAAK4B,KAAMqD,GAClBrD,KAAK4K,UAAYA,EACjB5K,KAAKyN,MAAQA,EAmBjB,OAxBAhL,EAAU6Q,EAAqBpQ,GAO/BoQ,EAAoBzI,SAAW,SAAUC,GACrC,IAAI8K,EAAe9K,EAAI8K,aAAcvS,EAAcyH,EAAIzH,YACvDuS,EAAa/F,QAAQxM,GACrBrD,KAAK8B,eAETwR,EAAoBhU,UAAUuW,gBAAkB,SAAUD,GACtD5V,KAAKY,IAAIZ,KAAK4K,UAAUH,SAAS6I,EAAoBzI,SAAU7K,KAAKyN,MAAO,IAAIqI,EAAiBF,EAAc5V,KAAKqD,gBAEvHiQ,EAAoBhU,UAAUqE,MAAQ,SAAU1E,GAC5Ce,KAAK6V,gBAAgBJ,EAAe/F,aAAaS,WAAWlR,KAEhEqU,EAAoBhU,UAAUsE,OAAS,SAAU3C,GAC7CjB,KAAK6V,gBAAgBJ,EAAe/F,aAAaW,YAAYpP,KAEjEqS,EAAoBhU,UAAUuE,UAAY,WACtC7D,KAAK6V,gBAAgBJ,EAAe/F,aAAaY,mBAE9CgD,EAzBgB,CA0BzBtK,EAAa/F,YACflF,EAAQuV,oBAAsBA,EAC9B,IAAIwC,EAAoB,WAKpB,OAJA,SAA0BF,EAAcvS,GACpCrD,KAAK4V,aAAeA,EACpB5V,KAAKqD,YAAcA,GAHH,GAOxBtF,EAAQ+X,iBAAmBA,gCChH3B,IAAIrT,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/EkR,EAAoBhW,EAAQ,IAC5BuJ,EAAYvJ,EAAQ,IACpB8Q,EAAoB9Q,EAAQ,GAC5B6Q,EAAsB7Q,EAAQ,GAC9BkY,KA6DJhY,EAAQiY,cAhBR,WAEI,IADA,IAAIrF,KACKzO,EAAK,EAAGA,EAAKC,UAAUC,OAAQF,IACpCyO,EAAYzO,EAAK,GAAKC,UAAUD,GAEpC,IAAI4K,EAAU,KASd,MARmD,mBAAxC6D,EAAYA,EAAYvO,OAAS,KACxC0K,EAAU6D,EAAYtF,OAIC,IAAvBsF,EAAYvO,QAAgBgF,EAAUc,QAAQyI,EAAY,MAC1DA,EAAcA,EAAY,GAAG/G,SAE1B,SAAUtJ,GAAU,OAAOA,EAAOH,KAAK/B,KAAK,IAAIyV,EAAkB3I,iBAAiB5K,GAAQ8H,OAAOuI,IAAe,IAAIsF,EAAsBnJ,MAGtJ,IAAImJ,EAAyB,WACzB,SAASA,EAAsBnJ,GAC3B9M,KAAK8M,QAAUA,EAKnB,OAHAmJ,EAAsB3W,UAAUlB,KAAO,SAAU2D,EAAYzB,GACzD,OAAOA,EAAOP,UAAU,IAAImW,EAAwBnU,EAAY/B,KAAK8M,WAElEmJ,EAPkB,GAS7BlY,EAAQkY,sBAAwBA,EAMhC,IAAIC,EAA2B,SAAUhT,GAErC,SAASgT,EAAwB7S,EAAayJ,GAC1C5J,EAAO9E,KAAK4B,KAAMqD,GAClBrD,KAAK8M,QAAUA,EACf9M,KAAKmN,OAAS,EACdnN,KAAKkU,UACLlU,KAAK2Q,eAqDT,OA3DAlO,EAAUyT,EAAyBhT,GAQnCgT,EAAwB5W,UAAUqE,MAAQ,SAAUtD,GAChDL,KAAKkU,OAAO7L,KAAK0N,GACjB/V,KAAK2Q,YAAYtI,KAAKhI,IAE1B6V,EAAwB5W,UAAUuE,UAAY,WAC1C,IAAI8M,EAAc3Q,KAAK2Q,YACnB/K,EAAM+K,EAAYvO,OACtB,GAAY,IAARwD,EACA5F,KAAKqD,YAAY5C,eAEhB,CACDT,KAAKmN,OAASvH,EACd5F,KAAKmW,UAAYvQ,EACjB,IAAK,IAAI3H,EAAI,EAAGA,EAAI2H,EAAK3H,IAAK,CAC1B,IAAIoC,EAAasQ,EAAY1S,GAC7B+B,KAAKY,IAAI8N,EAAoBrJ,kBAAkBrF,KAAMK,EAAYA,EAAYpC,OAIzFiY,EAAwB5W,UAAUwH,eAAiB,SAAUsP,GAC9B,IAAtBpW,KAAKmN,QAAU,IAChBnN,KAAKqD,YAAY5C,YAGzByV,EAAwB5W,UAAUmH,WAAa,SAAUjB,EAAYkB,EAAYjB,EAAYkB,EAAYC,GACrG,IAAIsN,EAASlU,KAAKkU,OACdmC,EAASnC,EAAOzO,GAChB0Q,EAAanW,KAAKmW,UAEhBE,IAAWN,IAAS/V,KAAKmW,UAAYnW,KAAKmW,UAD1C,EAENjC,EAAOzO,GAAciB,EACH,IAAdyP,IACInW,KAAK8M,QACL9M,KAAK4U,YAAYV,GAGjBlU,KAAKqD,YAAYlC,KAAK+S,EAAOtK,WAIzCsM,EAAwB5W,UAAUsV,YAAc,SAAUV,GACtD,IAAI3O,EACJ,IACIA,EAASvF,KAAK8M,QAAQtG,MAAMxG,KAAMkU,GAEtC,MAAOjT,GAEH,YADAjB,KAAKqD,YAAY7C,MAAMS,GAG3BjB,KAAKqD,YAAYlC,KAAKoE,IAEnB2Q,EA5DoB,CA6D7BvH,EAAkBpI,iBACpBxI,EAAQmY,wBAA0BA,gCCpJlC,IAAIzT,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/E8P,EAAY5U,EAAQ,GACpBiF,EAAiBjF,EAAQ,GAIzByY,EAAgB,SAAUpT,GAE1B,SAASoT,IACLpT,EAAOsD,MAAMxG,KAAMmC,WACnBnC,KAAKf,MAAQ,KACbe,KAAKuW,SAAU,EACfvW,KAAKoP,cAAe,EAgCxB,OArCA3M,EAAU6T,EAAcpT,GAOxBoT,EAAahX,UAAUY,WAAa,SAAU6B,GAC1C,OAAI/B,KAAKsJ,UACLvH,EAAWvB,MAAMR,KAAKuJ,aACfzG,EAAeoB,aAAaqE,OAE9BvI,KAAKoP,cAAgBpP,KAAKuW,SAC/BxU,EAAWZ,KAAKnB,KAAKf,OACrB8C,EAAWtB,WACJqC,EAAeoB,aAAaqE,OAEhCrF,EAAO5D,UAAUY,WAAW9B,KAAK4B,KAAM+B,IAElDuU,EAAahX,UAAU6B,KAAO,SAAUlC,GAC/Be,KAAKoP,eACNpP,KAAKf,MAAQA,EACbe,KAAKuW,SAAU,IAGvBD,EAAahX,UAAUkB,MAAQ,SAAUA,GAChCR,KAAKoP,cACNlM,EAAO5D,UAAUkB,MAAMpC,KAAK4B,KAAMQ,IAG1C8V,EAAahX,UAAUmB,SAAW,WAC9BT,KAAKoP,cAAe,EAChBpP,KAAKuW,SACLrT,EAAO5D,UAAU6B,KAAK/C,KAAK4B,KAAMA,KAAKf,OAE1CiE,EAAO5D,UAAUmB,SAASrC,KAAK4B,OAE5BsW,EAtCS,CAuClB7D,EAAUrJ,SACZrL,EAAQuY,aAAeA,gCClDvB,IAAI7T,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAW/E+G,EAA2B,SAAUxG,GAErC,SAASwG,IACL,IAAIzI,EAAMiC,EAAO9E,KAAK4B,KAAM,uBAC5BA,KAAKxB,KAAOyC,EAAIzC,KAAO,0BACvBwB,KAAK2M,MAAQ1L,EAAI0L,MACjB3M,KAAK4M,QAAU3L,EAAI2L,QAEvB,OAPAnK,EAAUiH,EAAyBxG,GAO5BwG,EARoB,CAS7BhI,OACF3D,EAAQ2L,wBAA0BA,gCCxBlC,IAAIhK,EAAS7B,EAAQ,GACrB,SAAS2Y,EAAoBpS,GACzB,IAAIqS,EACA1F,EAAS3M,EAAQ2M,OAarB,MAZsB,mBAAXA,EACHA,EAAO1Q,WACPoW,EAAe1F,EAAO1Q,YAGtBoW,EAAe1F,EAAO,cACtBA,EAAO1Q,WAAaoW,GAIxBA,EAAe,eAEZA,EAEX1Y,EAAQyY,oBAAsBA,EAC9BzY,EAAQsC,WAAamW,EAAoB9W,EAAO4B,MAIhDvD,EAAQ0Y,aAAe1Y,EAAQsC,yCCvB/B,IACI0Q,EADSlT,EAAQ,GACDyD,KAAKyP,OACzBhT,EAAQ0F,aAAkC,mBAAXsN,GAA+C,mBAAfA,EAAO2F,IAClE3F,EAAO2F,IAAI,gBAAkB,iBAIjC3Y,EAAQ4Y,eAAiB5Y,EAAQ0F,2CCJjC1F,EAAQsG,WAHR,SAAoB9B,GAChB,MAAoB,mBAANA,iCCDlB,IAAIqU,EAAU/Y,EAAQ,GAClBgZ,EAAQhZ,EAAQ,IAYpBE,EAAQ+Y,UALR,SAAmBlM,GAEf,YADkB,IAAdA,IAAwBA,EAAYgM,EAAQ3P,OACzC4P,EAAMhK,IAAI,SAAU5N,GAAS,OAAO,IAAI8X,EAAU9X,EAAO2L,EAAUsI,UAI9E,IAAI6D,EAAa,WAKb,OAJA,SAAmB9X,EAAO6X,GACtB9W,KAAKf,MAAQA,EACbe,KAAK8W,UAAYA,GAHR,GAOjB/Y,EAAQgZ,UAAYA,gCCrBpB,IAAItU,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/EgM,EAAoB9Q,EAAQ,GAC5B6Q,EAAsB7Q,EAAQ,GAsDlCE,EAAQiZ,UALR,SAAmBlK,EAAS+B,GACxB,OAAO,SAAmCvO,GACtC,OAAOA,EAAOH,KAAK,IAAI8W,EAAkBnK,EAAS+B,MAI1D,IAAIoI,EAAqB,WACrB,SAASA,EAAkBnK,EAAS+B,GAChC7O,KAAK8M,QAAUA,EACf9M,KAAK6O,eAAiBA,EAK1B,OAHAoI,EAAkB3X,UAAUlB,KAAO,SAAU2D,EAAYzB,GACrD,OAAOA,EAAOP,UAAU,IAAImX,EAAoBnV,EAAY/B,KAAK8M,QAAS9M,KAAK6O,kBAE5EoI,EARc,GAerBC,EAAuB,SAAUhU,GAEjC,SAASgU,EAAoB7T,EAAayJ,EAAS+B,GAC/C3L,EAAO9E,KAAK4B,KAAMqD,GAClBrD,KAAK8M,QAAUA,EACf9M,KAAK6O,eAAiBA,EACtB7O,KAAK2H,MAAQ,EAwDjB,OA7DAlF,EAAUyU,EAAqBhU,GAO/BgU,EAAoB5X,UAAUqE,MAAQ,SAAU1E,GAC5C,IAAIsG,EACAoC,EAAQ3H,KAAK2H,QACjB,IACIpC,EAASvF,KAAK8M,QAAQ7N,EAAO0I,GAEjC,MAAOnH,GAEH,YADAR,KAAKqD,YAAY7C,MAAMA,GAG3BR,KAAKuP,UAAUhK,EAAQtG,EAAO0I,IAElCuP,EAAoB5X,UAAUiQ,UAAY,SAAUhK,EAAQtG,EAAO0I,GAC/D,IAAIwP,EAAoBnX,KAAKmX,kBACzBA,GACAA,EAAkBrV,cAEtB9B,KAAKY,IAAIZ,KAAKmX,kBAAoBzI,EAAoBrJ,kBAAkBrF,KAAMuF,EAAQtG,EAAO0I,KAEjGuP,EAAoB5X,UAAUuE,UAAY,WACtC,IAAIsT,EAAoBnX,KAAKmX,kBACxBA,IAAqBA,EAAkBrT,QACxCZ,EAAO5D,UAAUuE,UAAUzF,KAAK4B,OAGxCkX,EAAoB5X,UAAUuF,aAAe,WACzC7E,KAAKmX,kBAAoB,MAE7BD,EAAoB5X,UAAUwH,eAAiB,SAAUF,GACrD5G,KAAK4H,OAAOhB,GACZ5G,KAAKmX,kBAAoB,KACrBnX,KAAKoD,WACLF,EAAO5D,UAAUuE,UAAUzF,KAAK4B,OAGxCkX,EAAoB5X,UAAUmH,WAAa,SAAUjB,EAAYkB,EAAYjB,EAAYkB,EAAYC,GAC7F5G,KAAK6O,eACL7O,KAAKoX,eAAe5R,EAAYkB,EAAYjB,EAAYkB,GAGxD3G,KAAKqD,YAAYlC,KAAKuF,IAG9BwQ,EAAoB5X,UAAU8X,eAAiB,SAAU5R,EAAYkB,EAAYjB,EAAYkB,GACzF,IAAIpB,EACJ,IACIA,EAASvF,KAAK6O,eAAerJ,EAAYkB,EAAYjB,EAAYkB,GAErE,MAAO1F,GAEH,YADAjB,KAAKqD,YAAY7C,MAAMS,GAG3BjB,KAAKqD,YAAYlC,KAAKoE,IAEnB2R,EA9DgB,CA+DzBvI,EAAkBpI,+CC3IpB,IAAI9D,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/EqG,EAAenL,EAAQ,GAM3BE,EAAQsZ,SALR,WACI,OAAO,SAAkC/W,GACrC,OAAOA,EAAOH,KAAK,IAAImX,EAAiBhX,MAIhD,IAAIgX,EAAoB,WACpB,SAASA,EAAiBvL,GACtB/L,KAAK+L,YAAcA,EAYvB,OAVAuL,EAAiBhY,UAAUlB,KAAO,SAAU2D,EAAYzB,GACpD,IAAIyL,EAAc/L,KAAK+L,YACvBA,EAAYwL,YACZ,IAAIC,EAAa,IAAIC,EAAmB1V,EAAYgK,GAChDlK,EAAevB,EAAOP,UAAUyX,GAIpC,OAHKA,EAAW1T,SACZ0T,EAAWE,WAAa3L,EAAY4L,WAEjC9V,GAEJyV,EAda,GAgBpBG,EAAsB,SAAUvU,GAEhC,SAASuU,EAAmBpU,EAAa0I,GACrC7I,EAAO9E,KAAK4B,KAAMqD,GAClBrD,KAAK+L,YAAcA,EAiDvB,OApDAtJ,EAAUgV,EAAoBvU,GAK9BuU,EAAmBnY,UAAUuF,aAAe,WACxC,IAAIkH,EAAc/L,KAAK+L,YACvB,GAAKA,EAAL,CAIA/L,KAAK+L,YAAc,KACnB,IAAIsL,EAAWtL,EAAYwL,UAC3B,GAAIF,GAAY,EACZrX,KAAK0X,WAAa,UAItB,GADA3L,EAAYwL,UAAYF,EAAW,EAC/BA,EAAW,EACXrX,KAAK0X,WAAa,SADtB,CA2BA,IAAIA,EAAa1X,KAAK0X,WAClBE,EAAmB7L,EAAY8L,YACnC7X,KAAK0X,WAAa,MACdE,GAAsBF,GAAcE,IAAqBF,GACzDE,EAAiB9V,oBAzCjB9B,KAAK0X,WAAa,MA4CnBD,EArDe,CAsDxBzO,EAAa/F,0CClFf,IAAIR,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/EqG,EAAenL,EAAQ,GACvBia,EAA4Bja,EAAQ,IACpCmN,EAAoBnN,EAAQ,IA+ChCE,EAAQwO,SAVR,SAAkBf,GACd,OAAO,SAAkClL,GACrC,OAAc,IAAVkL,EACO,IAAIR,EAAkBL,gBAGtBrK,EAAOH,KAAK,IAAI4X,EAAiBvM,MAKpD,IAAIuM,EAAoB,WACpB,SAASA,EAAiBC,GAEtB,GADAhY,KAAKgY,MAAQA,EACThY,KAAKgY,MAAQ,EACb,MAAM,IAAIF,EAA0BpL,wBAM5C,OAHAqL,EAAiBzY,UAAUlB,KAAO,SAAU2D,EAAYzB,GACpD,OAAOA,EAAOP,UAAU,IAAIkY,EAAmBlW,EAAY/B,KAAKgY,SAE7DD,EAVa,GAiBpBE,EAAsB,SAAU/U,GAEhC,SAAS+U,EAAmB5U,EAAa2U,GACrC9U,EAAO9E,KAAK4B,KAAMqD,GAClBrD,KAAKgY,MAAQA,EACbhY,KAAKkY,KAAO,IAAIxN,MAChB1K,KAAKwL,MAAQ,EA2BjB,OAhCA/I,EAAUwV,EAAoB/U,GAO9B+U,EAAmB3Y,UAAUqE,MAAQ,SAAU1E,GAC3C,IAAIiZ,EAAOlY,KAAKkY,KACZF,EAAQhY,KAAKgY,MACbxM,EAAQxL,KAAKwL,QACb0M,EAAK9V,OAAS4V,EACdE,EAAK7P,KAAKpJ,GAIViZ,EADY1M,EAAQwM,GACN/Y,GAGtBgZ,EAAmB3Y,UAAUuE,UAAY,WACrC,IAAIR,EAAcrD,KAAKqD,YACnBmI,EAAQxL,KAAKwL,MACjB,GAAIA,EAAQ,EAGR,IAFA,IAAIwM,EAAQhY,KAAKwL,OAASxL,KAAKgY,MAAQhY,KAAKgY,MAAQhY,KAAKwL,MACrD0M,EAAOlY,KAAKkY,KACPja,EAAI,EAAGA,EAAI+Z,EAAO/Z,IAAK,CAC5B,IAAIka,EAAO3M,IAAWwM,EACtB3U,EAAYlC,KAAK+W,EAAKC,IAG9B9U,EAAY5C,YAETwX,EAjCe,CAkCxBjP,EAAa/F,0CC1Gf,IAAIR,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/EqG,EAAenL,EAAQ,GAqD3BE,EAAQuO,KAdR,SAAcF,EAAaC,GACvB,IAAI+L,GAAU,EASd,OAHIjW,UAAUC,QAAU,IACpBgW,GAAU,GAEP,SAA8B9X,GACjC,OAAOA,EAAOH,KAAK,IAAIkY,EAAajM,EAAaC,EAAM+L,MAI/D,IAAIC,EAAgB,WAChB,SAASA,EAAajM,EAAaC,EAAM+L,QACrB,IAAZA,IAAsBA,GAAU,GACpCpY,KAAKoM,YAAcA,EACnBpM,KAAKqM,KAAOA,EACZrM,KAAKoY,QAAUA,EAKnB,OAHAC,EAAa/Y,UAAUlB,KAAO,SAAU2D,EAAYzB,GAChD,OAAOA,EAAOP,UAAU,IAAIuY,EAAevW,EAAY/B,KAAKoM,YAAapM,KAAKqM,KAAMrM,KAAKoY,WAEtFC,EAVS,GAiBhBC,EAAkB,SAAUpV,GAE5B,SAASoV,EAAejV,EAAa+I,EAAamM,EAAOH,GACrDlV,EAAO9E,KAAK4B,KAAMqD,GAClBrD,KAAKoM,YAAcA,EACnBpM,KAAKuY,MAAQA,EACbvY,KAAKoY,QAAUA,EACfpY,KAAK2H,MAAQ,EAkCjB,OAxCAlF,EAAU6V,EAAgBpV,GAQ1BvE,OAAOC,eAAe0Z,EAAehZ,UAAW,QAC5CP,IAAK,WACD,OAAOiB,KAAKuY,OAEhBC,IAAK,SAAUvZ,GACXe,KAAKoY,SAAU,EACfpY,KAAKuY,MAAQtZ,GAEjBH,YAAY,EACZD,cAAc,IAElByZ,EAAehZ,UAAUqE,MAAQ,SAAU1E,GACvC,GAAKe,KAAKoY,QAKN,OAAOpY,KAAKsP,SAASrQ,GAJrBe,KAAKqM,KAAOpN,EACZe,KAAKqD,YAAYlC,KAAKlC,IAM9BqZ,EAAehZ,UAAUgQ,SAAW,SAAUrQ,GAC1C,IACIsG,EADAoC,EAAQ3H,KAAK2H,QAEjB,IACIpC,EAASvF,KAAKoM,YAAYpM,KAAKqM,KAAMpN,EAAO0I,GAEhD,MAAO1G,GACHjB,KAAKqD,YAAY7C,MAAMS,GAE3BjB,KAAKqM,KAAO9G,EACZvF,KAAKqD,YAAYlC,KAAKoE,IAEnB+S,EAzCW,CA0CpBtP,EAAa/F,0CCtHf,IAAIR,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/E0E,EAAaxJ,EAAQ,GACrByJ,EAAgBzJ,EAAQ,GACxB8Q,EAAoB9Q,EAAQ,GAC5B6Q,EAAsB7Q,EAAQ,GA8ClCE,EAAQ0a,MALR,SAAe7G,GACX,OAAO,SAA+BtR,GAClC,OAAOA,EAAOH,KAAK,IAAIuY,EAAc9G,MAI7C,IAAI8G,EAAiB,WACjB,SAASA,EAAc9G,GACnB5R,KAAK4R,iBAAmBA,EAK5B,OAHA8G,EAAcpZ,UAAUlB,KAAO,SAAU2D,EAAYzB,GACjD,OAAOA,EAAOP,UAAU,IAAI4Y,EAAgB5W,EAAY/B,KAAK4R,oBAE1D8G,EAPU,GAcjBC,EAAmB,SAAUzV,GAE7B,SAASyV,EAAgBtV,EAAauO,GAClC1O,EAAO9E,KAAK4B,KAAMqD,GAClBrD,KAAK4R,iBAAmBA,EACxB5R,KAAK4P,UAAW,EAwCpB,OA5CAnN,EAAUkW,EAAiBzV,GAM3ByV,EAAgBrZ,UAAUqE,MAAQ,SAAU1E,GAGxC,GAFAe,KAAKf,MAAQA,EACbe,KAAK4P,UAAW,GACX5P,KAAKkS,UAAW,CACjB,IAAIE,EAAW/K,EAAWQ,SAAS7H,KAAK4R,iBAAzBvK,CAA2CpI,GAC1D,GAAImT,IAAa9K,EAAcQ,YAC3B9H,KAAKqD,YAAY7C,MAAM8G,EAAcQ,YAAYC,OAEhD,CACD,IAAIoP,EAAoBzI,EAAoBrJ,kBAAkBrF,KAAMoS,GAChE+E,EAAkBrT,OAClB9D,KAAK4Y,gBAGL5Y,KAAKY,IAAIZ,KAAKkS,UAAYiF,MAK1CwB,EAAgBrZ,UAAUsZ,cAAgB,WACtC,IAAe3Z,EAANe,KAAiBf,MAAO2Q,EAAxB5P,KAAsC4P,SAAUsC,EAAhDlS,KAA+DkS,UACpEA,IACAlS,KAAK4H,OAAOsK,GACZlS,KAAKkS,UAAY,KACjBA,EAAUpQ,eAEV8N,IACA5P,KAAKf,MAAQ,KACbe,KAAK4P,UAAW,EAChB5P,KAAKqD,YAAYlC,KAAKlC,KAG9B0Z,EAAgBrZ,UAAUmH,WAAa,SAAUjB,EAAYkB,EAAYjB,EAAYkB,GACjF3G,KAAK4Y,iBAETD,EAAgBrZ,UAAUwH,eAAiB,WACvC9G,KAAK4Y,iBAEFD,EA7CY,CA8CrBhK,EAAkBpI,+CCnHpB,IAAI9D,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/EqG,EAAenL,EAAQ,GAwC3BE,EAAQ8a,KANR,SAAcC,EAAW/L,GACrB,GAAyB,mBAAd+L,EACP,MAAM,IAAI1S,UAAU,+BAExB,OAAO,SAAU9F,GAAU,OAAOA,EAAOH,KAAK,IAAI4Y,EAAkBD,EAAWxY,GAAQ,EAAOyM,MAGlG,IAAIgM,EAAqB,WACrB,SAASA,EAAkBD,EAAWxY,EAAQ0Y,EAAYjM,GACtD/M,KAAK8Y,UAAYA,EACjB9Y,KAAKM,OAASA,EACdN,KAAKgZ,WAAaA,EAClBhZ,KAAK+M,QAAUA,EAKnB,OAHAgM,EAAkBzZ,UAAUlB,KAAO,SAAU8Q,EAAU5O,GACnD,OAAOA,EAAOP,UAAU,IAAIkZ,EAAoB/J,EAAUlP,KAAK8Y,UAAW9Y,KAAKM,OAAQN,KAAKgZ,WAAYhZ,KAAK+M,WAE1GgM,EAVc,GAYzBhb,EAAQgb,kBAAoBA,EAM5B,IAAIE,EAAuB,SAAU/V,GAEjC,SAAS+V,EAAoB5V,EAAayV,EAAWxY,EAAQ0Y,EAAYjM,GACrE7J,EAAO9E,KAAK4B,KAAMqD,GAClBrD,KAAK8Y,UAAYA,EACjB9Y,KAAKM,OAASA,EACdN,KAAKgZ,WAAaA,EAClBhZ,KAAK+M,QAAUA,EACf/M,KAAK2H,MAAQ,EAuBjB,OA9BAlF,EAAUwW,EAAqB/V,GAS/B+V,EAAoB3Z,UAAUwH,eAAiB,SAAU7H,GACrD,IAAIoE,EAAcrD,KAAKqD,YACvBA,EAAYlC,KAAKlC,GACjBoE,EAAY5C,YAEhBwY,EAAoB3Z,UAAUqE,MAAQ,SAAU1E,GAC5C,IAAe6Z,EAAN9Y,KAAqB8Y,UAAW/L,EAAhC/M,KAA6C+M,QAClDpF,EAAQ3H,KAAK2H,QACjB,IACiBmR,EAAU1a,KAAK2O,GAAW/M,KAAMf,EAAO0I,EAAO3H,KAAKM,SAE5DN,KAAK8G,eAAe9G,KAAKgZ,WAAarR,EAAQ1I,GAGtD,MAAOgC,GACHjB,KAAKqD,YAAY7C,MAAMS,KAG/BgY,EAAoB3Z,UAAUuE,UAAY,WACtC7D,KAAK8G,eAAe9G,KAAKgZ,YAAc,OAAI3L,IAExC4L,EA/BgB,CAgCzBjQ,EAAa/F,YACflF,EAAQkb,oBAAsBA,gCCjG9B,IAAIxW,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/EqG,EAAenL,EAAQ,GA8C3BE,EAAQmb,OALR,SAAgBJ,EAAW/L,GACvB,OAAO,SAAgCzM,GACnC,OAAOA,EAAOH,KAAK,IAAIgZ,EAAeL,EAAW/L,MAIzD,IAAIoM,EAAkB,WAClB,SAASA,EAAeL,EAAW/L,GAC/B/M,KAAK8Y,UAAYA,EACjB9Y,KAAK+M,QAAUA,EAKnB,OAHAoM,EAAe7Z,UAAUlB,KAAO,SAAU2D,EAAYzB,GAClD,OAAOA,EAAOP,UAAU,IAAIqZ,EAAiBrX,EAAY/B,KAAK8Y,UAAW9Y,KAAK+M,WAE3EoM,EARW,GAelBC,EAAoB,SAAUlW,GAE9B,SAASkW,EAAiB/V,EAAayV,EAAW/L,GAC9C7J,EAAO9E,KAAK4B,KAAMqD,GAClBrD,KAAK8Y,UAAYA,EACjB9Y,KAAK+M,QAAUA,EACf/M,KAAKwL,MAAQ,EAiBjB,OAtBA/I,EAAU2W,EAAkBlW,GAS5BkW,EAAiB9Z,UAAUqE,MAAQ,SAAU1E,GACzC,IAAIsG,EACJ,IACIA,EAASvF,KAAK8Y,UAAU1a,KAAK4B,KAAK+M,QAAS9N,EAAOe,KAAKwL,SAE3D,MAAOvK,GAEH,YADAjB,KAAKqD,YAAY7C,MAAMS,GAGvBsE,GACAvF,KAAKqD,YAAYlC,KAAKlC,IAGvBma,EAvBa,CAwBtBpQ,EAAa/F,0CC3Ff,IAAIR,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/EqG,EAAenL,EAAQ,GACvBwJ,EAAaxJ,EAAQ,GACrByJ,EAAgBzJ,EAAQ,GA4C5BE,EAAQsb,qBAHR,SAA8BC,EAASC,GACnC,OAAO,SAAUjZ,GAAU,OAAOA,EAAOH,KAAK,IAAIqZ,EAA6BF,EAASC,MAG5F,IAAIC,EAAgC,WAChC,SAASA,EAA6BF,EAASC,GAC3CvZ,KAAKsZ,QAAUA,EACftZ,KAAKuZ,YAAcA,EAKvB,OAHAC,EAA6Bla,UAAUlB,KAAO,SAAU2D,EAAYzB,GAChE,OAAOA,EAAOP,UAAU,IAAI0Z,EAA+B1X,EAAY/B,KAAKsZ,QAAStZ,KAAKuZ,eAEvFC,EARyB,GAehCC,EAAkC,SAAUvW,GAE5C,SAASuW,EAA+BpW,EAAaiW,EAASC,GAC1DrW,EAAO9E,KAAK4B,KAAMqD,GAClBrD,KAAKuZ,YAAcA,EACnBvZ,KAAK0Z,QAAS,EACS,mBAAZJ,IACPtZ,KAAKsZ,QAAUA,GA8BvB,OApCA7W,EAAUgX,EAAgCvW,GAS1CuW,EAA+Bna,UAAUga,QAAU,SAAU/W,EAAGoX,GAC5D,OAAOpX,IAAMoX,GAEjBF,EAA+Bna,UAAUqE,MAAQ,SAAU1E,GACvD,IACIqS,EAAMrS,EACV,GAFkBe,KAAKuZ,cAGnBjI,EAAMjK,EAAWQ,SAAS7H,KAAKuZ,YAAzBlS,CAAsCpI,MAChCqI,EAAcQ,YACtB,OAAO9H,KAAKqD,YAAY7C,MAAM8G,EAAcQ,YAAYC,GAGhE,IAAIxC,GAAS,EACb,GAAIvF,KAAK0Z,QAEL,IADAnU,EAAS8B,EAAWQ,SAAS7H,KAAKsZ,QAAzBjS,CAAkCrH,KAAKsR,IAAKA,MACtChK,EAAcQ,YACzB,OAAO9H,KAAKqD,YAAY7C,MAAM8G,EAAcQ,YAAYC,QAI5D/H,KAAK0Z,QAAS,GAEM,IAApBE,QAAQrU,KACRvF,KAAKsR,IAAMA,EACXtR,KAAKqD,YAAYlC,KAAKlC,KAGvBwa,EArC2B,CAsCpCzQ,EAAa/F,0CCzGf,IAAIR,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/EqG,EAAenL,EAAQ,GAoC3BE,EAAQyO,eAJR,SAAwBqN,GAEpB,YADqB,IAAjBA,IAA2BA,EAAe,MACvC,SAAUvZ,GAAU,OAAOA,EAAOH,KAAK,IAAI2Z,EAAuBD,MAG7E,IAAIC,EAA0B,WAC1B,SAASA,EAAuBD,GAC5B7Z,KAAK6Z,aAAeA,EAKxB,OAHAC,EAAuBxa,UAAUlB,KAAO,SAAU2D,EAAYzB,GAC1D,OAAOA,EAAOP,UAAU,IAAIga,EAAyBhY,EAAY/B,KAAK6Z,gBAEnEC,EAPmB,GAc1BC,EAA4B,SAAU7W,GAEtC,SAAS6W,EAAyB1W,EAAawW,GAC3C3W,EAAO9E,KAAK4B,KAAMqD,GAClBrD,KAAK6Z,aAAeA,EACpB7Z,KAAKga,SAAU,EAYnB,OAhBAvX,EAAUsX,EAA0B7W,GAMpC6W,EAAyBza,UAAUqE,MAAQ,SAAU1E,GACjDe,KAAKga,SAAU,EACfha,KAAKqD,YAAYlC,KAAKlC,IAE1B8a,EAAyBza,UAAUuE,UAAY,WACvC7D,KAAKga,SACLha,KAAKqD,YAAYlC,KAAKnB,KAAK6Z,cAE/B7Z,KAAKqD,YAAY5C,YAEdsZ,EAjBqB,CAkB9B/Q,EAAa/F,0CC1Ef,IAAIqS,EAAazX,EAAQ,IAgEzBE,EAAQkc,UAHR,SAAmBnN,EAAS+B,GACxB,OAAOyG,EAAW1G,SAAS9B,EAAS+B,EAAgB,kCC9DxD,IAAIpM,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/EuX,EAAmBrc,EAAQ,KAC3BuJ,EAAYvJ,EAAQ,IACpB8Q,EAAoB9Q,EAAQ,GAC5B6Q,EAAsB7Q,EAAQ,GAyElCE,EAAQoc,kBAVR,WAEI,IADA,IAAIC,KACKlY,EAAK,EAAGA,EAAKC,UAAUC,OAAQF,IACpCkY,EAAYlY,EAAK,GAAKC,UAAUD,GAKpC,OAH2B,IAAvBkY,EAAYhY,QAAgBgF,EAAUc,QAAQkS,EAAY,MAC1DA,EAAcA,EAAY,IAEvB,SAAU9Z,GAAU,OAAOA,EAAOH,KAAK,IAAIka,EAA0BD,MAgBhFrc,EAAQuc,wBAZR,WAEI,IADA,IAAIF,KACKlY,EAAK,EAAGA,EAAKC,UAAUC,OAAQF,IACpCkY,EAAYlY,EAAK,GAAKC,UAAUD,GAEpC,IAAI5B,EAKJ,OAJ2B,IAAvB8Z,EAAYhY,QAAgBgF,EAAUc,QAAQkS,EAAY,MAC1DA,EAAcA,EAAY,IAE9B9Z,EAAS8Z,EAAY1M,QACd,IAAIwM,EAAiBK,eAAeja,EAAQ,MAAMH,KAAK,IAAIka,EAA0BD,KAGhG,IAAIC,EAA6B,WAC7B,SAASA,EAA0BD,GAC/Bpa,KAAKoa,YAAcA,EAKvB,OAHAC,EAA0B/a,UAAUlB,KAAO,SAAU2D,EAAYzB,GAC7D,OAAOA,EAAOP,UAAU,IAAIya,EAA4BzY,EAAY/B,KAAKoa,eAEtEC,EAPsB,GAS7BG,EAA+B,SAAUtX,GAEzC,SAASsX,EAA4BnX,EAAa+W,GAC9ClX,EAAO9E,KAAK4B,KAAMqD,GAClBrD,KAAKqD,YAAcA,EACnBrD,KAAKoa,YAAcA,EAuBvB,OA3BA3X,EAAU+X,EAA6BtX,GAMvCsX,EAA4Blb,UAAUuH,YAAc,SAAUrG,EAAOoG,GACjE5G,KAAKya,yBAETD,EAA4Blb,UAAUwH,eAAiB,SAAUF,GAC7D5G,KAAKya,yBAETD,EAA4Blb,UAAUsE,OAAS,SAAU3C,GACrDjB,KAAKya,yBAETD,EAA4Blb,UAAUuE,UAAY,WAC9C7D,KAAKya,yBAETD,EAA4Blb,UAAUmb,sBAAwB,WAC1D,IAAItZ,EAAOnB,KAAKoa,YAAY1M,QACxBvM,EACAnB,KAAKY,IAAI8N,EAAoBrJ,kBAAkBrF,KAAMmB,IAGrDnB,KAAKqD,YAAY5C,YAGlB+Z,EA5BwB,CA6BjC7L,EAAkBpI,+CCtIpB,IAAI9D,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/EyE,EAAYvJ,EAAQ,IACpBgW,EAAoBhW,EAAQ,IAC5B8Q,EAAoB9Q,EAAQ,GAC5B6Q,EAAsB7Q,EAAQ,GAkBlCE,EAAQ2c,KAjBR,WAEI,IADA,IAAI/J,KACKzO,EAAK,EAAGA,EAAKC,UAAUC,OAAQF,IACpCyO,EAAYzO,EAAK,GAAKC,UAAUD,GAIpC,GAA2B,IAAvByO,EAAYvO,OAAc,CAC1B,IAAIgF,EAAUc,QAAQyI,EAAY,IAI9B,OAAOA,EAAY,GAHnBA,EAAcA,EAAY,GAMlC,OAAO,IAAIkD,EAAkB3I,gBAAgByF,GAAaxQ,KAAK,IAAIwa,IAGvE,IAAIA,EAAgB,WAChB,SAASA,KAKT,OAHAA,EAAarb,UAAUlB,KAAO,SAAU2D,EAAYzB,GAChD,OAAOA,EAAOP,UAAU,IAAI6a,EAAe7Y,KAExC4Y,EANS,GAQpB5c,EAAQ4c,aAAeA,EAMvB,IAAIC,EAAkB,SAAU1X,GAE5B,SAAS0X,EAAevX,GACpBH,EAAO9E,KAAK4B,KAAMqD,GAClBrD,KAAK6a,UAAW,EAChB7a,KAAK2Q,eACL3Q,KAAK0I,iBAqCT,OA1CAjG,EAAUmY,EAAgB1X,GAO1B0X,EAAetb,UAAUqE,MAAQ,SAAUtD,GACvCL,KAAK2Q,YAAYtI,KAAKhI,IAE1Bua,EAAetb,UAAUuE,UAAY,WACjC,IAAI8M,EAAc3Q,KAAK2Q,YACnB/K,EAAM+K,EAAYvO,OACtB,GAAY,IAARwD,EACA5F,KAAKqD,YAAY5C,eAEhB,CACD,IAAK,IAAIxC,EAAI,EAAGA,EAAI2H,IAAQ5F,KAAK6a,SAAU5c,IAAK,CAC5C,IAAIoC,EAAasQ,EAAY1S,GACzB4D,EAAe6M,EAAoBrJ,kBAAkBrF,KAAMK,EAAYA,EAAYpC,GACnF+B,KAAK0I,eACL1I,KAAK0I,cAAcL,KAAKxG,GAE5B7B,KAAKY,IAAIiB,GAEb7B,KAAK2Q,YAAc,OAG3BiK,EAAetb,UAAUmH,WAAa,SAAUjB,EAAYkB,EAAYjB,EAAYkB,EAAYC,GAC5F,IAAK5G,KAAK6a,SAAU,CAChB7a,KAAK6a,UAAW,EAChB,IAAK,IAAI5c,EAAI,EAAGA,EAAI+B,KAAK0I,cAActG,OAAQnE,IAC3C,GAAIA,IAAMwH,EAAY,CAClB,IAAI5D,EAAe7B,KAAK0I,cAAczK,GACtC4D,EAAaC,cACb9B,KAAK4H,OAAO/F,GAGpB7B,KAAK0I,cAAgB,KAEzB1I,KAAKqD,YAAYlC,KAAKuF,IAEnBkU,EA3CW,CA4CpBjM,EAAkBpI,iBACpBxI,EAAQ6c,eAAiBA,gCCtFzB,IAAI1F,EAAarX,EAAQ,IAoDzBE,EAAQ8S,UAHR,WACI,OAAOqE,EAAWG,SAAS,kCClD/B,IAAI5S,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAQ/E2I,EAAoB,SAAUpI,GAE9B,SAASoI,EAAiBrM,EAAO2L,GAC7B1H,EAAO9E,KAAK4B,MACZA,KAAKf,MAAQA,EACbe,KAAK4K,UAAYA,EACjB5K,KAAKC,WAAY,EACb2K,IACA5K,KAAKC,WAAY,GAkCzB,OAzCAwC,EAAU6I,EAAkBpI,GAU5BoI,EAAiB9I,OAAS,SAAUvD,EAAO2L,GACvC,OAAO,IAAIU,EAAiBrM,EAAO2L,IAEvCU,EAAiBT,SAAW,SAAUU,GAClC,IAAIrF,EAAOqF,EAAMrF,KAAMjH,EAAQsM,EAAMtM,MAAO8C,EAAawJ,EAAMxJ,WAC3DmE,EACAnE,EAAWtB,YAGfsB,EAAWZ,KAAKlC,GACZ8C,EAAW+B,SAGfyH,EAAMrF,MAAO,EACblG,KAAKyK,SAASc,MAElBD,EAAiBhM,UAAUY,WAAa,SAAU6B,GAC9C,IAAI9C,EAAQe,KAAKf,MACb2L,EAAY5K,KAAK4K,UACrB,GAAIA,EACA,OAAOA,EAAUH,SAASa,EAAiBT,SAAU,GACjD3E,MAAM,EAAOjH,MAAOA,EAAO8C,WAAYA,IAI3CA,EAAWZ,KAAKlC,GACX8C,EAAW+B,QACZ/B,EAAWtB,YAIhB6K,EA1Ca,CANLzN,EAAQ,GAiDZiC,YACf/B,EAAQuN,iBAAmBA,gCCrD3BvN,EAAQ+c,KADR,2CCDA,IAAIC,EAASld,EAAQ,IAWrB,SAASwE,EAAc2Y,GACnB,OAAKA,EAGc,IAAfA,EAAI5Y,OACG4Y,EAAI,GAER,SAAeC,GAClB,OAAOD,EAAIlS,OAAO,SAAUoS,EAAMvW,GAAM,OAAOA,EAAGuW,IAAUD,IANrDF,EAAOD,KAJtB/c,EAAQiE,KAPR,WAEI,IADA,IAAIgZ,KACK9Y,EAAK,EAAGA,EAAKC,UAAUC,OAAQF,IACpC8Y,EAAI9Y,EAAK,GAAKC,UAAUD,GAE5B,OAAOG,EAAc2Y,IAezBjd,EAAQsE,cAAgBA,iBCvBxB,IAAI8Y,EAGJA,EAAK,WACJ,OAAOnb,KADH,GAIL,IAECmb,EAAIA,GAAKC,SAAS,cAATA,KAA6B,EAAIC,MAAM,QAC/C,MAAOtT,GAEc,iBAAXmC,SAAqBiR,EAAIjR,QAOrClM,EAAOD,QAAUod,gCClBjB,IAAI1Y,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/EoE,EAAgBlJ,EAAQ,IAExByd,EAAwB,SAAUpY,GAElC,SAASoY,EAAqBC,EAAiBC,GAC3C,IAAIna,EAAQrB,UACY,IAApBub,IAA8BA,EAAkBE,QAClC,IAAdD,IAAwBA,EAAYzM,OAAOC,mBAC/C9L,EAAO9E,KAAK4B,KAAMub,EAAiB,WAAc,OAAOla,EAAMqa,QAC9D1b,KAAKwb,UAAYA,EACjBxb,KAAK0b,MAAQ,EACb1b,KAAK2H,OAAS,EAuBlB,OA/BAlF,EAAU6Y,EAAsBpY,GAehCoY,EAAqBhc,UAAUgO,MAAQ,WAGnC,IAFA,IACI9M,EAAO+M,EADIL,EAANlN,KAAmBkN,QAASsO,EAA5Bxb,KAA2Cwb,WAE5CjO,EAASL,EAAQQ,WAAa1N,KAAK0b,MAAQnO,EAAOE,QAAU+N,KAC5Dhb,EAAQ+M,EAAOC,QAAQD,EAAOhC,MAAOgC,EAAOE,UAIpD,GAAIjN,EAAO,CACP,KAAO+M,EAASL,EAAQQ,SACpBH,EAAOzL,cAEX,MAAMtB,IAGd8a,EAAqBK,gBAAkB,GAChCL,EAhCiB,CADLzd,EAAQ,IAkCZqJ,gBACnBnJ,EAAQud,qBAAuBA,EAM/B,IAAIG,EAAiB,SAAUvY,GAE3B,SAASuY,EAAc7Q,EAAWgD,EAAMjG,QACtB,IAAVA,IAAoBA,EAAQiD,EAAUjD,OAAS,GACnDzE,EAAO9E,KAAK4B,KAAM4K,EAAWgD,GAC7B5N,KAAK4K,UAAYA,EACjB5K,KAAK4N,KAAOA,EACZ5N,KAAK2H,MAAQA,EACb3H,KAAKmN,QAAS,EACdnN,KAAK2H,MAAQiD,EAAUjD,MAAQA,EAoDnC,OA5DAlF,EAAUgZ,EAAevY,GAUzBuY,EAAcnc,UAAUmL,SAAW,SAAUc,EAAOkC,GAEhD,QADc,IAAVA,IAAoBA,EAAQ,IAC3BzN,KAAK8N,GACN,OAAO5K,EAAO5D,UAAUmL,SAASrM,KAAK4B,KAAMuL,EAAOkC,GAEvDzN,KAAKmN,QAAS,EAKd,IAAII,EAAS,IAAIkO,EAAczb,KAAK4K,UAAW5K,KAAK4N,MAEpD,OADA5N,KAAKY,IAAI2M,GACFA,EAAO9C,SAASc,EAAOkC,IAElCgO,EAAcnc,UAAU0O,eAAiB,SAAUpD,EAAWkD,EAAIL,QAChD,IAAVA,IAAoBA,EAAQ,GAChCzN,KAAKyN,MAAQ7C,EAAU8Q,MAAQjO,EAC/B,IAAIP,EAAUtC,EAAUsC,QAGxB,OAFAA,EAAQ7E,KAAKrI,MACbkN,EAAQ0O,KAAKH,EAAcI,cACpB,GAEXJ,EAAcnc,UAAUyO,eAAiB,SAAUnD,EAAWkD,EAAIL,QAChD,IAAVA,IAAoBA,EAAQ,IAGpCgO,EAAcnc,UAAU6O,SAAW,SAAU5C,EAAOkC,GAChD,IAAoB,IAAhBzN,KAAKmN,OACL,OAAOjK,EAAO5D,UAAU6O,SAAS/P,KAAK4B,KAAMuL,EAAOkC,IAG3DgO,EAAcI,YAAc,SAAUC,EAAGpZ,GACrC,OAAIoZ,EAAErO,QAAU/K,EAAE+K,MACVqO,EAAEnU,QAAUjF,EAAEiF,MACP,EAEFmU,EAAEnU,MAAQjF,EAAEiF,MACV,GAGC,EAGPmU,EAAErO,MAAQ/K,EAAE+K,MACV,GAGC,GAGTgO,EA7DU,CA8DnB1U,EAAcI,aAChBpJ,EAAQ0d,cAAgBA,gCCpGxB1d,EAAQge,YAVR,SAAqBC,EAAaC,GAC9B,IAAK,IAAIhe,EAAI,EAAG2H,EAAMqW,EAAU7Z,OAAQnE,EAAI2H,EAAK3H,IAG7C,IAFA,IAAIie,EAAWD,EAAUhe,GACrBke,EAAexd,OAAO0S,oBAAoB6K,EAAS5c,WAC9C8c,EAAI,EAAGC,EAAOF,EAAa/Z,OAAQga,EAAIC,EAAMD,IAAK,CACvD,IAAIE,EAASH,EAAaC,GAC1BJ,EAAY1c,UAAUgd,GAAUJ,EAAS5c,UAAUgd,mCCN/D,IAAIC,EAAmB,WAMnB,OALA,SAAyBC,EAAiBC,QACZ,IAAtBA,IAAgCA,EAAoB1N,OAAOC,mBAC/DhP,KAAKwc,gBAAkBA,EACvBxc,KAAKyc,kBAAoBA,GAJV,GAQvB1e,EAAQwe,gBAAkBA,gCCR1B,IAAIG,EAAoB7e,EAAQ,IAC5B8e,EAAwB,WACxB,SAASA,IACL3c,KAAK0I,iBAWT,OATAiU,EAAqBrd,UAAUsd,mBAAqB,WAEhD,OADA5c,KAAK0I,cAAcL,KAAK,IAAIqU,EAAkBH,gBAAgBvc,KAAK4K,UAAUsI,QACtElT,KAAK0I,cAActG,OAAS,GAEvCua,EAAqBrd,UAAUud,qBAAuB,SAAUlV,GAC5D,IAAImV,EAAmB9c,KAAK0I,cACxBqU,EAAqBD,EAAiBnV,GAC1CmV,EAAiBnV,GAAS,IAAI+U,EAAkBH,gBAAgBQ,EAAmBP,gBAAiBxc,KAAK4K,UAAUsI,QAEhHyJ,EAbiB,GAe5B5e,EAAQ4e,qBAAuBA,gCChB/B,IAAIK,EAAQnf,EAAQ,IAIpBE,EAAQkf,OAHR,SAAgBnQ,GACZ,OAAO,SAAUxM,GAAU,OAAOA,EAAOH,KAAK,IAAI6c,EAAMjJ,YAAYjH,oCCFxE,IAAIrK,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/EgM,EAAoB9Q,EAAQ,GAC5B6Q,EAAsB7Q,EAAQ,GAsDlCE,EAAQmf,eAdR,WAEI,IADA,IAAIvI,KACKzS,EAAK,EAAGA,EAAKC,UAAUC,OAAQF,IACpCyS,EAAKzS,EAAK,GAAKC,UAAUD,GAE7B,OAAO,SAAU5B,GACb,IAAIwM,EACiC,mBAA1B6H,EAAKA,EAAKvS,OAAS,KAC1B0K,EAAU6H,EAAKtJ,OAEnB,IAAIsF,EAAcgE,EAClB,OAAOrU,EAAOH,KAAK,IAAIgd,EAAuBxM,EAAa7D,MAInE,IAAIqQ,EAA0B,WAC1B,SAASA,EAAuBxM,EAAa7D,GACzC9M,KAAK2Q,YAAcA,EACnB3Q,KAAK8M,QAAUA,EAKnB,OAHAqQ,EAAuB7d,UAAUlB,KAAO,SAAU2D,EAAYzB,GAC1D,OAAOA,EAAOP,UAAU,IAAIqd,EAAyBrb,EAAY/B,KAAK2Q,YAAa3Q,KAAK8M,WAErFqQ,EARmB,GAe1BC,EAA4B,SAAUla,GAEtC,SAASka,EAAyB/Z,EAAasN,EAAa7D,GACxD5J,EAAO9E,KAAK4B,KAAMqD,GAClBrD,KAAK2Q,YAAcA,EACnB3Q,KAAK8M,QAAUA,EACf9M,KAAKmW,aACL,IAAIvQ,EAAM+K,EAAYvO,OACtBpC,KAAKkU,OAAS,IAAIxJ,MAAM9E,GACxB,IAAK,IAAI3H,EAAI,EAAGA,EAAI2H,EAAK3H,IACrB+B,KAAKmW,UAAU9N,KAAKpK,GAExB,IAASA,EAAI,EAAGA,EAAI2H,EAAK3H,IAAK,CAC1B,IAAIoC,EAAasQ,EAAY1S,GAC7B+B,KAAKY,IAAI8N,EAAoBrJ,kBAAkBrF,KAAMK,EAAYA,EAAYpC,KAsCrF,OAnDAwE,EAAU2a,EAA0Bla,GAgBpCka,EAAyB9d,UAAUmH,WAAa,SAAUjB,EAAYkB,EAAYjB,EAAYkB,EAAYC,GACtG5G,KAAKkU,OAAOzO,GAAciB,EAC1B,IAAIyP,EAAYnW,KAAKmW,UACrB,GAAIA,EAAU/T,OAAS,EAAG,CACtB,IAAIib,EAAQlH,EAAUvN,QAAQnD,IACf,IAAX4X,GACAlH,EAAUtN,OAAOwU,EAAO,KAIpCD,EAAyB9d,UAAUwH,eAAiB,aAGpDsW,EAAyB9d,UAAUqE,MAAQ,SAAU1E,GACjD,GAA8B,IAA1Be,KAAKmW,UAAU/T,OAAc,CAC7B,IAAIuS,GAAQ1V,GAAOmJ,OAAOpI,KAAKkU,QAC3BlU,KAAK8M,QACL9M,KAAK4U,YAAYD,GAGjB3U,KAAKqD,YAAYlC,KAAKwT,KAIlCyI,EAAyB9d,UAAUsV,YAAc,SAAUD,GACvD,IAAIpP,EACJ,IACIA,EAASvF,KAAK8M,QAAQtG,MAAMxG,KAAM2U,GAEtC,MAAO1T,GAEH,YADAjB,KAAKqD,YAAY7C,MAAMS,GAG3BjB,KAAKqD,YAAYlC,KAAKoE,IAEnB6X,EApDqB,CAqD9BzO,EAAkBpI,+CCjIpB,IAAI9D,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/E8P,EAAY5U,EAAQ,GACpBwJ,EAAaxJ,EAAQ,GACrByJ,EAAgBzJ,EAAQ,GACxB8Q,EAAoB9Q,EAAQ,GAC5B6Q,EAAsB7Q,EAAQ,GA4ClCE,EAAQuf,WALR,SAAoBC,GAChB,OAAO,SAAoCjd,GACvC,OAAOA,EAAOH,KAAK,IAAIqd,EAAeD,MAI9C,IAAIC,EAAkB,WAClB,SAASA,EAAeD,GACpBvd,KAAKud,gBAAkBA,EAK3B,OAHAC,EAAele,UAAUlB,KAAO,SAAU2D,EAAYzB,GAClD,OAAOA,EAAOP,UAAU,IAAI0d,EAAiB1b,EAAY/B,KAAKud,mBAE3DC,EAPW,GAclBC,EAAoB,SAAUva,GAE9B,SAASua,EAAiBpa,EAAaka,GACnCra,EAAO9E,KAAK4B,KAAMqD,GAClBrD,KAAKqD,YAAcA,EACnBrD,KAAKud,gBAAkBA,EACvBvd,KAAK0d,aAmDT,OAxDAjb,EAAUgb,EAAkBva,GAO5Bua,EAAiBne,UAAUmH,WAAa,SAAUjB,EAAYkB,EAAYjB,EAAYkB,EAAYC,GAC9F5G,KAAK0d,WAAW9W,IAEpB6W,EAAiBne,UAAUuH,YAAc,SAAUrG,EAAOoG,GACtD5G,KAAK4D,OAAOpD,IAEhBid,EAAiBne,UAAUwH,eAAiB,SAAUF,GAClD5G,KAAK0d,WAAW9W,IAEpB6W,EAAiBne,UAAUqE,MAAQ,SAAU1E,GACzCe,KAAKkK,OAAO/I,KAAKlC,IAErBwe,EAAiBne,UAAUsE,OAAS,SAAU3C,GAC1CjB,KAAKkK,OAAO1J,MAAMS,GAClBjB,KAAKqD,YAAY7C,MAAMS,GACvBjB,KAAK2d,kCAETF,EAAiBne,UAAUuE,UAAY,WACnC7D,KAAKkK,OAAOzJ,WACZT,KAAKqD,YAAY5C,WACjBT,KAAK2d,kCAETF,EAAiBne,UAAUqe,+BAAiC,WACpD3d,KAAK4d,qBACL5d,KAAK4d,oBAAoB9b,eAGjC2b,EAAiBne,UAAUoe,WAAa,SAAU9W,QAC7B,IAAbA,IAAuBA,EAAW,MAClCA,IACA5G,KAAK4H,OAAOhB,GACZA,EAAS9E,eAEb,IAAI+b,EAAa7d,KAAKkK,OAClB2T,GACAA,EAAWpd,WAEf,IAAIyJ,EAASlK,KAAKkK,OAAS,IAAIuI,EAAUrJ,QACzCpJ,KAAKqD,YAAYlC,KAAK+I,GACtB,IAAI4T,EAAkBzW,EAAWQ,SAAS7H,KAAKud,gBAAzBlW,GACtB,GAAIyW,IAAoBxW,EAAcQ,YAAa,CAC/C,IAAI7G,EAAMqG,EAAcQ,YAAYC,EACpC/H,KAAKqD,YAAY7C,MAAMS,GACvBjB,KAAKkK,OAAO1J,MAAMS,QAGlBjB,KAAKY,IAAIZ,KAAK4d,oBAAsBlP,EAAoBrJ,kBAAkBrF,KAAM8d,KAGjFL,EAzDa,CA0DtB9O,EAAkBpI,+CC9HpB,IAAI9D,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/E8P,EAAY5U,EAAQ,GACpBiF,EAAiBjF,EAAQ,GACzBwJ,EAAaxJ,EAAQ,GACrByJ,EAAgBzJ,EAAQ,GACxB8Q,EAAoB9Q,EAAQ,GAC5B6Q,EAAsB7Q,EAAQ,GA6ClCE,EAAQggB,aAHR,SAAsBC,EAAUT,GAC5B,OAAO,SAAUjd,GAAU,OAAOA,EAAOH,KAAK,IAAI8d,EAAqBD,EAAUT,MAGrF,IAAIU,EAAwB,WACxB,SAASA,EAAqBD,EAAUT,GACpCvd,KAAKge,SAAWA,EAChBhe,KAAKud,gBAAkBA,EAK3B,OAHAU,EAAqB3e,UAAUlB,KAAO,SAAU2D,EAAYzB,GACxD,OAAOA,EAAOP,UAAU,IAAIme,EAAuBnc,EAAY/B,KAAKge,SAAUhe,KAAKud,mBAEhFU,EARiB,GAexBC,EAA0B,SAAUhb,GAEpC,SAASgb,EAAuB7a,EAAa2a,EAAUT,GACnDra,EAAO9E,KAAK4B,KAAMqD,GAClBrD,KAAKge,SAAWA,EAChBhe,KAAKud,gBAAkBA,EACvBvd,KAAKme,YACLne,KAAKY,IAAIZ,KAAKoe,iBAAmB1P,EAAoBrJ,kBAAkBrF,KAAMge,EAAUA,IAkG3F,OAxGAvb,EAAUyb,EAAwBhb,GAQlCgb,EAAuB5e,UAAUqE,MAAQ,SAAU1E,GAC/C,IAAIkf,EAAWne,KAAKme,SACpB,GAAIA,EAEA,IADA,IAAIvY,EAAMuY,EAAS/b,OACVnE,EAAI,EAAGA,EAAI2H,EAAK3H,IACrBkgB,EAASlgB,GAAGiM,OAAO/I,KAAKlC,IAIpCif,EAAuB5e,UAAUsE,OAAS,SAAU3C,GAChD,IAAIkd,EAAWne,KAAKme,SAEpB,GADAne,KAAKme,SAAW,KACZA,EAGA,IAFA,IAAIvY,EAAMuY,EAAS/b,OACfuF,GAAS,IACJA,EAAQ/B,GAAK,CAClB,IAAIxB,EAAU+Z,EAASxW,GACvBvD,EAAQ8F,OAAO1J,MAAMS,GACrBmD,EAAQvC,aAAaC,cAG7BoB,EAAO5D,UAAUsE,OAAOxF,KAAK4B,KAAMiB,IAEvCid,EAAuB5e,UAAUuE,UAAY,WACzC,IAAIsa,EAAWne,KAAKme,SAEpB,GADAne,KAAKme,SAAW,KACZA,EAGA,IAFA,IAAIvY,EAAMuY,EAAS/b,OACfuF,GAAS,IACJA,EAAQ/B,GAAK,CAClB,IAAIxB,EAAU+Z,EAASxW,GACvBvD,EAAQ8F,OAAOzJ,WACf2D,EAAQvC,aAAaC,cAG7BoB,EAAO5D,UAAUuE,UAAUzF,KAAK4B,OAEpCke,EAAuB5e,UAAUuF,aAAe,WAC5C,IAAIsZ,EAAWne,KAAKme,SAEpB,GADAne,KAAKme,SAAW,KACZA,EAGA,IAFA,IAAIvY,EAAMuY,EAAS/b,OACfuF,GAAS,IACJA,EAAQ/B,GAAK,CAClB,IAAIxB,EAAU+Z,EAASxW,GACvBvD,EAAQ8F,OAAOpI,cACfsC,EAAQvC,aAAaC,gBAIjCoc,EAAuB5e,UAAUmH,WAAa,SAAUjB,EAAYkB,EAAYjB,EAAYkB,EAAYC,GACpG,GAAIpB,IAAexF,KAAKge,SAAU,CAC9B,IAAIT,EAAkBvd,KAAKud,gBACvBO,EAAkBzW,EAAWQ,SAAS0V,EAApBlW,CAAqCX,GAC3D,GAAIoX,IAAoBxW,EAAcQ,YAClC,OAAO9H,KAAKQ,MAAM8G,EAAcQ,YAAYC,GAG5C,IAAIsW,EAAW,IAAI5L,EAAUrJ,QACzBvH,EAAe,IAAIiB,EAAeoB,aAClCE,GAAY8F,OAAQmU,EAAUxc,aAAcA,GAChD7B,KAAKme,SAAS9V,KAAKjE,GACnB,IAAI+S,EAAoBzI,EAAoBrJ,kBAAkBrF,KAAM8d,EAAiB1Z,GACjF+S,EAAkBrT,OAClB9D,KAAKse,YAAYte,KAAKme,SAAS/b,OAAS,IAGxC+U,EAAkB/S,QAAUA,EAC5BvC,EAAajB,IAAIuW,IAErBnX,KAAKqD,YAAYlC,KAAKkd,QAI1Bre,KAAKse,YAAYte,KAAKme,SAASvV,QAAQpD,KAG/C0Y,EAAuB5e,UAAUuH,YAAc,SAAU5F,GACrDjB,KAAKQ,MAAMS,IAEfid,EAAuB5e,UAAUwH,eAAiB,SAAUyX,GACpDA,IAAUve,KAAKoe,kBACfpe,KAAKse,YAAYte,KAAKme,SAASvV,QAAQ2V,EAAMna,WAGrD8Z,EAAuB5e,UAAUgf,YAAc,SAAU3W,GACrD,IAAe,IAAXA,EAAJ,CAGA,IAAIwW,EAAWne,KAAKme,SAChB/Z,EAAU+Z,EAASxW,GACnBuC,EAAS9F,EAAQ8F,OAAQrI,EAAeuC,EAAQvC,aACpDsc,EAAStV,OAAOlB,EAAO,GACvBuC,EAAOzJ,WACPoB,EAAaC,gBAEVoc,EAzGmB,CA0G5BvP,EAAkBpI,+CCjLpB,IAAI9D,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/E8P,EAAY5U,EAAQ,GACpB+Y,EAAU/Y,EAAQ,GAClBmL,EAAenL,EAAQ,GACvB2gB,EAAc3gB,EAAQ,IACtBoN,EAAgBpN,EAAQ,IAwB5BE,EAAQ+U,WAvBR,SAAoB2L,GAChB,IAAI7T,EAAYgM,EAAQ3P,MACpByX,EAAyB,KACzBC,EAAgB5P,OAAOC,kBAgB3B,OAfI/D,EAAcT,YAAYrI,UAAU,MACpCyI,EAAYzI,UAAU,IAEtB8I,EAAcT,YAAYrI,UAAU,IACpCyI,EAAYzI,UAAU,GAEjBqc,EAAYjQ,UAAUpM,UAAU,MACrCwc,EAAgBxc,UAAU,IAE1B8I,EAAcT,YAAYrI,UAAU,IACpCyI,EAAYzI,UAAU,GAEjBqc,EAAYjQ,UAAUpM,UAAU,MACrCuc,EAAyBvc,UAAU,IAEhC,SAAoC7B,GACvC,OAAOA,EAAOH,KAAK,IAAIye,EAAmBH,EAAgBC,EAAwBC,EAAe/T,MAIzG,IAAIgU,EAAsB,WACtB,SAASA,EAAmBH,EAAgBC,EAAwBC,EAAe/T,GAC/E5K,KAAKye,eAAiBA,EACtBze,KAAK0e,uBAAyBA,EAC9B1e,KAAK2e,cAAgBA,EACrB3e,KAAK4K,UAAYA,EAKrB,OAHAgU,EAAmBtf,UAAUlB,KAAO,SAAU2D,EAAYzB,GACtD,OAAOA,EAAOP,UAAU,IAAI8e,EAAqB9c,EAAY/B,KAAKye,eAAgBze,KAAK0e,uBAAwB1e,KAAK2e,cAAe3e,KAAK4K,aAErIgU,EAVe,GAYtBE,EAAkB,SAAU5b,GAE5B,SAAS4b,IACL5b,EAAOsD,MAAMxG,KAAMmC,WACnBnC,KAAK+e,sBAAwB,EAajC,OAhBAtc,EAAUqc,EAAgB5b,GAK1B4b,EAAexf,UAAU6B,KAAO,SAAUlC,GACtCe,KAAK+e,wBACL7b,EAAO5D,UAAU6B,KAAK/C,KAAK4B,KAAMf,IAErCN,OAAOC,eAAekgB,EAAexf,UAAW,wBAC5CP,IAAK,WACD,OAAOiB,KAAK+e,uBAEhBjgB,YAAY,EACZD,cAAc,IAEXigB,EAjBW,CAkBpBrM,EAAUrJ,SAMRyV,EAAwB,SAAU3b,GAElC,SAAS2b,EAAqBxb,EAAaob,EAAgBC,EAAwBC,EAAe/T,GAC9F1H,EAAO9E,KAAK4B,KAAMqD,GAClBrD,KAAKqD,YAAcA,EACnBrD,KAAKye,eAAiBA,EACtBze,KAAK0e,uBAAyBA,EAC9B1e,KAAK2e,cAAgBA,EACrB3e,KAAK4K,UAAYA,EACjB5K,KAAKgf,WACL,IAAI9U,EAASlK,KAAK0d,aAClB,GAA+B,OAA3BgB,GAAmCA,GAA0B,EAAG,CAChE,IAAIO,GAAeld,WAAY/B,KAAMkK,OAAQA,EAAQ9F,QAAS,MAC1D8a,GAAkBT,eAAgBA,EAAgBC,uBAAwBA,EAAwB3c,WAAY/B,KAAM4K,UAAWA,GACnI5K,KAAKY,IAAIgK,EAAUH,SAAS0U,EAAqBV,EAAgBQ,IACjEjf,KAAKY,IAAIgK,EAAUH,SAAS2U,EAAwBV,EAAwBQ,QAE3E,CACD,IAAIG,GAAsBtd,WAAY/B,KAAMkK,OAAQA,EAAQuU,eAAgBA,GAC5Eze,KAAKY,IAAIgK,EAAUH,SAAS6U,EAA4Bb,EAAgBY,KA6ChF,OA/DA5c,EAAUoc,EAAsB3b,GAqBhC2b,EAAqBvf,UAAUqE,MAAQ,SAAU1E,GAG7C,IAFA,IAAI+f,EAAUhf,KAAKgf,QACfpZ,EAAMoZ,EAAQ5c,OACTnE,EAAI,EAAGA,EAAI2H,EAAK3H,IAAK,CAC1B,IAAIogB,EAAWW,EAAQ/gB,GAClBogB,EAASva,SACVua,EAASld,KAAKlC,GACVof,EAASkB,sBAAwBvf,KAAK2e,eACtC3e,KAAKse,YAAYD,MAKjCQ,EAAqBvf,UAAUsE,OAAS,SAAU3C,GAE9C,IADA,IAAI+d,EAAUhf,KAAKgf,QACZA,EAAQ5c,OAAS,GACpB4c,EAAQtR,QAAQlN,MAAMS,GAE1BjB,KAAKqD,YAAY7C,MAAMS,IAE3B4d,EAAqBvf,UAAUuE,UAAY,WAEvC,IADA,IAAImb,EAAUhf,KAAKgf,QACZA,EAAQ5c,OAAS,GAAG,CACvB,IAAIod,EAAWR,EAAQtR,QAClB8R,EAAS1b,QACV0b,EAAS/e,WAGjBT,KAAKqD,YAAY5C,YAErBoe,EAAqBvf,UAAUoe,WAAa,WACxC,IAAIxT,EAAS,IAAI4U,EAIjB,OAHA9e,KAAKgf,QAAQ3W,KAAK6B,GACAlK,KAAKqD,YACXlC,KAAK+I,GACVA,GAEX2U,EAAqBvf,UAAUgf,YAAc,SAAUpU,GACnDA,EAAOzJ,WACP,IAAIue,EAAUhf,KAAKgf,QACnBA,EAAQnW,OAAOmW,EAAQpW,QAAQsB,GAAS,IAErC2U,EAhEiB,CAiE1B7V,EAAa/F,YACf,SAASqc,EAA2B/T,GAChC,IAAIxJ,EAAawJ,EAAMxJ,WAAY0c,EAAiBlT,EAAMkT,eAAgBvU,EAASqB,EAAMrB,OACrFA,GACAnI,EAAWuc,YAAYpU,GAE3BqB,EAAMrB,OAASnI,EAAW2b,aAC1B1d,KAAKyK,SAASc,EAAOkT,GAEzB,SAASW,EAAuB7T,GAC5B,IAAIkT,EAAiBlT,EAAMkT,eAAgB1c,EAAawJ,EAAMxJ,WAAY6I,EAAYW,EAAMX,UAAW8T,EAAyBnT,EAAMmT,uBAGlIta,GAAYmJ,OADHvN,KACmB6B,aAAc,MAC1C4d,GAAkB1d,WAAYA,EAAYmI,OAHjCnI,EAAW2b,aAGsCtZ,QAASA,GACvEA,EAAQvC,aAAe+I,EAAUH,SAAS0U,EAAqBV,EAAgBgB,GAHlEzf,KAINY,IAAIwD,EAAQvC,cAJN7B,KAKNyK,SAASc,EAAOmT,GAE3B,SAASS,EAAoB5T,GACzB,IAAIxJ,EAAawJ,EAAMxJ,WAAYmI,EAASqB,EAAMrB,OAAQ9F,EAAUmH,EAAMnH,QACtEA,GAAWA,EAAQmJ,QAAUnJ,EAAQvC,cACrCuC,EAAQmJ,OAAO3F,OAAOxD,EAAQvC,cAElCE,EAAWuc,YAAYpU,kCC/J3B,IAAIzH,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/EqG,EAAenL,EAAQ,GACvB4U,EAAY5U,EAAQ,GAuDxBE,EAAQ2hB,YANR,SAAqBC,EAAYC,GAE7B,YADyB,IAArBA,IAA+BA,EAAmB,GAC/C,SAAqCtf,GACxC,OAAOA,EAAOH,KAAK,IAAI0f,EAAoBF,EAAYC,MAI/D,IAAIC,EAAuB,WACvB,SAASA,EAAoBF,EAAYC,GACrC5f,KAAK2f,WAAaA,EAClB3f,KAAK4f,iBAAmBA,EAK5B,OAHAC,EAAoBvgB,UAAUlB,KAAO,SAAU2D,EAAYzB,GACvD,OAAOA,EAAOP,UAAU,IAAI+f,EAAsB/d,EAAY/B,KAAK2f,WAAY3f,KAAK4f,oBAEjFC,EARgB,GAevBC,EAAyB,SAAU5c,GAEnC,SAAS4c,EAAsBzc,EAAasc,EAAYC,GACpD1c,EAAO9E,KAAK4B,KAAMqD,GAClBrD,KAAKqD,YAAcA,EACnBrD,KAAK2f,WAAaA,EAClB3f,KAAK4f,iBAAmBA,EACxB5f,KAAKgf,SAAW,IAAIvM,EAAUrJ,SAC9BpJ,KAAKwL,MAAQ,EACbnI,EAAYlC,KAAKnB,KAAKgf,QAAQ,IA2ClC,OAnDAvc,EAAUqd,EAAuB5c,GAUjC4c,EAAsBxgB,UAAUqE,MAAQ,SAAU1E,GAM9C,IALA,IAAI2gB,EAAoB5f,KAAK4f,iBAAmB,EAAK5f,KAAK4f,iBAAmB5f,KAAK2f,WAC9Etc,EAAcrD,KAAKqD,YACnBsc,EAAa3f,KAAK2f,WAClBX,EAAUhf,KAAKgf,QACfpZ,EAAMoZ,EAAQ5c,OACTnE,EAAI,EAAGA,EAAI2H,IAAQ5F,KAAK8D,OAAQ7F,IACrC+gB,EAAQ/gB,GAAGkD,KAAKlC,GAEpB,IAAIX,EAAI0B,KAAKwL,MAAQmU,EAAa,EAIlC,GAHIrhB,GAAK,GAAKA,EAAIshB,GAAqB,IAAM5f,KAAK8D,QAC9Ckb,EAAQtR,QAAQjN,aAEdT,KAAKwL,MAAQoU,GAAqB,IAAM5f,KAAK8D,OAAQ,CACvD,IAAIua,EAAW,IAAI5L,EAAUrJ,QAC7B4V,EAAQ3W,KAAKgW,GACbhb,EAAYlC,KAAKkd,KAGzByB,EAAsBxgB,UAAUsE,OAAS,SAAU3C,GAC/C,IAAI+d,EAAUhf,KAAKgf,QACnB,GAAIA,EACA,KAAOA,EAAQ5c,OAAS,IAAMpC,KAAK8D,QAC/Bkb,EAAQtR,QAAQlN,MAAMS,GAG9BjB,KAAKqD,YAAY7C,MAAMS,IAE3B6e,EAAsBxgB,UAAUuE,UAAY,WACxC,IAAImb,EAAUhf,KAAKgf,QACnB,GAAIA,EACA,KAAOA,EAAQ5c,OAAS,IAAMpC,KAAK8D,QAC/Bkb,EAAQtR,QAAQjN,WAGxBT,KAAKqD,YAAY5C,YAErBqf,EAAsBxgB,UAAUuF,aAAe,WAC3C7E,KAAKwL,MAAQ,EACbxL,KAAKgf,QAAU,MAEZc,EApDkB,CAqD3B9W,EAAa/F,0CClIf,IAAIR,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/E8P,EAAY5U,EAAQ,GACpB8Q,EAAoB9Q,EAAQ,GAC5B6Q,EAAsB7Q,EAAQ,GA0ClCE,EAAQmM,OALR,SAAgB6V,GACZ,OAAO,SAAgCzf,GACnC,OAAOA,EAAOH,KAAK,IAAIqd,EAAeuC,MAI9C,IAAIvC,EAAkB,WAClB,SAASA,EAAeuC,GACpB/f,KAAK+f,iBAAmBA,EAU5B,OARAvC,EAAele,UAAUlB,KAAO,SAAU2D,EAAYzB,GAClD,IAAI0f,EAAmB,IAAIvC,EAAiB1b,GACxCke,EAAqB3f,EAAOP,UAAUigB,GAI1C,OAHKC,EAAmBnc,QACpBkc,EAAiBpf,IAAI8N,EAAoBrJ,kBAAkB2a,EAAkBhgB,KAAK+f,mBAE/EE,GAEJzC,EAZW,GAmBlBC,EAAoB,SAAUva,GAE9B,SAASua,EAAiBpa,GACtBH,EAAO9E,KAAK4B,KAAMqD,GAClBrD,KAAKkK,OAAS,IAAIuI,EAAUrJ,QAC5B/F,EAAYlC,KAAKnB,KAAKkK,QAkC1B,OAtCAzH,EAAUgb,EAAkBva,GAM5Bua,EAAiBne,UAAUmH,WAAa,SAAUjB,EAAYkB,EAAYjB,EAAYkB,EAAYC,GAC9F5G,KAAK0d,cAETD,EAAiBne,UAAUuH,YAAc,SAAUrG,EAAOoG,GACtD5G,KAAK4D,OAAOpD,IAEhBid,EAAiBne,UAAUwH,eAAiB,SAAUF,GAClD5G,KAAK6D,aAET4Z,EAAiBne,UAAUqE,MAAQ,SAAU1E,GACzCe,KAAKkK,OAAO/I,KAAKlC,IAErBwe,EAAiBne,UAAUsE,OAAS,SAAU3C,GAC1CjB,KAAKkK,OAAO1J,MAAMS,GAClBjB,KAAKqD,YAAY7C,MAAMS,IAE3Bwc,EAAiBne,UAAUuE,UAAY,WACnC7D,KAAKkK,OAAOzJ,WACZT,KAAKqD,YAAY5C,YAErBgd,EAAiBne,UAAUuF,aAAe,WACtC7E,KAAKkK,OAAS,MAElBuT,EAAiBne,UAAUoe,WAAa,WACpC,IAAIG,EAAa7d,KAAKkK,OAClB2T,GACAA,EAAWpd,WAEf,IAAI4C,EAAcrD,KAAKqD,YACnB6c,EAAYlgB,KAAKkK,OAAS,IAAIuI,EAAUrJ,QAC5C/F,EAAYlC,KAAK+e,IAEdzC,EAvCa,CAwCtB9O,EAAkBpI,+CC7GpB,IAAI4Z,EAAWtiB,EAAQ,IACvB,SAASuiB,EAAeC,EAAKpa,EAAM0B,GAC/B,OAAc,IAAVA,GACQ1B,IAEZoa,EAAIhY,KAAKpC,GACFoa,GAKXtiB,EAAQuiB,QAHR,WACI,OAAOH,EAASrX,OAAOsX,qCCT3B,IAAI3d,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/EiU,EAAU/Y,EAAQ,GAClB0iB,EAAW1iB,EAAQ,IACnB8Q,EAAoB9Q,EAAQ,GAC5B6Q,EAAsB7Q,EAAQ,GAyDlCE,EAAQyiB,YARR,SAAqBC,EAAKC,EAAgB9V,GAEtC,YADkB,IAAdA,IAAwBA,EAAYgM,EAAQ3P,OACzC,SAAU3G,GACb,IAAIqgB,EAAkBJ,EAASxL,OAAO0L,GAClCG,EAAUD,GAAoBF,EAAM7V,EAAUsI,MAASS,KAAKkN,IAAIJ,GACpE,OAAOngB,EAAOH,KAAK,IAAI2gB,EAAoBF,EAASD,EAAiBD,EAAgB9V,MAI7F,IAAIkW,EAAuB,WACvB,SAASA,EAAoBF,EAASD,EAAiBD,EAAgB9V,GACnE5K,KAAK4gB,QAAUA,EACf5gB,KAAK2gB,gBAAkBA,EACvB3gB,KAAK0gB,eAAiBA,EACtB1gB,KAAK4K,UAAYA,EAKrB,OAHAkW,EAAoBxhB,UAAUlB,KAAO,SAAU2D,EAAYzB,GACvD,OAAOA,EAAOP,UAAU,IAAIghB,EAAsBhf,EAAY/B,KAAK2gB,gBAAiB3gB,KAAK4gB,QAAS5gB,KAAK0gB,eAAgB1gB,KAAK4K,aAEzHkW,EAVgB,GAiBvBC,EAAyB,SAAU7d,GAEnC,SAAS6d,EAAsB1d,EAAasd,EAAiBC,EAASF,EAAgB9V,GAClF1H,EAAO9E,KAAK4B,KAAMqD,GAClBrD,KAAK2gB,gBAAkBA,EACvB3gB,KAAK4gB,QAAUA,EACf5gB,KAAK0gB,eAAiBA,EACtB1gB,KAAK4K,UAAYA,EACjB5K,KAAKuN,OAAS,KACdvN,KAAKghB,kBAgCT,OAxCAve,EAAUse,EAAuB7d,GAUjC6d,EAAsBE,gBAAkB,SAAUlf,GAC9C,IAAI2e,EAAiB3e,EAAW2e,eAChC3e,EAAWgC,yBACXhC,EAAWnB,IAAI8N,EAAoBrJ,kBAAkBtD,EAAY2e,KAErEK,EAAsBzhB,UAAU0hB,gBAAkB,WAC9C,IAAIzT,EAASvN,KAAKuN,OACdA,EAMAvN,KAAKuN,OAASA,EAAO9C,SAASzK,KAAMA,KAAK4gB,SAGzC5gB,KAAKY,IAAIZ,KAAKuN,OAASvN,KAAK4K,UAAUH,SAASsW,EAAsBE,gBAAiBjhB,KAAK4gB,QAAS5gB,QAG5G+gB,EAAsBzhB,UAAUqE,MAAQ,SAAU1E,GACzCe,KAAK2gB,iBACN3gB,KAAKghB,kBAET9d,EAAO5D,UAAUqE,MAAMvF,KAAK4B,KAAMf,IAEtC8hB,EAAsBzhB,UAAUuF,aAAe,WAC3C7E,KAAKuN,OAAS,KACdvN,KAAK4K,UAAY,KACjB5K,KAAK0gB,eAAiB,MAEnBK,EAzCkB,CA0C3BpS,EAAkBpI,+CC7HpB,IAAI9D,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAS/Eue,EAAgB,SAAUhe,GAE1B,SAASge,IACL,IAAIjgB,EAAMiC,EAAO9E,KAAK4B,KAAM,wBAC5BA,KAAKxB,KAAOyC,EAAIzC,KAAO,eACvBwB,KAAK2M,MAAQ1L,EAAI0L,MACjB3M,KAAK4M,QAAU3L,EAAI2L,QAEvB,OAPAnK,EAAUye,EAAche,GAOjBge,EARS,CASlBxf,OACF3D,EAAQmjB,aAAeA,gCCtBvB,IAAIze,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/EiU,EAAU/Y,EAAQ,GAClB0iB,EAAW1iB,EAAQ,IACnBmL,EAAenL,EAAQ,GACvBsjB,EAAiBtjB,EAAQ,IAwE7BE,EAAQqjB,QANR,SAAiBX,EAAK7V,QACA,IAAdA,IAAwBA,EAAYgM,EAAQ3P,OAChD,IAAI0Z,EAAkBJ,EAASxL,OAAO0L,GAClCG,EAAUD,GAAoBF,EAAM7V,EAAUsI,MAASS,KAAKkN,IAAIJ,GACpE,OAAO,SAAUngB,GAAU,OAAOA,EAAOH,KAAK,IAAIkhB,EAAgBT,EAASD,EAAiB/V,EAAW,IAAIuW,EAAeD,iBAG9H,IAAIG,EAAmB,WACnB,SAASA,EAAgBT,EAASD,EAAiB/V,EAAW0W,GAC1DthB,KAAK4gB,QAAUA,EACf5gB,KAAK2gB,gBAAkBA,EACvB3gB,KAAK4K,UAAYA,EACjB5K,KAAKshB,cAAgBA,EAKzB,OAHAD,EAAgB/hB,UAAUlB,KAAO,SAAU2D,EAAYzB,GACnD,OAAOA,EAAOP,UAAU,IAAIwhB,EAAkBxf,EAAY/B,KAAK2gB,gBAAiB3gB,KAAK4gB,QAAS5gB,KAAK4K,UAAW5K,KAAKshB,iBAEhHD,EAVY,GAiBnBE,EAAqB,SAAUre,GAE/B,SAASqe,EAAkBle,EAAasd,EAAiBC,EAAShW,EAAW0W,GACzEpe,EAAO9E,KAAK4B,KAAMqD,GAClBrD,KAAK2gB,gBAAkBA,EACvB3gB,KAAK4gB,QAAUA,EACf5gB,KAAK4K,UAAYA,EACjB5K,KAAKshB,cAAgBA,EACrBthB,KAAKuN,OAAS,KACdvN,KAAKghB,kBA8BT,OAtCAve,EAAU8e,EAAmBre,GAU7Bqe,EAAkBN,gBAAkB,SAAUlf,GAC1CA,EAAWvB,MAAMuB,EAAWuf,gBAEhCC,EAAkBjiB,UAAU0hB,gBAAkB,WAC1C,IAAIzT,EAASvN,KAAKuN,OACdA,EAMAvN,KAAKuN,OAASA,EAAO9C,SAASzK,KAAMA,KAAK4gB,SAGzC5gB,KAAKY,IAAIZ,KAAKuN,OAASvN,KAAK4K,UAAUH,SAAS8W,EAAkBN,gBAAiBjhB,KAAK4gB,QAAS5gB,QAGxGuhB,EAAkBjiB,UAAUqE,MAAQ,SAAU1E,GACrCe,KAAK2gB,iBACN3gB,KAAKghB,kBAET9d,EAAO5D,UAAUqE,MAAMvF,KAAK4B,KAAMf,IAEtCsiB,EAAkBjiB,UAAUuF,aAAe,WACvC7E,KAAKuN,OAAS,KACdvN,KAAK4K,UAAY,KACjB5K,KAAKshB,cAAgB,MAElBC,EAvCc,CAwCvBvY,EAAa/F,0CC1If,IAAIR,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/EqG,EAAenL,EAAQ,GACvB+Y,EAAU/Y,EAAQ,GAKtBE,EAAQyjB,aAJR,SAAsB5W,GAElB,YADkB,IAAdA,IAAwBA,EAAYgM,EAAQ3P,OACzC,SAAU3G,GAAU,OAAOA,EAAOH,KAAK,IAAIshB,EAAqB7W,MAG3E,IAAI8W,EAAgB,WAKhB,OAJA,SAAsBziB,EAAO0iB,GACzB3hB,KAAKf,MAAQA,EACbe,KAAK2hB,SAAWA,GAHJ,GAOpB5jB,EAAQ2jB,aAAeA,EAEvB,IAAID,EAAwB,WACxB,SAASA,EAAqB7W,GAC1B5K,KAAK4K,UAAYA,EAKrB,OAHA6W,EAAqBniB,UAAUlB,KAAO,SAAU8Q,EAAU5O,GACtD,OAAOA,EAAOP,UAAU,IAAI6hB,EAAuB1S,EAAUlP,KAAK4K,aAE/D6W,EAPiB,GAcxBG,EAA0B,SAAU1e,GAEpC,SAAS0e,EAAuBve,EAAauH,GACzC1H,EAAO9E,KAAK4B,KAAMqD,GAClBrD,KAAK4K,UAAYA,EACjB5K,KAAK6hB,SAAW,EAChB7hB,KAAK6hB,SAAWjX,EAAUsI,MAQ9B,OAbAzQ,EAAUmf,EAAwB1e,GAOlC0e,EAAuBtiB,UAAUqE,MAAQ,SAAU1E,GAC/C,IAAIiU,EAAMlT,KAAK4K,UAAUsI,MACrB4O,EAAO5O,EAAMlT,KAAK6hB,SACtB7hB,KAAK6hB,SAAW3O,EAChBlT,KAAKqD,YAAYlC,KAAK,IAAIugB,EAAaziB,EAAO6iB,KAE3CF,EAdmB,CAe5B5Y,EAAa/F,0CClDf,IAAI2T,EAAU/Y,EAAQ,GAClBkkB,EAAiBlkB,EAAQ,IAC7BE,EAAQ2jB,aAAeK,EAAeL,aAWtC3jB,EAAQyjB,aAJR,SAAsB5W,GAElB,YADkB,IAAdA,IAAwBA,EAAYgM,EAAQ3P,OACzC8a,EAAeP,aAAa5W,EAA5BmX,CAAuC/hB,qCCXlD,IAAIyC,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/EqG,EAAenL,EAAQ,GACvB+Y,EAAU/Y,EAAQ,GAClBmkB,EAAankB,EAAQ,IA6CzBE,EAAQkkB,aALR,SAAsB7P,EAAUxH,EAAWpJ,GAGvC,YAFkB,IAAdoJ,IAAwBA,EAAYgM,EAAQ3P,YACjC,IAAXzF,IAAqBA,EAASwgB,EAAWxQ,uBACtC,SAAUlR,GAAU,OAAOA,EAAOH,KAAK,IAAI+hB,EAAqB9P,EAAUxH,EAAWpJ,EAAOiQ,QAASjQ,EAAOkQ,aAGvH,IAAIwQ,EAAwB,WACxB,SAASA,EAAqB9P,EAAUxH,EAAW6G,EAASC,GACxD1R,KAAKoS,SAAWA,EAChBpS,KAAK4K,UAAYA,EACjB5K,KAAKyR,QAAUA,EACfzR,KAAK0R,SAAWA,EAKpB,OAHAwQ,EAAqB5iB,UAAUlB,KAAO,SAAU2D,EAAYzB,GACxD,OAAOA,EAAOP,UAAU,IAAIoiB,EAAuBpgB,EAAY/B,KAAKoS,SAAUpS,KAAK4K,UAAW5K,KAAKyR,QAASzR,KAAK0R,YAE9GwQ,EAViB,GAiBxBC,EAA0B,SAAUjf,GAEpC,SAASif,EAAuB9e,EAAa+O,EAAUxH,EAAW6G,EAASC,GACvExO,EAAO9E,KAAK4B,KAAMqD,GAClBrD,KAAKoS,SAAWA,EAChBpS,KAAK4K,UAAYA,EACjB5K,KAAKyR,QAAUA,EACfzR,KAAK0R,SAAWA,EAChB1R,KAAKiS,mBAAoB,EACzBjS,KAAKmS,eAAiB,KA6B1B,OArCA1P,EAAU0f,EAAwBjf,GAUlCif,EAAuB7iB,UAAUqE,MAAQ,SAAU1E,GAC3Ce,KAAKkS,UACDlS,KAAK0R,WACL1R,KAAKmS,eAAiBlT,EACtBe,KAAKiS,mBAAoB,IAI7BjS,KAAKY,IAAIZ,KAAKkS,UAAYlS,KAAK4K,UAAUH,SAAS2X,EAAcpiB,KAAKoS,UAAYrQ,WAAY/B,QACzFA,KAAKyR,SACLzR,KAAKqD,YAAYlC,KAAKlC,KAIlCkjB,EAAuB7iB,UAAUsZ,cAAgB,WAC7C,IAAI1G,EAAYlS,KAAKkS,UACjBA,IACIlS,KAAK0R,UAAY1R,KAAKiS,oBACtBjS,KAAKqD,YAAYlC,KAAKnB,KAAKmS,gBAC3BnS,KAAKmS,eAAiB,KACtBnS,KAAKiS,mBAAoB,GAE7BC,EAAUpQ,cACV9B,KAAK4H,OAAOsK,GACZlS,KAAKkS,UAAY,OAGlBiQ,EAtCmB,CAuC5BnZ,EAAa/F,YACf,SAASmf,EAAatX,GACDA,EAAI/I,WACV6W,+CChHf,IAAInW,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/EqG,EAAenL,EAAQ,GAwC3BE,EAAQskB,UAHR,SAAmBvJ,GACf,OAAO,SAAUxY,GAAU,OAAOA,EAAOH,KAAK,IAAImiB,EAAkBxJ,MAGxE,IAAIwJ,EAAqB,WACrB,SAASA,EAAkBxJ,GACvB9Y,KAAK8Y,UAAYA,EAKrB,OAHAwJ,EAAkBhjB,UAAUlB,KAAO,SAAU2D,EAAYzB,GACrD,OAAOA,EAAOP,UAAU,IAAIwiB,EAAoBxgB,EAAY/B,KAAK8Y,aAE9DwJ,EAPc,GAcrBC,EAAuB,SAAUrf,GAEjC,SAASqf,EAAoBlf,EAAayV,GACtC5V,EAAO9E,KAAK4B,KAAMqD,GAClBrD,KAAK8Y,UAAYA,EACjB9Y,KAAK2H,MAAQ,EAuBjB,OA3BAlF,EAAU8f,EAAqBrf,GAM/Bqf,EAAoBjjB,UAAUqE,MAAQ,SAAU1E,GAC5C,IACIsG,EADAlC,EAAcrD,KAAKqD,YAEvB,IACIkC,EAASvF,KAAK8Y,UAAU7Z,EAAOe,KAAK2H,SAExC,MAAO1G,GAEH,YADAoC,EAAY7C,MAAMS,GAGtBjB,KAAKwiB,eAAevjB,EAAOsG,IAE/Bgd,EAAoBjjB,UAAUkjB,eAAiB,SAAUvjB,EAAOwjB,GAC5D,IAAIpf,EAAcrD,KAAKqD,YACnBuW,QAAQ6I,GACRpf,EAAYlC,KAAKlC,GAGjBoE,EAAY5C,YAGb8hB,EA5BgB,CA6BzBvZ,EAAa/F,0CCzFf,IAAIR,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/EgM,EAAoB9Q,EAAQ,GAC5B6Q,EAAsB7Q,EAAQ,GAqClCE,EAAQ2kB,UAHR,SAAmBC,GACf,OAAO,SAAUriB,GAAU,OAAOA,EAAOH,KAAK,IAAIyiB,EAAkBD,MAGxE,IAAIC,EAAqB,WACrB,SAASA,EAAkBD,GACvB3iB,KAAK2iB,SAAWA,EAKpB,OAHAC,EAAkBtjB,UAAUlB,KAAO,SAAU2D,EAAYzB,GACrD,OAAOA,EAAOP,UAAU,IAAI8iB,EAAoB9gB,EAAY/B,KAAK2iB,YAE9DC,EAPc,GAcrBC,EAAuB,SAAU3f,GAEjC,SAAS2f,EAAoBxf,EAAasf,GACtCzf,EAAO9E,KAAK4B,KAAMqD,GAClBrD,KAAK2iB,SAAWA,EAChB3iB,KAAKY,IAAI8N,EAAoBrJ,kBAAkBrF,KAAM2iB,IAQzD,OAZAlgB,EAAUogB,EAAqB3f,GAM/B2f,EAAoBvjB,UAAUmH,WAAa,SAAUjB,EAAYkB,EAAYjB,EAAYkB,EAAYC,GACjG5G,KAAKS,YAEToiB,EAAoBvjB,UAAUwH,eAAiB,aAGxC+b,EAbgB,CAczBlU,EAAkBpI,+CCxEpB,IAAI9D,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/EqG,EAAenL,EAAQ,GACvBia,EAA4Bja,EAAQ,IACpCmN,EAAoBnN,EAAQ,IA4ChCE,EAAQ+kB,KAVR,SAActX,GACV,OAAO,SAAUlL,GACb,OAAc,IAAVkL,EACO,IAAIR,EAAkBL,gBAGtBrK,EAAOH,KAAK,IAAI4iB,EAAavX,MAKhD,IAAIuX,EAAgB,WAChB,SAASA,EAAa/K,GAElB,GADAhY,KAAKgY,MAAQA,EACThY,KAAKgY,MAAQ,EACb,MAAM,IAAIF,EAA0BpL,wBAM5C,OAHAqW,EAAazjB,UAAUlB,KAAO,SAAU2D,EAAYzB,GAChD,OAAOA,EAAOP,UAAU,IAAIijB,EAAejhB,EAAY/B,KAAKgY,SAEzD+K,EAVS,GAiBhBC,EAAkB,SAAU9f,GAE5B,SAAS8f,EAAe3f,EAAa2U,GACjC9U,EAAO9E,KAAK4B,KAAMqD,GAClBrD,KAAKgY,MAAQA,EACbhY,KAAKwL,MAAQ,EAajB,OAjBA/I,EAAUugB,EAAgB9f,GAM1B8f,EAAe1jB,UAAUqE,MAAQ,SAAU1E,GACvC,IAAI+Y,EAAQhY,KAAKgY,MACbxM,IAAUxL,KAAKwL,MACfA,GAASwM,IACThY,KAAKqD,YAAYlC,KAAKlC,GAClBuM,IAAUwM,IACVhY,KAAKqD,YAAY5C,WACjBT,KAAK8B,iBAIVkhB,EAlBW,CAmBpBha,EAAa/F,0CCxFf,IAAIR,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/EgM,EAAoB9Q,EAAQ,GAC5B6Q,EAAsB7Q,EAAQ,GA+ClCE,EAAQklB,YAHR,SAAqBC,EAAiBrU,GAClC,OAAO,SAAUvO,GAAU,OAAOA,EAAOH,KAAK,IAAIgjB,EAAoBD,EAAiBrU,MAG3F,IAAIsU,EAAuB,WACvB,SAASA,EAAoB9iB,EAAYwO,GACrC7O,KAAKK,WAAaA,EAClBL,KAAK6O,eAAiBA,EAK1B,OAHAsU,EAAoB7jB,UAAUlB,KAAO,SAAU2D,EAAYzB,GACvD,OAAOA,EAAOP,UAAU,IAAIqjB,EAAsBrhB,EAAY/B,KAAKK,WAAYL,KAAK6O,kBAEjFsU,EARgB,GAevBC,EAAyB,SAAUlgB,GAEnC,SAASkgB,EAAsB/f,EAAakb,EAAO1P,GAC/C3L,EAAO9E,KAAK4B,KAAMqD,GAClBrD,KAAKue,MAAQA,EACbve,KAAK6O,eAAiBA,EACtB7O,KAAK2H,MAAQ,EA8CjB,OAnDAlF,EAAU2gB,EAAuBlgB,GAOjCkgB,EAAsB9jB,UAAUqE,MAAQ,SAAU1E,GAC9C,IAAIkY,EAAoBnX,KAAKmX,kBACzBA,GACAA,EAAkBrV,cAEtB9B,KAAKY,IAAIZ,KAAKmX,kBAAoBzI,EAAoBrJ,kBAAkBrF,KAAMA,KAAKue,MAAOtf,EAAOe,KAAK2H,WAE1Gyb,EAAsB9jB,UAAUuE,UAAY,WACxC,IAAIsT,EAAoBnX,KAAKmX,kBACxBA,IAAqBA,EAAkBrT,QACxCZ,EAAO5D,UAAUuE,UAAUzF,KAAK4B,OAGxCojB,EAAsB9jB,UAAUuF,aAAe,WAC3C7E,KAAKmX,kBAAoB,MAE7BiM,EAAsB9jB,UAAUwH,eAAiB,SAAUF,GACvD5G,KAAK4H,OAAOhB,GACZ5G,KAAKmX,kBAAoB,KACrBnX,KAAKoD,WACLF,EAAO5D,UAAUuE,UAAUzF,KAAK4B,OAGxCojB,EAAsB9jB,UAAUmH,WAAa,SAAUjB,EAAYkB,EAAYjB,EAAYkB,EAAYC,GACnG,IAAeiI,EAAN7O,KAA0B6O,eAAgBxL,EAA1CrD,KAA2DqD,YAChEwL,EACA7O,KAAKqjB,kBAAkB7d,EAAYkB,EAAYjB,EAAYkB,GAG3DtD,EAAYlC,KAAKuF,IAGzB0c,EAAsB9jB,UAAU+jB,kBAAoB,SAAU7d,EAAYkB,EAAYjB,EAAYkB,GAC9F,IACIpB,EADWsJ,EAAN7O,KAA0B6O,eAAgBxL,EAA1CrD,KAA2DqD,YAEpE,IACIkC,EAASsJ,EAAerJ,EAAYkB,EAAYjB,EAAYkB,GAEhE,MAAO1F,GAEH,YADAoC,EAAY7C,MAAMS,GAGtBoC,EAAYlC,KAAKoE,IAEd6d,EApDkB,CAqD3BzU,EAAkBpI,+CC1HpB,IAAI+c,EAAczlB,EAAQ,IACtB0X,EAAa1X,EAAQ,KAIzBE,EAAQwlB,UAHR,WACI,OAAOD,EAAYtM,UAAUzB,EAAWC,6BCJ5C,SAAAjL,GAAA,IAAI/D,EAAQ4U,SAAS9b,UAAUkH,MAiB/B,SAASgd,EAAQ1V,EAAI2V,GACnBzjB,KAAK0jB,IAAM5V,EACX9N,KAAK2jB,SAAWF,EAflB1lB,EAAQgI,WAAa,WACnB,OAAO,IAAIyd,EAAQhd,EAAMpI,KAAK2H,WAAYmE,OAAQ/H,WAAYyhB,eAEhE7lB,EAAQkQ,YAAc,WACpB,OAAO,IAAIuV,EAAQhd,EAAMpI,KAAK6P,YAAa/D,OAAQ/H,WAAY+L,gBAEjEnQ,EAAQ6lB,aACR7lB,EAAQmQ,cAAgB,SAASkT,GAC3BA,GACFA,EAAQyC,SAQZL,EAAQlkB,UAAUwkB,MAAQN,EAAQlkB,UAAUykB,IAAM,aAClDP,EAAQlkB,UAAUukB,MAAQ,WACxB7jB,KAAK2jB,SAASvlB,KAAK8L,OAAQlK,KAAK0jB,MAIlC3lB,EAAQimB,OAAS,SAAS/d,EAAMge,GAC9BL,aAAa3d,EAAKie,gBAClBje,EAAKke,aAAeF,GAGtBlmB,EAAQqmB,SAAW,SAASne,GAC1B2d,aAAa3d,EAAKie,gBAClBje,EAAKke,cAAgB,GAGvBpmB,EAAQsmB,aAAetmB,EAAQoP,OAAS,SAASlH,GAC/C2d,aAAa3d,EAAKie,gBAElB,IAAID,EAAQhe,EAAKke,aACbF,GAAS,IACXhe,EAAKie,eAAiBne,WAAW,WAC3BE,EAAKqe,YACPre,EAAKqe,cACNL,KAKPpmB,EAAQ,KAIRE,EAAQwmB,aAAgC,oBAATna,MAAwBA,KAAKma,mBAClB,IAAXha,GAA0BA,EAAOga,cACxCvkB,MAAQA,KAAKukB,aACrCxmB,EAAQymB,eAAkC,oBAATpa,MAAwBA,KAAKoa,qBAClB,IAAXja,GAA0BA,EAAOia,gBACxCxkB,MAAQA,KAAKwkB,gEC1DvC,IAAIC,EAAe5mB,EAAQ,KACvB6mB,EAAkB7mB,EAAQ,KAmC9BE,EAAQ4mB,KAAO,IAAID,EAAgBE,cAAcH,EAAaI,0CCpC9D,IAAIhR,EAAoBhW,EAAQ,IAC5BkN,EAAqBlN,EAAQ,IAC7BmN,EAAoBnN,EAAQ,IAC5BinB,EAAWjnB,EAAQ,IACnBoN,EAAgBpN,EAAQ,IAyC5BE,EAAQgnB,UAzBR,WAEI,IADA,IAAI5Z,KACKjJ,EAAK,EAAGA,EAAKC,UAAUC,OAAQF,IACpCiJ,EAAMjJ,EAAK,GAAKC,UAAUD,GAE9B,OAAO,SAAU5B,GACb,IAAIsK,EAAYO,EAAMA,EAAM/I,OAAS,GACjC6I,EAAcT,YAAYI,GAC1BO,EAAME,MAGNT,EAAY,KAEhB,IAAIhF,EAAMuF,EAAM/I,OAChB,OAAY,IAARwD,EACOkf,EAAS1c,OAAO,IAAI2C,EAAmBO,iBAAiBH,EAAM,GAAIP,GAAYtK,GAEhFsF,EAAM,EACJkf,EAAS1c,OAAO,IAAIyL,EAAkB3I,gBAAgBC,EAAOP,GAAYtK,GAGzEwkB,EAAS1c,OAAO,IAAI4C,EAAkBL,gBAAgBC,GAAYtK,mCCzCrF,IAAImC,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/EqG,EAAenL,EAAQ,GAgB3BE,EAAQinB,UAHR,SAAmBlM,GACf,OAAO,SAAUxY,GAAU,OAAOA,EAAOH,KAAK,IAAI8kB,EAAkBnM,MAGxE,IAAImM,EAAqB,WACrB,SAASA,EAAkBnM,GACvB9Y,KAAK8Y,UAAYA,EAKrB,OAHAmM,EAAkB3lB,UAAUlB,KAAO,SAAU2D,EAAYzB,GACrD,OAAOA,EAAOP,UAAU,IAAImlB,EAAoBnjB,EAAY/B,KAAK8Y,aAE9DmM,EAPc,GAcrBC,EAAuB,SAAUhiB,GAEjC,SAASgiB,EAAoB7hB,EAAayV,GACtC5V,EAAO9E,KAAK4B,KAAMqD,GAClBrD,KAAK8Y,UAAYA,EACjB9Y,KAAKmlB,UAAW,EAChBnlB,KAAK2H,MAAQ,EAoBjB,OAzBAlF,EAAUyiB,EAAqBhiB,GAO/BgiB,EAAoB5lB,UAAUqE,MAAQ,SAAU1E,GAC5C,IAAIoE,EAAcrD,KAAKqD,YACnBrD,KAAKmlB,UACLnlB,KAAKolB,iBAAiBnmB,GAErBe,KAAKmlB,UACN9hB,EAAYlC,KAAKlC,IAGzBimB,EAAoB5lB,UAAU8lB,iBAAmB,SAAUnmB,GACvD,IACI,IAAIsG,EAASvF,KAAK8Y,UAAU7Z,EAAOe,KAAK2H,SACxC3H,KAAKmlB,SAAWvL,QAAQrU,GAE5B,MAAOtE,GACHjB,KAAKqD,YAAY7C,MAAMS,KAGxBikB,EA1BgB,CA2BzBlc,EAAa/F,0CC/Df,IAAIR,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/EgM,EAAoB9Q,EAAQ,GAC5B6Q,EAAsB7Q,EAAQ,GAgBlCE,EAAQsnB,UAHR,SAAmB1C,GACf,OAAO,SAAUriB,GAAU,OAAOA,EAAOH,KAAK,IAAImlB,EAAkB3C,MAGxE,IAAI2C,EAAqB,WACrB,SAASA,EAAkB3C,GACvB3iB,KAAK2iB,SAAWA,EAKpB,OAHA2C,EAAkBhmB,UAAUlB,KAAO,SAAU2D,EAAYzB,GACrD,OAAOA,EAAOP,UAAU,IAAIwlB,EAAoBxjB,EAAY/B,KAAK2iB,YAE9D2C,EAPc,GAcrBC,EAAuB,SAAUriB,GAEjC,SAASqiB,EAAoBliB,EAAasf,GACtCzf,EAAO9E,KAAK4B,KAAMqD,GAClBrD,KAAK4P,UAAW,EAChB5P,KAAKwlB,gBAAiB,EACtBxlB,KAAKY,IAAI8N,EAAoBrJ,kBAAkBrF,KAAM2iB,IAwBzD,OA7BAlgB,EAAU8iB,EAAqBriB,GAO/BqiB,EAAoBjmB,UAAUqE,MAAQ,SAAU1E,GACxCe,KAAK4P,UACL1M,EAAO5D,UAAUqE,MAAMvF,KAAK4B,KAAMf,IAG1CsmB,EAAoBjmB,UAAUuE,UAAY,WAClC7D,KAAKwlB,eACLtiB,EAAO5D,UAAUuE,UAAUzF,KAAK4B,MAGhCA,KAAK8B,eAGbyjB,EAAoBjmB,UAAUmH,WAAa,SAAUjB,EAAYkB,EAAYjB,EAAYkB,EAAYC,GACjG5G,KAAK4P,UAAW,GAEpB2V,EAAoBjmB,UAAUwH,eAAiB,WAC3C9G,KAAKwlB,gBAAiB,EAClBxlB,KAAKoD,WACLF,EAAO5D,UAAUuE,UAAUzF,KAAK4B,OAGjCulB,EA9BgB,CA+BzB5W,EAAkBpI,+CCpEpB,IAAI9D,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/EqG,EAAenL,EAAQ,GACvBia,EAA4Bja,EAAQ,IAoCxCE,EAAQ0nB,SAHR,SAAkBja,GACd,OAAO,SAAUlL,GAAU,OAAOA,EAAOH,KAAK,IAAIulB,EAAiBla,MAGvE,IAAIka,EAAoB,WACpB,SAASA,EAAiBC,GAEtB,GADA3lB,KAAK2lB,WAAaA,EACd3lB,KAAK2lB,WAAa,EAClB,MAAM,IAAI7N,EAA0BpL,wBAa5C,OAVAgZ,EAAiBpmB,UAAUlB,KAAO,SAAU2D,EAAYzB,GACpD,OAAwB,IAApBN,KAAK2lB,WAGErlB,EAAOP,UAAU,IAAIiJ,EAAa/F,WAAWlB,IAG7CzB,EAAOP,UAAU,IAAI6lB,EAAmB7jB,EAAY/B,KAAK2lB,cAGjED,EAjBa,GAwBpBE,EAAsB,SAAU1iB,GAEhC,SAAS0iB,EAAmBviB,EAAasiB,GACrCziB,EAAO9E,KAAK4B,KAAMqD,GAClBrD,KAAK2lB,WAAaA,EAClB3lB,KAAK6lB,OAAS,EACd7lB,KAAK8lB,MAAQ,IAAIpb,MAAMib,GAgB3B,OArBAljB,EAAUmjB,EAAoB1iB,GAO9B0iB,EAAmBtmB,UAAUqE,MAAQ,SAAU1E,GAC3C,IAAI8mB,EAAY/lB,KAAK2lB,WACjBna,EAAQxL,KAAK6lB,SACjB,GAAIra,EAAQua,EACR/lB,KAAK8lB,MAAMta,GAASvM,MAEnB,CACD,IAAI+mB,EAAexa,EAAQua,EACvB7N,EAAOlY,KAAK8lB,MACZG,EAAW/N,EAAK8N,GACpB9N,EAAK8N,GAAgB/mB,EACrBe,KAAKqD,YAAYlC,KAAK8kB,KAGvBL,EAtBe,CAuBxB5c,EAAa/F,0CC1Ff,IAAIR,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/EqG,EAAenL,EAAQ,GAe3BE,EAAQmoB,KAHR,SAAc1a,GACV,OAAO,SAAUlL,GAAU,OAAOA,EAAOH,KAAK,IAAIgmB,EAAa3a,MAGnE,IAAI2a,EAAgB,WAChB,SAASA,EAAanO,GAClBhY,KAAKgY,MAAQA,EAKjB,OAHAmO,EAAa7mB,UAAUlB,KAAO,SAAU2D,EAAYzB,GAChD,OAAOA,EAAOP,UAAU,IAAIqmB,EAAerkB,EAAY/B,KAAKgY,SAEzDmO,EAPS,GAchBC,EAAkB,SAAUljB,GAE5B,SAASkjB,EAAe/iB,EAAa2U,GACjC9U,EAAO9E,KAAK4B,KAAMqD,GAClBrD,KAAKgY,MAAQA,EACbhY,KAAKwL,MAAQ,EAOjB,OAXA/I,EAAU2jB,EAAgBljB,GAM1BkjB,EAAe9mB,UAAUqE,MAAQ,SAAUpB,KACjCvC,KAAKwL,MAAQxL,KAAKgY,OACpBhY,KAAKqD,YAAYlC,KAAKoB,IAGvB6jB,EAZW,CAapBpd,EAAa/F,0CChDf,IAAIR,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/EqG,EAAenL,EAAQ,GACvBwoB,EAAexoB,EAAQ,IAoB3BE,EAAQuoB,OAHR,SAAgBxN,GACZ,OAAO,SAAUxY,GAAU,OAAOA,EAAOH,KAAK,IAAIomB,EAAezN,EAAWxY,MAGhF,IAAIimB,EAAkB,WAClB,SAASA,EAAezN,EAAWxY,GAC/BN,KAAK8Y,UAAYA,EACjB9Y,KAAKM,OAASA,EAKlB,OAHAimB,EAAejnB,UAAUlB,KAAO,SAAU2D,EAAYzB,GAClD,OAAOA,EAAOP,UAAU,IAAIymB,EAAiBzkB,EAAY/B,KAAK8Y,UAAW9Y,KAAKM,UAE3EimB,EARW,GAelBC,EAAoB,SAAUtjB,GAE9B,SAASsjB,EAAiBnjB,EAAayV,EAAWxY,GAC9C4C,EAAO9E,KAAK4B,KAAMqD,GAClBrD,KAAK8Y,UAAYA,EACjB9Y,KAAKM,OAASA,EACdN,KAAKymB,WAAY,EACjBzmB,KAAK2H,MAAQ,EAwCjB,OA9CAlF,EAAU+jB,EAAkBtjB,GAQ5BsjB,EAAiBlnB,UAAUonB,iBAAmB,SAAUznB,GAChDe,KAAKymB,UACLzmB,KAAKqD,YAAY7C,MAAM,4CAGvBR,KAAKymB,WAAY,EACjBzmB,KAAK2mB,YAAc1nB,IAG3BunB,EAAiBlnB,UAAUqE,MAAQ,SAAU1E,GACzC,IAAI0I,EAAQ3H,KAAK2H,QACb3H,KAAK8Y,UACL9Y,KAAK4mB,QAAQ3nB,EAAO0I,GAGpB3H,KAAK0mB,iBAAiBznB,IAG9BunB,EAAiBlnB,UAAUsnB,QAAU,SAAU3nB,EAAO0I,GAClD,IACQ3H,KAAK8Y,UAAU7Z,EAAO0I,EAAO3H,KAAKM,SAClCN,KAAK0mB,iBAAiBznB,GAG9B,MAAOgC,GACHjB,KAAKqD,YAAY7C,MAAMS,KAG/BulB,EAAiBlnB,UAAUuE,UAAY,WACnC,IAAIR,EAAcrD,KAAKqD,YACnBrD,KAAK2H,MAAQ,GACbtE,EAAYlC,KAAKnB,KAAKymB,UAAYzmB,KAAK2mB,iBAActZ,GACrDhK,EAAY5C,YAGZ4C,EAAY7C,MAAM,IAAI6lB,EAAa7T,aAGpCgU,EA/Ca,CAgDtBxd,EAAa/F,0CC1Ff,IAAI4jB,EAAkBhpB,EAAQ,IAQ9BE,EAAQ+oB,YAHR,SAAqBjU,EAAYC,EAAYlI,GACzC,OAAO,SAAUtK,GAAU,OAAOA,EAAOH,KAG7C,SAA6B0S,EAAYC,EAAYlI,GACjD,IAAIpB,EAEA3H,EADAwV,EAAW,EAEX/N,GAAW,EACXwL,GAAa,EACjB,OAAO,SAA8BxU,GACjC+W,IACK7N,IAAWF,IACZA,GAAW,EACXE,EAAU,IAAIqd,EAAgBjU,cAAcC,EAAYC,EAAYlI,GACpE/I,EAAevB,EAAOP,WAClBoB,KAAM,SAAUlC,GAASuK,EAAQrI,KAAKlC,IACtCuB,MAAO,SAAUS,GACbqI,GAAW,EACXE,EAAQhJ,MAAMS,IAElBR,SAAU,WACNqU,GAAa,EACbtL,EAAQ/I,eAIpB,IAAImG,EAAW4C,EAAQzJ,UAAUC,MACjC,OAAO,WACHqX,IACAzQ,EAAS9E,cACLD,GAA6B,IAAbwV,GAAkBvC,GAClCjT,EAAaC,gBA/BqBilB,CAAoBlU,EAAYC,EAAYlI,oCCN9F,IAAIoc,EAAcnpB,EAAQ,IACtBopB,EAAappB,EAAQ,IACrB4U,EAAY5U,EAAQ,GACxB,SAASqpB,IACL,OAAO,IAAIzU,EAAUrJ,QAiBzBrL,EAAQopB,MAHR,WACI,OAAO,SAAU7mB,GAAU,OAAO2mB,EAAW5P,UAAX4P,CAAsBD,EAAYtb,UAAUwb,EAAtBF,CAA2C1mB,oCCnBvG,IAAImC,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/EqG,EAAenL,EAAQ,GACvBwJ,EAAaxJ,EAAQ,GACrByJ,EAAgBzJ,EAAQ,GAwD5BE,EAAQqpB,cAHR,SAAuBC,EAAWC,GAC9B,OAAO,SAAUhnB,GAAU,OAAOA,EAAOH,KAAK,IAAIonB,EAAsBF,EAAWC,MAGvF,IAAIC,EAAyB,WACzB,SAASA,EAAsBF,EAAWC,GACtCtnB,KAAKqnB,UAAYA,EACjBrnB,KAAKsnB,SAAWA,EAKpB,OAHAC,EAAsBjoB,UAAUlB,KAAO,SAAU2D,EAAYzB,GACzD,OAAOA,EAAOP,UAAU,IAAIynB,EAAwBzlB,EAAY/B,KAAKqnB,UAAWrnB,KAAKsnB,YAElFC,EARkB,GAU7BxpB,EAAQwpB,sBAAwBA,EAMhC,IAAIC,EAA2B,SAAUtkB,GAErC,SAASskB,EAAwBnkB,EAAagkB,EAAWC,GACrDpkB,EAAO9E,KAAK4B,KAAMqD,GAClBrD,KAAKqnB,UAAYA,EACjBrnB,KAAKsnB,SAAWA,EAChBtnB,KAAKuS,MACLvS,KAAKynB,MACLznB,KAAK0nB,cAAe,EACpB1nB,KAAKY,IAAIymB,EAAUtnB,UAAU,IAAI4nB,EAAiCtkB,EAAarD,QAqDnF,OA7DAyC,EAAU+kB,EAAyBtkB,GAUnCskB,EAAwBloB,UAAUqE,MAAQ,SAAU1E,GAC5Ce,KAAK0nB,cAAmC,IAAnB1nB,KAAKynB,GAAGrlB,OAC7BpC,KAAK4nB,MAAK,IAGV5nB,KAAKuS,GAAGlK,KAAKpJ,GACbe,KAAK6nB,gBAGbL,EAAwBloB,UAAUuE,UAAY,WACtC7D,KAAK0nB,aACL1nB,KAAK4nB,KAAwB,IAAnB5nB,KAAKuS,GAAGnQ,QAAmC,IAAnBpC,KAAKynB,GAAGrlB,QAG1CpC,KAAK0nB,cAAe,GAG5BF,EAAwBloB,UAAUuoB,YAAc,WAE5C,IADA,IAAetV,EAANvS,KAAcuS,GAAIkV,EAAlBznB,KAA0BynB,GAAIH,EAA9BtnB,KAA4CsnB,SAC9C/U,EAAGnQ,OAAS,GAAKqlB,EAAGrlB,OAAS,GAAG,CACnC,IAAI0Z,EAAIvJ,EAAG7E,QACPhL,EAAI+kB,EAAG/Z,QACPoa,GAAW,EACXR,GACAQ,EAAWzgB,EAAWQ,SAASyf,EAApBjgB,CAA8ByU,EAAGpZ,MAC3B4E,EAAcQ,aAC3B9H,KAAKqD,YAAY7C,MAAM8G,EAAcQ,YAAYC,GAIrD+f,EAAWhM,IAAMpZ,EAEhBolB,GACD9nB,KAAK4nB,MAAK,KAItBJ,EAAwBloB,UAAUsoB,KAAO,SAAU3oB,GAC/C,IAAIoE,EAAcrD,KAAKqD,YACvBA,EAAYlC,KAAKlC,GACjBoE,EAAY5C,YAEhB+mB,EAAwBloB,UAAUyoB,MAAQ,SAAU9oB,GAC5Ce,KAAK0nB,cAAmC,IAAnB1nB,KAAKuS,GAAGnQ,OAC7BpC,KAAK4nB,MAAK,IAGV5nB,KAAKynB,GAAGpf,KAAKpJ,GACbe,KAAK6nB,gBAGNL,EA9DoB,CA+D7Bxe,EAAa/F,YACflF,EAAQypB,wBAA0BA,EAClC,IAAIG,EAAoC,SAAUzkB,GAE9C,SAASykB,EAAiCtkB,EAAauB,GACnD1B,EAAO9E,KAAK4B,KAAMqD,GAClBrD,KAAK4E,OAASA,EAWlB,OAdAnC,EAAUklB,EAAkCzkB,GAK5CykB,EAAiCroB,UAAUqE,MAAQ,SAAU1E,GACzDe,KAAK4E,OAAOmjB,MAAM9oB,IAEtB0oB,EAAiCroB,UAAUsE,OAAS,SAAU3C,GAC1DjB,KAAK4E,OAAOpE,MAAMS,IAEtB0mB,EAAiCroB,UAAUuE,UAAY,WACnD7D,KAAK4E,OAAOf,aAET8jB,EAf6B,CAgBtC3e,EAAa/F,0CCjKf,IAAIR,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/EqG,EAAenL,EAAQ,GACvB+Y,EAAU/Y,EAAQ,GAyCtBE,EAAQiqB,WAJR,SAAoBC,EAAQrd,GAExB,YADkB,IAAdA,IAAwBA,EAAYgM,EAAQ3P,OACzC,SAAU3G,GAAU,OAAOA,EAAOH,KAAK,IAAI+nB,EAAmBD,EAAQrd,MAGjF,IAAIsd,EAAsB,WACtB,SAASA,EAAmBD,EAAQrd,GAChC5K,KAAKioB,OAASA,EACdjoB,KAAK4K,UAAYA,EAKrB,OAHAsd,EAAmB5oB,UAAUlB,KAAO,SAAU2D,EAAYzB,GACtD,OAAOA,EAAOP,UAAU,IAAIooB,EAAqBpmB,EAAY/B,KAAKioB,OAAQjoB,KAAK4K,aAE5Esd,EARe,GAetBC,EAAwB,SAAUjlB,GAElC,SAASilB,EAAqB9kB,EAAa4kB,EAAQrd,GAC/C1H,EAAO9E,KAAK4B,KAAMqD,GAClBrD,KAAKioB,OAASA,EACdjoB,KAAK4K,UAAYA,EACjB5K,KAAK4P,UAAW,EAChB5P,KAAKY,IAAIgK,EAAUH,SAAS2d,EAAsBH,GAAUlmB,WAAY/B,KAAMioB,OAAQA,KAY1F,OAlBAxlB,EAAU0lB,EAAsBjlB,GAQhCilB,EAAqB7oB,UAAUqE,MAAQ,SAAU1E,GAC7Ce,KAAKqoB,UAAYppB,EACjBe,KAAK4P,UAAW,GAEpBuY,EAAqB7oB,UAAUmH,WAAa,WACpCzG,KAAK4P,WACL5P,KAAK4P,UAAW,EAChB5P,KAAKqD,YAAYlC,KAAKnB,KAAKqoB,aAG5BF,EAnBiB,CAoB1Bnf,EAAa/F,YACf,SAASmlB,EAAqB7c,GAC1B,IAAIxJ,EAAawJ,EAAMxJ,WAAYkmB,EAAS1c,EAAM0c,OAClDlmB,EAAW0E,aACXzG,KAAKyK,SAASc,EAAO0c,kCCvFzB,IAAIxlB,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/EgM,EAAoB9Q,EAAQ,GAC5B6Q,EAAsB7Q,EAAQ,GAsClCE,EAAQuqB,OAHR,SAAgB3F,GACZ,OAAO,SAAUriB,GAAU,OAAOA,EAAOH,KAAK,IAAIooB,EAAe5F,MAGrE,IAAI4F,EAAkB,WAClB,SAASA,EAAe5F,GACpB3iB,KAAK2iB,SAAWA,EAQpB,OANA4F,EAAejpB,UAAUlB,KAAO,SAAU2D,EAAYzB,GAClD,IAAIkoB,EAAmB,IAAIC,EAAiB1mB,GACxCF,EAAevB,EAAOP,UAAUyoB,GAEpC,OADA3mB,EAAajB,IAAI8N,EAAoBrJ,kBAAkBmjB,EAAkBxoB,KAAK2iB,WACvE9gB,GAEJ0mB,EAVW,GAiBlBE,EAAoB,SAAUvlB,GAE9B,SAASulB,IACLvlB,EAAOsD,MAAMxG,KAAMmC,WACnBnC,KAAK4P,UAAW,EAkBpB,OArBAnN,EAAUgmB,EAAkBvlB,GAK5BulB,EAAiBnpB,UAAUqE,MAAQ,SAAU1E,GACzCe,KAAKf,MAAQA,EACbe,KAAK4P,UAAW,GAEpB6Y,EAAiBnpB,UAAUmH,WAAa,SAAUjB,EAAYkB,EAAYjB,EAAYkB,EAAYC,GAC9F5G,KAAK0oB,aAETD,EAAiBnpB,UAAUwH,eAAiB,WACxC9G,KAAK0oB,aAETD,EAAiBnpB,UAAUopB,UAAY,WAC/B1oB,KAAK4P,WACL5P,KAAK4P,UAAW,EAChB5P,KAAKqD,YAAYlC,KAAKnB,KAAKf,SAG5BwpB,EAtBa,CAuBtB9Z,EAAkBpI,+CCrFpB,IAAI9D,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/E8P,EAAY5U,EAAQ,GACpBwJ,EAAaxJ,EAAQ,GACrByJ,EAAgBzJ,EAAQ,GACxB8Q,EAAoB9Q,EAAQ,GAC5B6Q,EAAsB7Q,EAAQ,GAkBlCE,EAAQ4qB,UAHR,SAAmBhG,GACf,OAAO,SAAUriB,GAAU,OAAOA,EAAOH,KAAK,IAAIyoB,EAAkBjG,EAAUriB,MAGlF,IAAIsoB,EAAqB,WACrB,SAASA,EAAkBjG,EAAUriB,GACjCN,KAAK2iB,SAAWA,EAChB3iB,KAAKM,OAASA,EAKlB,OAHAsoB,EAAkBtpB,UAAUlB,KAAO,SAAU2D,EAAYzB,GACrD,OAAOA,EAAOP,UAAU,IAAI8oB,EAAoB9mB,EAAY/B,KAAK2iB,SAAU3iB,KAAKM,UAE7EsoB,EARc,GAerBC,EAAuB,SAAU3lB,GAEjC,SAAS2lB,EAAoBxlB,EAAasf,EAAUriB,GAChD4C,EAAO9E,KAAK4B,KAAMqD,GAClBrD,KAAK2iB,SAAWA,EAChB3iB,KAAKM,OAASA,EAiDlB,OArDAmC,EAAUomB,EAAqB3lB,GAM/B2lB,EAAoBvpB,UAAUkB,MAAQ,SAAUS,GAC5C,IAAKjB,KAAKoD,UAAW,CACjB,IAAIqE,EAASzH,KAAKyH,OACdqhB,EAAU9oB,KAAK8oB,QACfC,EAAsB/oB,KAAK+oB,oBAC/B,GAAKD,EASD9oB,KAAKyH,OAAS,KACdzH,KAAK+oB,oBAAsB,SAVjB,CAGV,GAFAthB,EAAS,IAAIgL,EAAUrJ,SACvB0f,EAAUzhB,EAAWQ,SAAS7H,KAAK2iB,SAAzBtb,CAAmCI,MAC7BH,EAAcQ,YAC1B,OAAO5E,EAAO5D,UAAUkB,MAAMpC,KAAK4B,KAAMsH,EAAcQ,YAAYC,GAEvEghB,EAAsBra,EAAoBrJ,kBAAkBrF,KAAM8oB,GAMtE9oB,KAAK+D,yBACL/D,KAAKyH,OAASA,EACdzH,KAAK8oB,QAAUA,EACf9oB,KAAK+oB,oBAAsBA,EAC3BthB,EAAOtG,KAAKF,KAGpB4nB,EAAoBvpB,UAAUuF,aAAe,WACzC,IAAe4C,EAANzH,KAAkByH,OAAQshB,EAA1B/oB,KAAmD+oB,oBACxDthB,IACAA,EAAO3F,cACP9B,KAAKyH,OAAS,MAEdshB,IACAA,EAAoBjnB,cACpB9B,KAAK+oB,oBAAsB,MAE/B/oB,KAAK8oB,QAAU,MAEnBD,EAAoBvpB,UAAUmH,WAAa,SAAUjB,EAAYkB,EAAYjB,EAAYkB,EAAYC,GACjG,IAAea,EAANzH,KAAkByH,OAAQqhB,EAA1B9oB,KAAuC8oB,QAASC,EAAhD/oB,KAAyE+oB,oBAClF/oB,KAAKyH,OAAS,KACdzH,KAAK8oB,QAAU,KACf9oB,KAAK+oB,oBAAsB,KAC3B/oB,KAAK+D,yBACL/D,KAAKyH,OAASA,EACdzH,KAAK8oB,QAAUA,EACf9oB,KAAK+oB,oBAAsBA,EAC3B/oB,KAAKM,OAAOP,UAAUC,OAEnB6oB,EAtDgB,CAuDzBla,EAAkBpI,+CClGpB,IAAI9D,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/EqG,EAAenL,EAAQ,GAqB3BE,EAAQirB,MAJR,SAAexd,GAEX,YADc,IAAVA,IAAoBA,GAAS,GAC1B,SAAUlL,GAAU,OAAOA,EAAOH,KAAK,IAAI8oB,EAAczd,EAAOlL,MAG3E,IAAI2oB,EAAiB,WACjB,SAASA,EAAczd,EAAOlL,GAC1BN,KAAKwL,MAAQA,EACbxL,KAAKM,OAASA,EAKlB,OAHA2oB,EAAc3pB,UAAUlB,KAAO,SAAU2D,EAAYzB,GACjD,OAAOA,EAAOP,UAAU,IAAImpB,EAAgBnnB,EAAY/B,KAAKwL,MAAOxL,KAAKM,UAEtE2oB,EARU,GAejBC,EAAmB,SAAUhmB,GAE7B,SAASgmB,EAAgB7lB,EAAamI,EAAOlL,GACzC4C,EAAO9E,KAAK4B,KAAMqD,GAClBrD,KAAKwL,MAAQA,EACbxL,KAAKM,OAASA,EAclB,OAlBAmC,EAAUymB,EAAiBhmB,GAM3BgmB,EAAgB5pB,UAAUkB,MAAQ,SAAUS,GACxC,IAAKjB,KAAKoD,UAAW,CACjB,IAAe9C,EAANN,KAAkBM,OAAQkL,EAA1BxL,KAAqCwL,MAC9C,GAAc,IAAVA,EACA,OAAOtI,EAAO5D,UAAUkB,MAAMpC,KAAK4B,KAAMiB,GAEpCuK,GAAS,IACdxL,KAAKwL,MAAQA,EAAQ,GAEzBlL,EAAOP,UAAUC,KAAK+D,4BAGvBmlB,EAnBY,CAoBrBlgB,EAAa/F,0CC9Df,IAAIR,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/E8P,EAAY5U,EAAQ,GACpBwJ,EAAaxJ,EAAQ,GACrByJ,EAAgBzJ,EAAQ,GACxB8Q,EAAoB9Q,EAAQ,GAC5B6Q,EAAsB7Q,EAAQ,GAkBlCE,EAAQorB,WAHR,SAAoBxG,GAChB,OAAO,SAAUriB,GAAU,OAAOA,EAAOH,KAAK,IAAIipB,EAAmBzG,MAGzE,IAAIyG,EAAsB,WACtB,SAASA,EAAmBzG,GACxB3iB,KAAK2iB,SAAWA,EAKpB,OAHAyG,EAAmB9pB,UAAUlB,KAAO,SAAU2D,EAAYzB,GACtD,OAAOA,EAAOP,UAAU,IAAIspB,EAAqBtnB,EAAY/B,KAAK2iB,SAAUriB,KAEzE8oB,EAPe,GActBC,EAAwB,SAAUnmB,GAElC,SAASmmB,EAAqBhmB,EAAasf,EAAUriB,GACjD4C,EAAO9E,KAAK4B,KAAMqD,GAClBrD,KAAK2iB,SAAWA,EAChB3iB,KAAKM,OAASA,EACdN,KAAKspB,2BAA4B,EAwDrC,OA7DA7mB,EAAU4mB,EAAsBnmB,GAOhCmmB,EAAqB/pB,UAAUmH,WAAa,SAAUjB,EAAYkB,EAAYjB,EAAYkB,EAAYC,GAClG5G,KAAKspB,2BAA4B,EACjCtpB,KAAKM,OAAOP,UAAUC,OAE1BqpB,EAAqB/pB,UAAUwH,eAAiB,SAAUF,GACtD,IAAuC,IAAnC5G,KAAKspB,0BACL,OAAOpmB,EAAO5D,UAAUmB,SAASrC,KAAK4B,OAG9CqpB,EAAqB/pB,UAAUmB,SAAW,WAEtC,GADAT,KAAKspB,2BAA4B,GAC5BtpB,KAAKoD,UAAW,CAIjB,GAHKpD,KAAK8oB,SACN9oB,KAAKupB,sBAEJvpB,KAAK+oB,qBAAuB/oB,KAAK+oB,oBAAoBjlB,OACtD,OAAOZ,EAAO5D,UAAUmB,SAASrC,KAAK4B,MAE1CA,KAAK+D,yBACL/D,KAAKwpB,cAAcroB,SAG3BkoB,EAAqB/pB,UAAUuF,aAAe,WAC1C,IAAe2kB,EAANxpB,KAAyBwpB,cAAeT,EAAxC/oB,KAAiE+oB,oBACtES,IACAA,EAAc1nB,cACd9B,KAAKwpB,cAAgB,MAErBT,IACAA,EAAoBjnB,cACpB9B,KAAK+oB,oBAAsB,MAE/B/oB,KAAK8oB,QAAU,MAEnBO,EAAqB/pB,UAAUyE,uBAAyB,WACpD,IAAeylB,EAANxpB,KAAyBwpB,cAAeV,EAAxC9oB,KAAqD8oB,QAASC,EAA9D/oB,KAAuF+oB,oBAQhG,OAPA/oB,KAAKwpB,cAAgB,KACrBxpB,KAAK8oB,QAAU,KACf9oB,KAAK+oB,oBAAsB,KAC3B7lB,EAAO5D,UAAUyE,uBAAuB3F,KAAK4B,MAC7CA,KAAKwpB,cAAgBA,EACrBxpB,KAAK8oB,QAAUA,EACf9oB,KAAK+oB,oBAAsBA,EACpB/oB,MAEXqpB,EAAqB/pB,UAAUiqB,mBAAqB,WAChDvpB,KAAKwpB,cAAgB,IAAI/W,EAAUrJ,QACnC,IAAI0f,EAAUzhB,EAAWQ,SAAS7H,KAAK2iB,SAAzBtb,CAAmCrH,KAAKwpB,eACtD,GAAIV,IAAYxhB,EAAcQ,YAC1B,OAAO5E,EAAO5D,UAAUmB,SAASrC,KAAK4B,MAE1CA,KAAK8oB,QAAUA,EACf9oB,KAAK+oB,oBAAsBra,EAAoBrJ,kBAAkBrF,KAAM8oB,IAEpEO,EA9DiB,CA+D1B1a,EAAkBpI,+CCzGpB,IAAI9D,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/EqG,EAAenL,EAAQ,GACvBmN,EAAoBnN,EAAQ,IA2BhCE,EAAQ0rB,OAdR,SAAgBje,GAEZ,YADc,IAAVA,IAAoBA,GAAS,GAC1B,SAAUlL,GACb,OAAc,IAAVkL,EACO,IAAIR,EAAkBL,gBAExBa,EAAQ,EACNlL,EAAOH,KAAK,IAAIupB,GAAgB,EAAGppB,IAGnCA,EAAOH,KAAK,IAAIupB,EAAele,EAAQ,EAAGlL,MAK7D,IAAIopB,EAAkB,WAClB,SAASA,EAAele,EAAOlL,GAC3BN,KAAKwL,MAAQA,EACbxL,KAAKM,OAASA,EAKlB,OAHAopB,EAAepqB,UAAUlB,KAAO,SAAU2D,EAAYzB,GAClD,OAAOA,EAAOP,UAAU,IAAI4pB,EAAiB5nB,EAAY/B,KAAKwL,MAAOxL,KAAKM,UAEvEopB,EARW,GAelBC,EAAoB,SAAUzmB,GAE9B,SAASymB,EAAiBtmB,EAAamI,EAAOlL,GAC1C4C,EAAO9E,KAAK4B,KAAMqD,GAClBrD,KAAKwL,MAAQA,EACbxL,KAAKM,OAASA,EAclB,OAlBAmC,EAAUknB,EAAkBzmB,GAM5BymB,EAAiBrqB,UAAUmB,SAAW,WAClC,IAAKT,KAAKoD,UAAW,CACjB,IAAe9C,EAANN,KAAkBM,OAAQkL,EAA1BxL,KAAqCwL,MAC9C,GAAc,IAAVA,EACA,OAAOtI,EAAO5D,UAAUmB,SAASrC,KAAK4B,MAEjCwL,GAAS,IACdxL,KAAKwL,MAAQA,EAAQ,GAEzBlL,EAAOP,UAAUC,KAAK+D,4BAGvB4lB,EAnBa,CAoBtB3gB,EAAa/F,0CCrEf,IAAImE,EAAYvJ,EAAQ,IACpB+rB,EAAS/rB,EAAQ,IAwBrBE,EAAQ2c,KAdR,WAEI,IADA,IAAI/J,KACKzO,EAAK,EAAGA,EAAKC,UAAUC,OAAQF,IACpCyO,EAAYzO,EAAK,GAAKC,UAAUD,GAEpC,OAAO,SAA8B5B,GAMjC,OAH2B,IAAvBqQ,EAAYvO,QAAgBgF,EAAUc,QAAQyI,EAAY,MAC1DA,EAAcA,EAAY,IAEvBrQ,EAAOH,KAAK/B,KAAKwrB,EAAOlP,KAAKlU,WAAM,GAASlG,GAAQ8H,OAAOuI,qCCtB1E,IAAIkZ,EAAiBhsB,EAAQ,IACzBmpB,EAAcnpB,EAAQ,IAI1BE,EAAQ+rB,YAHR,WACI,OAAO,SAAUxpB,GAAU,OAAO0mB,EAAYtb,UAAU,IAAIme,EAAevT,aAAzC0Q,CAAyD1mB,mCCH/F,IAAIumB,EAAkBhpB,EAAQ,IAC1BmpB,EAAcnpB,EAAQ,IAU1BE,EAAQgsB,cARR,SAAuBlX,EAAYC,EAAYkX,EAAqBpf,GAC5Dof,GAAsD,mBAAxBA,IAC9Bpf,EAAYof,GAEhB,IAAIpe,EAA0C,mBAAxBoe,EAAqCA,OAAsB3c,EAC7E7D,EAAU,IAAIqd,EAAgBjU,cAAcC,EAAYC,EAAYlI,GACxE,OAAO,SAAUtK,GAAU,OAAO0mB,EAAYtb,UAAU,WAAc,OAAOlC,GAAYoC,EAAvDob,CAAiE1mB,mCCTvG,IAAImC,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/E8P,EAAY5U,EAAQ,GACpBoL,EAA4BpL,EAAQ,IAIpCosB,EAAmB,SAAU/mB,GAE7B,SAAS+mB,EAAgBC,GACrBhnB,EAAO9E,KAAK4B,MACZA,KAAKkqB,OAASA,EA8BlB,OAjCAznB,EAAUwnB,EAAiB/mB,GAK3BvE,OAAOC,eAAeqrB,EAAgB3qB,UAAW,SAC7CP,IAAK,WACD,OAAOiB,KAAKmqB,YAEhBrrB,YAAY,EACZD,cAAc,IAElBorB,EAAgB3qB,UAAUY,WAAa,SAAU6B,GAC7C,IAAIF,EAAeqB,EAAO5D,UAAUY,WAAW9B,KAAK4B,KAAM+B,GAI1D,OAHIF,IAAiBA,EAAaiC,QAC9B/B,EAAWZ,KAAKnB,KAAKkqB,QAElBroB,GAEXooB,EAAgB3qB,UAAU6qB,SAAW,WACjC,GAAInqB,KAAKsJ,SACL,MAAMtJ,KAAKuJ,YAEV,GAAIvJ,KAAK8D,OACV,MAAM,IAAImF,EAA0BS,wBAGpC,OAAO1J,KAAKkqB,QAGpBD,EAAgB3qB,UAAU6B,KAAO,SAAUlC,GACvCiE,EAAO5D,UAAU6B,KAAK/C,KAAK4B,KAAMA,KAAKkqB,OAASjrB,IAE5CgrB,EAlCY,CAmCrBxX,EAAUrJ,SACZrL,EAAQksB,gBAAkBA,gCC9C1B,IAAIG,EAAoBvsB,EAAQ,KAC5BmpB,EAAcnpB,EAAQ,IAU1BE,EAAQssB,gBAHR,SAAyBprB,GACrB,OAAO,SAAUqB,GAAU,OAAO0mB,EAAYtb,UAAU,IAAI0e,EAAkBH,gBAAgBhrB,GAA5D+nB,CAAoE1mB,mCCT1G,IAAImS,EAAY5U,EAAQ,GACpBmpB,EAAcnpB,EAAQ,IAoB1BE,EAAQusB,QALR,SAAiB1e,GACb,OAAOA,EACHob,EAAYtb,UAAU,WAAc,OAAO,IAAI+G,EAAUrJ,SAAcwC,GACvEob,EAAYtb,UAAU,IAAI+G,EAAUrJ,wCCnB5C,IAAIyN,EAAQhZ,EAAQ,IAsCpBE,EAAQwsB,MAXR,WAEI,IADA,IAAIC,KACKtoB,EAAK,EAAGA,EAAKC,UAAUC,OAAQF,IACpCsoB,EAAWtoB,EAAK,GAAKC,UAAUD,GAEnC,IAAIE,EAASooB,EAAWpoB,OACxB,GAAe,IAAXA,EACA,MAAM,IAAIV,MAAM,uCAEpB,OAAO,SAAUpB,GAAU,OAAOuW,EAAMhK,IAG5C,SAAiB4d,EAAOroB,GAcpB,OAba,SAAUG,GAEnB,IADA,IAAImoB,EAAcnoB,EACTtE,EAAI,EAAGA,EAAImE,EAAQnE,IAAK,CAC7B,IAAIuB,EAAIkrB,EAAYD,EAAMxsB,IAC1B,QAAiB,IAANuB,EAIP,OAHAkrB,EAAclrB,EAMtB,OAAOkrB,GAfiCC,CAAQH,EAAYpoB,GAA9ByU,CAAuCvW,mCCpC7E,IAAIsqB,EAAQ/sB,EAAQ,KAChBgtB,EAAWhtB,EAAQ,IAgDvBE,EAAQ+sB,UANR,SAAmBhS,EAAW/L,GAC1B,OAAO,SAAUzM,GAAU,OACvBuqB,EAAS3R,OAAOJ,EAAW/L,EAA3B8d,CAAoCvqB,GACpCuqB,EAAS3R,OAAO0R,EAAMG,IAAIjS,EAAW/L,GAArC8d,CAA+CvqB,oCC9CvD,IAAImC,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/EqG,EAAenL,EAAQ,GAuC3BE,EAAQitB,SAHR,WACI,OAAO,SAAU1qB,GAAU,OAAOA,EAAOH,KAAK,IAAI8qB,KAGtD,IAAIA,EAAoB,WACpB,SAASA,KAKT,OAHAA,EAAiB3rB,UAAUlB,KAAO,SAAU2D,EAAYzB,GACpD,OAAOA,EAAOP,UAAU,IAAImrB,EAAmBnpB,KAE5CkpB,EANa,GAapBC,EAAsB,SAAUhoB,GAEhC,SAASgoB,EAAmB7nB,GACxBH,EAAO9E,KAAK4B,KAAMqD,GAClBrD,KAAKmrB,SAAU,EAWnB,OAdA1oB,EAAUyoB,EAAoBhoB,GAK9BgoB,EAAmB5rB,UAAUqE,MAAQ,SAAU1E,GACvCe,KAAKmrB,QACLnrB,KAAKqD,YAAYlC,MAAMnB,KAAKkb,KAAMjc,IAGlCe,KAAKmrB,SAAU,EAEnBnrB,KAAKkb,KAAOjc,GAETisB,EAfe,CAgBxBliB,EAAa/F,0CC1Ef,IAAIR,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/E8P,EAAY5U,EAAQ,GACpBqH,EAAerH,EAAQ,GACvBmL,EAAenL,EAAQ,GACvBiF,EAAiBjF,EAAQ,GACzBopB,EAAappB,EAAQ,IAIrButB,EAAyB,SAAUloB,GAEnC,SAASkoB,EAAsB9qB,EAAQuL,GACnC3I,EAAO9E,KAAK4B,MACZA,KAAKM,OAASA,EACdN,KAAK6L,eAAiBA,EACtB7L,KAAKuX,UAAY,EACjBvX,KAAKqrB,aAAc,EAgCvB,OAtCA5oB,EAAU2oB,EAAuBloB,GAQjCkoB,EAAsB9rB,UAAUY,WAAa,SAAU6B,GACnD,OAAO/B,KAAKsrB,aAAavrB,UAAUgC,IAEvCqpB,EAAsB9rB,UAAUgsB,WAAa,WACzC,IAAI9hB,EAAUxJ,KAAKurB,SAInB,OAHK/hB,IAAWA,EAAQpG,YACpBpD,KAAKurB,SAAWvrB,KAAK6L,kBAElB7L,KAAKurB,UAEhBH,EAAsB9rB,UAAUqY,QAAU,WACtC,IAAID,EAAa1X,KAAK6X,YActB,OAbKH,IACD1X,KAAKqrB,aAAc,GACnB3T,EAAa1X,KAAK6X,YAAc,IAAI/U,EAAeoB,cACxCtD,IAAIZ,KAAKM,OACfP,UAAU,IAAIyrB,EAAsBxrB,KAAKsrB,aAActrB,QACxD0X,EAAW5T,QACX9D,KAAK6X,YAAc,KACnBH,EAAa5U,EAAeoB,aAAaqE,OAGzCvI,KAAK6X,YAAcH,GAGpBA,GAEX0T,EAAsB9rB,UAAU+X,SAAW,WACvC,OAAO4P,EAAW5P,UAAX4P,CAAsBjnB,OAE1BorB,EAvCkB,CAwC3BlmB,EAAapF,YACf/B,EAAQqtB,sBAAwBA,EAChC,IAAIK,EAAmBL,EAAsB9rB,UAC7CvB,EAAQiO,iCACJ5L,UAAYnB,MAAO,MACnBsY,WAAatY,MAAO,EAAGysB,UAAU,GACjCH,UAAYtsB,MAAO,KAAMysB,UAAU,GACnC7T,aAAe5Y,MAAO,KAAMysB,UAAU,GACtCxrB,YAAcjB,MAAOwsB,EAAiBvrB,YACtCmrB,aAAepsB,MAAOwsB,EAAiBJ,YAAaK,UAAU,GAC9DJ,YAAcrsB,MAAOwsB,EAAiBH,YACtC3T,SAAW1Y,MAAOwsB,EAAiB9T,SACnCN,UAAYpY,MAAOwsB,EAAiBpU,WAExC,IAAImU,EAAyB,SAAUtoB,GAEnC,SAASsoB,EAAsBnoB,EAAa0I,GACxC7I,EAAO9E,KAAK4B,KAAMqD,GAClBrD,KAAK+L,YAAcA,EAwBvB,OA3BAtJ,EAAU+oB,EAAuBtoB,GAKjCsoB,EAAsBlsB,UAAUsE,OAAS,SAAU3C,GAC/CjB,KAAK6E,eACL3B,EAAO5D,UAAUsE,OAAOxF,KAAK4B,KAAMiB,IAEvCuqB,EAAsBlsB,UAAUuE,UAAY,WACxC7D,KAAK+L,YAAYsf,aAAc,EAC/BrrB,KAAK6E,eACL3B,EAAO5D,UAAUuE,UAAUzF,KAAK4B,OAEpCwrB,EAAsBlsB,UAAUuF,aAAe,WAC3C,IAAIkH,EAAc/L,KAAK+L,YACvB,GAAIA,EAAa,CACb/L,KAAK+L,YAAc,KACnB,IAAI2L,EAAa3L,EAAY8L,YAC7B9L,EAAYwL,UAAY,EACxBxL,EAAYwf,SAAW,KACvBxf,EAAY8L,YAAc,KACtBH,GACAA,EAAW5V,gBAIhB0pB,EA5BkB,CA6B3B/Y,EAAUtJ,mBAiBRsO,GAhBoB,WACpB,SAASH,EAAiBvL,GACtB/L,KAAK+L,YAAcA,EAEvBuL,EAAiBhY,UAAUlB,KAAO,SAAU2D,EAAYzB,GACpD,IAAIyL,EAAc/L,KAAK+L,YACvBA,EAAYwL,YACZ,IAAIC,EAAa,IAAIC,EAAmB1V,EAAYgK,GAChDlK,EAAevB,EAAOP,UAAUyX,GAIpC,OAHKA,EAAW1T,SACZ0T,EAAWE,WAAa3L,EAAY4L,WAEjC9V,GAZS,GAgBE,SAAUqB,GAEhC,SAASuU,EAAmBpU,EAAa0I,GACrC7I,EAAO9E,KAAK4B,KAAMqD,GAClBrD,KAAK+L,YAAcA,EAiDvB,OApDAtJ,EAAUgV,EAAoBvU,GAK9BuU,EAAmBnY,UAAUuF,aAAe,WACxC,IAAIkH,EAAc/L,KAAK+L,YACvB,GAAKA,EAAL,CAIA/L,KAAK+L,YAAc,KACnB,IAAIsL,EAAWtL,EAAYwL,UAC3B,GAAIF,GAAY,EACZrX,KAAK0X,WAAa,UAItB,GADA3L,EAAYwL,UAAYF,EAAW,EAC/BA,EAAW,EACXrX,KAAK0X,WAAa,SADtB,CA2BA,IAAIA,EAAa1X,KAAK0X,WAClBE,EAAmB7L,EAAY8L,YACnC7X,KAAK0X,WAAa,MACdE,GAAsBF,GAAcE,IAAqBF,GACzDE,EAAiB9V,oBAzCjB9B,KAAK0X,WAAa,MA4CnBD,EArDe,CAsDxBzO,EAAa/F,2CCvKf,IAAIkd,EAAWtiB,EAAQ,IAsCvBE,EAAQ4tB,IANR,SAAaC,GACT,IAAID,EAA2B,mBAAbC,EACZ,SAAUrpB,EAAGoX,GAAK,OAAOiS,EAASrpB,EAAGoX,GAAK,EAAIpX,EAAIoX,GAClD,SAAUpX,EAAGoX,GAAK,OAAOpX,EAAIoX,EAAIpX,EAAIoX,GAC3C,OAAOwG,EAASrX,OAAO6iB,kCCpC3B,IAAIlpB,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/E0E,EAAaxJ,EAAQ,GACrByJ,EAAgBzJ,EAAQ,GACxB6Q,EAAsB7Q,EAAQ,GAC9B8Q,EAAoB9Q,EAAQ,GAoChCE,EAAQ8tB,UAJR,SAAmBzf,EAAaC,EAAMyC,GAElC,YADmB,IAAfA,IAAyBA,EAAaC,OAAOC,mBAC1C,SAAU1O,GAAU,OAAOA,EAAOH,KAAK,IAAI2rB,EAAkB1f,EAAaC,EAAMyC,MAG3F,IAAIgd,EAAqB,WACrB,SAASA,EAAkB1f,EAAaC,EAAMyC,GAC1C9O,KAAKoM,YAAcA,EACnBpM,KAAKqM,KAAOA,EACZrM,KAAK8O,WAAaA,EAKtB,OAHAgd,EAAkBxsB,UAAUlB,KAAO,SAAU2D,EAAYzB,GACrD,OAAOA,EAAOP,UAAU,IAAIgsB,EAAoBhqB,EAAY/B,KAAKoM,YAAapM,KAAKqM,KAAMrM,KAAK8O,cAE3Fgd,EATc,GAWzB/tB,EAAQ+tB,kBAAoBA,EAM5B,IAAIC,EAAuB,SAAU7oB,GAEjC,SAAS6oB,EAAoB1oB,EAAa+I,EAAaK,EAAKqC,GACxD5L,EAAO9E,KAAK4B,KAAMqD,GAClBrD,KAAKoM,YAAcA,EACnBpM,KAAKyM,IAAMA,EACXzM,KAAK8O,WAAaA,EAClB9O,KAAK4P,UAAW,EAChB5P,KAAKoP,cAAe,EACpBpP,KAAKqP,UACLrP,KAAKmN,OAAS,EACdnN,KAAK2H,MAAQ,EAmDjB,OA7DAlF,EAAUspB,EAAqB7oB,GAY/B6oB,EAAoBzsB,UAAUqE,MAAQ,SAAU1E,GAC5C,GAAIe,KAAKmN,OAASnN,KAAK8O,WAAY,CAC/B,IAAInH,EAAQ3H,KAAK2H,QACb6H,EAAMnI,EAAWQ,SAAS7H,KAAKoM,YAAzB/E,CAAsCrH,KAAKyM,IAAKxN,GACtDoE,EAAcrD,KAAKqD,YACnBmM,IAAQlI,EAAcQ,YACtBzE,EAAY7C,MAAM8G,EAAcQ,YAAYC,IAG5C/H,KAAKmN,SACLnN,KAAKuP,UAAUC,EAAKvQ,EAAO0I,SAI/B3H,KAAKqP,OAAOhH,KAAKpJ,IAGzB8sB,EAAoBzsB,UAAUiQ,UAAY,SAAUC,EAAKvQ,EAAO0I,GAC5D3H,KAAKY,IAAI8N,EAAoBrJ,kBAAkBrF,KAAMwP,EAAKvQ,EAAO0I,KAErEokB,EAAoBzsB,UAAUuE,UAAY,WACtC7D,KAAKoP,cAAe,EACA,IAAhBpP,KAAKmN,QAAuC,IAAvBnN,KAAKqP,OAAOjN,UACX,IAAlBpC,KAAK4P,UACL5P,KAAKqD,YAAYlC,KAAKnB,KAAKyM,KAE/BzM,KAAKqD,YAAY5C,aAGzBsrB,EAAoBzsB,UAAUmH,WAAa,SAAUjB,EAAYkB,EAAYjB,EAAYkB,EAAYC,GACjG,IAAIvD,EAAcrD,KAAKqD,YACvBrD,KAAKyM,IAAM/F,EACX1G,KAAK4P,UAAW,EAChBvM,EAAYlC,KAAKuF,IAErBqlB,EAAoBzsB,UAAUwH,eAAiB,SAAUF,GACrD,IAAIyI,EAASrP,KAAKqP,OAClBrP,KAAK4H,OAAOhB,GACZ5G,KAAKmN,SACDkC,EAAOjN,OAAS,EAChBpC,KAAK2D,MAAM0L,EAAO3B,SAEG,IAAhB1N,KAAKmN,QAAgBnN,KAAKoP,gBACT,IAAlBpP,KAAK4P,UACL5P,KAAKqD,YAAYlC,KAAKnB,KAAKyM,KAE/BzM,KAAKqD,YAAY5C,aAGlBsrB,EA9DgB,CA+DzBpd,EAAkBpI,iBACpBxI,EAAQguB,oBAAsBA,gCC9H9B,IAAItpB,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/EgM,EAAoB9Q,EAAQ,GAC5B6Q,EAAsB7Q,EAAQ,GAqDlCE,EAAQiuB,WARR,SAAoB9I,EAAiBrU,EAAgBC,GAMjD,YALmB,IAAfA,IAAyBA,EAAaC,OAAOC,mBACnB,iBAAnBH,IACPC,EAAaD,EACbA,EAAiB,MAEd,SAAUvO,GAAU,OAAOA,EAAOH,KAAK,IAAI8rB,EAAmB/I,EAAiBrU,EAAgBC,MAK1G,IAAImd,EAAsB,WACtB,SAASA,EAAmBzc,EAAKX,EAAgBC,QAC1B,IAAfA,IAAyBA,EAAaC,OAAOC,mBACjDhP,KAAKwP,IAAMA,EACXxP,KAAK6O,eAAiBA,EACtB7O,KAAK8O,WAAaA,EAKtB,OAHAmd,EAAmB3sB,UAAUlB,KAAO,SAAU8Q,EAAU5O,GACpD,OAAOA,EAAOP,UAAU,IAAImsB,EAAqBhd,EAAUlP,KAAKwP,IAAKxP,KAAK6O,eAAgB7O,KAAK8O,cAE5Fmd,EAVe,GAY1BluB,EAAQkuB,mBAAqBA,EAM7B,IAAIC,EAAwB,SAAUhpB,GAElC,SAASgpB,EAAqB7oB,EAAamM,EAAKX,EAAgBC,QACzC,IAAfA,IAAyBA,EAAaC,OAAOC,mBACjD9L,EAAO9E,KAAK4B,KAAMqD,GAClBrD,KAAKwP,IAAMA,EACXxP,KAAK6O,eAAiBA,EACtB7O,KAAK8O,WAAaA,EAClB9O,KAAKoP,cAAe,EACpBpP,KAAKqP,UACLrP,KAAKmN,OAAS,EACdnN,KAAK2H,MAAQ,EA2DjB,OArEAlF,EAAUypB,EAAsBhpB,GAYhCgpB,EAAqB5sB,UAAUqE,MAAQ,SAAU1E,GAC7C,GAAIe,KAAKmN,OAASnN,KAAK8O,WAAY,CAC/B,IAAID,EAAiB7O,KAAK6O,eACtBlH,EAAQ3H,KAAK2H,QACb6H,EAAMxP,KAAKwP,IACXnM,EAAcrD,KAAKqD,YACvBrD,KAAKmN,SACLnN,KAAKuP,UAAUC,EAAKnM,EAAawL,EAAgB5P,EAAO0I,QAGxD3H,KAAKqP,OAAOhH,KAAKpJ,IAGzBitB,EAAqB5sB,UAAUiQ,UAAY,SAAUC,EAAKnM,EAAawL,EAAgB5P,EAAO0I,GAC1F3H,KAAKY,IAAI8N,EAAoBrJ,kBAAkBrF,KAAMwP,EAAKvQ,EAAO0I,KAErEukB,EAAqB5sB,UAAUuE,UAAY,WACvC7D,KAAKoP,cAAe,EACA,IAAhBpP,KAAKmN,QAAuC,IAAvBnN,KAAKqP,OAAOjN,QACjCpC,KAAKqD,YAAY5C,YAGzByrB,EAAqB5sB,UAAUmH,WAAa,SAAUjB,EAAYkB,EAAYjB,EAAYkB,EAAYC,GAClG,IAAeiI,EAAN7O,KAA0B6O,eAAgBxL,EAA1CrD,KAA2DqD,YAChEwL,EACA7O,KAAKmsB,gBAAgB3mB,EAAYkB,EAAYjB,EAAYkB,GAGzDtD,EAAYlC,KAAKuF,IAGzBwlB,EAAqB5sB,UAAU6sB,gBAAkB,SAAU3mB,EAAYkB,EAAYjB,EAAYkB,GAC3F,IACIpB,EADWsJ,EAAN7O,KAA0B6O,eAAgBxL,EAA1CrD,KAA2DqD,YAEpE,IACIkC,EAASsJ,EAAerJ,EAAYkB,EAAYjB,EAAYkB,GAEhE,MAAO1F,GAEH,YADAoC,EAAY7C,MAAMS,GAGtBoC,EAAYlC,KAAKoE,IAErB2mB,EAAqB5sB,UAAUuH,YAAc,SAAU5F,GACnDjB,KAAKqD,YAAY7C,MAAMS,IAE3BirB,EAAqB5sB,UAAUwH,eAAiB,SAAUF,GACtD,IAAIyI,EAASrP,KAAKqP,OAClBrP,KAAK4H,OAAOhB,GACZ5G,KAAKmN,SACDkC,EAAOjN,OAAS,EAChBpC,KAAK2D,MAAM0L,EAAO3B,SAEG,IAAhB1N,KAAKmN,QAAgBnN,KAAKoP,cAC/BpP,KAAKqD,YAAY5C,YAGlByrB,EAtEiB,CAuE1Bvd,EAAkBpI,iBACpBxI,EAAQmuB,qBAAuBA,gCCxJ/B,IAAIE,EAAUvuB,EAAQ,IAClBwuB,EAAUxuB,EAAQ,IACtBE,EAAQuuB,YAAcD,EAAQlX,MAuD9BpX,EAAQoX,MAPR,WAEI,IADA,IAAIxE,KACKzO,EAAK,EAAGA,EAAKC,UAAUC,OAAQF,IACpCyO,EAAYzO,EAAK,GAAKC,UAAUD,GAEpC,OAAO,SAAU5B,GAAU,OAAOA,EAAOH,KAAK/B,KAAKguB,EAAQjX,MAAM3O,WAAM,GAASlG,GAAQ8H,OAAOuI,qCCvDnG,IAAIwP,EAAWtiB,EAAQ,IAsCvBE,EAAQ6V,IANR,SAAagY,GACT,IAAIhY,EAA2B,mBAAbgY,EACZ,SAAUrpB,EAAGoX,GAAK,OAAOiS,EAASrpB,EAAGoX,GAAK,EAAIpX,EAAIoX,GAClD,SAAUpX,EAAGoX,GAAK,OAAOpX,EAAIoX,EAAIpX,EAAIoX,GAC3C,OAAOwG,EAASrX,OAAO8K,kCCpC3B,IAAInR,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/EqG,EAAenL,EAAQ,GACvB4X,EAAiB5X,EAAQ,IAkD7BE,EAAQwuB,YALR,WACI,OAAO,SAAqCjsB,GACxC,OAAOA,EAAOH,KAAK,IAAIqsB,KAI/B,IAAIA,EAAuB,WACvB,SAASA,KAKT,OAHAA,EAAoBltB,UAAUlB,KAAO,SAAU2D,EAAYzB,GACvD,OAAOA,EAAOP,UAAU,IAAI0sB,EAAsB1qB,KAE/CyqB,EANgB,GAavBC,EAAyB,SAAUvpB,GAEnC,SAASupB,EAAsBppB,GAC3BH,EAAO9E,KAAK4B,KAAMqD,GAetB,OAjBAZ,EAAUgqB,EAAuBvpB,GAIjCupB,EAAsBntB,UAAUqE,MAAQ,SAAU1E,GAC9Ce,KAAKqD,YAAYlC,KAAKsU,EAAe/F,aAAaS,WAAWlR,KAEjEwtB,EAAsBntB,UAAUsE,OAAS,SAAU3C,GAC/C,IAAIoC,EAAcrD,KAAKqD,YACvBA,EAAYlC,KAAKsU,EAAe/F,aAAaW,YAAYpP,IACzDoC,EAAY5C,YAEhBgsB,EAAsBntB,UAAUuE,UAAY,WACxC,IAAIR,EAAcrD,KAAKqD,YACvBA,EAAYlC,KAAKsU,EAAe/F,aAAaY,kBAC7CjN,EAAY5C,YAETgsB,EAlBkB,CAmB3BzjB,EAAa/F,0CCzFf,IAAIR,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/EqG,EAAenL,EAAQ,GA8B3BE,EAAQ2uB,MAHR,SAAeztB,GACX,OAAO,SAAUqB,GAAU,OAAOA,EAAOH,KAAK,IAAIwsB,EAAc1tB,MAGpE,IAAI0tB,EAAiB,WACjB,SAASA,EAAc1tB,GACnBe,KAAKf,MAAQA,EAKjB,OAHA0tB,EAAcrtB,UAAUlB,KAAO,SAAU2D,EAAYzB,GACjD,OAAOA,EAAOP,UAAU,IAAI6sB,EAAgB7qB,EAAY/B,KAAKf,SAE1D0tB,EAPU,GAcjBC,EAAmB,SAAU1pB,GAE7B,SAAS0pB,EAAgBvpB,EAAapE,GAClCiE,EAAO9E,KAAK4B,KAAMqD,GAClBrD,KAAKf,MAAQA,EAKjB,OARAwD,EAAUmqB,EAAiB1pB,GAK3B0pB,EAAgBttB,UAAUqE,MAAQ,SAAUpB,GACxCvC,KAAKqD,YAAYlC,KAAKnB,KAAKf,QAExB2tB,EATY,CAUrB5jB,EAAa/F,0CC5Df,IAAIR,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/EqG,EAAenL,EAAQ,GAkB3BE,EAAQ8uB,MAHR,SAAe/T,EAAW/L,GACtB,OAAO,SAAUzM,GAAU,OAAOA,EAAOH,KAAK,IAAI2sB,EAAchU,EAAW/L,EAASzM,MAGxF,IAAIwsB,EAAiB,WACjB,SAASA,EAAchU,EAAW/L,EAASzM,GACvCN,KAAK8Y,UAAYA,EACjB9Y,KAAK+M,QAAUA,EACf/M,KAAKM,OAASA,EAKlB,OAHAwsB,EAAcxtB,UAAUlB,KAAO,SAAU8Q,EAAU5O,GAC/C,OAAOA,EAAOP,UAAU,IAAIgtB,EAAgB7d,EAAUlP,KAAK8Y,UAAW9Y,KAAK+M,QAAS/M,KAAKM,UAEtFwsB,EATU,GAgBjBC,EAAmB,SAAU7pB,GAE7B,SAAS6pB,EAAgB1pB,EAAayV,EAAW/L,EAASzM,GACtD4C,EAAO9E,KAAK4B,KAAMqD,GAClBrD,KAAK8Y,UAAYA,EACjB9Y,KAAK+M,QAAUA,EACf/M,KAAKM,OAASA,EACdN,KAAK2H,MAAQ,EACb3H,KAAK+M,QAAUA,GAAW/M,KAsB9B,OA7BAyC,EAAUsqB,EAAiB7pB,GAS3B6pB,EAAgBztB,UAAUwH,eAAiB,SAAUkmB,GACjDhtB,KAAKqD,YAAYlC,KAAK6rB,GACtBhtB,KAAKqD,YAAY5C,YAErBssB,EAAgBztB,UAAUqE,MAAQ,SAAU1E,GACxC,IAAIsG,GAAS,EACb,IACIA,EAASvF,KAAK8Y,UAAU1a,KAAK4B,KAAK+M,QAAS9N,EAAOe,KAAK2H,QAAS3H,KAAKM,QAEzE,MAAOW,GAEH,YADAjB,KAAKqD,YAAY7C,MAAMS,GAGtBsE,GACDvF,KAAK8G,gBAAe,IAG5BimB,EAAgBztB,UAAUuE,UAAY,WAClC7D,KAAK8G,gBAAe,IAEjBimB,EA9BY,CA+BrB/jB,EAAa/F,0CCvEf,IAAIR,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/EqG,EAAenL,EAAQ,GACvBwoB,EAAexoB,EAAQ,IAsB3BE,EAAQqX,KAHR,SAAc0D,EAAWjK,EAAgBgL,GACrC,OAAO,SAAUvZ,GAAU,OAAOA,EAAOH,KAAK,IAAI8sB,EAAanU,EAAWjK,EAAgBgL,EAAcvZ,MAG5G,IAAI2sB,EAAgB,WAChB,SAASA,EAAanU,EAAWjK,EAAgBgL,EAAcvZ,GAC3DN,KAAK8Y,UAAYA,EACjB9Y,KAAK6O,eAAiBA,EACtB7O,KAAK6Z,aAAeA,EACpB7Z,KAAKM,OAASA,EAKlB,OAHA2sB,EAAa3tB,UAAUlB,KAAO,SAAU8Q,EAAU5O,GAC9C,OAAOA,EAAOP,UAAU,IAAImtB,EAAehe,EAAUlP,KAAK8Y,UAAW9Y,KAAK6O,eAAgB7O,KAAK6Z,aAAc7Z,KAAKM,UAE/G2sB,EAVS,GAiBhBC,EAAkB,SAAUhqB,GAE5B,SAASgqB,EAAe7pB,EAAayV,EAAWjK,EAAgBgL,EAAcvZ,GAC1E4C,EAAO9E,KAAK4B,KAAMqD,GAClBrD,KAAK8Y,UAAYA,EACjB9Y,KAAK6O,eAAiBA,EACtB7O,KAAK6Z,aAAeA,EACpB7Z,KAAKM,OAASA,EACdN,KAAK4P,UAAW,EAChB5P,KAAK2H,MAAQ,OACe,IAAjBkS,IACP7Z,KAAKqoB,UAAYxO,EACjB7Z,KAAK4P,UAAW,GAyDxB,OApEAnN,EAAUyqB,EAAgBhqB,GAc1BgqB,EAAe5tB,UAAUqE,MAAQ,SAAU1E,GACvC,IAAI0I,EAAQ3H,KAAK2H,QACjB,GAAI3H,KAAK8Y,UACL9Y,KAAKmtB,cAAcluB,EAAO0I,OAEzB,CACD,GAAI3H,KAAK6O,eAEL,YADA7O,KAAKotB,mBAAmBnuB,EAAO0I,GAGnC3H,KAAKqoB,UAAYppB,EACjBe,KAAK4P,UAAW,IAGxBsd,EAAe5tB,UAAU6tB,cAAgB,SAAUluB,EAAO0I,GACtD,IAAIpC,EACJ,IACIA,EAASvF,KAAK8Y,UAAU7Z,EAAO0I,EAAO3H,KAAKM,QAE/C,MAAOW,GAEH,YADAjB,KAAKqD,YAAY7C,MAAMS,GAG3B,GAAIsE,EAAQ,CACR,GAAIvF,KAAK6O,eAEL,YADA7O,KAAKotB,mBAAmBnuB,EAAO0I,GAGnC3H,KAAKqoB,UAAYppB,EACjBe,KAAK4P,UAAW,IAGxBsd,EAAe5tB,UAAU8tB,mBAAqB,SAAUnuB,EAAO0I,GAC3D,IAAIpC,EACJ,IACIA,EAASvF,KAAK6O,eAAe5P,EAAO0I,GAExC,MAAO1G,GAEH,YADAjB,KAAKqD,YAAY7C,MAAMS,GAG3BjB,KAAKqoB,UAAY9iB,EACjBvF,KAAK4P,UAAW,GAEpBsd,EAAe5tB,UAAUuE,UAAY,WACjC,IAAIR,EAAcrD,KAAKqD,YACnBrD,KAAK4P,UACLvM,EAAYlC,KAAKnB,KAAKqoB,WACtBhlB,EAAY5C,YAGZ4C,EAAY7C,MAAM,IAAI6lB,EAAa7T,aAGpC0a,EArEW,CAsEpBlkB,EAAa/F,0CCpHf,IAAI2T,EAAU/Y,EAAQ,GAClBwvB,EAAUxvB,EAAQ,IAClByvB,EAAUzvB,EAAQ,KA+CtBE,EAAQwvB,UAJR,SAAmBnb,EAAUxH,GAEzB,YADkB,IAAdA,IAAwBA,EAAYgM,EAAQ3P,OACzComB,EAAQ5U,MAAM,WAAc,OAAO6U,EAAQE,MAAMpb,EAAUxH,oCC/CtE,IAAInI,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/EqG,EAAenL,EAAQ,GAI3BE,EAAQic,QAHR,WACI,OAAO,SAAU1Z,GAAU,OAAOA,EAAOH,KAAK,IAAIstB,KAGtD,IAAIA,EAAmB,WACnB,SAASA,KAKT,OAHAA,EAAgBnuB,UAAUlB,KAAO,SAAU8Q,EAAU5O,GACjD,OAAOA,EAAOP,UAAU,IAAI2tB,EAAkBxe,KAE3Cue,EANY,GAanBC,EAAqB,SAAUxqB,GAE/B,SAASwqB,EAAkBrqB,GACvBH,EAAO9E,KAAK4B,KAAMqD,GAatB,OAfAZ,EAAUirB,EAAmBxqB,GAI7BwqB,EAAkBpuB,UAAUwH,eAAiB,SAAUkT,GACnD,IAAI3W,EAAcrD,KAAKqD,YACvBA,EAAYlC,KAAK6Y,GACjB3W,EAAY5C,YAEhBitB,EAAkBpuB,UAAUqE,MAAQ,SAAU1E,GAC1Ce,KAAK8G,gBAAe,IAExB4mB,EAAkBpuB,UAAUuE,UAAY,WACpC7D,KAAK8G,gBAAe,IAEjB4mB,EAhBc,CAiBvB1kB,EAAa/F,0CCxCf,IAAIR,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/EqG,EAAenL,EAAQ,GACvBkd,EAASld,EAAQ,IAgBrBE,EAAQ4vB,eALR,WACI,OAAO,SAAwCrtB,GAC3C,OAAOA,EAAOH,KAAK,IAAIytB,KAI/B,IAAIA,EAA0B,WAC1B,SAASA,KAKT,OAHAA,EAAuBtuB,UAAUlB,KAAO,SAAU2D,EAAYzB,GAC1D,OAAOA,EAAOP,UAAU,IAAI8tB,EAAyB9rB,KAElD6rB,EANmB,GAa1BC,EAA4B,SAAU3qB,GAEtC,SAAS2qB,IACL3qB,EAAOsD,MAAMxG,KAAMmC,WAKvB,OAPAM,EAAUorB,EAA0B3qB,GAIpC2qB,EAAyBvuB,UAAUqE,MAAQ,SAAUyS,GACjD2E,EAAOD,QAEJ+S,EARqB,CAS9B7kB,EAAa/F,0CC7Cf,IAAIR,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/EqG,EAAenL,EAAQ,GACvBiF,EAAiBjF,EAAQ,GACzBqH,EAAerH,EAAQ,GACvB4U,EAAY5U,EAAQ,GACpBqT,EAAQrT,EAAQ,KAChBiwB,EAAYjwB,EAAQ,KA0ExBE,EAAQgwB,QALR,SAAiBxU,EAAayU,EAAiBpc,EAAkBqc,GAC7D,OAAO,SAAU3tB,GACb,OAAOA,EAAOH,KAAK,IAAI+tB,EAAgB3U,EAAayU,EAAiBpc,EAAkBqc,MAI/F,IAAIC,EAAmB,WACnB,SAASA,EAAgB3U,EAAayU,EAAiBpc,EAAkBqc,GACrEjuB,KAAKuZ,YAAcA,EACnBvZ,KAAKguB,gBAAkBA,EACvBhuB,KAAK4R,iBAAmBA,EACxB5R,KAAKiuB,gBAAkBA,EAK3B,OAHAC,EAAgB5uB,UAAUlB,KAAO,SAAU2D,EAAYzB,GACnD,OAAOA,EAAOP,UAAU,IAAIouB,EAAkBpsB,EAAY/B,KAAKuZ,YAAavZ,KAAKguB,gBAAiBhuB,KAAK4R,iBAAkB5R,KAAKiuB,mBAE3HC,EAVY,GAiBnBC,EAAqB,SAAUjrB,GAE/B,SAASirB,EAAkB9qB,EAAakW,EAAayU,EAAiBpc,EAAkBqc,GACpF/qB,EAAO9E,KAAK4B,KAAMqD,GAClBrD,KAAKuZ,YAAcA,EACnBvZ,KAAKguB,gBAAkBA,EACvBhuB,KAAK4R,iBAAmBA,EACxB5R,KAAKiuB,gBAAkBA,EACvBjuB,KAAKouB,OAAS,KACdpuB,KAAKquB,wBAAyB,EAC9BruB,KAAKwL,MAAQ,EAmFjB,OA5FA/I,EAAU0rB,EAAmBjrB,GAW7BirB,EAAkB7uB,UAAUqE,MAAQ,SAAU1E,GAC1C,IAAIqS,EACJ,IACIA,EAAMtR,KAAKuZ,YAAYta,GAE3B,MAAOgC,GAEH,YADAjB,KAAKQ,MAAMS,GAGfjB,KAAKsuB,OAAOrvB,EAAOqS,IAEvB6c,EAAkB7uB,UAAUgvB,OAAS,SAAUrvB,EAAOqS,GAClD,IAAI8c,EAASpuB,KAAKouB,OACbA,IACDA,EAASpuB,KAAKouB,OAAwB,iBAAR9c,EAAmB,IAAIwc,EAAUS,QAAY,IAAIrd,EAAMC,KAEzF,IACIqd,EADAC,EAAQL,EAAOrvB,IAAIuS,GAEvB,GAAItR,KAAKguB,gBACL,IACIQ,EAAUxuB,KAAKguB,gBAAgB/uB,GAEnC,MAAOgC,GACHjB,KAAKQ,MAAMS,QAIfutB,EAAUvvB,EAEd,IAAKwvB,EAAO,CACRA,EAAQzuB,KAAKiuB,gBAAkBjuB,KAAKiuB,kBAAoB,IAAIxb,EAAUrJ,QACtEglB,EAAO5V,IAAIlH,EAAKmd,GAChB,IAAIC,EAAoB,IAAIC,EAAkBrd,EAAKmd,EAAOzuB,MAE1D,GADAA,KAAKqD,YAAYlC,KAAKutB,GAClB1uB,KAAK4R,iBAAkB,CACvB,IAAIQ,OAAW,EACf,IACIA,EAAWpS,KAAK4R,iBAAiB,IAAI+c,EAAkBrd,EAAKmd,IAEhE,MAAOxtB,GAEH,YADAjB,KAAKQ,MAAMS,GAGfjB,KAAKY,IAAIwR,EAASrS,UAAU,IAAI6uB,EAAwBtd,EAAKmd,EAAOzuB,SAGvEyuB,EAAM3qB,QACP2qB,EAAMttB,KAAKqtB,IAGnBL,EAAkB7uB,UAAUsE,OAAS,SAAU3C,GAC3C,IAAImtB,EAASpuB,KAAKouB,OACdA,IACAA,EAAOltB,QAAQ,SAAUutB,EAAOnd,GAC5Bmd,EAAMjuB,MAAMS,KAEhBmtB,EAAOS,SAEX7uB,KAAKqD,YAAY7C,MAAMS,IAE3BktB,EAAkB7uB,UAAUuE,UAAY,WACpC,IAAIuqB,EAASpuB,KAAKouB,OACdA,IACAA,EAAOltB,QAAQ,SAAUutB,EAAOnd,GAC5Bmd,EAAMhuB,aAEV2tB,EAAOS,SAEX7uB,KAAKqD,YAAY5C,YAErB0tB,EAAkB7uB,UAAUwvB,YAAc,SAAUxd,GAChDtR,KAAKouB,OAAOW,OAAOzd,IAEvB6c,EAAkB7uB,UAAUwC,YAAc,WACjC9B,KAAK8D,SACN9D,KAAKquB,wBAAyB,EACX,IAAfruB,KAAKwL,OACLtI,EAAO5D,UAAUwC,YAAY1D,KAAK4B,QAIvCmuB,EA7Fc,CA8FvBnlB,EAAa/F,YAMX2rB,EAA2B,SAAU1rB,GAErC,SAAS0rB,EAAwBtd,EAAKmd,EAAO7pB,GACzC1B,EAAO9E,KAAK4B,KAAMyuB,GAClBzuB,KAAKsR,IAAMA,EACXtR,KAAKyuB,MAAQA,EACbzuB,KAAK4E,OAASA,EAYlB,OAjBAnC,EAAUmsB,EAAyB1rB,GAOnC0rB,EAAwBtvB,UAAUqE,MAAQ,SAAU1E,GAChDe,KAAKS,YAETmuB,EAAwBtvB,UAAUuF,aAAe,WAC7C,IAAeD,EAAN5E,KAAkB4E,OAAQ0M,EAA1BtR,KAAmCsR,IAC5CtR,KAAKsR,IAAMtR,KAAK4E,OAAS,KACrBA,GACAA,EAAOkqB,YAAYxd,IAGpBsd,EAlBoB,CAmB7B5lB,EAAa/F,YASX0rB,EAAqB,SAAUzrB,GAE/B,SAASyrB,EAAkBrd,EAAK0d,EAAcC,GAC1C/rB,EAAO9E,KAAK4B,MACZA,KAAKsR,IAAMA,EACXtR,KAAKgvB,aAAeA,EACpBhvB,KAAKivB,qBAAuBA,EAWhC,OAhBAxsB,EAAUksB,EAAmBzrB,GAO7ByrB,EAAkBrvB,UAAUY,WAAa,SAAU6B,GAC/C,IAAIF,EAAe,IAAIiB,EAAeoB,aACvB+qB,EAANjvB,KAAgCivB,qBAAsBD,EAAtDhvB,KAAwEgvB,aAKjF,OAJIC,IAAyBA,EAAqBnrB,QAC9CjC,EAAajB,IAAI,IAAIsuB,EAA0BD,IAEnDptB,EAAajB,IAAIouB,EAAajvB,UAAUgC,IACjCF,GAEJ8sB,EAjBc,CAkBvBzpB,EAAapF,YACf/B,EAAQ4wB,kBAAoBA,EAM5B,IAAIO,EAA6B,SAAUhsB,GAEvC,SAASgsB,EAA0BtqB,GAC/B1B,EAAO9E,KAAK4B,MACZA,KAAK4E,OAASA,EACdA,EAAO4G,QAYX,OAhBA/I,EAAUysB,EAA2BhsB,GAMrCgsB,EAA0B5vB,UAAUwC,YAAc,WAC9C,IAAI8C,EAAS5E,KAAK4E,OACbA,EAAOd,QAAW9D,KAAK8D,SACxBZ,EAAO5D,UAAUwC,YAAY1D,KAAK4B,MAClC4E,EAAO4G,OAAS,EACK,IAAjB5G,EAAO4G,OAAe5G,EAAOypB,wBAC7BzpB,EAAO9C,gBAIZotB,EAjBsB,CAkB/BpsB,EAAeoB,4CCjRjB,IAAIzB,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/EqG,EAAenL,EAAQ,GACvBwoB,EAAexoB,EAAQ,IAqD3BE,EAAQoxB,MAHR,SAAerW,EAAWjK,EAAgBgL,GACtC,OAAO,SAAUvZ,GAAU,OAAOA,EAAOH,KAAK,IAAIivB,EAActW,EAAWjK,EAAgBgL,EAAcvZ,MAG7G,IAAI8uB,EAAiB,WACjB,SAASA,EAActW,EAAWjK,EAAgBgL,EAAcvZ,GAC5DN,KAAK8Y,UAAYA,EACjB9Y,KAAK6O,eAAiBA,EACtB7O,KAAK6Z,aAAeA,EACpB7Z,KAAKM,OAASA,EAKlB,OAHA8uB,EAAc9vB,UAAUlB,KAAO,SAAU8Q,EAAU5O,GAC/C,OAAOA,EAAOP,UAAU,IAAIsvB,EAAgBngB,EAAUlP,KAAK8Y,UAAW9Y,KAAK6O,eAAgB7O,KAAK6Z,aAAc7Z,KAAKM,UAEhH8uB,EAVU,GAiBjBC,EAAmB,SAAUnsB,GAE7B,SAASmsB,EAAgBhsB,EAAayV,EAAWjK,EAAgBgL,EAAcvZ,GAC3E4C,EAAO9E,KAAK4B,KAAMqD,GAClBrD,KAAK8Y,UAAYA,EACjB9Y,KAAK6O,eAAiBA,EACtB7O,KAAK6Z,aAAeA,EACpB7Z,KAAKM,OAASA,EACdN,KAAK2H,MAAQ,EACb3H,KAAKoP,cAAe,EACpBpP,KAAKsvB,UAAW,EA6DpB,OAtEA7sB,EAAU4sB,EAAiBnsB,GAW3BmsB,EAAgB/vB,UAAUqE,MAAQ,SAAU1E,GACxC,IAAI0I,EAAQ3H,KAAK2H,QACb3H,KAAK8Y,UACL9Y,KAAKmtB,cAAcluB,EAAO0I,GAG1B3H,KAAKuvB,MAAMtwB,EAAO0I,IAG1B0nB,EAAgB/vB,UAAU6tB,cAAgB,SAAUluB,EAAO0I,GACvD,IAAIpC,EACJ,IACIA,EAASvF,KAAK8Y,UAAU7Z,EAAO0I,EAAO3H,KAAKM,QAE/C,MAAOW,GAEH,YADAjB,KAAKqD,YAAY7C,MAAMS,GAGvBsE,GACAvF,KAAKuvB,MAAMtwB,EAAO0I,IAG1B0nB,EAAgB/vB,UAAUiwB,MAAQ,SAAUtwB,EAAO0I,GAC3C3H,KAAK6O,eACL7O,KAAKotB,mBAAmBnuB,EAAO0I,GAGnC3H,KAAKwvB,WAAWvwB,IAEpBowB,EAAgB/vB,UAAU8tB,mBAAqB,SAAUnuB,EAAO0I,GAC5D,IAAIpC,EACJ,IACIA,EAASvF,KAAK6O,eAAe5P,EAAO0I,GAExC,MAAO1G,GAEH,YADAjB,KAAKqD,YAAY7C,MAAMS,GAG3BjB,KAAKwvB,WAAWjqB,IAEpB8pB,EAAgB/vB,UAAUkwB,WAAa,SAAUvwB,GAC7C,IAAIoE,EAAcrD,KAAKqD,YAClBrD,KAAKsvB,WACNtvB,KAAKsvB,UAAW,EAChBjsB,EAAYlC,KAAKlC,GACjBoE,EAAY5C,WACZT,KAAKoP,cAAe,IAG5BigB,EAAgB/vB,UAAUuE,UAAY,WAClC,IAAIR,EAAcrD,KAAKqD,YAClBrD,KAAKoP,mBAA6C,IAAtBpP,KAAK6Z,aAI5B7Z,KAAKoP,cACX/L,EAAY7C,MAAM,IAAI6lB,EAAa7T,aAJnCnP,EAAYlC,KAAKnB,KAAK6Z,cACtBxW,EAAY5C,aAMb4uB,EAvEY,CAwErBrmB,EAAa/F,0CCrJf,IAAIwsB,EAAS5xB,EAAQ,IAsCrBE,EAAQ2xB,UAHR,SAAmB5W,EAAW/L,GAC1B,OAAO,SAAUzM,GAAU,OAAOA,EAAOH,KAAK,IAAIsvB,EAAO1W,kBAAkBD,EAAWxY,GAAQ,EAAMyM,oCCpCxG,IAAItK,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/EqG,EAAenL,EAAQ,GACvBiF,EAAiBjF,EAAQ,GAY7BE,EAAQ4xB,SAHR,SAAkBC,GACd,OAAO,SAAUtvB,GAAU,OAAOA,EAAOH,KAAK,IAAI0vB,EAAgBD,MAGtE,IAAIC,EAAmB,WACnB,SAASA,EAAgBD,GACrB5vB,KAAK4vB,SAAWA,EAKpB,OAHAC,EAAgBvwB,UAAUlB,KAAO,SAAU2D,EAAYzB,GACnD,OAAOA,EAAOP,UAAU,IAAI+vB,EAAkB/tB,EAAY/B,KAAK4vB,YAE5DC,EAPY,GAcnBC,EAAqB,SAAU5sB,GAE/B,SAAS4sB,EAAkBzsB,EAAausB,GACpC1sB,EAAO9E,KAAK4B,KAAMqD,GAClBrD,KAAKY,IAAI,IAAIkC,EAAeoB,aAAa0rB,IAE7C,OALAntB,EAAUqtB,EAAmB5sB,GAKtB4sB,EANc,CAOvB9mB,EAAa/F,0CCxCf,IAAIR,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/EqG,EAAenL,EAAQ,GACvBia,EAA4Bja,EAAQ,IA8CxCE,EAAQgyB,UAHR,SAAmBpoB,EAAOkS,GACtB,OAAO,SAAUvZ,GAAU,OAAOA,EAAOH,KAAK,IAAI6vB,EAAkBroB,EAAOkS,MAG/E,IAAImW,EAAqB,WACrB,SAASA,EAAkBroB,EAAOkS,GAG9B,GAFA7Z,KAAK2H,MAAQA,EACb3H,KAAK6Z,aAAeA,EAChBlS,EAAQ,EACR,MAAM,IAAImQ,EAA0BpL,wBAM5C,OAHAsjB,EAAkB1wB,UAAUlB,KAAO,SAAU2D,EAAYzB,GACrD,OAAOA,EAAOP,UAAU,IAAIkwB,EAAoBluB,EAAY/B,KAAK2H,MAAO3H,KAAK6Z,gBAE1EmW,EAXc,GAkBrBC,EAAuB,SAAU/sB,GAEjC,SAAS+sB,EAAoB5sB,EAAasE,EAAOkS,GAC7C3W,EAAO9E,KAAK4B,KAAMqD,GAClBrD,KAAK2H,MAAQA,EACb3H,KAAK6Z,aAAeA,EAoBxB,OAxBApX,EAAUwtB,EAAqB/sB,GAM/B+sB,EAAoB3wB,UAAUqE,MAAQ,SAAUpB,GACvB,GAAjBvC,KAAK2H,UACL3H,KAAKqD,YAAYlC,KAAKoB,GACtBvC,KAAKqD,YAAY5C,aAGzBwvB,EAAoB3wB,UAAUuE,UAAY,WACtC,IAAIR,EAAcrD,KAAKqD,YACnBrD,KAAK2H,OAAS,SACmB,IAAtB3H,KAAK6Z,aACZxW,EAAYlC,KAAKnB,KAAK6Z,cAGtBxW,EAAY7C,MAAM,IAAIsX,EAA0BpL,0BAGxDrJ,EAAY5C,YAETwvB,EAzBgB,CA0BzBjnB,EAAa/F,0CCjGf,IAAIR,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/E0E,EAAaxJ,EAAQ,GACrByJ,EAAgBzJ,EAAQ,GACxB8Q,EAAoB9Q,EAAQ,GAC5B6Q,EAAsB7Q,EAAQ,GAqDlCE,EAAQmyB,OANR,SAAgBpjB,EAASgC,EAAYlE,GAIjC,YAHmB,IAAfkE,IAAyBA,EAAaC,OAAOC,wBAC/B,IAAdpE,IAAwBA,OAAYyC,GACxCyB,GAAcA,GAAc,GAAK,EAAIC,OAAOC,kBAAoBF,EACzD,SAAUxO,GAAU,OAAOA,EAAOH,KAAK,IAAIgwB,EAAerjB,EAASgC,EAAYlE,MAG1F,IAAIulB,EAAkB,WAClB,SAASA,EAAerjB,EAASgC,EAAYlE,GACzC5K,KAAK8M,QAAUA,EACf9M,KAAK8O,WAAaA,EAClB9O,KAAK4K,UAAYA,EAKrB,OAHAulB,EAAe7wB,UAAUlB,KAAO,SAAU2D,EAAYzB,GAClD,OAAOA,EAAOP,UAAU,IAAIqwB,EAAiBruB,EAAY/B,KAAK8M,QAAS9M,KAAK8O,WAAY9O,KAAK4K,aAE1FulB,EATW,GAWtBpyB,EAAQoyB,eAAiBA,EAMzB,IAAIC,EAAoB,SAAUltB,GAE9B,SAASktB,EAAiB/sB,EAAayJ,EAASgC,EAAYlE,GACxD1H,EAAO9E,KAAK4B,KAAMqD,GAClBrD,KAAK8M,QAAUA,EACf9M,KAAK8O,WAAaA,EAClB9O,KAAK4K,UAAYA,EACjB5K,KAAK2H,MAAQ,EACb3H,KAAKmN,OAAS,EACdnN,KAAKoP,cAAe,EAChBN,EAAaC,OAAOC,oBACpBhP,KAAKqP,WAwDb,OAlEA5M,EAAU2tB,EAAkBltB,GAa5BktB,EAAiBvlB,SAAW,SAAUC,GAClC,IAAI/I,EAAa+I,EAAI/I,WAAYwD,EAASuF,EAAIvF,OAAQtG,EAAQ6L,EAAI7L,MAAO0I,EAAQmD,EAAInD,MACrF5F,EAAWsuB,sBAAsB9qB,EAAQtG,EAAO0I,IAEpDyoB,EAAiB9wB,UAAUqE,MAAQ,SAAU1E,GACzC,IAAIoE,EAAcrD,KAAKqD,YACvB,GAAIA,EAAYS,OACZ9D,KAAK6D,gBADT,CAIA,IAAI8D,EAAQ3H,KAAK2H,QACjB,GAAI3H,KAAKmN,OAASnN,KAAK8O,WAAY,CAC/BzL,EAAYlC,KAAKlC,GACjB,IAAIsG,EAAS8B,EAAWQ,SAAS7H,KAAK8M,QAAzBzF,CAAkCpI,EAAO0I,GACtD,GAAIpC,IAAW+B,EAAcQ,YACzBzE,EAAY7C,MAAM8G,EAAcQ,YAAYC,QAE3C,GAAK/H,KAAK4K,UAGV,CACD,IAAIW,GAAUxJ,WAAY/B,KAAMuF,OAAQA,EAAQtG,MAAOA,EAAO0I,MAAOA,GACrE3H,KAAKY,IAAIZ,KAAK4K,UAAUH,SAAS2lB,EAAiBvlB,SAAU,EAAGU,SAJ/DvL,KAAKqwB,sBAAsB9qB,EAAQtG,EAAO0I,QAQ9C3H,KAAKqP,OAAOhH,KAAKpJ,KAGzBmxB,EAAiB9wB,UAAU+wB,sBAAwB,SAAU9qB,EAAQtG,EAAO0I,GACxE3H,KAAKmN,SACLnN,KAAKY,IAAI8N,EAAoBrJ,kBAAkBrF,KAAMuF,EAAQtG,EAAO0I,KAExEyoB,EAAiB9wB,UAAUuE,UAAY,WACnC7D,KAAKoP,cAAe,EAChBpP,KAAKoP,cAAgC,IAAhBpP,KAAKmN,QAC1BnN,KAAKqD,YAAY5C,YAGzB2vB,EAAiB9wB,UAAUmH,WAAa,SAAUjB,EAAYkB,EAAYjB,EAAYkB,EAAYC,GAC9F5G,KAAK2D,MAAM+C,IAEf0pB,EAAiB9wB,UAAUwH,eAAiB,SAAUF,GAClD,IAAIyI,EAASrP,KAAKqP,OAClBrP,KAAK4H,OAAOhB,GACZ5G,KAAKmN,SACDkC,GAAUA,EAAOjN,OAAS,GAC1BpC,KAAK2D,MAAM0L,EAAO3B,SAElB1N,KAAKoP,cAAgC,IAAhBpP,KAAKmN,QAC1BnN,KAAKqD,YAAY5C,YAGlB2vB,EAnEa,CAoEtBzhB,EAAkBpI,iBACpBxI,EAAQqyB,iBAAmBA,gCCpJ3B,IAAI3tB,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/EgM,EAAoB9Q,EAAQ,GAC5B6Q,EAAsB7Q,EAAQ,GAkDlCE,EAAQuyB,WAHR,SAAoBxjB,EAAS+B,GACzB,OAAO,SAAUvO,GAAU,OAAOA,EAAOH,KAAK,IAAIowB,EAAuBzjB,EAAS+B,MAGtF,IAAI0hB,EAA0B,WAC1B,SAASA,EAAuBzjB,EAAS+B,GACrC7O,KAAK8M,QAAUA,EACf9M,KAAK6O,eAAiBA,EAK1B,OAHA0hB,EAAuBjxB,UAAUlB,KAAO,SAAU2D,EAAYzB,GAC1D,OAAOA,EAAOP,UAAU,IAAIywB,EAAyBzuB,EAAY/B,KAAK8M,QAAS9M,KAAK6O,kBAEjF0hB,EARmB,GAe1BC,EAA4B,SAAUttB,GAEtC,SAASstB,EAAyBntB,EAAayJ,EAAS+B,GACpD3L,EAAO9E,KAAK4B,KAAMqD,GAClBrD,KAAK8M,QAAUA,EACf9M,KAAK6O,eAAiBA,EACtB7O,KAAKywB,iBAAkB,EACvBzwB,KAAKoP,cAAe,EACpBpP,KAAK2H,MAAQ,EAsDjB,OA7DAlF,EAAU+tB,EAA0BttB,GASpCstB,EAAyBlxB,UAAUqE,MAAQ,SAAU1E,GAC5Ce,KAAKywB,iBACNzwB,KAAK4mB,QAAQ3nB,IAGrBuxB,EAAyBlxB,UAAUsnB,QAAU,SAAU3nB,GACnD,IAAI0I,EAAQ3H,KAAK2H,QACbtE,EAAcrD,KAAKqD,YACvB,IACI,IAAIkC,EAASvF,KAAK8M,QAAQ7N,EAAO0I,GACjC3H,KAAKywB,iBAAkB,EACvBzwB,KAAKY,IAAI8N,EAAoBrJ,kBAAkBrF,KAAMuF,EAAQtG,EAAO0I,IAExE,MAAO1G,GACHoC,EAAY7C,MAAMS,KAG1BuvB,EAAyBlxB,UAAUuE,UAAY,WAC3C7D,KAAKoP,cAAe,EACfpP,KAAKywB,iBACNzwB,KAAKqD,YAAY5C,YAGzB+vB,EAAyBlxB,UAAUmH,WAAa,SAAUjB,EAAYkB,EAAYjB,EAAYkB,EAAYC,GACtG,IAAeiI,EAAN7O,KAA0B6O,eAAgBxL,EAA1CrD,KAA2DqD,YAChEwL,EACA7O,KAAKmsB,gBAAgB3mB,EAAYkB,EAAYjB,EAAYkB,GAGzDtD,EAAYlC,KAAKuF,IAGzB8pB,EAAyBlxB,UAAU6sB,gBAAkB,SAAU3mB,EAAYkB,EAAYjB,EAAYkB,GAC/F,IAAekI,EAAN7O,KAA0B6O,eAAgBxL,EAA1CrD,KAA2DqD,YACpE,IACI,IAAIkC,EAASsJ,EAAerJ,EAAYkB,EAAYjB,EAAYkB,GAChEtD,EAAYlC,KAAKoE,GAErB,MAAOtE,GACHoC,EAAY7C,MAAMS,KAG1BuvB,EAAyBlxB,UAAUuH,YAAc,SAAU5F,GACvDjB,KAAKqD,YAAY7C,MAAMS,IAE3BuvB,EAAyBlxB,UAAUwH,eAAiB,SAAUF,GAC1D5G,KAAK4H,OAAOhB,GACZ5G,KAAKywB,iBAAkB,EACnBzwB,KAAKoP,cACLpP,KAAKqD,YAAY5C,YAGlB+vB,EA9DqB,CA+D9B7hB,EAAkBpI,+CCvIpB,IAAI9D,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/EgM,EAAoB9Q,EAAQ,GAC5B6Q,EAAsB7Q,EAAQ,GAuClCE,EAAQ2yB,QAHR,WACI,OAAO,SAAUpwB,GAAU,OAAOA,EAAOH,KAAK,IAAIwwB,KAGtD,IAAIA,EAAuB,WACvB,SAASA,KAKT,OAHAA,EAAoBrxB,UAAUlB,KAAO,SAAU2D,EAAYzB,GACvD,OAAOA,EAAOP,UAAU,IAAI6wB,EAAsB7uB,KAE/C4uB,EANgB,GAavBC,EAAyB,SAAU1tB,GAEnC,SAAS0tB,EAAsBvtB,GAC3BH,EAAO9E,KAAK4B,KAAMqD,GAClBrD,KAAKoP,cAAe,EACpBpP,KAAKywB,iBAAkB,EAqB3B,OAzBAhuB,EAAUmuB,EAAuB1tB,GAMjC0tB,EAAsBtxB,UAAUqE,MAAQ,SAAU1E,GACzCe,KAAKywB,kBACNzwB,KAAKywB,iBAAkB,EACvBzwB,KAAKY,IAAI8N,EAAoBrJ,kBAAkBrF,KAAMf,MAG7D2xB,EAAsBtxB,UAAUuE,UAAY,WACxC7D,KAAKoP,cAAe,EACfpP,KAAKywB,iBACNzwB,KAAKqD,YAAY5C,YAGzBmwB,EAAsBtxB,UAAUwH,eAAiB,SAAUF,GACvD5G,KAAK4H,OAAOhB,GACZ5G,KAAKywB,iBAAkB,EACnBzwB,KAAKoP,cACLpP,KAAKqD,YAAY5C,YAGlBmwB,EA1BkB,CA2B3BjiB,EAAkBpI,+CCtFpB,IAAI9D,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/EqG,EAAenL,EAAQ,GAgD3BE,EAAQ8yB,IALR,SAAa7gB,EAAgBxP,EAAOC,GAChC,OAAO,SAA6BH,GAChC,OAAOA,EAAOH,KAAK,IAAI2wB,EAAW9gB,EAAgBxP,EAAOC,MAIjE,IAAIqwB,EAAc,WACd,SAASA,EAAW9gB,EAAgBxP,EAAOC,GACvCT,KAAKgQ,eAAiBA,EACtBhQ,KAAKQ,MAAQA,EACbR,KAAKS,SAAWA,EAKpB,OAHAqwB,EAAWxxB,UAAUlB,KAAO,SAAU2D,EAAYzB,GAC9C,OAAOA,EAAOP,UAAU,IAAIgxB,EAAahvB,EAAY/B,KAAKgQ,eAAgBhQ,KAAKQ,MAAOR,KAAKS,YAExFqwB,EATO,GAgBdC,EAAgB,SAAU7tB,GAE1B,SAAS6tB,EAAa1tB,EAAa2M,EAAgBxP,EAAOC,GACtDyC,EAAO9E,KAAK4B,KAAMqD,GAClB,IAAI2tB,EAAiB,IAAIhoB,EAAa/F,WAAW+M,EAAgBxP,EAAOC,GACxEuwB,EAAenwB,oBAAqB,EACpCb,KAAKY,IAAIowB,GACThxB,KAAKgxB,eAAiBA,EAgC1B,OAtCAvuB,EAAUsuB,EAAc7tB,GAQxB6tB,EAAazxB,UAAUqE,MAAQ,SAAU1E,GACrC,IAAI+xB,EAAiBhxB,KAAKgxB,eAC1BA,EAAe7vB,KAAKlC,GAChB+xB,EAAejwB,gBACff,KAAKqD,YAAY7C,MAAMwwB,EAAehwB,gBAGtChB,KAAKqD,YAAYlC,KAAKlC,IAG9B8xB,EAAazxB,UAAUsE,OAAS,SAAU3C,GACtC,IAAI+vB,EAAiBhxB,KAAKgxB,eAC1BA,EAAexwB,MAAMS,GACjB+vB,EAAejwB,gBACff,KAAKqD,YAAY7C,MAAMwwB,EAAehwB,gBAGtChB,KAAKqD,YAAY7C,MAAMS,IAG/B8vB,EAAazxB,UAAUuE,UAAY,WAC/B,IAAImtB,EAAiBhxB,KAAKgxB,eAC1BA,EAAevwB,WACXuwB,EAAejwB,gBACff,KAAKqD,YAAY7C,MAAMwwB,EAAehwB,gBAGtChB,KAAKqD,YAAY5C,YAGlBswB,EAvCS,CAwClB/nB,EAAa/F,0CC9Gf,IAAIguB,EAAyBpzB,EAAQ,IA8DrCE,EAAQmzB,wBAHR,SAAiC5f,EAAKgI,GAClC,OAAO2X,EAAuB5X,qBAAqB,SAAU9W,EAAGoX,GAAK,OAAOL,EAAUA,EAAQ/W,EAAE+O,GAAMqI,EAAErI,IAAQ/O,EAAE+O,KAASqI,EAAErI,oCC5DjI,IAAI7O,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/EgM,EAAoB9Q,EAAQ,GAC5B6Q,EAAsB7Q,EAAQ,GAC9BmT,EAAQnT,EAAQ,KAiDpBE,EAAQozB,SAHR,SAAkB5X,EAAa6X,GAC3B,OAAO,SAAU9wB,GAAU,OAAOA,EAAOH,KAAK,IAAIkxB,EAAiB9X,EAAa6X,MAGpF,IAAIC,EAAoB,WACpB,SAASA,EAAiB9X,EAAa6X,GACnCpxB,KAAKuZ,YAAcA,EACnBvZ,KAAKoxB,QAAUA,EAKnB,OAHAC,EAAiB/xB,UAAUlB,KAAO,SAAU2D,EAAYzB,GACpD,OAAOA,EAAOP,UAAU,IAAIuxB,EAAmBvvB,EAAY/B,KAAKuZ,YAAavZ,KAAKoxB,WAE/EC,EARa,GAepBC,EAAsB,SAAUpuB,GAEhC,SAASouB,EAAmBjuB,EAAakW,EAAa6X,GAClDluB,EAAO9E,KAAK4B,KAAMqD,GAClBrD,KAAKuZ,YAAcA,EACnBvZ,KAAKkU,OAAS,IAAIlD,EAAMC,IACpBmgB,GACApxB,KAAKY,IAAI8N,EAAoBrJ,kBAAkBrF,KAAMoxB,IAoC7D,OA1CA3uB,EAAU6uB,EAAoBpuB,GAS9BouB,EAAmBhyB,UAAUmH,WAAa,SAAUjB,EAAYkB,EAAYjB,EAAYkB,EAAYC,GAChG5G,KAAKkU,OAAO2a,SAEhByC,EAAmBhyB,UAAUuH,YAAc,SAAUrG,EAAOoG,GACxD5G,KAAK4D,OAAOpD,IAEhB8wB,EAAmBhyB,UAAUqE,MAAQ,SAAU1E,GACvCe,KAAKuZ,YACLvZ,KAAKuxB,gBAAgBtyB,GAGrBe,KAAKwxB,cAAcvyB,EAAOA,IAGlCqyB,EAAmBhyB,UAAUiyB,gBAAkB,SAAUtyB,GACrD,IAAIqS,EACAjO,EAAcrD,KAAKqD,YACvB,IACIiO,EAAMtR,KAAKuZ,YAAYta,GAE3B,MAAOgC,GAEH,YADAoC,EAAY7C,MAAMS,GAGtBjB,KAAKwxB,cAAclgB,EAAKrS,IAE5BqyB,EAAmBhyB,UAAUkyB,cAAgB,SAAUlgB,EAAKrS,GACxD,IAAIiV,EAASlU,KAAKkU,OACbA,EAAOud,IAAIngB,KACZ4C,EAAOtT,IAAI0Q,GACXtR,KAAKqD,YAAYlC,KAAKlC,KAGvBqyB,EA3Ce,CA4CxB3iB,EAAkBpI,iBACpBxI,EAAQuzB,mBAAqBA,gCCrH7B,IAAI7uB,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/EqG,EAAenL,EAAQ,GACvBqH,EAAerH,EAAQ,GACvB8Q,EAAoB9Q,EAAQ,GAC5B6Q,EAAsB7Q,EAAQ,GAuDlCE,EAAQ2zB,UATR,SAAmBC,EAAuBC,GACtC,OAAIA,EACO,SAAUtxB,GACb,OAAO,IAAIuxB,EAA4BvxB,EAAQsxB,GAC1CzxB,KAAK,IAAI2xB,EAAkBH,KAGjC,SAAUrxB,GAAU,OAAOA,EAAOH,KAAK,IAAI2xB,EAAkBH,MAGxE,IAAIG,EAAqB,WACrB,SAASA,EAAkBH,GACvB3xB,KAAK2xB,sBAAwBA,EAKjC,OAHAG,EAAkBxyB,UAAUlB,KAAO,SAAU2D,EAAYzB,GACrD,OAAOA,EAAOP,UAAU,IAAIgyB,EAAoBhwB,EAAY/B,KAAK2xB,yBAE9DG,EAPc,GAcrBC,EAAuB,SAAU7uB,GAEjC,SAAS6uB,EAAoB1uB,EAAasuB,GACtCzuB,EAAO9E,KAAK4B,KAAMqD,GAClBrD,KAAK2xB,sBAAwBA,EAC7B3xB,KAAKgyB,WAAY,EACjBhyB,KAAKiyB,8BACLjyB,KAAKkU,UAwDT,OA9DAzR,EAAUsvB,EAAqB7uB,GAQ/B6uB,EAAoBzyB,UAAUmH,WAAa,SAAUjB,EAAYkB,EAAYjB,EAAYkB,EAAYC,GACjG5G,KAAKqD,YAAYlC,KAAKqE,GACtBxF,KAAKkyB,mBAAmBtrB,GACxB5G,KAAKmyB,eAETJ,EAAoBzyB,UAAUuH,YAAc,SAAUrG,EAAOoG,GACzD5G,KAAK4D,OAAOpD,IAEhBuxB,EAAoBzyB,UAAUwH,eAAiB,SAAUF,GACrD,IAAI3H,EAAQe,KAAKkyB,mBAAmBtrB,GAChC3H,GACAe,KAAKqD,YAAYlC,KAAKlC,GAE1Be,KAAKmyB,eAETJ,EAAoBzyB,UAAUqE,MAAQ,SAAU1E,GAC5C,IACI,IAAImzB,EAAgBpyB,KAAK2xB,sBAAsB1yB,GAC3CmzB,GACApyB,KAAKqyB,SAASD,EAAenzB,GAGrC,MAAOgC,GACHjB,KAAKqD,YAAY7C,MAAMS,KAG/B8wB,EAAoBzyB,UAAUuE,UAAY,WACtC7D,KAAKgyB,WAAY,EACjBhyB,KAAKmyB,eAETJ,EAAoBzyB,UAAU4yB,mBAAqB,SAAUrwB,GACzDA,EAAaC,cACb,IAAIwwB,EAAkBtyB,KAAKiyB,2BAA2BrpB,QAAQ/G,GAC1D5C,EAAQ,KAMZ,OALyB,IAArBqzB,IACArzB,EAAQe,KAAKkU,OAAOoe,GACpBtyB,KAAKiyB,2BAA2BppB,OAAOypB,EAAiB,GACxDtyB,KAAKkU,OAAOrL,OAAOypB,EAAiB,IAEjCrzB,GAEX8yB,EAAoBzyB,UAAU+yB,SAAW,SAAUD,EAAenzB,GAC9D,IAAIszB,EAAuB7jB,EAAoBrJ,kBAAkBrF,KAAMoyB,EAAenzB,GAClFszB,IAAyBA,EAAqBzuB,SAC9C9D,KAAKY,IAAI2xB,GACTvyB,KAAKiyB,2BAA2B5pB,KAAKkqB,IAEzCvyB,KAAKkU,OAAO7L,KAAKpJ,IAErB8yB,EAAoBzyB,UAAU6yB,YAAc,WACpCnyB,KAAKgyB,WAAwD,IAA3ChyB,KAAKiyB,2BAA2B7vB,QAClDpC,KAAKqD,YAAY5C,YAGlBsxB,EA/DgB,CAgEzBpjB,EAAkBpI,iBAMhBsrB,EAA+B,SAAU3uB,GAEzC,SAAS2uB,EAA4BvxB,EAAQsxB,GACzC1uB,EAAO9E,KAAK4B,MACZA,KAAKM,OAASA,EACdN,KAAK4xB,kBAAoBA,EAK7B,OATAnvB,EAAUovB,EAA6B3uB,GAMvC2uB,EAA4BvyB,UAAUY,WAAa,SAAU6B,GACzD/B,KAAK4xB,kBAAkB7xB,UAAU,IAAIyyB,EAA4BzwB,EAAY/B,KAAKM,UAE/EuxB,EAVwB,CAWjC3sB,EAAapF,YAMX0yB,EAA+B,SAAUtvB,GAEzC,SAASsvB,EAA4B5tB,EAAQtE,GACzC4C,EAAO9E,KAAK4B,MACZA,KAAK4E,OAASA,EACd5E,KAAKM,OAASA,EACdN,KAAKyyB,kBAAmB,EAmB5B,OAxBAhwB,EAAU+vB,EAA6BtvB,GAOvCsvB,EAA4BlzB,UAAUqE,MAAQ,SAAUyS,GACpDpW,KAAK0yB,qBAETF,EAA4BlzB,UAAUsE,OAAS,SAAU3C,GACrDjB,KAAK8B,cACL9B,KAAK4E,OAAOpE,MAAMS,IAEtBuxB,EAA4BlzB,UAAUuE,UAAY,WAC9C7D,KAAK0yB,qBAETF,EAA4BlzB,UAAUozB,kBAAoB,WACjD1yB,KAAKyyB,mBACNzyB,KAAKyyB,kBAAmB,EACxBzyB,KAAK8B,cACL9B,KAAKM,OAAOP,UAAUC,KAAK4E,UAG5B4tB,EAzBwB,CA0BjCxpB,EAAa/F,0CC/Lf,IAAIR,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/EiU,EAAU/Y,EAAQ,GAClB0iB,EAAW1iB,EAAQ,IACnBmL,EAAenL,EAAQ,GACvB4X,EAAiB5X,EAAQ,IA8C7BE,EAAQ0P,MANR,SAAeA,EAAO7C,QACA,IAAdA,IAAwBA,EAAYgM,EAAQ3P,OAChD,IACI0rB,EADgBpS,EAASxL,OAAOtH,IACHA,EAAQ7C,EAAUsI,MAASS,KAAKkN,IAAIpT,GACrE,OAAO,SAAUnN,GAAU,OAAOA,EAAOH,KAAK,IAAIyyB,EAAcD,EAAU/nB,MAG9E,IAAIgoB,EAAiB,WACjB,SAASA,EAAcnlB,EAAO7C,GAC1B5K,KAAKyN,MAAQA,EACbzN,KAAK4K,UAAYA,EAKrB,OAHAgoB,EAActzB,UAAUlB,KAAO,SAAU2D,EAAYzB,GACjD,OAAOA,EAAOP,UAAU,IAAI8yB,EAAgB9wB,EAAY/B,KAAKyN,MAAOzN,KAAK4K,aAEtEgoB,EARU,GAejBC,EAAmB,SAAU3vB,GAE7B,SAAS2vB,EAAgBxvB,EAAaoK,EAAO7C,GACzC1H,EAAO9E,KAAK4B,KAAMqD,GAClBrD,KAAKyN,MAAQA,EACbzN,KAAK4K,UAAYA,EACjB5K,KAAKuT,SACLvT,KAAKmN,QAAS,EACdnN,KAAKoO,SAAU,EA8CnB,OArDA3L,EAAUowB,EAAiB3vB,GAS3B2vB,EAAgBhoB,SAAW,SAAUU,GAKjC,IAJA,IAAIjL,EAASiL,EAAMjL,OACfiT,EAAQjT,EAAOiT,MACf3I,EAAYW,EAAMX,UAClBvH,EAAckI,EAAMlI,YACjBkQ,EAAMnR,OAAS,GAAMmR,EAAM,GAAGG,KAAO9I,EAAUsI,OAAU,GAC5DK,EAAM7F,QAAQkI,aAAa/F,QAAQxM,GAEvC,GAAIkQ,EAAMnR,OAAS,EAAG,CAClB,IAAI0wB,EAAUnf,KAAKC,IAAI,EAAGL,EAAM,GAAGG,KAAO9I,EAAUsI,OACpDlT,KAAKyK,SAASc,EAAOunB,QAGrBxyB,EAAO6M,QAAS,GAGxB0lB,EAAgBvzB,UAAUyzB,UAAY,SAAUnoB,GAC5C5K,KAAKmN,QAAS,EACdnN,KAAKY,IAAIgK,EAAUH,SAASooB,EAAgBhoB,SAAU7K,KAAKyN,OACvDnN,OAAQN,KAAMqD,YAAarD,KAAKqD,YAAauH,UAAWA,MAGhEioB,EAAgBvzB,UAAU0zB,qBAAuB,SAAUpd,GACvD,IAAqB,IAAjB5V,KAAKoO,QAAT,CAGA,IAAIxD,EAAY5K,KAAK4K,UACjBgC,EAAU,IAAIqmB,EAAaroB,EAAUsI,MAAQlT,KAAKyN,MAAOmI,GAC7D5V,KAAKuT,MAAMlL,KAAKuE,IACI,IAAhB5M,KAAKmN,QACLnN,KAAK+yB,UAAUnoB,KAGvBioB,EAAgBvzB,UAAUqE,MAAQ,SAAU1E,GACxCe,KAAKgzB,qBAAqBvd,EAAe/F,aAAaS,WAAWlR,KAErE4zB,EAAgBvzB,UAAUsE,OAAS,SAAU3C,GACzCjB,KAAKoO,SAAU,EACfpO,KAAKuT,SACLvT,KAAKqD,YAAY7C,MAAMS,IAE3B4xB,EAAgBvzB,UAAUuE,UAAY,WAClC7D,KAAKgzB,qBAAqBvd,EAAe/F,aAAaY,mBAEnDuiB,EAtDY,CAuDrB7pB,EAAa/F,YACXgwB,EAAgB,WAKhB,OAJA,SAAsBvf,EAAMkC,GACxB5V,KAAK0T,KAAOA,EACZ1T,KAAK4V,aAAeA,GAHR,iCC9HpB,IAAInT,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/EqG,EAAenL,EAAQ,GACvB+Y,EAAU/Y,EAAQ,GAmDtBE,EAAQm1B,aAJR,SAAsBC,EAASvoB,GAE3B,YADkB,IAAdA,IAAwBA,EAAYgM,EAAQ3P,OACzC,SAAU3G,GAAU,OAAOA,EAAOH,KAAK,IAAIizB,EAAqBD,EAASvoB,MAGpF,IAAIwoB,EAAwB,WACxB,SAASA,EAAqBD,EAASvoB,GACnC5K,KAAKmzB,QAAUA,EACfnzB,KAAK4K,UAAYA,EAKrB,OAHAwoB,EAAqB9zB,UAAUlB,KAAO,SAAU2D,EAAYzB,GACxD,OAAOA,EAAOP,UAAU,IAAIszB,EAAuBtxB,EAAY/B,KAAKmzB,QAASnzB,KAAK4K,aAE/EwoB,EARiB,GAexBC,EAA0B,SAAUnwB,GAEpC,SAASmwB,EAAuBhwB,EAAa8vB,EAASvoB,GAClD1H,EAAO9E,KAAK4B,KAAMqD,GAClBrD,KAAKmzB,QAAUA,EACfnzB,KAAK4K,UAAYA,EACjB5K,KAAKszB,sBAAwB,KAC7BtzB,KAAKqoB,UAAY,KACjBroB,KAAK4P,UAAW,EA4BpB,OAnCAnN,EAAU4wB,EAAwBnwB,GASlCmwB,EAAuB/zB,UAAUqE,MAAQ,SAAU1E,GAC/Ce,KAAKuzB,gBACLvzB,KAAKqoB,UAAYppB,EACjBe,KAAK4P,UAAW,EAChB5P,KAAKY,IAAIZ,KAAKszB,sBAAwBtzB,KAAK4K,UAAUH,SAAS2X,EAAcpiB,KAAKmzB,QAASnzB,QAE9FqzB,EAAuB/zB,UAAUuE,UAAY,WACzC7D,KAAKwzB,gBACLxzB,KAAKqD,YAAY5C,YAErB4yB,EAAuB/zB,UAAUk0B,cAAgB,WAC7CxzB,KAAKuzB,gBACDvzB,KAAK4P,WACL5P,KAAKqD,YAAYlC,KAAKnB,KAAKqoB,WAC3BroB,KAAKqoB,UAAY,KACjBroB,KAAK4P,UAAW,IAGxByjB,EAAuB/zB,UAAUi0B,cAAgB,WAC7C,IAAID,EAAwBtzB,KAAKszB,sBACH,OAA1BA,IACAtzB,KAAK4H,OAAO0rB,GACZA,EAAsBxxB,cACtB9B,KAAKszB,sBAAwB,OAG9BD,EApCmB,CAqC5BrqB,EAAa/F,YACf,SAASmf,EAAargB,GAClBA,EAAWyxB,+CChHf,IAAI/wB,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/EgM,EAAoB9Q,EAAQ,GAC5B6Q,EAAsB7Q,EAAQ,GA8ClCE,EAAQ01B,SAHR,SAAkB7hB,GACd,OAAO,SAAUtR,GAAU,OAAOA,EAAOH,KAAK,IAAIuzB,EAAiB9hB,MAGvE,IAAI8hB,EAAoB,WACpB,SAASA,EAAiB9hB,GACtB5R,KAAK4R,iBAAmBA,EAK5B,OAHA8hB,EAAiBp0B,UAAUlB,KAAO,SAAU2D,EAAYzB,GACpD,OAAOA,EAAOP,UAAU,IAAI4zB,EAAmB5xB,EAAY/B,KAAK4R,oBAE7D8hB,EAPa,GAcpBC,EAAsB,SAAUzwB,GAEhC,SAASywB,EAAmBtwB,EAAauO,GACrC1O,EAAO9E,KAAK4B,KAAMqD,GAClBrD,KAAK4R,iBAAmBA,EACxB5R,KAAK4P,UAAW,EAChB5P,KAAK4zB,qBAAuB,KAkDhC,OAvDAnxB,EAAUkxB,EAAoBzwB,GAO9BywB,EAAmBr0B,UAAUqE,MAAQ,SAAU1E,GAC3C,IACI,IAAIsG,EAASvF,KAAK4R,iBAAiBxT,KAAK4B,KAAMf,GAC1CsG,GACAvF,KAAKsP,SAASrQ,EAAOsG,GAG7B,MAAOtE,GACHjB,KAAKqD,YAAY7C,MAAMS,KAG/B0yB,EAAmBr0B,UAAUuE,UAAY,WACrC7D,KAAK0oB,YACL1oB,KAAKqD,YAAY5C,YAErBkzB,EAAmBr0B,UAAUgQ,SAAW,SAAUrQ,EAAOmT,GACrD,IAAIvQ,EAAe7B,KAAK4zB,qBACxB5zB,KAAKf,MAAQA,EACbe,KAAK4P,UAAW,EACZ/N,IACAA,EAAaC,cACb9B,KAAK4H,OAAO/F,KAEhBA,EAAe6M,EAAoBrJ,kBAAkBrF,KAAMoS,IACzCtO,QACd9D,KAAKY,IAAIZ,KAAK4zB,qBAAuB/xB,IAG7C8xB,EAAmBr0B,UAAUmH,WAAa,SAAUjB,EAAYkB,EAAYjB,EAAYkB,EAAYC,GAChG5G,KAAK0oB,aAETiL,EAAmBr0B,UAAUwH,eAAiB,WAC1C9G,KAAK0oB,aAETiL,EAAmBr0B,UAAUopB,UAAY,WACrC,GAAI1oB,KAAK4P,SAAU,CACf,IAAI3Q,EAAQe,KAAKf,MACb4C,EAAe7B,KAAK4zB,qBACpB/xB,IACA7B,KAAK4zB,qBAAuB,KAC5B/xB,EAAaC,cACb9B,KAAK4H,OAAO/F,IAEhB7B,KAAKf,MAAQ,KACbe,KAAK4P,UAAW,EAChB1M,EAAO5D,UAAUqE,MAAMvF,KAAK4B,KAAMf,KAGnC00B,EAxDe,CAyDxBhlB,EAAkBpI,+CC5HpB,IAAI9D,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/EqG,EAAenL,EAAQ,GA8C3BE,EAAQ81B,cALR,WACI,OAAO,SAAuCvzB,GAC1C,OAAOA,EAAOH,KAAK,IAAI2zB,KAI/B,IAAIA,EAAyB,WACzB,SAASA,KAKT,OAHAA,EAAsBx0B,UAAUlB,KAAO,SAAU2D,EAAYzB,GACzD,OAAOA,EAAOP,UAAU,IAAIg0B,EAAwBhyB,KAEjD+xB,EANkB,GAazBC,EAA2B,SAAU7wB,GAErC,SAAS6wB,EAAwB1wB,GAC7BH,EAAO9E,KAAK4B,KAAMqD,GAKtB,OAPAZ,EAAUsxB,EAAyB7wB,GAInC6wB,EAAwBz0B,UAAUqE,MAAQ,SAAU1E,GAChDA,EAAM4Q,QAAQ7P,KAAKqD,cAEhB0wB,EARoB,CAS7B/qB,EAAa/F,0CC1Ef,IAAIR,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/EqG,EAAenL,EAAQ,GAoD3BE,EAAQyN,MAHR,SAAesN,GACX,OAAO,SAAUxY,GAAU,OAAOA,EAAOH,KAAK,IAAI6zB,EAAclb,EAAWxY,MAG/E,IAAI0zB,EAAiB,WACjB,SAASA,EAAclb,EAAWxY,GAC9BN,KAAK8Y,UAAYA,EACjB9Y,KAAKM,OAASA,EAKlB,OAHA0zB,EAAc10B,UAAUlB,KAAO,SAAU2D,EAAYzB,GACjD,OAAOA,EAAOP,UAAU,IAAIk0B,EAAgBlyB,EAAY/B,KAAK8Y,UAAW9Y,KAAKM,UAE1E0zB,EARU,GAejBC,EAAmB,SAAU/wB,GAE7B,SAAS+wB,EAAgB5wB,EAAayV,EAAWxY,GAC7C4C,EAAO9E,KAAK4B,KAAMqD,GAClBrD,KAAK8Y,UAAYA,EACjB9Y,KAAKM,OAASA,EACdN,KAAKwL,MAAQ,EACbxL,KAAK2H,MAAQ,EA2BjB,OAjCAlF,EAAUwxB,EAAiB/wB,GAQ3B+wB,EAAgB30B,UAAUqE,MAAQ,SAAU1E,GACpCe,KAAK8Y,UACL9Y,KAAKmtB,cAAcluB,GAGnBe,KAAKwL,SAGbyoB,EAAgB30B,UAAU6tB,cAAgB,SAAUluB,GAChD,IAAIsG,EACJ,IACIA,EAASvF,KAAK8Y,UAAU7Z,EAAOe,KAAK2H,QAAS3H,KAAKM,QAEtD,MAAOW,GAEH,YADAjB,KAAKqD,YAAY7C,MAAMS,GAGvBsE,GACAvF,KAAKwL,SAGbyoB,EAAgB30B,UAAUuE,UAAY,WAClC7D,KAAKqD,YAAYlC,KAAKnB,KAAKwL,OAC3BxL,KAAKqD,YAAY5C,YAEdwzB,EAlCY,CAmCrBjrB,EAAa/F,0CC5Gf,IAAIixB,EAAcr2B,EAAQ,IA6D1BE,EAAQo2B,YAHR,SAAqBjR,EAAiBrU,GAClC,OAAOqlB,EAAYja,UAAU,WAAc,OAAOiJ,GAAoBrU,kCC3D1E,IAAIiW,EAAWjnB,EAAQ,IACnBu2B,EAAWv2B,EAAQ,IACvBE,EAAQs2B,aAAeD,EAAShsB,OA0DhCrK,EAAQqK,OAPR,WAEI,IADA,IAAIuI,KACKzO,EAAK,EAAGA,EAAKC,UAAUC,OAAQF,IACpCyO,EAAYzO,EAAK,GAAKC,UAAUD,GAEpC,OAAO,SAAU5B,GAAU,OAAOA,EAAOH,KAAK/B,KAAK0mB,EAAS1c,OAAO5B,WAAM,GAASlG,GAAQ8H,OAAOuI,qCC1DrG,IAAI2jB,EAAkBz2B,EAAQ,IAI9BE,EAAQw2B,WAHR,SAAoBznB,GAChB,OAAO,SAAUxM,GAAU,OAAOA,EAAOH,KAAK,IAAIm0B,EAAgBre,sBAAsBnJ,oCCF5F,IAAIrK,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/EgM,EAAoB9Q,EAAQ,GAC5B6Q,EAAsB7Q,EAAQ,GAiElCE,EAAQy2B,WAPR,SAAoB5oB,GAChB,OAAO,SAAoCtL,GACvC,IAAIF,EAAW,IAAIq0B,EAAc7oB,GAC7B8oB,EAASp0B,EAAOH,KAAKC,GACzB,OAAQA,EAASs0B,OAASA,IAIlC,IAAID,EAAiB,WACjB,SAASA,EAAc7oB,GACnB5L,KAAK4L,SAAWA,EAKpB,OAHA6oB,EAAcn1B,UAAUlB,KAAO,SAAU2D,EAAYzB,GACjD,OAAOA,EAAOP,UAAU,IAAI40B,EAAgB5yB,EAAY/B,KAAK4L,SAAU5L,KAAK00B,UAEzED,EAPU,GAcjBE,EAAmB,SAAUzxB,GAE7B,SAASyxB,EAAgBtxB,EAAauI,EAAU8oB,GAC5CxxB,EAAO9E,KAAK4B,KAAMqD,GAClBrD,KAAK4L,SAAWA,EAChB5L,KAAK00B,OAASA,EAqBlB,OAzBAjyB,EAAUkyB,EAAiBzxB,GAW3ByxB,EAAgBr1B,UAAUkB,MAAQ,SAAUS,GACxC,IAAKjB,KAAKoD,UAAW,CACjB,IAAImC,OAAS,EACb,IACIA,EAASvF,KAAK4L,SAAS3K,EAAKjB,KAAK00B,QAErC,MAAOE,GAEH,YADA1xB,EAAO5D,UAAUkB,MAAMpC,KAAK4B,KAAM40B,GAGtC50B,KAAK+D,yBACL/D,KAAKY,IAAI8N,EAAoBrJ,kBAAkBrF,KAAMuF,MAGtDovB,EA1BY,CA2BrBhmB,EAAkBpI,+CCjHpB,IAAI9D,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/EG,EAAiBjF,EAAQ,GACzBwJ,EAAaxJ,EAAQ,GACrByJ,EAAgBzJ,EAAQ,GACxB8Q,EAAoB9Q,EAAQ,GAC5B6Q,EAAsB7Q,EAAQ,GAuClCE,EAAQ82B,WALR,SAAoBtX,GAChB,OAAO,SAAUjd,GACb,OAAOA,EAAOH,KAAK,IAAI20B,EAAmBvX,MAIlD,IAAIuX,EAAsB,WACtB,SAASA,EAAmBvX,GACxBvd,KAAKud,gBAAkBA,EAK3B,OAHAuX,EAAmBx1B,UAAUlB,KAAO,SAAU2D,EAAYzB,GACtD,OAAOA,EAAOP,UAAU,IAAIg1B,EAAqBhzB,EAAY/B,KAAKud,mBAE/DuX,EAPe,GActBC,EAAwB,SAAU7xB,GAElC,SAAS6xB,EAAqB1xB,EAAaka,GACvCra,EAAO9E,KAAK4B,KAAMqD,GAClBrD,KAAKud,gBAAkBA,EACvBvd,KAAKg1B,aAAc,EACnBh1B,KAAKi1B,aAmDT,OAxDAxyB,EAAUsyB,EAAsB7xB,GAOhC6xB,EAAqBz1B,UAAUqE,MAAQ,SAAU1E,GAC7Ce,KAAKqP,OAAOhH,KAAKpJ,IAErB81B,EAAqBz1B,UAAUuE,UAAY,WACvC,IAAIwL,EAASrP,KAAKqP,OACdA,GACArP,KAAKqD,YAAYlC,KAAKkO,GAE1BnM,EAAO5D,UAAUuE,UAAUzF,KAAK4B,OAEpC+0B,EAAqBz1B,UAAUuF,aAAe,WAC1C7E,KAAKqP,OAAS,KACdrP,KAAKg1B,aAAc,GAEvBD,EAAqBz1B,UAAUmH,WAAa,SAAUjB,EAAYkB,EAAYjB,EAAYkB,EAAYC,GAClG5G,KAAKi1B,cAETF,EAAqBz1B,UAAUwH,eAAiB,WACxC9G,KAAKg1B,YACLh1B,KAAKS,WAGLT,KAAKi1B,cAGbF,EAAqBz1B,UAAU21B,WAAa,WACxC,IAAIC,EAAsBl1B,KAAKk1B,oBAC3BA,IACAl1B,KAAK4H,OAAOstB,GACZA,EAAoBpzB,eAExB,IAAIuN,EAASrP,KAAKqP,OACdrP,KAAKqP,QACLrP,KAAKqD,YAAYlC,KAAKkO,GAE1BrP,KAAKqP,UACL,IAAIyO,EAAkBzW,EAAWQ,SAAS7H,KAAKud,gBAAzBlW,GAClByW,IAAoBxW,EAAcQ,YAClC9H,KAAKQ,MAAM8G,EAAcQ,YAAYC,IAGrCmtB,EAAsB,IAAIpyB,EAAeoB,aACzClE,KAAKk1B,oBAAsBA,EAC3Bl1B,KAAKY,IAAIs0B,GACTl1B,KAAKg1B,aAAc,EACnBE,EAAoBt0B,IAAI8N,EAAoBrJ,kBAAkBrF,KAAM8d,IACpE9d,KAAKg1B,aAAc,IAGpBD,EAzDiB,CA0D1BpmB,EAAkBpI,+CCzHpB,IAAI9D,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/EG,EAAiBjF,EAAQ,GACzB6Q,EAAsB7Q,EAAQ,GAC9B8Q,EAAoB9Q,EAAQ,GA4ChCE,EAAQo3B,aALR,SAAsBnX,EAAUT,GAC5B,OAAO,SAAsCjd,GACzC,OAAOA,EAAOH,KAAK,IAAIi1B,EAAqBpX,EAAUT,MAI9D,IAAI6X,EAAwB,WACxB,SAASA,EAAqBpX,EAAUT,GACpCvd,KAAKge,SAAWA,EAChBhe,KAAKud,gBAAkBA,EAK3B,OAHA6X,EAAqB91B,UAAUlB,KAAO,SAAU2D,EAAYzB,GACxD,OAAOA,EAAOP,UAAU,IAAIs1B,EAAuBtzB,EAAY/B,KAAKge,SAAUhe,KAAKud,mBAEhF6X,EARiB,GAexBC,EAA0B,SAAUnyB,GAEpC,SAASmyB,EAAuBhyB,EAAa2a,EAAUT,GACnDra,EAAO9E,KAAK4B,KAAMqD,GAClBrD,KAAKge,SAAWA,EAChBhe,KAAKud,gBAAkBA,EACvBvd,KAAKme,YACLne,KAAKY,IAAI8N,EAAoBrJ,kBAAkBrF,KAAMge,IA4EzD,OAlFAvb,EAAU4yB,EAAwBnyB,GAQlCmyB,EAAuB/1B,UAAUqE,MAAQ,SAAU1E,GAG/C,IAFA,IAAIkf,EAAWne,KAAKme,SAChBvY,EAAMuY,EAAS/b,OACVnE,EAAI,EAAGA,EAAI2H,EAAK3H,IACrBkgB,EAASlgB,GAAGoR,OAAOhH,KAAKpJ,IAGhCo2B,EAAuB/1B,UAAUsE,OAAS,SAAU3C,GAEhD,IADA,IAAIkd,EAAWne,KAAKme,SACbA,EAAS/b,OAAS,GAAG,CACxB,IAAIgC,EAAU+Z,EAASzQ,QACvBtJ,EAAQvC,aAAaC,cACrBsC,EAAQiL,OAAS,KACjBjL,EAAQvC,aAAe,KAE3B7B,KAAKme,SAAW,KAChBjb,EAAO5D,UAAUsE,OAAOxF,KAAK4B,KAAMiB,IAEvCo0B,EAAuB/1B,UAAUuE,UAAY,WAEzC,IADA,IAAIsa,EAAWne,KAAKme,SACbA,EAAS/b,OAAS,GAAG,CACxB,IAAIgC,EAAU+Z,EAASzQ,QACvB1N,KAAKqD,YAAYlC,KAAKiD,EAAQiL,QAC9BjL,EAAQvC,aAAaC,cACrBsC,EAAQiL,OAAS,KACjBjL,EAAQvC,aAAe,KAE3B7B,KAAKme,SAAW,KAChBjb,EAAO5D,UAAUuE,UAAUzF,KAAK4B,OAEpCq1B,EAAuB/1B,UAAUmH,WAAa,SAAUjB,EAAYkB,EAAYjB,EAAYkB,EAAYC,GACpGpB,EAAaxF,KAAKs1B,YAAY9vB,GAAcxF,KAAKi1B,WAAWvuB,IAEhE2uB,EAAuB/1B,UAAUwH,eAAiB,SAAUF,GACxD5G,KAAKs1B,YAAY1uB,EAASxC,UAE9BixB,EAAuB/1B,UAAU21B,WAAa,SAAUh2B,GACpD,IACI,IACI6e,EADkB9d,KAAKud,gBACWnf,KAAK4B,KAAMf,GAC7C6e,GACA9d,KAAKu1B,aAAazX,GAG1B,MAAO7c,GACHjB,KAAK4D,OAAO3C,KAGpBo0B,EAAuB/1B,UAAUg2B,YAAc,SAAUlxB,GACrD,IAAI+Z,EAAWne,KAAKme,SACpB,GAAIA,GAAY/Z,EAAS,CACrB,IAAIiL,EAASjL,EAAQiL,OAAQxN,EAAeuC,EAAQvC,aACpD7B,KAAKqD,YAAYlC,KAAKkO,GACtB8O,EAAStV,OAAOsV,EAASvV,QAAQxE,GAAU,GAC3CpE,KAAK4H,OAAO/F,GACZA,EAAaC,gBAGrBuzB,EAAuB/1B,UAAUi2B,aAAe,SAAUzX,GACtD,IAAIK,EAAWne,KAAKme,SAEhBtc,EAAe,IAAIiB,EAAeoB,aAClCE,GAAYiL,UAAgBxN,aAAcA,GAC9Csc,EAAS9V,KAAKjE,GACd,IAAI+S,EAAoBzI,EAAoBrJ,kBAAkBrF,KAAM8d,EAAiB1Z,IAChF+S,GAAqBA,EAAkBrT,OACxC9D,KAAKs1B,YAAYlxB,IAGjB+S,EAAkB/S,QAAUA,EAC5BpE,KAAKY,IAAIuW,GACTtV,EAAajB,IAAIuW,KAGlBke,EAnFmB,CAoF5B1mB,EAAkBpI,+CCvJpB,IAAI9D,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/EiU,EAAU/Y,EAAQ,GAClBmL,EAAenL,EAAQ,GACvBoN,EAAgBpN,EAAQ,IAgE5BE,EAAQy3B,WAnBR,SAAoBC,GAChB,IAAIrzB,EAASD,UAAUC,OACnBwI,EAAYgM,EAAQ3P,MACpBgE,EAAcT,YAAYrI,UAAUA,UAAUC,OAAS,MACvDwI,EAAYzI,UAAUA,UAAUC,OAAS,GACzCA,KAEJ,IAAIszB,EAAyB,KACzBtzB,GAAU,IACVszB,EAAyBvzB,UAAU,IAEvC,IAAIwzB,EAAgB5mB,OAAOC,kBAI3B,OAHI5M,GAAU,IACVuzB,EAAgBxzB,UAAU,IAEvB,SAAoC7B,GACvC,OAAOA,EAAOH,KAAK,IAAIy1B,EAAmBH,EAAgBC,EAAwBC,EAAe/qB,MAIzG,IAAIgrB,EAAsB,WACtB,SAASA,EAAmBH,EAAgBC,EAAwBC,EAAe/qB,GAC/E5K,KAAKy1B,eAAiBA,EACtBz1B,KAAK01B,uBAAyBA,EAC9B11B,KAAK21B,cAAgBA,EACrB31B,KAAK4K,UAAYA,EAKrB,OAHAgrB,EAAmBt2B,UAAUlB,KAAO,SAAU2D,EAAYzB,GACtD,OAAOA,EAAOP,UAAU,IAAI81B,EAAqB9zB,EAAY/B,KAAKy1B,eAAgBz1B,KAAK01B,uBAAwB11B,KAAK21B,cAAe31B,KAAK4K,aAErIgrB,EAVe,GAYtBE,EAAW,WAIX,OAHA,WACI91B,KAAKqP,WAFE,GAWXwmB,EAAwB,SAAU3yB,GAElC,SAAS2yB,EAAqBxyB,EAAaoyB,EAAgBC,EAAwBC,EAAe/qB,GAC9F1H,EAAO9E,KAAK4B,KAAMqD,GAClBrD,KAAKy1B,eAAiBA,EACtBz1B,KAAK01B,uBAAyBA,EAC9B11B,KAAK21B,cAAgBA,EACrB31B,KAAK4K,UAAYA,EACjB5K,KAAKme,YACL,IAAI/Z,EAAUpE,KAAK+1B,cAEnB,GADA/1B,KAAKg2B,aAAyC,MAA1BN,GAAkCA,EAAyB,EAC3E11B,KAAKg2B,aAAc,CACnB,IAAI3W,GAAsBtd,WAAY/B,KAAMoE,QAASA,EAASqxB,eAAgBA,GAC9Ez1B,KAAKY,IAAIwD,EAAQ6xB,YAAcrrB,EAAUH,SAASyrB,EAA4BT,EAAgBpW,QAE7F,CACD,IAAIJ,GAAeld,WAAY/B,KAAMoE,QAASA,GAC1C8a,GAAkBuW,eAAgBA,EAAgBC,uBAAwBA,EAAwB3zB,WAAY/B,KAAM4K,UAAWA,GACnI5K,KAAKY,IAAIwD,EAAQ6xB,YAAcrrB,EAAUH,SAAS0rB,EAAqBV,EAAgBxW,IACvFjf,KAAKY,IAAIgK,EAAUH,SAAS2rB,EAAwBV,EAAwBxW,KA2DpF,OA7EAzc,EAAUozB,EAAsB3yB,GAqBhC2yB,EAAqBv2B,UAAUqE,MAAQ,SAAU1E,GAI7C,IAHA,IAEIo3B,EAFAlY,EAAWne,KAAKme,SAChBvY,EAAMuY,EAAS/b,OAEVnE,EAAI,EAAGA,EAAI2H,EAAK3H,IAAK,CAC1B,IAAImG,EAAU+Z,EAASlgB,GACnBoR,EAASjL,EAAQiL,OACrBA,EAAOhH,KAAKpJ,GACRoQ,EAAOjN,QAAUpC,KAAK21B,gBACtBU,EAAsBjyB,GAG1BiyB,GACAr2B,KAAKs2B,aAAaD,IAG1BR,EAAqBv2B,UAAUsE,OAAS,SAAU3C,GAC9CjB,KAAKme,SAAS/b,OAAS,EACvBc,EAAO5D,UAAUsE,OAAOxF,KAAK4B,KAAMiB,IAEvC40B,EAAqBv2B,UAAUuE,UAAY,WAEvC,IADA,IAAesa,EAANne,KAAoBme,SAAU9a,EAA9BrD,KAA+CqD,YACjD8a,EAAS/b,OAAS,GAAG,CACxB,IAAIgC,EAAU+Z,EAASzQ,QACvBrK,EAAYlC,KAAKiD,EAAQiL,QAE7BnM,EAAO5D,UAAUuE,UAAUzF,KAAK4B,OAEpC61B,EAAqBv2B,UAAUuF,aAAe,WAC1C7E,KAAKme,SAAW,MAEpB0X,EAAqBv2B,UAAUg3B,aAAe,SAAUlyB,GACpDpE,KAAKu2B,aAAanyB,GAClB,IAAI6xB,EAAc7xB,EAAQ6xB,YAG1B,GAFAA,EAAYn0B,cACZ9B,KAAK4H,OAAOquB,IACPj2B,KAAK8D,QAAU9D,KAAKg2B,aAAc,CACnC5xB,EAAUpE,KAAK+1B,cACf,IAAIN,EAAiBz1B,KAAKy1B,eACtBpW,GAAsBtd,WAAY/B,KAAMoE,QAASA,EAASqxB,eAAgBA,GAC9Ez1B,KAAKY,IAAIwD,EAAQ6xB,YAAcj2B,KAAK4K,UAAUH,SAASyrB,EAA4BT,EAAgBpW,MAG3GwW,EAAqBv2B,UAAUy2B,YAAc,WACzC,IAAI3xB,EAAU,IAAI0xB,EAElB,OADA91B,KAAKme,SAAS9V,KAAKjE,GACZA,GAEXyxB,EAAqBv2B,UAAUi3B,aAAe,SAAUnyB,GACpDpE,KAAKqD,YAAYlC,KAAKiD,EAAQiL,QAC9B,IAAI8O,EAAWne,KAAKme,UACFA,EAAWA,EAASvV,QAAQxE,IAAY,IACvC,GACf+Z,EAAStV,OAAOsV,EAASvV,QAAQxE,GAAU,IAG5CyxB,EA9EiB,CA+E1B7sB,EAAa/F,YACf,SAASizB,EAA2B3qB,GAChC,IAAIxJ,EAAawJ,EAAMxJ,WACnBy0B,EAAcjrB,EAAMnH,QACpBoyB,GACAz0B,EAAWw0B,aAAaC,GAEvBz0B,EAAW+B,SACZyH,EAAMnH,QAAUrC,EAAWg0B,cAC3BxqB,EAAMnH,QAAQ6xB,YAAcj2B,KAAKyK,SAASc,EAAOA,EAAMkqB,iBAG/D,SAASW,EAAuB7qB,GAC5B,IAAImqB,EAAyBnqB,EAAMmqB,uBAAwBD,EAAiBlqB,EAAMkqB,eAAgB1zB,EAAawJ,EAAMxJ,WAAY6I,EAAYW,EAAMX,UAC/IxG,EAAUrC,EAAWg0B,cAEpBh0B,EAAW+B,SACZ/B,EAAWnB,IAAIwD,EAAQ6xB,YAAcrrB,EAAUH,SAAS0rB,EAAqBV,GAAkB1zB,WAAYA,EAAYqC,QAASA,KAFvHpE,KAGFyK,SAASc,EAAOmqB,IAG/B,SAASS,EAAoBrrB,GACzB,IAAI/I,EAAa+I,EAAI/I,WAAYqC,EAAU0G,EAAI1G,QAC/CrC,EAAWw0B,aAAanyB,kCCrM5B,IAAI3B,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/EqG,EAAenL,EAAQ,GAgD3BE,EAAQ04B,YANR,SAAqB5jB,EAAY6jB,GAE7B,YADyB,IAArBA,IAA+BA,EAAmB,MAC/C,SAAqCp2B,GACxC,OAAOA,EAAOH,KAAK,IAAIw2B,EAAoB9jB,EAAY6jB,MAI/D,IAAIC,EAAuB,WACvB,SAASA,EAAoB9jB,EAAY6jB,GACrC12B,KAAK6S,WAAaA,EAClB7S,KAAK02B,iBAAmBA,EAKpB12B,KAAK42B,gBAJJF,GAAoB7jB,IAAe6jB,EAIbG,EAHAC,EAS/B,OAHAH,EAAoBr3B,UAAUlB,KAAO,SAAU2D,EAAYzB,GACvD,OAAOA,EAAOP,UAAU,IAAIC,KAAK42B,gBAAgB70B,EAAY/B,KAAK6S,WAAY7S,KAAK02B,oBAEhFC,EAdgB,GAqBvBG,EAAyB,SAAU5zB,GAEnC,SAAS4zB,EAAsBzzB,EAAawP,GACxC3P,EAAO9E,KAAK4B,KAAMqD,GAClBrD,KAAK6S,WAAaA,EAClB7S,KAAKqP,UAiBT,OArBA5M,EAAUq0B,EAAuB5zB,GAMjC4zB,EAAsBx3B,UAAUqE,MAAQ,SAAU1E,GAC9C,IAAIoQ,EAASrP,KAAKqP,OAClBA,EAAOhH,KAAKpJ,GACRoQ,EAAOjN,QAAUpC,KAAK6S,aACtB7S,KAAKqD,YAAYlC,KAAKkO,GACtBrP,KAAKqP,YAGbynB,EAAsBx3B,UAAUuE,UAAY,WACxC,IAAIwL,EAASrP,KAAKqP,OACdA,EAAOjN,OAAS,GAChBpC,KAAKqD,YAAYlC,KAAKkO,GAE1BnM,EAAO5D,UAAUuE,UAAUzF,KAAK4B,OAE7B82B,EAtBkB,CAuB3B9tB,EAAa/F,YAMX4zB,EAA6B,SAAU3zB,GAEvC,SAAS2zB,EAA0BxzB,EAAawP,EAAY6jB,GACxDxzB,EAAO9E,KAAK4B,KAAMqD,GAClBrD,KAAK6S,WAAaA,EAClB7S,KAAK02B,iBAAmBA,EACxB12B,KAAK+2B,WACL/2B,KAAKwL,MAAQ,EA2BjB,OAjCA/I,EAAUo0B,EAA2B3zB,GAQrC2zB,EAA0Bv3B,UAAUqE,MAAQ,SAAU1E,GAClD,IAAe4T,EAAN7S,KAAsB6S,WAAY6jB,EAAlC12B,KAAwD02B,iBAAkBK,EAA1E/2B,KAAuF+2B,QAASvrB,EAAhGxL,KAA2GwL,MACpHxL,KAAKwL,QACDA,EAAQkrB,GAAqB,GAC7BK,EAAQ1uB,SAEZ,IAAK,IAAIpK,EAAI84B,EAAQ30B,OAAQnE,KAAM,CAC/B,IAAIoR,EAAS0nB,EAAQ94B,GACrBoR,EAAOhH,KAAKpJ,GACRoQ,EAAOjN,SAAWyQ,IAClBkkB,EAAQluB,OAAO5K,EAAG,GAClB+B,KAAKqD,YAAYlC,KAAKkO,MAIlCwnB,EAA0Bv3B,UAAUuE,UAAY,WAE5C,IADA,IAAekzB,EAAN/2B,KAAmB+2B,QAAS1zB,EAA5BrD,KAA6CqD,YAC/C0zB,EAAQ30B,OAAS,GAAG,CACvB,IAAIiN,EAAS0nB,EAAQrpB,QACjB2B,EAAOjN,OAAS,GAChBiB,EAAYlC,KAAKkO,GAGzBnM,EAAO5D,UAAUuE,UAAUzF,KAAK4B,OAE7B62B,EAlCsB,CAmC/B7tB,EAAa/F,0CC3If,IAAIR,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/EgM,EAAoB9Q,EAAQ,GAC5B6Q,EAAsB7Q,EAAQ,GAsClCE,EAAQsR,OALR,SAAgByO,GACZ,OAAO,SAAgCxd,GACnC,OAAOA,EAAOH,KAAK,IAAI62B,EAAelZ,MAI9C,IAAIkZ,EAAkB,WAClB,SAASA,EAAelZ,GACpB9d,KAAK8d,gBAAkBA,EAK3B,OAHAkZ,EAAe13B,UAAUlB,KAAO,SAAU2D,EAAYzB,GAClD,OAAOA,EAAOP,UAAU,IAAIk3B,EAAiBl1B,EAAY/B,KAAK8d,mBAE3DkZ,EAPW,GAclBC,EAAoB,SAAU/zB,GAE9B,SAAS+zB,EAAiB5zB,EAAaya,GACnC5a,EAAO9E,KAAK4B,KAAMqD,GAClBrD,KAAKqP,UACLrP,KAAKY,IAAI8N,EAAoBrJ,kBAAkBrF,KAAM8d,IAUzD,OAdArb,EAAUw0B,EAAkB/zB,GAM5B+zB,EAAiB33B,UAAUqE,MAAQ,SAAU1E,GACzCe,KAAKqP,OAAOhH,KAAKpJ,IAErBg4B,EAAiB33B,UAAUmH,WAAa,SAAUjB,EAAYkB,EAAYjB,EAAYkB,EAAYC,GAC9F,IAAIyI,EAASrP,KAAKqP,OAClBrP,KAAKqP,UACLrP,KAAKqD,YAAYlC,KAAKkO,IAEnB4nB,EAfa,CAgBtBtoB,EAAkBpI,+CC3EpB,IAAI2wB,EAAgBr5B,EAAQ,KACxBs5B,EAAmBt5B,EAAQ,KA8D/BE,EAAQwV,MAAQ,IAAI4jB,EAAiBC,eAAeF,EAAcG,2CC/DlE,IAAI50B,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/EjD,EAAS7B,EAAQ,GACjBwJ,EAAaxJ,EAAQ,GACrByJ,EAAgBzJ,EAAQ,GACxBqH,EAAerH,EAAQ,GACvBmL,EAAenL,EAAQ,GACvBgZ,EAAQhZ,EAAQ,IAqCpB,SAASy5B,EAAQC,EAAKC,GAElB,YADgB,IAAZA,IAAsBA,EAAU,MAC7B,IAAIC,GAAiBC,OAAQ,MAAOH,IAAKA,EAAKC,QAASA,IAIlE,SAASG,EAASJ,EAAKK,EAAMJ,GACzB,OAAO,IAAIC,GAAiBC,OAAQ,OAAQH,IAAKA,EAAKK,KAAMA,EAAMJ,QAASA,IAI/E,SAASK,EAAWN,EAAKC,GACrB,OAAO,IAAIC,GAAiBC,OAAQ,SAAUH,IAAKA,EAAKC,QAASA,IAIrE,SAASM,EAAQP,EAAKK,EAAMJ,GACxB,OAAO,IAAIC,GAAiBC,OAAQ,MAAOH,IAAKA,EAAKK,KAAMA,EAAMJ,QAASA,IAI9E,SAASO,EAAUR,EAAKK,EAAMJ,GAC1B,OAAO,IAAIC,GAAiBC,OAAQ,QAASH,IAAKA,EAAKK,KAAMA,EAAMJ,QAASA,IAlBhFz5B,EAAQu5B,QAAUA,EAKlBv5B,EAAQ45B,SAAWA,EAKnB55B,EAAQ85B,WAAaA,EAKrB95B,EAAQ+5B,QAAUA,EAKlB/5B,EAAQg6B,UAAYA,EAEpB,IAAIC,EAAcnhB,EAAMhK,IAAI,SAAUtK,EAAGoF,GAAS,OAAOpF,EAAE01B,WAC3D,SAASC,EAAYX,EAAKC,GACtB,OAAOQ,EAAY,IAAIP,GACnBC,OAAQ,MACRH,IAAKA,EACLY,aAAc,OACdX,QAASA,KAGjBz5B,EAAQm6B,YAAcA,EAOtB,IAAIT,EAAkB,SAAUv0B,GAE5B,SAASu0B,EAAeW,GACpBl1B,EAAO9E,KAAK4B,MACZ,IAAIq4B,GACApxB,OAAO,EACPqxB,UAAW,WACP,OAAOt4B,KAAKu4B,YArF5B,WACI,GAAI74B,EAAO4B,KAAKk3B,eACZ,OAAO,IAAI94B,EAAO4B,KAAKk3B,eAEtB,GAAM94B,EAAO4B,KAAKm3B,eACnB,OAAO,IAAI/4B,EAAO4B,KAAKm3B,eAGvB,MAAM,IAAI/2B,MAAM,0CA6EiCtD,KAAK4B,MA1E9D,WACI,GAAIN,EAAO4B,KAAKk3B,eACZ,OAAO,IAAI94B,EAAO4B,KAAKk3B,eAGvB,IAAIE,OAAS,EACb,IAEI,IADA,IAAIC,GAAW,iBAAkB,oBAAqB,sBAC7C16B,EAAI,EAAGA,EAAI,EAAGA,IACnB,IAEI,GADAy6B,EAASC,EAAQ16B,GACb,IAAIyB,EAAO4B,KAAKs3B,cAAcF,GAC9B,MAGR,MAAO3wB,IAGX,OAAO,IAAIrI,EAAO4B,KAAKs3B,cAAcF,GAEzC,MAAO3wB,GACH,MAAM,IAAIrG,MAAM,oDAqD0Cm3B,IAE1DN,aAAa,EACbO,iBAAiB,EACjBtB,WACAE,OAAQ,MACRS,aAAc,OACd/W,QAAS,GAEb,GAA4B,iBAAjBgX,EACPC,EAAQd,IAAMa,OAGd,IAAK,IAAIW,KAAQX,EACTA,EAAa74B,eAAew5B,KAC5BV,EAAQU,GAAQX,EAAaW,IAIzC/4B,KAAKq4B,QAAUA,EA+BM,IACjB71B,EAWR,OApEAC,EAAUg1B,EAAgBv0B,GA2B1Bu0B,EAAen4B,UAAUY,WAAa,SAAU6B,GAC5C,OAAO,IAAIi3B,EAAej3B,EAAY/B,KAAKq4B,UA4B/CZ,EAAej1B,SACPA,EAAS,SAAU41B,GACnB,OAAO,IAAIX,EAAeW,KAEvBr5B,IAAMu4B,EACb90B,EAAOy2B,KAAOtB,EACdn1B,EAAOusB,OAAS8I,EAChBr1B,EAAO02B,IAAMpB,EACbt1B,EAAO22B,MAAQpB,EACfv1B,EAAO42B,QAAUlB,EACV11B,GAEJi1B,EArEW,CAsEpBvyB,EAAapF,YACf/B,EAAQ05B,eAAiBA,EAMzB,IAAIuB,EAAkB,SAAU91B,GAE5B,SAAS81B,EAAe31B,EAAag1B,GACjCn1B,EAAO9E,KAAK4B,KAAMqD,GAClBrD,KAAKq4B,QAAUA,EACfr4B,KAAKkG,MAAO,EACZ,IAAIsxB,EAAUa,EAAQb,QAAUa,EAAQb,YAEnCa,EAAQE,aAAgBf,EAAQ,sBACjCA,EAAQ,oBAAsB,kBAG5B,iBAAkBA,GAAc93B,EAAO4B,KAAK+3B,UAAYhB,EAAQT,gBAAgBl4B,EAAO4B,KAAK+3B,eAAqC,IAAjBhB,EAAQT,OAC1HJ,EAAQ,gBAAkB,oDAG9Ba,EAAQT,KAAO53B,KAAKs5B,cAAcjB,EAAQT,KAAMS,EAAQb,QAAQ,iBAChEx3B,KAAKu5B,OAoKT,OApLA92B,EAAUu2B,EAAgB91B,GAkB1B81B,EAAe15B,UAAU6B,KAAO,SAAU4G,GACtC/H,KAAKkG,MAAO,EACZ,IAAeszB,EAANx5B,KAAew5B,IAAKnB,EAApBr4B,KAAiCq4B,QAASh1B,EAA1CrD,KAA2DqD,YAChE40B,EAAW,IAAIwB,EAAa1xB,EAAGyxB,EAAKnB,GACxCh1B,EAAYlC,KAAK82B,IAErBe,EAAe15B,UAAUi6B,KAAO,WAC5B,IAAelB,EAANr4B,KAAmBq4B,QAAS5Q,EAA5BznB,KAAoCq4B,QAASqB,EAAOjS,EAAGiS,KAAMhC,EAASjQ,EAAGiQ,OAAQH,EAAM9P,EAAG8P,IAAKtwB,EAAQwgB,EAAGxgB,MAAO0yB,EAAWlS,EAAGkS,SAAUnC,EAAU/P,EAAG+P,QAASI,EAAOnQ,EAAGmQ,KAC9KU,EAAYD,EAAQC,UACpBkB,EAAMnyB,EAAWQ,SAASywB,GAAWl6B,KAAKi6B,GAC9C,GAAImB,IAAQlyB,EAAcQ,YACtB9H,KAAKQ,MAAM8G,EAAcQ,YAAYC,OAEpC,CACD/H,KAAKw5B,IAAMA,EAKXx5B,KAAK45B,YAAYJ,EAAKnB,GAStB,IANIqB,EACSryB,EAAWQ,SAAS2xB,EAAIK,MAAMz7B,KAAKo7B,EAAK9B,EAAQH,EAAKtwB,EAAOyyB,EAAMC,GAGlEtyB,EAAWQ,SAAS2xB,EAAIK,MAAMz7B,KAAKo7B,EAAK9B,EAAQH,EAAKtwB,MAEnDK,EAAcQ,YAEzB,OADA9H,KAAKQ,MAAM8G,EAAcQ,YAAYC,GAC9B,KAcX,GAXId,IACAuyB,EAAIpY,QAAUiX,EAAQjX,QACtBoY,EAAIrB,aAAeE,EAAQF,cAE3B,oBAAqBqB,IACrBA,EAAIV,kBAAoBT,EAAQS,iBAGpC94B,KAAK85B,WAAWN,EAAKhC,IAEZI,EAAOvwB,EAAWQ,SAAS2xB,EAAID,MAAMn7B,KAAKo7B,EAAK5B,GAAQvwB,EAAWQ,SAAS2xB,EAAID,MAAMn7B,KAAKo7B,MACpFlyB,EAAcQ,YAEzB,OADA9H,KAAKQ,MAAM8G,EAAcQ,YAAYC,GAC9B,KAGf,OAAOyxB,GAEXR,EAAe15B,UAAUg6B,cAAgB,SAAU1B,EAAMmC,GACrD,IAAKnC,GAAwB,iBAATA,EAChB,OAAOA,EAEN,GAAIl4B,EAAO4B,KAAK+3B,UAAYzB,aAAgBl4B,EAAO4B,KAAK+3B,SACzD,OAAOzB,EAEX,GAAImC,EAAa,CACb,IAAIC,EAAaD,EAAYnxB,QAAQ,MACjB,IAAhBoxB,IACAD,EAAcA,EAAYE,UAAU,EAAGD,IAG/C,OAAQD,GACJ,IAAK,oCACD,OAAOp7B,OAAOyS,KAAKwmB,GAAM/qB,IAAI,SAAUyE,GAAO,OAAQ4oB,UAAU5oB,GAAO,IAAM4oB,UAAUtC,EAAKtmB,MAAW6oB,KAAK,KAChH,IAAK,mBACD,OAAOC,KAAKC,UAAUzC,GAC1B,QACI,OAAOA,IAGnBoB,EAAe15B,UAAUw6B,WAAa,SAAUN,EAAKhC,GACjD,IAAK,IAAIlmB,KAAOkmB,EACRA,EAAQj4B,eAAe+R,IACvBkoB,EAAIc,iBAAiBhpB,EAAKkmB,EAAQlmB,KAI9C0nB,EAAe15B,UAAUs6B,YAAc,SAAUJ,EAAKnB,GAClD,IAAIkC,EAAqBlC,EAAQkC,mBACjC,SAASC,EAAWzyB,GAChB,IAAIwK,EAAKioB,EAAYz4B,EAAawQ,EAAGxQ,WAAYw4B,EAAqBhoB,EAAGgoB,mBAAoBlC,EAAU9lB,EAAG8lB,QACtGkC,GACAA,EAAmB/5B,MAAMuH,GAE7BhG,EAAWvB,MAAM,IAAIi6B,EAAiBz6B,KAAMq4B,IAOhD,GAJAmB,EAAIkB,UAAYF,EAChBA,EAAWnC,QAAUA,EACrBmC,EAAWz4B,WAAa/B,KACxBw6B,EAAWD,mBAAqBA,EAC5Bf,EAAImB,QAAU,oBAAqBnB,EAAK,CAEpC,IAAIoB,EAaJC,EAdJ,GAAIN,EAEAK,EAAgB,SAAU7yB,GACG6yB,EAAcL,mBACpBp5B,KAAK4G,IAExBrI,EAAO4B,KAAKm3B,eACZe,EAAIsB,WAAaF,EAGjBpB,EAAImB,OAAOG,WAAaF,EAE5BA,EAAcL,mBAAqBA,EAGvCM,EAAa,SAAU9yB,GACnB,IAAIwK,EAAKsoB,EAAYN,EAAqBhoB,EAAGgoB,mBAAoBx4B,EAAawQ,EAAGxQ,WAAYs2B,EAAU9lB,EAAG8lB,QACtGkC,GACAA,EAAmB/5B,MAAMuH,GAE7BhG,EAAWvB,MAAM,IAAIu6B,EAAU,aAAc/6B,KAAMq4B,KAEvDmB,EAAIwB,QAAUH,EACdA,EAAWxC,QAAUA,EACrBwC,EAAW94B,WAAa/B,KACxB66B,EAAWN,mBAAqBA,EAEpC,SAASU,EAAoBlzB,GACzB,IAAIwK,EAAK0oB,EAAqBl5B,EAAawQ,EAAGxQ,WAAYw4B,EAAqBhoB,EAAGgoB,mBAAoBlC,EAAU9lB,EAAG8lB,QACnH,GAAwB,IAApBr4B,KAAKk7B,WAAkB,CAEvB,IAAIC,EAA2B,OAAhBn7B,KAAKo7B,OAAkB,IAAMp7B,KAAKo7B,OAC7CnD,EAAkC,SAAtBj4B,KAAKm4B,aAA2Bn4B,KAAKi4B,UAAYj4B,KAAKq7B,aAAgBr7B,KAAKi4B,SAI1E,IAAbkD,IACAA,EAAWlD,EAAW,IAAM,GAE5B,KAAOkD,GAAYA,EAAW,KAC1BZ,GACAA,EAAmB95B,WAEvBsB,EAAWZ,KAAK4G,GAChBhG,EAAWtB,aAGP85B,GACAA,EAAmB/5B,MAAMuH,GAE7BhG,EAAWvB,MAAM,IAAIu6B,EAAU,cAAgBI,EAAUn7B,KAAMq4B,MAK3EmB,EAAI8B,mBAAqBL,EACzBA,EAAoBl5B,WAAa/B,KACjCi7B,EAAoBV,mBAAqBA,EACzCU,EAAoB5C,QAAUA,GAElCW,EAAe15B,UAAUwC,YAAc,WACnC,IAAeoE,EAANlG,KAAgBkG,KAAMszB,EAAtBx5B,KAA+Bw5B,KACnCtzB,GAAQszB,GAA0B,IAAnBA,EAAI0B,YAAyC,mBAAd1B,EAAI+B,OACnD/B,EAAI+B,QAERr4B,EAAO5D,UAAUwC,YAAY1D,KAAK4B,OAE/Bg5B,EArLW,CAsLpBhwB,EAAa/F,YACflF,EAAQi7B,eAAiBA,EAQzB,IAAIS,EAAgB,WAShB,OARA,SAAsB+B,EAAehC,EAAKnB,GACtCr4B,KAAKw7B,cAAgBA,EACrBx7B,KAAKw5B,IAAMA,EACXx5B,KAAKq4B,QAAUA,EACfr4B,KAAKo7B,OAAS5B,EAAI4B,OAClBp7B,KAAKm4B,aAAeqB,EAAIrB,cAAgBE,EAAQF,aAChDn4B,KAAKi4B,SAAWwD,EAAiBz7B,KAAKm4B,aAAcqB,IAPxC,GAWpBz7B,EAAQ07B,aAAeA,EAQvB,IAAIsB,EAAa,SAAU73B,GAEvB,SAAS63B,EAAUnuB,EAAS4sB,EAAKnB,GAC7Bn1B,EAAO9E,KAAK4B,KAAM4M,GAClB5M,KAAK4M,QAAUA,EACf5M,KAAKw5B,IAAMA,EACXx5B,KAAKq4B,QAAUA,EACfr4B,KAAKo7B,OAAS5B,EAAI4B,OAClBp7B,KAAKm4B,aAAeqB,EAAIrB,cAAgBE,EAAQF,aAChDn4B,KAAKi4B,SAAWwD,EAAiBz7B,KAAKm4B,aAAcqB,GAExD,OAVA/2B,EAAUs4B,EAAW73B,GAUd63B,EAXM,CAYfr5B,OAEF,SAAS+5B,EAAiBtD,EAAcqB,GACpC,OAAQrB,GACJ,IAAK,OACD,MAAI,aAAcqB,EAEPA,EAAIrB,aAAeqB,EAAIvB,SAAWmC,KAAKsB,MAAMlC,EAAIvB,UAAYuB,EAAI6B,cAAgB,QAKjFjB,KAAKsB,MAAMlC,EAAI6B,cAAgB,QAE9C,IAAK,MACD,OAAO7B,EAAImC,YACf,IAAK,OACL,QAGI,MAAQ,aAAcnC,EAAOA,EAAIvB,SAAWuB,EAAI6B,cAnB5Dt9B,EAAQg9B,UAAYA,EA2BpB,IAAIN,EAAoB,SAAUv3B,GAE9B,SAASu3B,EAAiBjB,EAAKnB,GAC3Bn1B,EAAO9E,KAAK4B,KAAM,eAAgBw5B,EAAKnB,GAE3C,OAJA51B,EAAUg4B,EAAkBv3B,GAIrBu3B,EALa,CAMtBM,GACFh9B,EAAQ08B,iBAAmBA,gCCva3B,IAAImB,EAAoB/9B,EAAQ,KAChCE,EAAQyvB,MAAQoO,EAAkBC,gBAAgBr5B,qCCElDzE,EAAQyX,SAHR,SAAkBjT,GACd,OAAOA,iCCDX,IAAIE,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/EjD,EAAS7B,EAAQ,GAOjBi+B,EAAqB,SAAU54B,GAE/B,SAAS44B,EAAkBC,EAASnxB,GAChC1H,EAAO9E,KAAK4B,MACZA,KAAK+7B,QAAUA,EACf/7B,KAAK4K,UAAYA,EAsFrB,OA1FAnI,EAAUq5B,EAAmB54B,GAgC7B44B,EAAkBt5B,OAAS,SAAUu5B,EAASnxB,GAC1C,OAAO,IAAIkxB,EAAkBC,EAASnxB,IAE1CkxB,EAAkBx8B,UAAUY,WAAa,SAAU6B,GAC/C,IAAIV,EAAQrB,KACR+7B,EAAU/7B,KAAK+7B,QACfnxB,EAAY5K,KAAK4K,UACrB,GAAiB,MAAbA,EACI5K,KAAKC,UACA8B,EAAW+B,SACZ/B,EAAWZ,KAAKnB,KAAKf,OACrB8C,EAAWtB,YAIfs7B,EAAQj2B,KAAK,SAAU7G,GACnBoC,EAAMpC,MAAQA,EACdoC,EAAMpB,WAAY,EACb8B,EAAW+B,SACZ/B,EAAWZ,KAAKlC,GAChB8C,EAAWtB,aAEhB,SAAUQ,GACJc,EAAW+B,QACZ/B,EAAWvB,MAAMS,KAGpB6E,KAAK,KAAM,SAAU7E,GAEtBvB,EAAO4B,KAAKyE,WAAW,WAAc,MAAM9E,WAKnD,GAAIjB,KAAKC,WACL,IAAK8B,EAAW+B,OACZ,OAAO8G,EAAUH,SAAS2X,EAAc,GAAKnjB,MAAOe,KAAKf,MAAO8C,WAAYA,SAIhFg6B,EAAQj2B,KAAK,SAAU7G,GACnBoC,EAAMpC,MAAQA,EACdoC,EAAMpB,WAAY,EACb8B,EAAW+B,QACZ/B,EAAWnB,IAAIgK,EAAUH,SAAS2X,EAAc,GAAKnjB,MAAOA,EAAO8C,WAAYA,MAEpF,SAAUd,GACJc,EAAW+B,QACZ/B,EAAWnB,IAAIgK,EAAUH,SAASuxB,EAAe,GAAK/6B,IAAKA,EAAKc,WAAYA,OAG/E+D,KAAK,KAAM,SAAU7E,GAEtBvB,EAAO4B,KAAKyE,WAAW,WAAc,MAAM9E,OAKpD66B,EA3Fc,CANNj+B,EAAQ,GAkGZiC,YAEf,SAASsiB,EAAatX,GAClB,IAAI7L,EAAQ6L,EAAI7L,MAAO8C,EAAa+I,EAAI/I,WACnCA,EAAW+B,SACZ/B,EAAWZ,KAAKlC,GAChB8C,EAAWtB,YAGnB,SAASu7B,EAAclxB,GACnB,IAAI7J,EAAM6J,EAAI7J,IAAKc,EAAa+I,EAAI/I,WAC/BA,EAAW+B,QACZ/B,EAAWvB,MAAMS,GAXzBlD,EAAQ+9B,kBAAoBA,gCCzG5B,IAAIr5B,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/EyE,EAAYvJ,EAAQ,IACpBkH,EAAgBlH,EAAQ,KACxBmH,EAAcnH,EAAQ,KACtBo+B,EAAsBp+B,EAAQ,KAC9Bq+B,EAAuBr+B,EAAQ,KAC/BgW,EAAoBhW,EAAQ,IAC5Bs+B,EAAwBt+B,EAAQ,KAChCsH,EAAatH,EAAQ,IACrBqH,EAAerH,EAAQ,GACvB8U,EAAc9U,EAAQ,IACtB+B,EAAe/B,EAAQ,IAMvB0c,EAAkB,SAAUrX,GAE5B,SAASqX,EAAe/K,EAAK5E,GACzB1H,EAAO9E,KAAK4B,KAAM,MAClBA,KAAKwP,IAAMA,EACXxP,KAAK4K,UAAYA,EA2FrB,OA/FAnI,EAAU8X,EAAgBrX,GA8D1BqX,EAAe/X,OAAS,SAAUgN,EAAK5E,GACnC,GAAW,MAAP4E,EAAa,CACb,GAA4C,mBAAjCA,EAAI5P,EAAaS,YACxB,OAAImP,aAAetK,EAAapF,aAAe8K,EACpC4E,EAEJ,IAAI+K,EAAe/K,EAAK5E,GAE9B,GAAIxD,EAAUc,QAAQsH,GACvB,OAAO,IAAIqE,EAAkB3I,gBAAgBsE,EAAK5E,GAEjD,GAAI5F,EAAYa,UAAU2J,GAC3B,OAAO,IAAIysB,EAAoBH,kBAAkBtsB,EAAK5E,GAErD,GAAwC,mBAA7B4E,EAAIrK,EAAWa,WAA2C,iBAARwJ,EAC9D,OAAO,IAAI0sB,EAAqBE,mBAAmB5sB,EAAK5E,GAEvD,GAAI7F,EAAcY,YAAY6J,GAC/B,OAAO,IAAI2sB,EAAsBE,oBAAoB7sB,EAAK5E,GAGlE,MAAM,IAAIxE,WAAmB,OAARoJ,UAAuBA,GAAOA,GAAO,uBAE9D+K,EAAejb,UAAUY,WAAa,SAAU6B,GAC5C,IAAIyN,EAAMxP,KAAKwP,IACX5E,EAAY5K,KAAK4K,UACrB,OAAiB,MAAbA,EACO4E,EAAI5P,EAAaS,cAAcN,UAAUgC,GAGzCyN,EAAI5P,EAAaS,cAAcN,UAAU,IAAI4S,EAAYW,oBAAoBvR,EAAY6I,EAAW,KAG5G2P,EAhGW,CAiGpBrV,EAAapF,YACf/B,EAAQwc,eAAiBA,gCCvHzB,IAAIL,EAAmBrc,EAAQ,KAC/BE,EAAQ6S,KAAOsJ,EAAiBK,eAAe/X,qCCD/C,IAAIqR,EAAoBhW,EAAQ,IAChCE,EAAQqN,GAAKyI,EAAkB3I,gBAAgBE,iCCE/CrN,EAAQ8H,UAHR,SAAmB5G,GACf,OAAOA,GAAoC,mBAApBA,EAAMc,WAAkD,mBAAfd,EAAM6G,oCCD1E/H,EAAQ4H,YAAe,SAAUpD,GAAK,OAAOA,GAAyB,iBAAbA,EAAEH,sCCA3D,IAAIK,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAQ/EkH,EAAuB,SAAU3G,GAEjC,SAAS2G,EAAoBL,EAASzH,GAClCmB,EAAO9E,KAAK4B,MACZA,KAAKwJ,QAAUA,EACfxJ,KAAK+B,WAAaA,EAClB/B,KAAK8D,QAAS,EAkBlB,OAvBArB,EAAUoH,EAAqB3G,GAO/B2G,EAAoBvK,UAAUwC,YAAc,WACxC,IAAI9B,KAAK8D,OAAT,CAGA9D,KAAK8D,QAAS,EACd,IAAI0F,EAAUxJ,KAAKwJ,QACfH,EAAYG,EAAQH,UAExB,GADArJ,KAAKwJ,QAAU,KACVH,GAAkC,IAArBA,EAAUjH,SAAgBoH,EAAQpG,YAAaoG,EAAQ1F,OAAzE,CAGA,IAAIw4B,EAAkBjzB,EAAUT,QAAQ5I,KAAK+B,aACpB,IAArBu6B,GACAjzB,EAAUR,OAAOyzB,EAAiB,MAGnCzyB,EAxBgB,CANNhM,EAAQ,GA+BZqG,cACjBnG,EAAQ8L,oBAAsBA,gCCrC9B9L,EAAQuF,OACJQ,QAAQ,EACR3C,KAAM,SAAUlC,KAChBuB,MAAO,SAAUS,GAAO,MAAMA,GAC9BR,SAAU,4CCJd,IAAIgC,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAM/EqF,EAAuB,SAAU9E,GAEjC,SAAS8E,EAAoBP,GACzBvE,EAAO9E,KAAK4B,MACZA,KAAKyH,OAASA,EACd,IAAIxG,EAAMS,MAAMtD,KAAK4B,KAAMyH,EACvBA,EAAOrF,OAAS,8CAAgDqF,EAAOoF,IAAI,SAAU5L,EAAKhD,GAAK,OAASA,EAAI,EAAK,KAAOgD,EAAIs7B,aAAgBpC,KAAK,QAAU,IAC/Jn6B,KAAKxB,KAAOyC,EAAIzC,KAAO,sBACvBwB,KAAK2M,MAAQ1L,EAAI0L,MACjB3M,KAAK4M,QAAU3L,EAAI2L,QAEvB,OAVAnK,EAAUuF,EAAqB9E,GAUxB8E,EAXgB,CAYzBtG,OACF3D,EAAQiK,oBAAsBA,gCCnB9BjK,EAAQuI,SAHR,SAAkB/D,GACd,OAAY,MAALA,GAA0B,iBAANA,iCCG/B,IAAIkQ,EAAY5U,EAAQ,GACxBE,EAAQqL,QAAUqJ,EAAUrJ,QAC5BrL,EAAQ0L,iBAAmBgJ,EAAUhJ,iBAErC,IAAIvE,EAAerH,EAAQ,GAC3BE,EAAQ+B,WAAaoF,EAAapF,WAGlCjiF,EAAiBjF,EAAQ,GAC7BE,EAAQmG,aAAepB,EAAeoB,aACtC,IAAI8E,EAAenL,EAAQ,GAC3BE,EAAQkF,WAAa+F,EAAa/F,WAClC,IAAI4mB,EAAiBhsB,EAAQ,IAC7BE,EAAQuY,aAAeuT,EAAevT,aACtC,IAAIuQ,EAAkBhpB,EAAQ,IAC9BE,EAAQ6U,cAAgBiU,EAAgBjU,cACxC,IAAIwX,EAAoBvsB,EAAQ,KAChCE,EAAQksB,gBAAkBG,EAAkBH,gBAC5C,IAAIxe,EAA0B5N,EAAQ,KACtCE,EAAQqtB,sBAAwB3f,EAAwB2f,sBACxD,IAAI3V,EAAiB5X,EAAQ,IAC7BE,EAAQ2R,aAAe+F,EAAe/F,aACtC,IAAI2W,EAAexoB,EAAQ,IAC3BE,EAAQyU,WAAa6T,EAAa7T,WAClC,IAAIsF,EAA4Bja,EAAQ,IACxCE,EAAQ2O,wBAA0BoL,EAA0BpL,wBAC5D,IAAIzD,EAA4BpL,EAAQ,IACxCE,EAAQ2L,wBAA0BT,EAA0BS,wBAC5D,IAAIyX,EAAiBtjB,EAAQ,IAC7BE,EAAQmjB,aAAeC,EAAeD,aACtC,IAAI3Z,EAAwB1J,EAAQ,KACpCE,EAAQiK,oBAAsBT,EAAsBS,oBACpD,IAAI+Z,EAAiBlkB,EAAQ,IAC7BE,EAAQ2jB,aAAeK,EAAeL,aACtC,IAAI8a,EAAc3+B,EAAQ,IAC1BE,EAAQgZ,UAAYylB,EAAYzlB,UAChC,IAAI0lB,EAAkB5+B,EAAQ,KAC9BE,EAAQ2+B,cAAgBD,EAAgBC,cACxC,IAAIC,EAAyB9+B,EAAQ,IACrCE,EAAQud,qBAAuBqhB,EAAuBrhB,qBACtD,IAAIshB,EAAmB/+B,EAAQ,KAC/BE,EAAQ07B,aAAemD,EAAiBnD,aACxC17B,EAAQg9B,UAAY6B,EAAiB7B,UACrCh9B,EAAQ08B,iBAAmBmC,EAAiBnC,iBAC5C,IAAI56B,EAAShC,EAAQ,IACrBE,EAAQiE,KAAOnC,EAAOmC,KACtB,IAAI66B,EAASh/B,EAAQ,IACjB+Y,EAAU/Y,EAAQ,GAClB6U,EAAU7U,EAAQ,KAClBi/B,EAAmBj/B,EAAQ,KAC3BmF,EAAiBnF,EAAQ,IACzBsH,EAAatH,EAAQ,IACrB+B,EAAe/B,EAAQ,IACvBk/B,EAAal/B,EAAQ,KACzBE,EAAQi/B,UAAYD,EAepB,IAAIpvB,GACAgX,KAAMkY,EAAOlY,KACbpR,MAAOb,EAAQa,MACf0pB,eAAgBH,EAAiBG,eACjCh2B,MAAO2P,EAAQ3P,OAEnBlJ,EAAQ4P,UAAYA,EAcpB,IAAIoD,GACAtN,aAAcT,EAAeS,aAC7BpD,WAAYT,EAAaS,WACzB2F,SAAUb,EAAWa,UAEzBjI,EAAQgT,OAASA,6CCvOJmsB,EAETC,aACI,OAAOC,MAAM,qCACRt3B,KAAKmyB,GAAYA,EAASoF,eCJ1BC,EAETH,aACI,OAAOC,MAAM,kCACRt3B,KAAKmyB,GAAYA,EAASoF,4BCK1BE,EAETJ,wBAAwBK,GAEpB,MAAMj7B,EAAIk7B,SAASC,eAAe,OAC5BC,EAAKF,SAASG,cAAc,KAClCD,EAAGE,UAAY,UACfF,EAAGG,6CAA+CN,gBAElDj7B,EAAEw7B,YAAYJ,GAIlBR,yBAAyBK,GAErB,MAAMj7B,EAAIk7B,SAASC,eAAe,WAC5BC,EAAKF,SAASG,cAAc,KAClCD,EAAGE,UAAY,UACfF,EAAGG,4CAA8CN,gBAEjDj7B,EAAEw7B,YAAYJ,GAOlBR,mBAAmBa,GAEf,MAAMC,EAAMR,SAASC,eAAe,cAE9BC,EAAKF,SAASG,cAAc,OAClCD,EAAGE,UAAY,YACf,MAAMK,UAAEA,EAAFV,OAAaA,GAAWQ,EAC9BL,EAAGG,iBAAmBE,EAAQE,8BAA8BF,EAAQR,SACpES,EAAIF,YAAYJ,GAGhB,MAAMQ,EAAOV,SAASC,eAAe,QAC/BU,EAASX,SAASG,cAAc,UACtCQ,EAAON,UAAY,iBACnBM,EAAOP,UAAY,SACnBO,EAAOC,QAAQC,IAAMN,EAAQlwB,GAE7B,MAAMywB,EAAUd,SAASC,eAAe,YAExCn8B,EAAA,WAAci9B,UAAUJ,EAAQ,SAC3B9xB,KAAKmyB,GAAQA,EAAO,IAAMT,EAAQR,QAClCz9B,UAAU0+B,GAAQF,EAAQT,+DAAiEE,EAAQE,qBAAqBO,EAAKC,QAAQ,MAG1IP,EAAKJ,YAAYK,GAMrBjB,sBAAsBwB,GAClB,MAAM/5B,EAAS64B,SAASC,eAAe,OAEjCkB,EAAOnB,SAASG,cAAc,OACpCgB,EAAKf,UAAY,gBACjB,MAAMK,UAAEA,EAAFV,OAAaA,EAAbqB,QAAqBA,GAAYF,EACvCC,EAAKd,iBAAmBa,EAAMT,8BAA8BS,EAAMnB,oBAAoBmB,EAAME,UAE5Fj6B,EAAOm5B,YAAYa,GAKvBzB,mBAAmB2B,GAEf,MAAMt/B,EAAIi+B,SAASC,eAAe,QAE5BqB,EAAMtB,SAASG,cAAc,OACnCmB,EAAIlB,UAAY,OAChBkB,EAAIC,MAAMC,gBAAkB,UAC5B,MAAMC,IAAEA,EAAF1B,OAAOA,GAAWsB,EACxBC,EAAIjB,iBAAmBgB,EAAOI,wBAAwBJ,EAAOtB,SAC7Dh+B,EAAEu+B,YAAYgB,GAIlB5B,gBAAgB2B,GAEZ,MAAMt/B,EAAIi+B,SAASC,eAAe,SAE5BqB,EAAMtB,SAASG,cAAc,OACnCmB,EAAIlB,UAAY,OAChBkB,EAAIC,MAAMC,gBAAkB,UAE5B,MAAMC,IAAEA,EAAF1B,OAAOA,GAAWsB,EACxBC,EAAIjB,iBAAmBgB,EAAOI,wBAAwBJ,EAAOtB,SAC7Dh+B,EAAEu+B,YAAYgB,GAKlB5B,yBAAyBK,GAErB,MAAMj7B,EAAIk7B,SAASC,eAAe,SAC5BC,EAAKF,SAASG,cAAc,KAClCD,EAAGE,UAAY,UACfF,EAAGG,4CAA8CN,gBAEjDj7B,EAAEw7B,YAAYJ,GAIlBR,sBAAsBK,GAElB,MAAM2B,EAAK1B,SAASC,eAAe,WAC7B0B,EAAM3B,SAASG,cAAc,KACnCwB,EAAIvB,UAAY,UAChBuB,EAAItB,4CAA8CN,gBAElD2B,EAAGpB,YAAYqB,GAMnBjC,kBAAkB2B,GAEd,MAAMt/B,EAAIi+B,SAASC,eAAe,aAE5BqB,EAAMtB,SAASG,cAAc,OACnCmB,EAAIlB,UAAY,OAChBkB,EAAIC,MAAMC,gBAAkB,UAC5B,MAAMC,IAAEA,GAAQJ,EAChBC,EAAIjB,iBAAmBgB,EAAOI,WAC9B1/B,EAAEu+B,YAAYgB,UC5ITM,EAETlC,aACI,OAAOC,MAAM,sCACRt3B,KAAKmyB,GAAYA,EAASoF,SCqB3BI,SAASC,eAAe,OAEhC4B,QAAU,WAEE7B,SAASC,eAAe,aAChCI,UAAY,IAEhB,MAAMyB,EAAM9B,SAAS+B,cAAc,WAC7BC,EAAcF,EAAIG,QAAQH,EAAII,eAAe1gC,MAC7C2gC,EAAOnC,SAAS+B,cAAc,aAC9BK,EAAgBD,EAAKF,QAAQE,EAAKD,eAAe1gC,MAxB3D,IAAe6gC,EAAKC,EAALD,EAyBLL,EAzBUM,EAyBGF,EAtBPvC,EAAYv+B,MACnB+G,KAAKk6B,GAAOA,EAAI9+B,QAAQ++B,IACrB,IAAIC,EAAOD,EAAKE,KAAKtnB,KAAKta,GAAKA,IAAMuhC,GACjCM,EAAOH,EAAKI,KAAKxnB,KAAKpZ,GAAKA,IAAMsgC,QACxB1yB,IAAT6yB,QAA+B7yB,IAAT+yB,GACtB7C,EAAY+C,WAAWL,OA0BvBxC,SAASC,eAAe,WAChC4B,QAAU,WAEd,MAAMiB,EAAO9C,SAASC,eAAe,UAErC,IAAI8C,EAAO/C,SAASG,cAAc,SAClC4C,EAAK1C,UAAY,QACjByC,EAAKxC,YAAYyC,GAEjB,IAAIC,EAAShD,SAASG,cAAc,SACpC6C,EAAOC,KAAO,OACdD,EAAO5C,UAAY,OACnB2C,EAAKzC,YAAY0C,GACjBF,EAAKxC,YAAYN,SAASG,cAAc,OACxC2C,EAAKxC,YAAYN,SAASG,cAAc,OAExC,IAAI+C,EAAOlD,SAASG,cAAc,SAClC+C,EAAK7C,UAAY,YACjByC,EAAKxC,YAAY4C,GAEjB,IAAIC,EAASnD,SAASG,cAAc,SACpCgD,EAAOF,KAAO,OACdE,EAAO/C,UAAY,OACnB8C,EAAK5C,YAAY6C,GACjBL,EAAKxC,YAAYN,SAASG,cAAc,OACxC2C,EAAKxC,YAAYN,SAASG,cAAc,OAExC,IAAIiD,EAAcpD,SAASG,cAAc,UACzCiD,EAAY/C,UAAY,WACxB+C,EAAYhD,UAAY,oBACxB0C,EAAKxC,YAAY8C,GAEjBA,EAAYvB,QAAU,WACN7B,SAASC,eAAe,SAChCI,UAAY,IAGhB,MAAMgD,EAAOrD,SAAS+B,cAAc,YAC9BuB,EAAeD,EAAKpB,QAAQoB,EAAKnB,eAAe1gC,MAGhD+hC,EADOvD,SAAS+B,cAAc,SAClBvgC,MACZigC,EAAM8B,EAAKC,OAAO,GAAGC,cAAgBF,EAAKp3B,MAAM,GAGhDu3B,EADO1D,SAAS+B,cAAc,SACdvgC,OAa9B,SAAsB8hC,EAAc7B,EAAKkC,GAkBrC/B,EAAmBtgC,MACd+G,KAAKk6B,GAAOA,EAAI59B,QAChB0D,KAAKu7B,IACFjE,MAAM,sCACF1F,OAAQ,OACRF,SACI8J,OAAU,8BACVC,eAAgB,oBAEpB3J,KAAMwC,KAAKC,WAAYvsB,MAAOuzB,EAAI,IAAKnC,OAAQA,IAAOkC,WAAYA,IAAWnB,QAASc,QACvFj7B,KAAK07B,GAAOA,EAAInE,UAIhBI,SAASC,eAAe,SAC9BI,iBAAmBoB,KAAOkC,uCAA6CL,wDA1CxEU,CAAaV,EAAc7B,EAHXiC,EAASF,OAAO,GAAGC,cAAgBC,EAASv3B,MAAM,MAoEjE6zB,SAASC,eAAe,gBAE9B4B,QAAU,WAEE7B,SAASC,eAAe,SAC9BI,UAAa,+LAlBXV,MAAM,iCACT1F,OAAQ,OACRF,SACI8J,OAAU,8BACVC,eAAgB,oBAEpB3J,KAAMwC,KAAKC,WAAYvsB,GAAI,GAAIoxB,IAAK,WAAY1B,OAAQ,EAAKkE,eAAgB,GAAIC,SAAS,EAAOC,aAAa,EAAOzB,MAAO,MAAO,MAAO,OAAQE,MAAO,KAAM,KAAM,KAAM,UAC5Kv6B,KAAK07B,GAAOA,EAAInE,QAgBLI,SAASC,eAAe,gBAChCsB,MAAM6C,WAAa,WAIXpE,SAASC,eAAe,gBAChC4B,QAAU,WAKhB,OAHS7B,SAASC,eAAe,SAC9BI,UAAY,4DAERV,MAAM,+CACT1F,OAAQ,WACT5xB,KAAK07B,GAAOA,EAAInE,SC9KvB,MAAMyE,EAAW,UCNbC,gBACI,OAAO,IAAItgC,QAAQ,CAACE,EAASC,KACzBmE,WAAW,IAAMpE,EAAQqgC,SAAyB,GAAhBruB,KAAKsuB,UAAgB,UDSnExgC,QAAQygC,KACA5E,EAAYv+B,MAAOm+B,EAAiBn+B,QAEvC+G,KAAK,EAAE+4B,EAASsD,MAEb,IAGInjC,IAHI6/B,EAAQ/1B,OAAO,CAAC2D,EAAK21B,IAAS31B,EAAM21B,EAAK5E,OAAQ,GACjD2E,EAAWr5B,OAAO,CAAC2D,EAAK21B,IAAS31B,EAAM21B,EAAK5E,OAAQ,KAExCqB,EAAQz8B,OAAS+/B,EAAW//B,SAASs8B,QAAQ,GAEjEnB,EAAY8E,iBAAiBrjC,KAKtBk+B,EAAiBn+B,MAC3B+G,KAAKw8B,IACF,MACMC,EADI5uB,KAAK6uB,MAAMF,EAAOx5B,OAAO,CAAC2D,EAAK21B,IAAS31B,EAAM21B,EAAK5E,OAAQ,GAAI,GAC1D8E,EAAOlgC,OACtBm7B,EAAYkF,kBAAkBF,KAKtBrF,EAAiBn+B,MAC5B+G,KAAK48B,GAAWA,EAAQxhC,QAAQy9B,GAASpB,EAAYoF,YAAYhE,KAKtEl9B,QAAQygC,KACAJ,EAASC,gBAAiB7E,EAAiBn+B,QAE9C+G,KAAK,EAAE88B,EAAKC,MACTtF,EAAYuF,eAAeD,EAASD,EAAMC,EAASzgC,WAM/Ck7B,EAAYv+B,MACnB+G,KAAKi9B,GAAOA,EAAI7pB,OAAO+mB,GAAQA,EAAK0B,UACpC77B,KAAKi9B,GAAOA,EAAI7hC,QAAQ++B,GAAQ1C,EAAYyF,YAAY/C,KAEjD3C,EAAYv+B,MACnB+G,KAAKm9B,GAAOA,EAAI/pB,OAAO+mB,IAASA,EAAK0B,UACrC77B,KAAKm9B,GAAOA,EAAI/hC,QAAQ++B,GAAQ1C,EAAY2F,SAASjD,KAO5C3C,EAAYv+B,MACrB+G,KAAKq9B,GAASA,EAAMjqB,OAAOjT,GAAQA,EAAK07B,UACxC77B,KAAKq9B,IACF,MACMC,GADQD,EAAMr6B,OAAO,CAAC2D,EAAK21B,IAAS31B,EAAM21B,EAAK5E,OAAQ,GACrC2F,EAAM/gC,QAAQs8B,QAAQ,GAC9CnB,EAAY8F,kBAAkBD,KAIxB9F,EAAYv+B,MACrB+G,KAAKw9B,GAASA,EAAMpqB,OAAOjT,IAASA,EAAK07B,UACzC77B,KAAKw9B,IACF,MACMC,GADOD,EAAMx6B,OAAO,CAAC2D,EAAK21B,IAAS31B,EAAM21B,EAAK5E,OAAQ,GACtC8F,EAAMlhC,QAAQs8B,QAAQ,GAC5CnB,EAAYiG,eAAeD,mCE/EnC,IAAIlW,EAAUxvB,EAAQ,IACtBE,EAAQ0a,MAAQ4U,EAAQ5U,MACxB,IAAIgrB,EAAc5lC,EAAQ,KAC1BE,EAAQwvB,UAAYkW,EAAYlW,UAChC,IAAImW,EAAW7lC,EAAQ,KACvBE,EAAQsR,OAASq0B,EAASr0B,OAC1B,IAAIs0B,EAAgB9lC,EAAQ,KAC5BE,EAAQ04B,YAAckN,EAAclN,YACpC,IAAImN,EAAe/lC,EAAQ,KAC3BE,EAAQy3B,WAAaoO,EAAapO,WAClC,IAAIqO,EAAiBhmC,EAAQ,KAC7BE,EAAQo3B,aAAe0O,EAAe1O,aACtC,IAAI2O,EAAejmC,EAAQ,KAC3BE,EAAQ82B,WAAaiP,EAAajP,WAClC,IAAIkP,EAAelmC,EAAQ,KAC3BE,EAAQy2B,WAAauP,EAAavP,WAClC,IAAIwP,EAAenmC,EAAQ,KAC3BE,EAAQw2B,WAAayP,EAAazP,WAClC,IAAID,EAAkBz2B,EAAQ,IAC9BE,EAAQiY,cAAgBse,EAAgBte,cACxC,IAAI8O,EAAWjnB,EAAQ,KACvBE,EAAQqK,OAAS0c,EAAS1c,OAC1B,IAAIsI,EAAc7S,EAAQ,IAC1BE,EAAQ8S,UAAYH,EAAYG,UAChC,IAAIqjB,EAAcr2B,EAAQ,IAC1BE,EAAQkc,UAAYia,EAAYja,UAChC,IAAIgqB,EAAgBpmC,EAAQ,KAC5BE,EAAQo2B,YAAc8P,EAAc9P,YACpC,IAAI+P,EAAUrmC,EAAQ,KACtBE,EAAQyN,MAAQ04B,EAAQ14B,MACxB,IAAI24B,EAAatmC,EAAQ,KACzBE,EAAQ01B,SAAW0Q,EAAW1Q,SAC9B,IAAI2Q,EAAiBvmC,EAAQ,KAC7BE,EAAQm1B,aAAekR,EAAelR,aACtC,IAAI/mB,EAAmBtO,EAAQ,IAC/BE,EAAQyO,eAAiBL,EAAiBK,eAC1C,IAAIsmB,EAAUj1B,EAAQ,KACtBE,EAAQ0P,MAAQqlB,EAAQrlB,MACxB,IAAI42B,EAAcxmC,EAAQ,KAC1BE,EAAQ2zB,UAAY2S,EAAY3S,UAChC,IAAI4S,EAAkBzmC,EAAQ,KAC9BE,EAAQ81B,cAAgByQ,EAAgBzQ,cACxC,IAAI0Q,EAAa1mC,EAAQ,KACzBE,EAAQozB,SAAWoT,EAAWpT,SAC9B,IAAIF,EAAyBpzB,EAAQ,IACrCE,EAAQsb,qBAAuB4X,EAAuB5X,qBACtD,IAAImrB,EAA4B3mC,EAAQ,KACxCE,EAAQmzB,wBAA0BsT,EAA0BtT,wBAC5D,IAAIuT,EAAc5mC,EAAQ,KAC1BE,EAAQgyB,UAAY0U,EAAY1U,UAChC,IAAI2U,EAAU7mC,EAAQ,KACtBE,EAAQ8uB,MAAQ6X,EAAQ7X,MACxB,IAAI8X,EAAY9mC,EAAQ,KACxBE,EAAQ2yB,QAAUiU,EAAUjU,QAC5B,IAAIkU,EAAe/mC,EAAQ,KAC3BE,EAAQuyB,WAAasU,EAAatU,WAClC,IAAIuU,EAAWhnC,EAAQ,KACvBE,EAAQmyB,OAAS2U,EAAS3U,OAC1B,IAAIrF,EAAWhtB,EAAQ,IACvBE,EAAQmb,OAAS2R,EAAS3R,OAC1B,IAAI4rB,EAAajnC,EAAQ,KACzBE,EAAQ4xB,SAAWmV,EAAWnV,SAC9B,IAAIF,EAAS5xB,EAAQ,IACrBE,EAAQ8a,KAAO4W,EAAO5W,KACtB,IAAIksB,EAAclnC,EAAQ,KAC1BE,EAAQ2xB,UAAYqV,EAAYrV,UAChC,IAAIsV,EAAUnnC,EAAQ,KACtBE,EAAQoxB,MAAQ6V,EAAQ7V,MACxB,IAAI8V,EAAYpnC,EAAQ,KACxBE,EAAQgwB,QAAUkX,EAAUlX,QAC5B,IAAImX,EAAmBrnC,EAAQ,KAC/BE,EAAQ4vB,eAAiBuX,EAAiBvX,eAC1C,IAAIwX,EAAYtnC,EAAQ,KACxBE,EAAQic,QAAUmrB,EAAUnrB,QAC5B,IAAIorB,EAASvnC,EAAQ,KACrBE,EAAQqX,KAAOgwB,EAAOhwB,KACtB,IAAIyB,EAAQhZ,EAAQ,IACpBE,EAAQ8O,IAAMgK,EAAMhK,IACpB,IAAIw4B,EAAUxnC,EAAQ,KACtBE,EAAQ2uB,MAAQ2Y,EAAQ3Y,MACxB,IAAI4Y,EAAgBznC,EAAQ,KAC5BE,EAAQwuB,YAAc+Y,EAAc/Y,YACpC,IAAIgZ,EAAQ1nC,EAAQ,KACpBE,EAAQ6V,IAAM2xB,EAAM3xB,IACpB,IAAIwY,EAAUvuB,EAAQ,KACtBE,EAAQoX,MAAQiX,EAAQjX,MACxB,IAAID,EAAarX,EAAQ,IACzBE,EAAQsX,SAAWH,EAAWG,SAC9B,IAAIC,EAAazX,EAAQ,IACzBE,EAAQ6Q,SAAW0G,EAAW1G,SAC9B,IAAI42B,EAAa3nC,EAAQ,IACzBE,EAAQ0nC,QAAUD,EAAW52B,SAC7B,IAAI82B,EAAe7nC,EAAQ,KAC3BE,EAAQiuB,WAAa0Z,EAAa1Z,WAClC,IAAI2Z,EAAc9nC,EAAQ,KAC1BE,EAAQ8tB,UAAY8Z,EAAY9Z,UAChC,IAAI+Z,EAAQ/nC,EAAQ,KACpBE,EAAQ4tB,IAAMia,EAAMja,IACpB,IAAI3E,EAAcnpB,EAAQ,IAC1BE,EAAQ2N,UAAYsb,EAAYtb,UAChC,IAAIiH,EAAc9U,EAAQ,IAC1BE,EAAQ2X,UAAY/C,EAAY+C,UAChC,IAAImwB,GAAsBhoC,EAAQ,IAClCE,EAAQoc,kBAAoB0rB,GAAoB1rB,kBAChD,IAAI2rB,GAAajoC,EAAQ,KACzBE,EAAQitB,SAAW8a,GAAW9a,SAC9B,IAAI+a,GAAcloC,EAAQ,KAC1BE,EAAQ+sB,UAAYib,GAAYjb,UAChC,IAAIkb,GAAUnoC,EAAQ,KACtBE,EAAQwsB,MAAQyb,GAAQzb,MACxB,IAAI0b,GAAYpoC,EAAQ,KACxBE,EAAQusB,QAAU2b,GAAU3b,QAC5B,IAAI4b,GAAoBroC,EAAQ,KAChCE,EAAQssB,gBAAkB6b,GAAkB7b,gBAC5C,IAAI8b,GAAgBtoC,EAAQ,IAC5BE,EAAQ+rB,YAAcqc,GAAcrc,YACpC,IAAIsc,GAAkBvoC,EAAQ,IAC9BE,EAAQgsB,cAAgBqc,GAAgBrc,cACxC,IAAIH,GAAS/rB,EAAQ,IACrBE,EAAQ2c,KAAOkP,GAAOlP,KACtB,IAAIyF,GAAWtiB,EAAQ,IACvBE,EAAQ+K,OAASqX,GAASrX,OAC1B,IAAIu9B,GAAWxoC,EAAQ,IACvBE,EAAQ0rB,OAAS4c,GAAS5c,OAC1B,IAAI6c,GAAezoC,EAAQ,IAC3BE,EAAQorB,WAAamd,GAAand,WAClC,IAAIod,GAAU1oC,EAAQ,IACtBE,EAAQirB,MAAQud,GAAQvd,MACxB,IAAIwd,GAAc3oC,EAAQ,IAC1BE,EAAQ4qB,UAAY6d,GAAY7d,UAChC,IAAI1B,GAAappB,EAAQ,IACzBE,EAAQsZ,SAAW4P,GAAW5P,SAC9B,IAAIovB,GAAW5oC,EAAQ,IACvBE,EAAQuqB,OAASme,GAASne,OAC1B,IAAIoe,GAAe7oC,EAAQ,IAC3BE,EAAQiqB,WAAa0e,GAAa1e,WAClC,IAAI/b,GAASpO,EAAQ,IACrBE,EAAQuO,KAAOL,GAAOK,KACtB,IAAIq6B,GAAkB9oC,EAAQ,IAC9BE,EAAQqpB,cAAgBuf,GAAgBvf,cACxC,IAAIwf,GAAU/oC,EAAQ,IACtBE,EAAQopB,MAAQyf,GAAQzf,MACxB,IAAI0f,GAAgBhpC,EAAQ,IAC5BE,EAAQ+oB,YAAc+f,GAAc/f,YACpC,IAAIggB,GAAWjpC,EAAQ,IACvBE,EAAQuoB,OAASwgB,GAASxgB,OAC1B,IAAIygB,GAASlpC,EAAQ,IACrBE,EAAQmoB,KAAO6gB,GAAO7gB,KACtB,IAAI8gB,GAAanpC,EAAQ,IACzBE,EAAQ0nB,SAAWuhB,GAAWvhB,SAC9B,IAAIwhB,GAAcppC,EAAQ,IAC1BE,EAAQsnB,UAAY4hB,GAAY5hB,UAChC,IAAI6hB,GAAcrpC,EAAQ,IAC1BE,EAAQinB,UAAYkiB,GAAYliB,UAChC,IAAImiB,GAActpC,EAAQ,IAC1BE,EAAQgnB,UAAYoiB,GAAYpiB,UAQhC,IAAIqiB,GAAcvpC,EAAQ,IAC1BE,EAAQwlB,UAAY6jB,GAAY7jB,UAChC,IAAID,GAAczlB,EAAQ,IAC1BE,EAAQiZ,UAAYsM,GAAYtM,UAChC,IAAIqwB,GAAgBxpC,EAAQ,IAC5BE,EAAQklB,YAAcokB,GAAcpkB,YACpC,IAAIqkB,GAASzpC,EAAQ,IACrBE,EAAQ+kB,KAAOwkB,GAAOxkB,KACtB,IAAI5W,GAAarO,EAAQ,IACzBE,EAAQwO,SAAWL,GAAWK,SAC9B,IAAIg7B,GAAc1pC,EAAQ,IAC1BE,EAAQ2kB,UAAY6kB,GAAY7kB,UAChC,IAAI8kB,GAAc3pC,EAAQ,IAC1BE,EAAQskB,UAAYmlB,GAAYnlB,UAChC,IAAIolB,GAAQ5pC,EAAQ,KACpBE,EAAQ8yB,IAAM4W,GAAM5W,IACpB,IAAI7O,GAAankB,EAAQ,IACzBE,EAAQ4T,SAAWqQ,GAAWrQ,SAC9B,IAAI+1B,GAAiB7pC,EAAQ,IAC7BE,EAAQkkB,aAAeylB,GAAezlB,aACtC,IAAIF,GAAiBlkB,EAAQ,IAC7BE,EAAQyjB,aAAeO,GAAeP,aACtC,IAAImmB,GAAY9pC,EAAQ,IACxBE,EAAQqjB,QAAUumB,GAAUvmB,QAC5B,IAAIwmB,GAAgB/pC,EAAQ,IAC5BE,EAAQyiB,YAAconB,GAAcpnB,YACpC,IAAIgc,GAAc3+B,EAAQ,IAC1BE,EAAQ+Y,UAAY0lB,GAAY1lB,UAChC,IAAI+wB,GAAYhqC,EAAQ,IACxBE,EAAQuiB,QAAUunB,GAAUvnB,QAC5B,IAAIjC,GAAWxgB,EAAQ,IACvBE,EAAQmM,OAASmU,GAASnU,OAC1B,IAAI49B,GAAgBjqC,EAAQ,IAC5BE,EAAQ2hB,YAAcooB,GAAcpoB,YACpC,IAAIqoB,GAAelqC,EAAQ,IAC3BE,EAAQ+U,WAAai1B,GAAaj1B,WAClC,IAAIk1B,GAAiBnqC,EAAQ,IAC7BE,EAAQggB,aAAeiqB,GAAejqB,aACtC,IAAIkqB,GAAepqC,EAAQ,IAC3BE,EAAQuf,WAAa2qB,GAAa3qB,WAClC,IAAI4qB,GAAmBrqC,EAAQ,IAC/BE,EAAQmf,eAAiBgrB,GAAiBhrB,eAC1C,IAAIF,GAAQnf,EAAQ,IACpBE,EAAQiW,IAAMgJ,GAAMhJ,IACpB,IAAIm0B,GAAWtqC,EAAQ,IACvBE,EAAQkf,OAASkrB,GAASlrB,qCChN1B,IAAIxa,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAG/EylC,EAA2B,SAAUllC,GAErC,SAASklC,IACLllC,EAAOsD,MAAMxG,KAAMmC,WAuBvB,OAzBAM,EAAU2lC,EAAyBllC,GAInCklC,EAAwB9oC,UAAUgO,MAAQ,SAAUC,GAChDvN,KAAKmN,QAAS,EACdnN,KAAKoN,eAAYC,EACjB,IACI7M,EADA0M,EAAUlN,KAAKkN,QAEfvF,GAAS,EACT6D,EAAQ0B,EAAQ9K,OACpBmL,EAASA,GAAUL,EAAQQ,QAC3B,GACI,GAAIlN,EAAQ+M,EAAOC,QAAQD,EAAOhC,MAAOgC,EAAOE,OAC5C,cAEG9F,EAAQ6D,IAAU+B,EAASL,EAAQQ,UAE9C,GADA1N,KAAKmN,QAAS,EACV3M,EAAO,CACP,OAASmH,EAAQ6D,IAAU+B,EAASL,EAAQQ,UACxCH,EAAOzL,cAEX,MAAMtB,IAGP4nC,EA1BoB,CADRvqC,EAAQ,IA4BZqJ,gBACnBnJ,EAAQqqC,wBAA0BA,gCClClC,IAAI1oC,EAAS7B,EAAQ,GACjBwqC,EAAmC,WA2BnC,OA1BA,SAAyC/mC,GACjCA,EAAKgnC,uBACLtoC,KAAKuoC,qBAAuBjnC,EAAKinC,qBAAqBjkC,KAAKhD,GAC3DtB,KAAKsoC,sBAAwBhnC,EAAKgnC,sBAAsBhkC,KAAKhD,IAExDA,EAAKknC,0BACVxoC,KAAKuoC,qBAAuBjnC,EAAKmnC,wBAAwBnkC,KAAKhD,GAC9DtB,KAAKsoC,sBAAwBhnC,EAAKknC,yBAAyBlkC,KAAKhD,IAE3DA,EAAKonC,6BACV1oC,KAAKuoC,qBAAuBjnC,EAAKqnC,2BAA2BrkC,KAAKhD,GACjEtB,KAAKsoC,sBAAwBhnC,EAAKonC,4BAA4BpkC,KAAKhD,IAE9DA,EAAKsnC,yBACV5oC,KAAKuoC,qBAAuBjnC,EAAKunC,uBAAuBvkC,KAAKhD,GAC7DtB,KAAKsoC,sBAAwBhnC,EAAKsnC,wBAAwBtkC,KAAKhD,IAE1DA,EAAKwnC,wBACV9oC,KAAKuoC,qBAAuBjnC,EAAKynC,sBAAsBzkC,KAAKhD,GAC5DtB,KAAKsoC,sBAAwBhnC,EAAKwnC,uBAAuBxkC,KAAKhD,KAG9DtB,KAAKuoC,qBAAuBjnC,EAAKsiB,aAAatf,KAAKhD,GACnDtB,KAAKsoC,sBAAwB,SAAUU,GAAM,OAAO1nC,EAAKyE,WAAWijC,EAAI,IAAO,OAxBpD,GA6BvCjrC,EAAQsqC,gCAAkCA,EAC1CtqC,EAAQkrC,eAAiB,IAAIZ,EAAgC3oC,EAAO4B,oCC/BpE,IAAImB,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/EoE,EAAgBlJ,EAAQ,IACxBqrC,EAAmBrrC,EAAQ,KAM3BsrC,EAAwB,SAAUjmC,GAElC,SAASimC,EAAqBv+B,EAAWgD,GACrC1K,EAAO9E,KAAK4B,KAAM4K,EAAWgD,GAC7B5N,KAAK4K,UAAYA,EACjB5K,KAAK4N,KAAOA,EAiChB,OArCAnL,EAAU0mC,EAAsBjmC,GAMhCimC,EAAqB7pC,UAAU0O,eAAiB,SAAUpD,EAAWkD,EAAIL,GAGrE,YAFc,IAAVA,IAAoBA,EAAQ,GAElB,OAAVA,GAAkBA,EAAQ,EACnBvK,EAAO5D,UAAU0O,eAAe5P,KAAK4B,KAAM4K,EAAWkD,EAAIL,IAGrE7C,EAAUsC,QAAQ7E,KAAKrI,MAIhB4K,EAAUwC,YAAcxC,EAAUwC,UAAY87B,EAAiBD,eAAeX,sBAAsB19B,EAAU0C,MAAMhJ,KAAKsG,EAAW,UAE/Iu+B,EAAqB7pC,UAAUyO,eAAiB,SAAUnD,EAAWkD,EAAIL,GAKrE,QAJc,IAAVA,IAAoBA,EAAQ,GAIjB,OAAVA,GAAkBA,EAAQ,GAAiB,OAAVA,GAAkBzN,KAAKyN,MAAQ,EACjE,OAAOvK,EAAO5D,UAAUyO,eAAe3P,KAAK4B,KAAM4K,EAAWkD,EAAIL,GAKpC,IAA7B7C,EAAUsC,QAAQ9K,SAClB8mC,EAAiBD,eAAeV,qBAAqBz6B,GACrDlD,EAAUwC,eAAYC,IAKvB87B,EAtCiB,CAuC1BpiC,EAAcI,aAChBpJ,EAAQorC,qBAAuBA,gCCpD/B,IAAIC,EAAyBvrC,EAAQ,KACjCwrC,EAA4BxrC,EAAQ,KA+BxCE,EAAQk/B,eAAiB,IAAIoM,EAA0BjB,wBAAwBgB,EAAuBD,oDChCtG,IAAI1mC,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/E8P,EAAY5U,EAAQ,GACpBiF,EAAiBjF,EAAQ,GACzByrC,EAAyBzrC,EAAQ,IACjC0rC,EAAgB1rC,EAAQ,IAMxB2rC,EAAiB,SAAUtmC,GAE3B,SAASsmC,EAAcC,EAAU7+B,GAC7B1H,EAAO9E,KAAK4B,MACZA,KAAKypC,SAAWA,EAChBzpC,KAAK0I,iBACL1I,KAAK4K,UAAYA,EAsBrB,OA3BAnI,EAAU+mC,EAAetmC,GAOzBsmC,EAAclqC,UAAUY,WAAa,SAAU6B,GAC3C,IAAIyH,EAAUxJ,KACV2H,EAAQ6B,EAAQoT,qBAIpB,OAHA7a,EAAWnB,IAAI,IAAIkC,EAAeoB,aAAa,WAC3CsF,EAAQqT,qBAAqBlV,MAE1BzE,EAAO5D,UAAUY,WAAW9B,KAAK4B,KAAM+B,IAElDynC,EAAclqC,UAAUoqC,MAAQ,WAI5B,IAHA,IAAIlgC,EAAUxJ,KACV2pC,EAAiBngC,EAAQigC,SAASrnC,OAE7BnE,EAAI,EAAGA,EAAI0rC,EAAgB1rC,KAChC,WACI,IAAI2O,EAAUpD,EAAQigC,SAASxrC,GAE/BuL,EAAQoB,UAAUH,SAAS,WAAcmC,EAAQgJ,aAAa/F,QAAQrG,IAAaoD,EAAQ8O,OAH/F,IAOD8tB,EA5BU,CA6BnB/2B,EAAUrJ,SACZrL,EAAQyrC,cAAgBA,EACxBD,EAAcxtB,YAAYytB,GAAgBF,EAAuB3sB,qDC7CjE,IAAIla,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/EuC,EAAerH,EAAQ,GACvBiF,EAAiBjF,EAAQ,GACzByrC,EAAyBzrC,EAAQ,IACjC0rC,EAAgB1rC,EAAQ,IAMxB+rC,EAAkB,SAAU1mC,GAE5B,SAAS0mC,EAAeH,EAAU7+B,GAC9B1H,EAAO9E,KAAK4B,KAAM,SAAU+B,GACxB,IAAI1B,EAAaL,KACb2H,EAAQtH,EAAWuc,qBAKvB,OAJA7a,EAAWnB,IAAI,IAAIkC,EAAeoB,aAAa,WAC3C7D,EAAWwc,qBAAqBlV,MAEpCtH,EAAWwpC,iBAAiB9nC,GACrBA,IAEX/B,KAAKypC,SAAWA,EAChBzpC,KAAK0I,iBACL1I,KAAK4K,UAAYA,EAYrB,OAzBAnI,EAAUmnC,EAAgB1mC,GAe1B0mC,EAAetqC,UAAUuqC,iBAAmB,SAAU9nC,GAElD,IADA,IAAI4nC,EAAiB3pC,KAAKypC,SAASrnC,OAC1BnE,EAAI,EAAGA,EAAI0rC,EAAgB1rC,IAAK,CACrC,IAAI2O,EAAU5M,KAAKypC,SAASxrC,GAC5B8D,EAAWnB,IAAIZ,KAAK4K,UAAUH,SAAS,SAAU8H,GAC7C,IAAI3F,EAAU2F,EAAG3F,QAAS7K,EAAawQ,EAAGxQ,WAC1C6K,EAAQgJ,aAAa/F,QAAQ9N,IAC9B6K,EAAQ8O,OAAS9O,QAASA,EAAS7K,WAAYA,OAGnD6nC,EA1BW,CA2BpB1kC,EAAapF,YACf/B,EAAQ6rC,eAAiBA,EACzBL,EAAcxtB,YAAY6tB,GAAiBN,EAAuB3sB,qDC3ClE,IAAIla,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/EuC,EAAerH,EAAQ,GACvB4X,EAAiB5X,EAAQ,IACzBisC,EAAmBjsC,EAAQ,KAC3BksC,EAAkBlsC,EAAQ,KAC1B6e,EAAoB7e,EAAQ,IAC5B8+B,EAAyB9+B,EAAQ,IACjCmsC,EAAkB,IAClBtN,EAAiB,SAAUx5B,GAE3B,SAASw5B,EAAcuN,GACnB/mC,EAAO9E,KAAK4B,KAAM28B,EAAuBlhB,cAAeuuB,GACxDhqC,KAAKiqC,gBAAkBA,EACvBjqC,KAAKkqC,kBACLlqC,KAAKmqC,mBACLnqC,KAAKoqC,cAuMT,OA7MA3nC,EAAUi6B,EAAex5B,GAQzBw5B,EAAcp9B,UAAU+qC,WAAa,SAAUC,GAC3C,IAAI1hC,EAAU0hC,EAAQ1hC,QAAQ,KAC9B,IAAiB,IAAbA,EACA,MAAM,IAAIlH,MAAM,+DAEpB,OAAOkH,EAAU8zB,EAAc/gB,iBAEnC+gB,EAAcp9B,UAAUirC,qBAAuB,SAAUD,EAASp2B,EAAQ1T,GACtE,IAA8B,IAA1B8pC,EAAQ1hC,QAAQ,KAChB,MAAM,IAAIlH,MAAM,uDAEpB,IAA8B,IAA1B4oC,EAAQ1hC,QAAQ,KAChB,MAAM,IAAIlH,MAAM,yDAEpB,IAAI+nC,EAAW/M,EAAc8N,aAAaF,EAASp2B,EAAQ1T,GACvDiqC,EAAO,IAAIX,EAAiBF,eAAeH,EAAUzpC,MAEzD,OADAA,KAAKmqC,gBAAgB9hC,KAAKoiC,GACnBA,GAEX/N,EAAcp9B,UAAUorC,oBAAsB,SAAUJ,EAASp2B,EAAQ1T,GACrE,IAA8B,IAA1B8pC,EAAQ1hC,QAAQ,KAChB,MAAM,IAAIlH,MAAM,wDAEpB,IAAI+nC,EAAW/M,EAAc8N,aAAaF,EAASp2B,EAAQ1T,GACvDgJ,EAAU,IAAIugC,EAAgBP,cAAcC,EAAUzpC,MAE1D,OADAA,KAAKkqC,eAAe7hC,KAAKmB,GAClBA,GAEXkzB,EAAcp9B,UAAUqrC,2BAA6B,SAAUtqC,EAAYuqC,GACvE,IAAIvpC,EAAQrB,KACRypC,KAQJ,OAPAppC,EAAWN,UAAU,SAAUd,GAC3BwqC,EAASphC,MAAOqT,MAAOra,EAAMqa,MAAQkvB,EAAYh1B,aAAcH,EAAe/F,aAAaS,WAAWlR,MACvG,SAAUgC,GACTwoC,EAASphC,MAAOqT,MAAOra,EAAMqa,MAAQkvB,EAAYh1B,aAAcH,EAAe/F,aAAaW,YAAYpP,MACxG,WACCwoC,EAASphC,MAAOqT,MAAOra,EAAMqa,MAAQkvB,EAAYh1B,aAAcH,EAAe/F,aAAaY,qBAExFm5B,GAEX/M,EAAcp9B,UAAUurC,iBAAmB,SAAUxqC,EAAYyqC,GAC7D,IAAIzpC,EAAQrB,UACkB,IAA1B8qC,IAAoCA,EAAwB,MAChE,IAIIjpC,EAJAkpC,KACAC,GAAcD,OAAQA,EAAQE,OAAO,GACrCC,EAAsBxO,EACrByO,4BAA4BL,GAAuBruB,kBAoBxD,OAlBAzc,KAAKyK,SAAS,WACV5I,EAAexB,EAAWN,UAAU,SAAUwC,GAC1C,IAAItD,EAAQsD,EAERA,aAAa2C,EAAapF,aAC1Bb,EAAQoC,EAAMspC,2BAA2B1rC,EAAOoC,EAAMqa,QAE1DqvB,EAAO1iC,MAAOqT,MAAOra,EAAMqa,MAAO9F,aAAcH,EAAe/F,aAAaS,WAAWlR,MACxF,SAAUgC,GACT8pC,EAAO1iC,MAAOqT,MAAOra,EAAMqa,MAAO9F,aAAcH,EAAe/F,aAAaW,YAAYpP,MACzF,WACC8pC,EAAO1iC,MAAOqT,MAAOra,EAAMqa,MAAO9F,aAAcH,EAAe/F,aAAaY,sBAEjF,GACC46B,IAAwBn8B,OAAOC,mBAC/BhP,KAAKyK,SAAS,WAAc,OAAO5I,EAAaC,eAAkBopC,GAEtElrC,KAAKoqC,WAAW/hC,KAAK2iC,IAEjBI,KAAM,SAAUd,EAASp2B,EAAQ7F,GAC7B28B,EAAUC,OAAQ,EAClBD,EAAUK,SAAW3O,EAAc8N,aAAaF,EAASp2B,EAAQ7F,GAAY,MAIzFquB,EAAcp9B,UAAUgsC,oBAAsB,SAAUC,GACpD,IAAIP,GAAcD,OAAQQ,EAAwBN,OAAO,GAEzD,OADAjrC,KAAKoqC,WAAW/hC,KAAK2iC,IAEjBI,KAAM,SAAUd,GACZ,IAAIkB,EAAmC,iBAAZlB,GAAyBA,GAAWA,EAC/DU,EAAUC,OAAQ,EAClBD,EAAUK,SAAWG,EAAa3+B,IAAI,SAAUy9B,GAC5C,OAAO5N,EAAcyO,4BAA4Bb,QAKjE5N,EAAcp9B,UAAUgO,MAAQ,WAE5B,IADA,IAAI48B,EAAiBlqC,KAAKkqC,eACnBA,EAAe9nC,OAAS,GAC3B8nC,EAAex8B,QAAQg8B,QAE3BxmC,EAAO5D,UAAUgO,MAAMlP,KAAK4B,MAE5B,IADA,IAAIyrC,EAAkBzrC,KAAKoqC,WAAWlxB,OAAO,SAAUwyB,GAAQ,OAAOA,EAAKT,QACpEQ,EAAgBrpC,OAAS,GAAG,CAC/B,IAAIspC,EAAOD,EAAgB/9B,QAC3B1N,KAAKiqC,gBAAgByB,EAAKX,OAAQW,EAAKL,YAG/C3O,EAAcyO,4BAA8B,SAAUb,GAClD,GAAuB,iBAAZA,EACP,OAAO,IAAI5tB,EAAkBH,gBAAgBxN,OAAOC,mBAMxD,IAJA,IAAIpJ,EAAM0kC,EAAQloC,OACdupC,GAAc,EACdC,EAAoB78B,OAAOC,kBAC3Bk8B,EAAsBn8B,OAAOC,kBACxB/Q,EAAI,EAAGA,EAAI2H,EAAK3H,IAAK,CAC1B,IAAIyd,EAAQzd,EAAI+B,KAAK2b,gBACjBrd,EAAIgsC,EAAQrsC,GAChB,OAAQK,GACJ,IAAK,IACL,IAAK,IACD,MACJ,IAAK,IACDqtC,EAAajwB,EACb,MACJ,IAAK,IACDiwB,GAAc,EACd,MACJ,IAAK,IACD,GAAIC,IAAsB78B,OAAOC,kBAC7B,MAAM,IAAItN,MAAM,kGAGpBkqC,EAAoBD,GAAc,EAAIA,EAAajwB,EACnD,MACJ,IAAK,IACD,GAAIwvB,IAAwBn8B,OAAOC,kBAC/B,MAAM,IAAItN,MAAM,kGAGpBwpC,EAAsBS,GAAc,EAAIA,EAAajwB,EACrD,MACJ,QACI,MAAM,IAAIha,MAAM,0FACsCpD,EAAI,OAGtE,OAAI4sC,EAAsB,EACf,IAAIxuB,EAAkBH,gBAAgBqvB,GAGtC,IAAIlvB,EAAkBH,gBAAgBqvB,EAAmBV,IAGxExO,EAAc8N,aAAe,SAAUF,EAASp2B,EAAQ7F,EAAYw9B,GAEhE,QADoC,IAAhCA,IAA0CA,GAA8B,IAC9C,IAA1BvB,EAAQ1hC,QAAQ,KAChB,MAAM,IAAIlH,MAAM,0EAiBpB,IAdA,IAAIkE,EAAM0kC,EAAQloC,OACd0pC,KACAC,EAAWzB,EAAQ1hC,QAAQ,KAC3BojC,GAA4B,IAAdD,EAAkB,EAAKA,GAAY/rC,KAAK2b,gBACtDwO,EAA6B,iBAAXjW,EAClB,SAAU3R,GAAK,OAAOA,GACtB,SAAUA,GAEN,OAAIspC,GAA+B33B,EAAO3R,aAAcunC,EAAiBF,eAC9D11B,EAAO3R,GAAGknC,SAEdv1B,EAAO3R,IAElBopC,GAAc,EACT1tC,EAAI,EAAGA,EAAI2H,EAAK3H,IAAK,CAC1B,IAAIyd,EAAQzd,EAAI+B,KAAK2b,gBAAkBqwB,EACnCp2B,OAAe,EACftX,EAAIgsC,EAAQrsC,GAChB,OAAQK,GACJ,IAAK,IACL,IAAK,IACD,MACJ,IAAK,IACDqtC,EAAajwB,EACb,MACJ,IAAK,IACDiwB,GAAc,EACd,MACJ,IAAK,IACD/1B,EAAeH,EAAe/F,aAAaY,iBAC3C,MACJ,IAAK,IACD,MACJ,IAAK,IACDsF,EAAeH,EAAe/F,aAAaW,YAAYhC,GAAc,SACrE,MACJ,QACIuH,EAAeH,EAAe/F,aAAaS,WAAWga,EAAS7rB,IAGnEsX,GACAk2B,EAAazjC,MAAOqT,MAAOiwB,GAAc,EAAIA,EAAajwB,EAAO9F,aAAcA,IAGvF,OAAOk2B,GAEJpP,EA9MU,CA+MnBC,EAAuBrhB,sBACzBvd,EAAQ2+B,cAAgBA,gCC5NxB,IAAIyL,EAAWtqC,EAAQ,IAUvBE,EAAQkf,OAHR,SAAgBnQ,GACZ,OAAOq7B,EAASlrB,OAAOnQ,EAAhBq7B,CAAyBnoC,qCCRpC,IAAIkF,EAAerH,EAAQ,GACvBsqC,EAAWtqC,EAAQ,KACvBqH,EAAapF,WAAWR,UAAU2d,OAASkrB,EAASlrB,qCCFpD,IAAID,EAAQnf,EAAQ,IAepBE,EAAQkuC,SAPR,WAEI,IADA,IAAIt7B,KACKzO,EAAK,EAAGA,EAAKC,UAAUC,OAAQF,IACpCyO,EAAYzO,EAAK,GAAKC,UAAUD,GAEpC,OAAO8a,EAAMhJ,IAAIxN,WAAM,EAAQmK,EAAxBqM,CAAqChd,qCCbhD,IAAIkF,EAAerH,EAAQ,GACvBmf,EAAQnf,EAAQ,KACpBqH,EAAapF,WAAWR,UAAU0U,IAAMgJ,EAAMivB,uCCF9C,IAAI/D,EAAmBrqC,EAAQ,IA+C/BE,EAAQmf,eAPR,WAEI,IADA,IAAIvI,KACKzS,EAAK,EAAGA,EAAKC,UAAUC,OAAQF,IACpCyS,EAAKzS,EAAK,GAAKC,UAAUD,GAE7B,OAAOgmC,EAAiBhrB,eAAe1W,WAAM,EAAQmO,EAA9CuzB,CAAoDloC,qCC7C/D,IAAIkF,EAAerH,EAAQ,GACvBqqC,EAAmBrqC,EAAQ,KAC/BqH,EAAapF,WAAWR,UAAU4d,eAAiBgrB,EAAiBhrB,6CCFpE,IAAI+qB,EAAepqC,EAAQ,IA0C3BE,EAAQuf,WAHR,SAAoBC,GAChB,OAAO0qB,EAAa3qB,WAAWC,EAAxB0qB,CAAyCjoC,qCCxCpD,IAAIkF,EAAerH,EAAQ,GACvBoqC,EAAepqC,EAAQ,KAC3BqH,EAAapF,WAAWR,UAAUge,WAAa2qB,EAAa3qB,yCCF5D,IAAI0qB,EAAiBnqC,EAAQ,IA6C7BE,EAAQggB,aAHR,SAAsBC,EAAUT,GAC5B,OAAOyqB,EAAejqB,aAAaC,EAAUT,EAAtCyqB,CAAuDhoC,qCC3ClE,IAAIkF,EAAerH,EAAQ,GACvBmqC,EAAiBnqC,EAAQ,KAC7BqH,EAAapF,WAAWR,UAAUye,aAAeiqB,EAAejqB,2CCFhE,IAAInH,EAAU/Y,EAAQ,GAClB2gB,EAAc3gB,EAAQ,IACtBoN,EAAgBpN,EAAQ,IACxBkqC,EAAelqC,EAAQ,IAsB3BE,EAAQ+U,WArBR,SAAoB2L,GAChB,IAAI7T,EAAYgM,EAAQ3P,MACpByX,EAAyB,KACzBC,EAAgB5P,OAAOC,kBAgB3B,OAfI/D,EAAcT,YAAYrI,UAAU,MACpCyI,EAAYzI,UAAU,IAEtB8I,EAAcT,YAAYrI,UAAU,IACpCyI,EAAYzI,UAAU,GAEjBqc,EAAYjQ,UAAUpM,UAAU,MACrCwc,EAAgBxc,UAAU,IAE1B8I,EAAcT,YAAYrI,UAAU,IACpCyI,EAAYzI,UAAU,GAEjBqc,EAAYjQ,UAAUpM,UAAU,MACrCuc,EAAyBvc,UAAU,IAEhC4lC,EAAaj1B,WAAW2L,EAAgBC,EAAwBC,EAAe/T,EAA/Em9B,CAA0F/nC,qCCvBrG,IAAIkF,EAAerH,EAAQ,GACvBkqC,EAAelqC,EAAQ,KAC3BqH,EAAapF,WAAWR,UAAUwT,WAAai1B,EAAaj1B,yCCF5D,IAAIg1B,EAAgBjqC,EAAQ,IAqD5BE,EAAQ2hB,YAJR,SAAqBC,EAAYC,GAE7B,YADyB,IAArBA,IAA+BA,EAAmB,GAC/CkoB,EAAcpoB,YAAYC,EAAYC,EAAtCkoB,CAAwD9nC,qCCnDnE,IAAIkF,EAAerH,EAAQ,GACvBiqC,EAAgBjqC,EAAQ,KAC5BqH,EAAapF,WAAWR,UAAUogB,YAAcooB,EAAcpoB,0CCF9D,IAAIrB,EAAWxgB,EAAQ,IAwCvBE,EAAQmM,OAHR,SAAgB6V,GACZ,OAAO1B,EAASnU,OAAO6V,EAAhB1B,CAAkCre,qCCtC7C,IAAIkF,EAAerH,EAAQ,GACvBwgB,EAAWxgB,EAAQ,KACvBqH,EAAapF,WAAWR,UAAU4K,OAASmU,EAASnU,qDCFpD,IAAI29B,EAAYhqC,EAAQ,IA2BxBE,EAAQuiB,QAHR,WACI,OAAOunB,EAAUvnB,SAAVunB,CAAoB7nC,qCCzB/B,IAAIkF,EAAerH,EAAQ,GACvBgqC,EAAYhqC,EAAQ,KACxBqH,EAAapF,WAAWR,UAAUghB,QAAUunB,EAAUvnB,sCCFtD,IAAI1J,EAAU/Y,EAAQ,GAClB2+B,EAAc3+B,EAAQ,IAW1BE,EAAQ+Y,UAJR,SAAmBlM,GAEf,YADkB,IAAdA,IAAwBA,EAAYgM,EAAQ3P,OACzCu1B,EAAY1lB,UAAUlM,EAAtB4xB,CAAiCx8B,qCCV5C,IAAIkF,EAAerH,EAAQ,GACvB2+B,EAAc3+B,EAAQ,KAC1BqH,EAAapF,WAAWR,UAAUwX,UAAY0lB,EAAY1lB,wCCF1D,IAAIF,EAAU/Y,EAAQ,GAClB+pC,EAAgB/pC,EAAQ,IAqD5BE,EAAQyiB,YAJR,SAAqBC,EAAKC,EAAgB9V,GAEtC,YADkB,IAAdA,IAAwBA,EAAYgM,EAAQ3P,OACzC2gC,EAAcpnB,YAAYC,EAAKC,EAAgB9V,EAA/Cg9B,CAA0D5nC,qCCpDrE,IAAIkF,EAAerH,EAAQ,GACvB+pC,EAAgB/pC,EAAQ,KAC5BqH,EAAapF,WAAWR,UAAUkhB,YAAconB,EAAcpnB,0CCF9D,IAAI5J,EAAU/Y,EAAQ,GAClB8pC,EAAY9pC,EAAQ,IAsExBE,EAAQqjB,QAJR,SAAiBX,EAAK7V,GAElB,YADkB,IAAdA,IAAwBA,EAAYgM,EAAQ3P,OACzC0gC,EAAUvmB,QAAQX,EAAK7V,EAAvB+8B,CAAkC3nC,qCCrE7C,IAAIkF,EAAerH,EAAQ,GACvB8pC,EAAY9pC,EAAQ,KACxBqH,EAAapF,WAAWR,UAAU8hB,QAAUumB,EAAUvmB,sCCFtD,IAAIlc,EAAerH,EAAQ,GACvBkkB,EAAiBlkB,EAAQ,IAC7BqH,EAAapF,WAAWR,UAAUkiB,aAAeO,EAAeP,2CCFhE,IAAI5K,EAAU/Y,EAAQ,GAClBmkB,EAAankB,EAAQ,IACrB6pC,EAAiB7pC,EAAQ,IA6C7BE,EAAQkkB,aALR,SAAsB7P,EAAUxH,EAAWpJ,GAGvC,YAFkB,IAAdoJ,IAAwBA,EAAYgM,EAAQ3P,YACjC,IAAXzF,IAAqBA,EAASwgB,EAAWxQ,uBACtCk2B,EAAezlB,aAAa7P,EAAUxH,EAAWpJ,EAAjDkmC,CAAyD1nC,qCC7CpE,IAAIkF,EAAerH,EAAQ,GACvB6pC,EAAiB7pC,EAAQ,KAC7BqH,EAAapF,WAAWR,UAAU2iB,aAAeylB,EAAezlB,2CCFhE,IAAID,EAAankB,EAAQ,IA6CzBE,EAAQ4T,SAJR,SAAkBC,EAAkBpQ,GAEhC,YADe,IAAXA,IAAqBA,EAASwgB,EAAWxQ,uBACtCwQ,EAAWrQ,SAASC,EAAkBpQ,EAAtCwgB,CAA8ChiB,qCC3CzD,IAAIkF,EAAerH,EAAQ,GACvBmkB,EAAankB,EAAQ,KACzBqH,EAAapF,WAAWR,UAAUqS,SAAWqQ,EAAWrQ,uCCFxD,IAAI61B,EAAc3pC,EAAQ,IAwC1BE,EAAQskB,UAHR,SAAmBvJ,GACf,OAAO0uB,EAAYnlB,UAAUvJ,EAAtB0uB,CAAiCxnC,qCCtC5C,IAAIkF,EAAerH,EAAQ,GACvB2pC,EAAc3pC,EAAQ,KAC1BqH,EAAapF,WAAWR,UAAU+iB,UAAYmlB,EAAYnlB,wCCF1D,IAAIklB,EAAc1pC,EAAQ,IAqC1BE,EAAQ2kB,UAHR,SAAmBC,GACf,OAAO4kB,EAAY7kB,UAAUC,EAAtB4kB,CAAgCvnC,qCCnC3C,IAAIkF,EAAerH,EAAQ,GACvB0pC,EAAc1pC,EAAQ,KAC1BqH,EAAapF,WAAWR,UAAUojB,UAAY6kB,EAAY7kB,wCCF1D,IAAIxW,EAAarO,EAAQ,IAwCzBE,EAAQwO,SAHR,SAAkBf,GACd,OAAOU,EAAWK,SAASf,EAApBU,CAA2BlM,qCCtCtC,IAAIkF,EAAerH,EAAQ,GACvBqO,EAAarO,EAAQ,KACzBqH,EAAapF,WAAWR,UAAUiN,SAAWL,EAAWK,uCCFxD,IAAI+6B,EAASzpC,EAAQ,IAqCrBE,EAAQ+kB,KAHR,SAActX,GACV,OAAO87B,EAAOxkB,KAAKtX,EAAZ87B,CAAmBtnC,qCCnC9B,IAAIkF,EAAerH,EAAQ,GACvBypC,EAASzpC,EAAQ,KACrBqH,EAAapF,WAAWR,UAAUwjB,KAAOwkB,EAAOxkB,mCCFhD,IAAIukB,EAAgBxpC,EAAQ,IA+C5BE,EAAQklB,YAHR,SAAqBC,EAAiBrU,GAClC,OAAOw4B,EAAcpkB,YAAYC,EAAiBrU,EAA3Cw4B,CAA2DrnC,qCC7CtE,IAAIkF,EAAerH,EAAQ,GACvBwpC,EAAgBxpC,EAAQ,KAC5BqH,EAAapF,WAAWR,UAAU2jB,YAAcokB,EAAcpkB,0CCF9D,IAAIK,EAAczlB,EAAQ,IAoD1BE,EAAQiZ,UAHR,SAAmBlK,EAAS+B,GACxB,OAAOyU,EAAYtM,UAAUlK,EAAS+B,EAA/ByU,CAA+CtjB,qCClD1D,IAAIkF,EAAerH,EAAQ,GACvBylB,EAAczlB,EAAQ,KAC1BqH,EAAapF,WAAWR,UAAU0X,UAAYsM,EAAYtM,wCCF1D,IAAIowB,EAAcvpC,EAAQ,IA8C1BE,EAAQmuC,QAHR,WACI,OAAO9E,EAAY7jB,WAAZ6jB,CAAwBpnC,qCC5CnC,IAAIkF,EAAerH,EAAQ,GACvBsuC,EAAWtuC,EAAQ,KACvBqH,EAAapF,WAAWR,UAAU8sC,OAASD,EAASD,QACpDhnC,EAAapF,WAAWR,UAAU4sC,QAAUC,EAASD,sCCHrD,IAAIzpC,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAG/EiiB,EAAiB,SAAU1hB,GAE3B,SAAS0hB,IACL1hB,EAAOsD,MAAMxG,KAAMmC,WAuBvB,OAzBAM,EAAUmiB,EAAe1hB,GAIzB0hB,EAActlB,UAAUgO,MAAQ,SAAUC,GACtCvN,KAAKmN,QAAS,EACdnN,KAAKoN,eAAYC,EACjB,IACI7M,EADA0M,EAAUlN,KAAKkN,QAEfvF,GAAS,EACT6D,EAAQ0B,EAAQ9K,OACpBmL,EAASA,GAAUL,EAAQQ,QAC3B,GACI,GAAIlN,EAAQ+M,EAAOC,QAAQD,EAAOhC,MAAOgC,EAAOE,OAC5C,cAEG9F,EAAQ6D,IAAU+B,EAASL,EAAQQ,UAE9C,GADA1N,KAAKmN,QAAS,EACV3M,EAAO,CACP,OAASmH,EAAQ6D,IAAU+B,EAASL,EAAQQ,UACxCH,EAAOzL,cAEX,MAAMtB,IAGPokB,EA1BU,CADE/mB,EAAQ,IA4BZqJ,gBACnBnJ,EAAQ6mB,cAAgBA,iBClCxB,IAOIynB,EACAC,EARAC,EAAUvuC,EAAOD,WAUrB,SAASyuC,IACL,MAAM,IAAI9qC,MAAM,mCAEpB,SAAS+qC,IACL,MAAM,IAAI/qC,MAAM,qCAsBpB,SAASgrC,EAAWC,GAChB,GAAIN,IAAqBtmC,WAErB,OAAOA,WAAW4mC,EAAK,GAG3B,IAAKN,IAAqBG,IAAqBH,IAAqBtmC,WAEhE,OADAsmC,EAAmBtmC,WACZA,WAAW4mC,EAAK,GAE3B,IAEI,OAAON,EAAiBM,EAAK,GAC/B,MAAM5kC,GACJ,IAEI,OAAOskC,EAAiBjuC,KAAK,KAAMuuC,EAAK,GAC1C,MAAM5kC,GAEJ,OAAOskC,EAAiBjuC,KAAK4B,KAAM2sC,EAAK,MAvCnD,WACG,IAEQN,EADsB,mBAAftmC,WACYA,WAEAymC,EAEzB,MAAOzkC,GACLskC,EAAmBG,EAEvB,IAEQF,EADwB,mBAAjB1oB,aACcA,aAEA6oB,EAE3B,MAAO1kC,GACLukC,EAAqBG,GAjB5B,GAwED,IAEIG,EAFAr5B,KACAs5B,GAAW,EAEXC,GAAc,EAElB,SAASC,IACAF,GAAaD,IAGlBC,GAAW,EACPD,EAAaxqC,OACbmR,EAAQq5B,EAAaxkC,OAAOmL,GAE5Bu5B,GAAc,EAEdv5B,EAAMnR,QACN4qC,KAIR,SAASA,IACL,IAAIH,EAAJ,CAGA,IAAIzrB,EAAUsrB,EAAWK,GACzBF,GAAW,EAGX,IADA,IAAIjnC,EAAM2N,EAAMnR,OACVwD,GAAK,CAGP,IAFAgnC,EAAer5B,EACfA,OACSu5B,EAAalnC,GACdgnC,GACAA,EAAaE,GAAYG,MAGjCH,GAAc,EACdlnC,EAAM2N,EAAMnR,OAEhBwqC,EAAe,KACfC,GAAW,EAnEf,SAAyBK,GACrB,GAAIZ,IAAuB1oB,aAEvB,OAAOA,aAAaspB,GAGxB,IAAKZ,IAAuBG,IAAwBH,IAAuB1oB,aAEvE,OADA0oB,EAAqB1oB,aACdA,aAAaspB,GAExB,IAEWZ,EAAmBY,GAC5B,MAAOnlC,GACL,IAEI,OAAOukC,EAAmBluC,KAAK,KAAM8uC,GACvC,MAAOnlC,GAGL,OAAOukC,EAAmBluC,KAAK4B,KAAMktC,KAgD7CC,CAAgB/rB,IAiBpB,SAASgsB,EAAKT,EAAKxhC,GACfnL,KAAK2sC,IAAMA,EACX3sC,KAAKmL,MAAQA,EAYjB,SAAS2P,KA5BTyxB,EAAQc,SAAW,SAAUV,GACzB,IAAIh4B,EAAO,IAAIjK,MAAMvI,UAAUC,OAAS,GACxC,GAAID,UAAUC,OAAS,EACnB,IAAK,IAAInE,EAAI,EAAGA,EAAIkE,UAAUC,OAAQnE,IAClC0W,EAAK1W,EAAI,GAAKkE,UAAUlE,GAGhCsV,EAAMlL,KAAK,IAAI+kC,EAAKT,EAAKh4B,IACJ,IAAjBpB,EAAMnR,QAAiByqC,GACvBH,EAAWM,IASnBI,EAAK9tC,UAAU2tC,IAAM,WACjBjtC,KAAK2sC,IAAInmC,MAAM,KAAMxG,KAAKmL,QAE9BohC,EAAQe,MAAQ,UAChBf,EAAQgB,SAAU,EAClBhB,EAAQiB,OACRjB,EAAQkB,QACRlB,EAAQmB,QAAU,GAClBnB,EAAQoB,YAIRpB,EAAQqB,GAAK9yB,EACbyxB,EAAQsB,YAAc/yB,EACtByxB,EAAQuB,KAAOhzB,EACfyxB,EAAQwB,IAAMjzB,EACdyxB,EAAQyB,eAAiBlzB,EACzByxB,EAAQ0B,mBAAqBnzB,EAC7ByxB,EAAQ3kB,KAAO9M,EACfyxB,EAAQ2B,gBAAkBpzB,EAC1ByxB,EAAQ4B,oBAAsBrzB,EAE9ByxB,EAAQ6B,UAAY,SAAU5vC,GAAQ,UAEtC+tC,EAAQ8B,QAAU,SAAU7vC,GACxB,MAAM,IAAIkD,MAAM,qCAGpB6qC,EAAQ+B,IAAM,WAAc,MAAO,KACnC/B,EAAQgC,MAAQ,SAAUC,GACtB,MAAM,IAAI9sC,MAAM,mCAEpB6qC,EAAQkC,MAAQ,WAAa,OAAO,qBCvLnC,SAAAlkC,EAAAgiC,IAAA,SAAUhiC,EAAQ8C,GACf,aAEA,IAAI9C,EAAOga,aAAX,CAIA,IAIImqB,EA6HIC,EAZAC,EArBAC,EACAC,EAjGJC,EAAa,EACbC,KACAC,GAAwB,EACxBC,EAAM3kC,EAAOkzB,SAoJb0R,EAAWxwC,OAAOywC,gBAAkBzwC,OAAOywC,eAAe7kC,GAC9D4kC,EAAWA,GAAYA,EAASppC,WAAaopC,EAAW5kC,EAGf,wBAAlCgyB,SAASn+B,KAAKmM,EAAOgiC,SApFxBmC,EAAoB,SAASW,GACzB9C,EAAQc,SAAS,WAAciC,EAAaD,OAIpD,WAGI,GAAI9kC,EAAOglC,cAAgBhlC,EAAOilC,cAAe,CAC7C,IAAIC,GAA4B,EAC5BC,EAAenlC,EAAOolC,UAM1B,OALAplC,EAAOolC,UAAY,WACfF,GAA4B,GAEhCllC,EAAOglC,YAAY,GAAI,KACvBhlC,EAAOolC,UAAYD,EACZD,GAwEJG,GAIArlC,EAAOslC,iBA9CVjB,EAAU,IAAIiB,gBACVC,MAAMH,UAAY,SAASI,GAE/BT,EADaS,EAAMC,OAIvBtB,EAAoB,SAASW,GACzBT,EAAQqB,MAAMV,YAAYF,KA2CvBH,GAAO,uBAAwBA,EAAItR,cAAc,WAtCpD+Q,EAAOO,EAAIgB,gBACfxB,EAAoB,SAASW,GAGzB,IAAIc,EAASjB,EAAItR,cAAc,UAC/BuS,EAAO7U,mBAAqB,WACxBgU,EAAaD,GACbc,EAAO7U,mBAAqB,KAC5BqT,EAAKyB,YAAYD,GACjBA,EAAS,MAEbxB,EAAK5Q,YAAYoS,KAKrBzB,EAAoB,SAASW,GACzBtpC,WAAWupC,EAAc,EAAGD,KAlD5BR,EAAgB,gBAAkBl7B,KAAKsuB,SAAW,IAClD6M,EAAkB,SAASiB,GACvBA,EAAMzvC,SAAWiK,GACK,iBAAfwlC,EAAMC,MACyB,IAAtCD,EAAMC,KAAKpnC,QAAQimC,IACnBS,GAAcS,EAAMC,KAAKpmC,MAAMilC,EAAczsC,UAIjDmI,EAAO8lC,iBACP9lC,EAAO8lC,iBAAiB,UAAWvB,GAAiB,GAEpDvkC,EAAO+lC,YAAY,YAAaxB,GAGpCJ,EAAoB,SAASW,GACzB9kC,EAAOglC,YAAYV,EAAgBQ,EAAQ,OAgEnDF,EAAS5qB,aA1KT,SAAsBqL,GAEI,mBAAbA,IACTA,EAAW,IAAIxU,SAAS,GAAKwU,IAI/B,IADA,IAAIjb,EAAO,IAAIjK,MAAMvI,UAAUC,OAAS,GAC/BnE,EAAI,EAAGA,EAAI0W,EAAKvS,OAAQnE,IAC7B0W,EAAK1W,GAAKkE,UAAUlE,EAAI,GAG5B,IAAIsyC,GAAS3gB,SAAUA,EAAUjb,KAAMA,GAGvC,OAFAq6B,EAAcD,GAAcwB,EAC5B7B,EAAkBK,GACXA,KA6JTI,EAAS3qB,eAAiBA,EA1J1B,SAASA,EAAe6qB,UACbL,EAAcK,GAyBzB,SAASC,EAAaD,GAGlB,GAAIJ,EAGAlpC,WAAWupC,EAAc,EAAGD,OACzB,CACH,IAAIkB,EAAOvB,EAAcK,GACzB,GAAIkB,EAAM,CACNtB,GAAwB,EACxB,KAjCZ,SAAasB,GACT,IAAI3gB,EAAW2gB,EAAK3gB,SAChBjb,EAAO47B,EAAK57B,KAChB,OAAQA,EAAKvS,QACb,KAAK,EACDwtB,IACA,MACJ,KAAK,EACDA,EAASjb,EAAK,IACd,MACJ,KAAK,EACDib,EAASjb,EAAK,GAAIA,EAAK,IACvB,MACJ,KAAK,EACDib,EAASjb,EAAK,GAAIA,EAAK,GAAIA,EAAK,IAChC,MACJ,QACIib,EAASppB,MAAM6G,EAAWsH,IAiBlBs4B,CAAIsD,GADR,QAGI/rB,EAAe6qB,GACfJ,GAAwB,MAvE3C,CAyLiB,oBAAT7kC,UAAyC,IAAXG,EAAyBvK,KAAOuK,EAASH,+DCzLhF,SAAAoa,EAAAD,GAIA,IAAI7kB,EAAS7B,EAAQ,GACjB2yC,EAAuB,WACvB,SAASA,EAAoBlvC,GAEzB,GADAtB,KAAKsB,KAAOA,EACRA,EAAKijB,cAA6C,mBAAtBjjB,EAAKijB,aACjCvkB,KAAKukB,aAAejjB,EAAKijB,aAAajgB,KAAKhD,GAC3CtB,KAAKwkB,eAAiBljB,EAAKkjB,eAAelgB,KAAKhD,OAE9C,CACDtB,KAAK+uC,WAAa,EAClB/uC,KAAKgvC,iBACLhvC,KAAKivC,uBAAwB,EAEzBjvC,KAAKywC,wBAELzwC,KAAKukB,aAAevkB,KAAK0wC,oCAEpB1wC,KAAK4vC,oBAEV5vC,KAAKukB,aAAevkB,KAAK2wC,gCAEpB3wC,KAAK4wC,uBAEV5wC,KAAKukB,aAAevkB,KAAK6wC,mCAEpB7wC,KAAK8wC,yBAEV9wC,KAAKukB,aAAevkB,KAAK+wC,qCAIzB/wC,KAAKukB,aAAevkB,KAAKgxC,+BAE7B,IAAIC,EAAK,SAASzsB,EAAe6qB,UACtB7qB,EAAe0sB,SAASlC,cAAcK,IAEjD4B,EAAGC,SAAWlxC,KACdA,KAAKwkB,eAAiBysB,GAmK9B,OAhKAT,EAAoBlxC,UAAU6xC,SAAW,SAAUzyC,GAC/C,OAAOsB,KAAKsB,KAAK3C,OAAOW,UAAUi9B,SAASn+B,KAAKM,IAEpD8xC,EAAoBlxC,UAAUmxC,sBAAwB,WAClD,MAA4C,qBAArCzwC,KAAKmxC,SAASnxC,KAAKsB,KAAKirC,UAEnCiE,EAAoBlxC,UAAUsxC,qBAAuB,WACjD,OAAOh3B,QAAQ5Z,KAAKsB,KAAKuuC,iBAE7BW,EAAoBlxC,UAAUwxC,uBAAyB,WACnD,IAAIrT,EAAWz9B,KAAKsB,KAAKm8B,SACzB,OAAO7jB,QAAQ6jB,GAAY,uBAAwBA,EAASG,cAAc,YAE9E4S,EAAoBlxC,UAAUswC,kBAAoB,WAC9C,IAAItuC,EAAOtB,KAAKsB,KAGhB,GAAIA,EAAKiuC,cAAgBjuC,EAAKkuC,cAAe,CACzC,IAAI4B,GAA8B,EAC9B1B,EAAepuC,EAAKquC,UAMxB,OALAruC,EAAKquC,UAAY,WACbyB,GAA8B,GAElC9vC,EAAKiuC,YAAY,GAAI,KACrBjuC,EAAKquC,UAAYD,EACV0B,EAEX,OAAO,GAIXZ,EAAoBlxC,UAAU+xC,iBAAmB,SAAUC,GAEvD,IADA,IAAI38B,KACKzS,EAAK,EAAGA,EAAKC,UAAUC,OAAQF,IACpCyS,EAAKzS,EAAK,GAAKC,UAAUD,GAE7B,IAAIyC,EAAK,SAASY,IACd,IAAiB+rC,EAAR/rC,EAAqB+rC,QAAS38B,EAA9BpP,EAAwCoP,KAC1B,mBAAZ28B,EACPA,EAAQ9qC,WAAM6G,EAAWsH,GAGxB,IAAIyG,SAAS,GAAKk2B,EAAlB,IAKT,OAFA3sC,EAAG2sC,QAAUA,EACb3sC,EAAGgQ,KAAOA,EACHhQ,GAEX6rC,EAAoBlxC,UAAUiyC,6BAA+B,SAAU58B,GAEnE,OADA3U,KAAKgvC,cAAchvC,KAAK+uC,YAAc/uC,KAAKqxC,iBAAiB7qC,WAAM6G,EAAWsH,GACtE3U,KAAK+uC,cAEhByB,EAAoBlxC,UAAUoxC,kCAAoC,WAC9D,IAAI/rC,EAAK,SAAS4f,IACd,IAAI2sB,EAAW3sB,EAAa2sB,SACxB7B,EAAS6B,EAASK,6BAA6BpvC,WAEnD,OADA+uC,EAAS5vC,KAAKirC,QAAQc,SAAS6D,EAASG,iBAAiBH,EAAS5B,aAAcD,IACzEA,GAGX,OADA1qC,EAAGusC,SAAWlxC,KACP2E,GAEX6rC,EAAoBlxC,UAAUqxC,8BAAgC,WAI1D,IAAIrvC,EAAOtB,KAAKsB,KACZutC,EAAgB,gBAAkBvtC,EAAKqS,KAAKsuB,SAAW,IACvD6M,EAAkB,SAAS0C,EAAqBzB,GAChD,IAAImB,EAAWM,EAAqBN,SAChCnB,EAAMzvC,SAAWgB,GACK,iBAAfyuC,EAAMC,MACyB,IAAtCD,EAAMC,KAAKpnC,QAAQimC,IACnBqC,EAAS5B,cAAcS,EAAMC,KAAKpmC,MAAMilC,EAAczsC,UAG9D0sC,EAAgBoC,SAAWlxC,KAC3BsB,EAAK+uC,iBAAiB,UAAWvB,GAAiB,GAClD,IAAInqC,EAAK,SAAS4f,IACd,IAAuBsqB,EAAdtqB,EAAiCsqB,cAAeqC,EAAhD3sB,EAA8D2sB,SACnE7B,EAAS6B,EAASK,6BAA6BpvC,WAEnD,OADA+uC,EAAS5vC,KAAKiuC,YAAYV,EAAgBQ,EAAQ,KAC3CA,GAIX,OAFA1qC,EAAGusC,SAAWlxC,KACd2E,EAAGkqC,cAAgBA,EACZlqC,GAEX6rC,EAAoBlxC,UAAUgwC,aAAe,SAAUD,GAGnD,GAAIrvC,KAAKivC,sBAGLjvC,KAAKsB,KAAKyE,WAAW/F,KAAKqxC,iBAAiBrxC,KAAKsvC,aAAcD,GAAS,OAEtE,CACD,IAAIkB,EAAOvwC,KAAKgvC,cAAcK,GAC9B,GAAIkB,EAAM,CACNvwC,KAAKivC,uBAAwB,EAC7B,IACIsB,IADJ,QAIIvwC,KAAKwkB,eAAe6qB,GACpBrvC,KAAKivC,uBAAwB,MAK7CuB,EAAoBlxC,UAAUuxC,iCAAmC,WAC7D,IAAIxvC,EAAQrB,KACR4uC,EAAU,IAAI5uC,KAAKsB,KAAKuuC,eAC5BjB,EAAQkB,MAAMH,UAAY,SAAUI,GAChC,IAAIV,EAASU,EAAMC,KACnB3uC,EAAMiuC,aAAaD,IAEvB,IAAI1qC,EAAK,SAAS4f,IACd,IAAuBqqB,EAAdrqB,EAA2BqqB,QAChCS,EADK9qB,EAAkD2sB,SACrCK,6BAA6BpvC,WAEnD,OADAysC,EAAQqB,MAAMV,YAAYF,GACnBA,GAIX,OAFA1qC,EAAGiqC,QAAUA,EACbjqC,EAAGusC,SAAWlxC,KACP2E,GAEX6rC,EAAoBlxC,UAAUyxC,mCAAqC,WAC/D,IAAIpsC,EAAK,SAAS4f,IACd,IAAI2sB,EAAW3sB,EAAa2sB,SAExBhC,EADOgC,EAAS5vC,KACLm8B,SACXkR,EAAOO,EAAIgB,gBACXb,EAAS6B,EAASK,6BAA6BpvC,WAG/CguC,EAASjB,EAAItR,cAAc,UAQ/B,OAPAuS,EAAO7U,mBAAqB,WACxB4V,EAAS5B,aAAaD,GACtBc,EAAO7U,mBAAqB,KAC5BqT,EAAKyB,YAAYD,GACjBA,EAAS,MAEbxB,EAAK5Q,YAAYoS,GACVd,GAGX,OADA1qC,EAAGusC,SAAWlxC,KACP2E,GAEX6rC,EAAoBlxC,UAAU0xC,6BAA+B,WACzD,IAAIrsC,EAAK,SAAS4f,IACd,IAAI2sB,EAAW3sB,EAAa2sB,SACxB7B,EAAS6B,EAASK,6BAA6BpvC,WAEnD,OADA+uC,EAAS5vC,KAAKyE,WAAWmrC,EAASG,iBAAiBH,EAAS5B,aAAcD,GAAS,GAC5EA,GAGX,OADA1qC,EAAGusC,SAAWlxC,KACP2E,GAEJ6rC,EAvMgB,GAyM3BzyC,EAAQyyC,oBAAsBA,EAC9BzyC,EAAQ0zC,UAAY,IAAIjB,EAAoB9wC,EAAO4B,yFC9MnD,IAAImB,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/E+uC,EAAc7zC,EAAQ,KAOtBgnB,EAAc,SAAU3hB,GAExB,SAAS2hB,EAAWja,EAAWgD,GAC3B1K,EAAO9E,KAAK4B,KAAM4K,EAAWgD,GAC7B5N,KAAK4K,UAAYA,EACjB5K,KAAK4N,KAAOA,EAiChB,OArCAnL,EAAUoiB,EAAY3hB,GAMtB2hB,EAAWvlB,UAAU0O,eAAiB,SAAUpD,EAAWkD,EAAIL,GAG3D,YAFc,IAAVA,IAAoBA,EAAQ,GAElB,OAAVA,GAAkBA,EAAQ,EACnBvK,EAAO5D,UAAU0O,eAAe5P,KAAK4B,KAAM4K,EAAWkD,EAAIL,IAGrE7C,EAAUsC,QAAQ7E,KAAKrI,MAIhB4K,EAAUwC,YAAcxC,EAAUwC,UAAYskC,EAAYD,UAAUltB,aAAa3Z,EAAU0C,MAAMhJ,KAAKsG,EAAW,UAE5Hia,EAAWvlB,UAAUyO,eAAiB,SAAUnD,EAAWkD,EAAIL,GAK3D,QAJc,IAAVA,IAAoBA,EAAQ,GAIjB,OAAVA,GAAkBA,EAAQ,GAAiB,OAAVA,GAAkBzN,KAAKyN,MAAQ,EACjE,OAAOvK,EAAO5D,UAAUyO,eAAe3P,KAAK4B,KAAM4K,EAAWkD,EAAIL,GAKpC,IAA7B7C,EAAUsC,QAAQ9K,SAClBsvC,EAAYD,UAAUjtB,eAAe1W,GACrClD,EAAUwC,eAAYC,IAKvBwX,EAtCO,CANEhnB,EAAQ,IA6CZsJ,aAChBpJ,EAAQ8mB,WAAaA,gCCpDrB,IAAIpiB,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/EuC,EAAerH,EAAQ,GACvBg/B,EAASh/B,EAAQ,IACjB2gB,EAAc3gB,EAAQ,IAMtB8zC,EAAyB,SAAUzuC,GAEnC,SAASyuC,EAAsBrxC,EAAQsxC,EAAWhnC,QAC5B,IAAdgnC,IAAwBA,EAAY,QACtB,IAAdhnC,IAAwBA,EAAYiyB,EAAOlY,MAC/CzhB,EAAO9E,KAAK4B,MACZA,KAAKM,OAASA,EACdN,KAAK4xC,UAAYA,EACjB5xC,KAAK4K,UAAYA,IACZ4T,EAAYjQ,UAAUqjC,IAAcA,EAAY,KACjD5xC,KAAK4xC,UAAY,GAEhBhnC,GAA2C,mBAAvBA,EAAUH,WAC/BzK,KAAK4K,UAAYiyB,EAAOlY,MAoBhC,OAhCAliB,EAAUkvC,EAAuBzuC,GAejCyuC,EAAsBnvC,OAAS,SAAUlC,EAAQmN,EAAO7C,GAGpD,YAFc,IAAV6C,IAAoBA,EAAQ,QACd,IAAd7C,IAAwBA,EAAYiyB,EAAOlY,MACxC,IAAIgtB,EAAsBrxC,EAAQmN,EAAO7C,IAEpD+mC,EAAsB9mC,SAAW,SAAUC,GACvC,IAAIxK,EAASwK,EAAIxK,OAAQyB,EAAa+I,EAAI/I,WAC1C,OAAO/B,KAAKY,IAAIN,EAAOP,UAAUgC,KAErC4vC,EAAsBryC,UAAUY,WAAa,SAAU6B,GACnD,IAAI0L,EAAQzN,KAAK4xC,UACbtxC,EAASN,KAAKM,OAElB,OADgBN,KAAK4K,UACJH,SAASknC,EAAsB9mC,SAAU4C,GACtDnN,OAAQA,EAAQyB,WAAYA,KAG7B4vC,EAjCkB,CAkC3BzsC,EAAapF,YACf/B,EAAQ4zC,sBAAwBA,gCChDhC,IAAIE,EAA0Bh0C,EAAQ,KAkBtCE,EAAQ+zC,YANR,SAAqBlnC,EAAW6C,GAE5B,YADc,IAAVA,IAAoBA,EAAQ,GACzB,SAAqCnN,GACxC,OAAOA,EAAOH,KAAK,IAAI4xC,EAAoBnnC,EAAW6C,MAI9D,IAAIskC,EAAuB,WACvB,SAASA,EAAoBnnC,EAAW6C,GACpCzN,KAAK4K,UAAYA,EACjB5K,KAAKyN,MAAQA,EAKjB,OAHAskC,EAAoBzyC,UAAUlB,KAAO,SAAU2D,EAAYzB,GACvD,OAAO,IAAIuxC,EAAwBF,sBAAsBrxC,EAAQN,KAAKyN,MAAOzN,KAAK4K,WAAW7K,UAAUgC,IAEpGgwC,EARgB,iCCnB3B,IAAIC,EAAgBn0C,EAAQ,KAgB5BE,EAAQ+zC,YAJR,SAAqBlnC,EAAW6C,GAE5B,YADc,IAAVA,IAAoBA,EAAQ,GACzBukC,EAAcF,YAAYlnC,EAAW6C,EAArCukC,CAA4ChyC,qCCdvD,IAAIkF,EAAerH,EAAQ,GACvBm0C,EAAgBn0C,EAAQ,KAC5BqH,EAAapF,WAAWR,UAAUwyC,YAAcE,EAAcF,0CCF9D,IAAI3K,EAActpC,EAAQ,IAuB1BE,EAAQgnB,UAPR,WAEI,IADA,IAAI5Z,KACKjJ,EAAK,EAAGA,EAAKC,UAAUC,OAAQF,IACpCiJ,EAAMjJ,EAAK,GAAKC,UAAUD,GAE9B,OAAOilC,EAAYpiB,UAAUve,WAAM,EAAQ2E,EAApCg8B,CAA2CnnC,qCCrBtD,IAAIkF,EAAerH,EAAQ,GACvBspC,EAActpC,EAAQ,KAC1BqH,EAAapF,WAAWR,UAAUylB,UAAYoiB,EAAYpiB,wCCF1D,IAAImiB,EAAcrpC,EAAQ,IAgB1BE,EAAQinB,UAHR,SAAmBlM,GACf,OAAOouB,EAAYliB,UAAUlM,EAAtBouB,CAAiClnC,qCCd5C,IAAIkF,EAAerH,EAAQ,GACvBqpC,EAAcrpC,EAAQ,KAC1BqH,EAAapF,WAAWR,UAAU0lB,UAAYkiB,EAAYliB,wCCF1D,IAAIiiB,EAAcppC,EAAQ,IAgB1BE,EAAQsnB,UAHR,SAAmB1C,GACf,OAAOskB,EAAY5hB,UAAU1C,EAAtBskB,CAAgCjnC,qCCd3C,IAAIkF,EAAerH,EAAQ,GACvBopC,EAAcppC,EAAQ,KAC1BqH,EAAapF,WAAWR,UAAU+lB,UAAY4hB,EAAY5hB,wCCF1D,IAAI2hB,EAAanpC,EAAQ,IAoCzBE,EAAQ0nB,SAHR,SAAkBja,GACd,OAAOw7B,EAAWvhB,SAASja,EAApBw7B,CAA2BhnC,qCClCtC,IAAIkF,EAAerH,EAAQ,GACvBmpC,EAAanpC,EAAQ,KACzBqH,EAAapF,WAAWR,UAAUmmB,SAAWuhB,EAAWvhB,uCCFxD,IAAIshB,EAASlpC,EAAQ,IAerBE,EAAQmoB,KAHR,SAAc1a,GACV,OAAOu7B,EAAO7gB,KAAK1a,EAAZu7B,CAAmB/mC,qCCb9B,IAAIkF,EAAerH,EAAQ,GACvBkpC,EAASlpC,EAAQ,KACrBqH,EAAapF,WAAWR,UAAU4mB,KAAO6gB,EAAO7gB,mCCFhD,IAAI4gB,EAAWjpC,EAAQ,IAoBvBE,EAAQuoB,OAHR,SAAgBxN,GACZ,OAAOguB,EAASxgB,OAAOxN,EAAhBguB,CAA2B9mC,qCClBtC,IAAIkF,EAAerH,EAAQ,GACvBipC,EAAWjpC,EAAQ,KACvBqH,EAAapF,WAAWR,UAAUgnB,OAASwgB,EAASxgB,qCCFpD,IAAIugB,EAAgBhpC,EAAQ,IAQ5BE,EAAQ+oB,YAHR,SAAqBjU,EAAYC,EAAYlI,GACzC,OAAOi8B,EAAc/f,YAAYjU,EAAYC,EAAYlI,EAAlDi8B,CAA6D7mC,qCCNxE,IAAIkF,EAAerH,EAAQ,GACvBgpC,EAAgBhpC,EAAQ,KAC5BqH,EAAapF,WAAWR,UAAUwnB,YAAc+f,EAAc/f,0CCF9D,IAAI8f,EAAU/oC,EAAQ,IAoBtBE,EAAQopB,MAHR,WACI,OAAOyf,EAAQzf,OAARyf,CAAgB5mC,qCClB3B,IAAIkF,EAAerH,EAAQ,GACvB+oC,EAAU/oC,EAAQ,KACtBqH,EAAapF,WAAWR,UAAU6nB,MAAQyf,EAAQzf,oCCFlD,IAAIwf,EAAkB9oC,EAAQ,IAwD9BE,EAAQqpB,cAHR,SAAuBC,EAAWC,GAC9B,OAAOqf,EAAgBvf,cAAcC,EAAWC,EAAzCqf,CAAmD3mC,qCCtD9D,IAAIkF,EAAerH,EAAQ,GACvB8oC,EAAkB9oC,EAAQ,KAC9BqH,EAAapF,WAAWR,UAAU8nB,cAAgBuf,EAAgBvf,4CCFlE,IAAInb,EAASpO,EAAQ,IA6CrBE,EAAQuO,KANR,SAAcF,EAAaC,GACvB,OAAIlK,UAAUC,QAAU,EACb6J,EAAOK,KAAKF,EAAaC,EAAzBJ,CAA+BjM,MAEnCiM,EAAOK,KAAKF,EAAZH,CAAyBjM,qCC3CpC,IAAIkF,EAAerH,EAAQ,GACvBoO,EAASpO,EAAQ,KACrBqH,EAAapF,WAAWR,UAAUgN,KAAOL,EAAOK,mCCFhD,IAAIsK,EAAU/Y,EAAQ,GAClB6oC,EAAe7oC,EAAQ,IAyC3BE,EAAQiqB,WAJR,SAAoBC,EAAQrd,GAExB,YADkB,IAAdA,IAAwBA,EAAYgM,EAAQ3P,OACzCy/B,EAAa1e,WAAWC,EAAQrd,EAAhC87B,CAA2C1mC,qCCxCtD,IAAIkF,EAAerH,EAAQ,GACvB6oC,EAAe7oC,EAAQ,KAC3BqH,EAAapF,WAAWR,UAAU0oB,WAAa0e,EAAa1e,yCCF5D,IAAIye,EAAW5oC,EAAQ,IAsCvBE,EAAQuqB,OAHR,SAAgB3F,GACZ,OAAO8jB,EAASne,OAAO3F,EAAhB8jB,CAA0BzmC,qCCpCrC,IAAIkF,EAAerH,EAAQ,GACvB4oC,EAAW5oC,EAAQ,KACvBqH,EAAapF,WAAWR,UAAUgpB,OAASme,EAASne,qCCFpD,IAAIke,EAAc3oC,EAAQ,IAkB1BE,EAAQ4qB,UAHR,SAAmBhG,GACf,OAAO6jB,EAAY7d,UAAUhG,EAAtB6jB,CAAgCxmC,qCChB3C,IAAIkF,EAAerH,EAAQ,GACvB2oC,EAAc3oC,EAAQ,KAC1BqH,EAAapF,WAAWR,UAAUqpB,UAAY6d,EAAY7d,wCCF1D,IAAI4d,EAAU1oC,EAAQ,IAqBtBE,EAAQirB,MAJR,SAAexd,GAEX,YADc,IAAVA,IAAoBA,GAAS,GAC1B+6B,EAAQvd,MAAMxd,EAAd+6B,CAAqBvmC,qCCnBhC,IAAIkF,EAAerH,EAAQ,GACvB0oC,EAAU1oC,EAAQ,KACtBqH,EAAapF,WAAWR,UAAU0pB,MAAQud,EAAQvd,oCCFlD,IAAIsd,EAAezoC,EAAQ,IAkB3BE,EAAQorB,WAHR,SAAoBxG,GAChB,OAAO2jB,EAAand,WAAWxG,EAAxB2jB,CAAkCtmC,qCChB7C,IAAIkF,EAAerH,EAAQ,GACvByoC,EAAezoC,EAAQ,KAC3BqH,EAAapF,WAAWR,UAAU6pB,WAAamd,EAAand,yCCF5D,IAAIkd,EAAWxoC,EAAQ,IAiBvBE,EAAQ0rB,OAJR,SAAgBje,GAEZ,YADc,IAAVA,IAAoBA,GAAS,GAC1B66B,EAAS5c,OAAOje,EAAhB66B,CAAuBrmC,qCCflC,IAAIkF,EAAerH,EAAQ,GACvBwoC,EAAWxoC,EAAQ,KACvBqH,EAAapF,WAAWR,UAAUmqB,OAAS4c,EAAS5c,qCCFpD,IAAItJ,EAAWtiB,EAAQ,IAyDvBE,EAAQ+K,OAXR,SAAgBsD,EAAaC,GAMzB,OAAIlK,UAAUC,QAAU,EACb+d,EAASrX,OAAOsD,EAAaC,EAA7B8T,CAAmCngB,MAEvCmgB,EAASrX,OAAOsD,EAAhB+T,CAA6BngB,qCCvDxC,IAAIkF,EAAerH,EAAQ,GACvBsiB,EAAWtiB,EAAQ,KACvBqH,EAAapF,WAAWR,UAAUwJ,OAASqX,EAASrX,qCCFpD,IAAI8gB,EAAS/rB,EAAQ,IAEjBo0C,EAASp0C,EAAQ,IACrBE,EAAQm0C,WAAaD,EAAOv3B,KAiB5B3c,EAAQ2c,KAPR,WAEI,IADA,IAAI/J,KACKzO,EAAK,EAAGA,EAAKC,UAAUC,OAAQF,IACpCyO,EAAYzO,EAAK,GAAKC,UAAUD,GAEpC,OAAO0nB,EAAOlP,KAAKlU,WAAM,EAAQmK,EAA1BiZ,CAAuC5pB,qCClBlD,IAAIkF,EAAerH,EAAQ,GACvB+rB,EAAS/rB,EAAQ,KACrBqH,EAAapF,WAAWR,UAAUob,KAAOkP,EAAOlP,mCCFhD,IAAIyrB,EAAgBtoC,EAAQ,IAU5BE,EAAQ+rB,YAJR,WAEI,OAAOqc,EAAcrc,aAAdqc,CAA4BnmC,qCCRvC,IAAIkF,EAAerH,EAAQ,GACvBsoC,EAAgBtoC,EAAQ,KAC5BqH,EAAapF,WAAWR,UAAUwqB,YAAcqc,EAAcrc,0CCF9D,IAAIsc,EAAkBvoC,EAAQ,IAc9BE,EAAQgsB,cAHR,SAAuBlX,EAAYC,EAAYkX,EAAqBpf,GAChE,OAAOw7B,EAAgBrc,cAAclX,EAAYC,EAAYkX,EAAqBpf,EAA3Ew7B,CAAsFpmC,qCCZjG,IAAIkF,EAAerH,EAAQ,GACvBuoC,EAAkBvoC,EAAQ,KAC9BqH,EAAapF,WAAWR,UAAUyqB,cAAgBqc,EAAgBrc,4CCFlE,IAAImc,EAAoBroC,EAAQ,KAUhCE,EAAQssB,gBAHR,SAAyBprB,GACrB,OAAOinC,EAAkB7b,gBAAgBprB,EAAlCinC,CAAyClmC,qCCRpD,IAAIkF,EAAerH,EAAQ,GACvBqoC,EAAoBroC,EAAQ,KAChCqH,EAAapF,WAAWR,UAAU+qB,gBAAkB6b,EAAkB7b,8CCFtE,IAAI4b,EAAYpoC,EAAQ,KAkBxBE,EAAQusB,QAHR,SAAiB1e,GACb,OAAOq6B,EAAU3b,QAAQ1e,EAAlBq6B,CAA4BjmC,qCChBvC,IAAIkF,EAAerH,EAAQ,GACvBooC,EAAYpoC,EAAQ,KACxBqH,EAAapF,WAAWR,UAAUgrB,QAAU2b,EAAU3b,sCCFtD,IAAI0b,EAAUnoC,EAAQ,KAkCtBE,EAAQwsB,MAPR,WAEI,IADA,IAAIC,KACKtoB,EAAK,EAAGA,EAAKC,UAAUC,OAAQF,IACpCsoB,EAAWtoB,EAAK,GAAKC,UAAUD,GAEnC,OAAO8jC,EAAQzb,MAAM/jB,WAAM,EAAQgkB,EAA5Bwb,CAAwChmC,qCChCnD,IAAIkF,EAAerH,EAAQ,GACvBmoC,EAAUnoC,EAAQ,KACtBqH,EAAapF,WAAWR,UAAUirB,MAAQyb,EAAQzb,oCCMlDxsB,EAAQgtB,IARR,SAAaonB,EAAMplC,GACf,SAASqlC,IACL,OAASA,EAAQD,KAAK3rC,MAAM4rC,EAAQrlC,QAAS5K,WAIjD,OAFAiwC,EAAQD,KAAOA,EACfC,EAAQrlC,QAAUA,EACXqlC,iCCNX,IAAIrM,EAAcloC,EAAQ,KA6C1BE,EAAQ+sB,UAHR,SAAmBhS,EAAW/L,GAC1B,OAAOg5B,EAAYjb,UAAUhS,EAAW/L,EAAjCg5B,CAA0C/lC,qCC3CrD,IAAIkF,EAAerH,EAAQ,GACvBkoC,EAAcloC,EAAQ,KAC1BqH,EAAapF,WAAWR,UAAUwrB,UAAYib,EAAYjb,wCCF1D,IAAIgb,EAAajoC,EAAQ,KAuCzBE,EAAQitB,SAHR,WACI,OAAO8a,EAAW9a,UAAX8a,CAAsB9lC,qCCrCjC,IAAIkF,EAAerH,EAAQ,GACvBioC,EAAajoC,EAAQ,KACzBqH,EAAapF,WAAWR,UAAU0rB,SAAW8a,EAAW9a,uCCFxD,IAAI6a,EAAsBhoC,EAAQ,IAsElCE,EAAQoc,kBAPR,WAEI,IADA,IAAIC,KACKlY,EAAK,EAAGA,EAAKC,UAAUC,OAAQF,IACpCkY,EAAYlY,EAAK,GAAKC,UAAUD,GAEpC,OAAO2jC,EAAoB1rB,kBAAkB3T,WAAM,EAAQ4T,EAApDyrB,CAAiE7lC,qCCpE5E,IAAIkF,EAAerH,EAAQ,GACvBgoC,EAAsBhoC,EAAQ,KAClCqH,EAAapF,WAAWR,UAAU6a,kBAAoB0rB,EAAoB1rB,gDCF1E,IAAIxH,EAAc9U,EAAQ,IAmD1BE,EAAQ2X,UAJR,SAAmB9K,EAAW6C,GAE1B,YADc,IAAVA,IAAoBA,EAAQ,GACzBkF,EAAY+C,UAAU9K,EAAW6C,EAAjCkF,CAAwC3S,qCCjDnD,IAAIkF,EAAerH,EAAQ,GACvB8U,EAAc9U,EAAQ,KAC1BqH,EAAapF,WAAWR,UAAUoW,UAAY/C,EAAY+C,wCCF1D,IAAIsR,EAAcnpB,EAAQ,IAmG1BE,EAAQ2N,UAHR,SAAmBC,EAAyBC,GACxC,OAAOob,EAAYtb,UAAUC,EAAyBC,EAA/Cob,CAAyDhnB,qCCjGpE,IAAIkF,EAAerH,EAAQ,GACvBmpB,EAAcnpB,EAAQ,KAC1BqH,EAAapF,WAAWR,UAAUoM,UAAYsb,EAAYtb,wCCF1D,IAAIk6B,EAAQ/nC,EAAQ,KAmCpBE,EAAQ4tB,IAHR,SAAaC,GACT,OAAOga,EAAMja,IAAIC,EAAVga,CAAoB5lC,qCCjC/B,IAAIkF,EAAerH,EAAQ,GACvB+nC,EAAQ/nC,EAAQ,KACpBqH,EAAapF,WAAWR,UAAUqsB,IAAMia,EAAMja,kCCF9C,IAAIga,EAAc9nC,EAAQ,KAoC1BE,EAAQ8tB,UAJR,SAAmBzf,EAAaC,EAAMyC,GAElC,YADmB,IAAfA,IAAyBA,EAAaC,OAAOC,mBAC1C22B,EAAY9Z,UAAUzf,EAAaC,EAAMyC,EAAzC62B,CAAqD3lC,qCClChE,IAAIkF,EAAerH,EAAQ,GACvB8nC,EAAc9nC,EAAQ,KAC1BqH,EAAapF,WAAWR,UAAUusB,UAAY8Z,EAAY9Z,wCCF1D,IAAI6Z,EAAe7nC,EAAQ,KAiD3BE,EAAQiuB,WAJR,SAAoB9I,EAAiBrU,EAAgBC,GAEjD,YADmB,IAAfA,IAAyBA,EAAaC,OAAOC,mBAC1C02B,EAAa1Z,WAAW9I,EAAiBrU,EAAgBC,EAAzD42B,CAAqE1lC,qCC/ChF,IAAIkF,EAAerH,EAAQ,GACvB6nC,EAAe7nC,EAAQ,KAC3BqH,EAAapF,WAAWR,UAAU+yC,UAAY3M,EAAa1Z,WAC3D9mB,EAAapF,WAAWR,UAAU0sB,WAAa0Z,EAAa1Z,yCCH5D,IAAI1W,EAAazX,EAAQ,IAgEzBE,EAAQ6Q,SAJR,SAAkB9B,EAAS+B,EAAgBC,GAEvC,YADmB,IAAfA,IAAyBA,EAAaC,OAAOC,mBAC1CsG,EAAW1G,SAAS9B,EAAS+B,EAAgBC,EAA7CwG,CAAyDtV,qCC9DpE,IAAIkF,EAAerH,EAAQ,GACvByX,EAAazX,EAAQ,KACzBqH,EAAapF,WAAWR,UAAUsP,SAAW0G,EAAW1G,SACxD1J,EAAapF,WAAWR,UAAUmmC,QAAUnwB,EAAW1G,uCCHvD,IAAIsG,EAAarX,EAAQ,IAiDzBE,EAAQsX,SAJR,SAAkBvG,GAEd,YADmB,IAAfA,IAAyBA,EAAaC,OAAOC,mBAC1CkG,EAAWG,SAASvG,EAApBoG,CAAgClV,qCC/C3C,IAAIkF,EAAerH,EAAQ,GACvBqX,EAAarX,EAAQ,KACzBqH,EAAapF,WAAWR,UAAU+V,SAAWH,EAAWG,uCCFxD,IAAI+W,EAAUvuB,EAAQ,KAClBwuB,EAAUxuB,EAAQ,IACtBE,EAAQuuB,YAAcD,EAAQlX,MAuD9BpX,EAAQoX,MAPR,WAEI,IADA,IAAIxE,KACKzO,EAAK,EAAGA,EAAKC,UAAUC,OAAQF,IACpCyO,EAAYzO,EAAK,GAAKC,UAAUD,GAEpC,OAAOkqB,EAAQjX,MAAM3O,WAAM,EAAQmK,EAA5Byb,CAAyCpsB,qCCvDpD,IAAIkF,EAAerH,EAAQ,GACvBuuB,EAAUvuB,EAAQ,KACtBqH,EAAapF,WAAWR,UAAU6V,MAAQiX,EAAQjX,oCCFlD,IAAIowB,EAAQ1nC,EAAQ,KAmCpBE,EAAQ6V,IAHR,SAAagY,GACT,OAAO2Z,EAAM3xB,IAAIgY,EAAV2Z,CAAoBvlC,qCCjC/B,IAAIkF,EAAerH,EAAQ,GACvB0nC,EAAQ1nC,EAAQ,KACpBqH,EAAapF,WAAWR,UAAUsU,IAAM2xB,EAAM3xB,kCCF9C,IAAI0xB,EAAgBznC,EAAQ,KAgD5BE,EAAQwuB,YAHR,WACI,OAAO+Y,EAAc/Y,aAAd+Y,CAA4BtlC,qCC9CvC,IAAIkF,EAAerH,EAAQ,GACvBynC,EAAgBznC,EAAQ,KAC5BqH,EAAapF,WAAWR,UAAUitB,YAAc+Y,EAAc/Y,0CCF9D,IAAI8Y,EAAUxnC,EAAQ,KA8BtBE,EAAQ2uB,MAHR,SAAeztB,GACX,OAAOomC,EAAQ3Y,MAAMztB,EAAdomC,CAAqBrlC,qCC5BhC,IAAIkF,EAAerH,EAAQ,GACvBwnC,EAAUxnC,EAAQ,KACtBqH,EAAapF,WAAWR,UAAUotB,MAAQ2Y,EAAQ3Y,oCCFlD,IAAI7V,EAAQhZ,EAAQ,IAqCpBE,EAAQ8O,IAHR,SAAaC,EAASC,GAClB,OAAO8J,EAAMhK,IAAIC,EAASC,EAAnB8J,CAA4B7W,qCCnCvC,IAAIkF,EAAerH,EAAQ,GACvBgZ,EAAQhZ,EAAQ,KACpBqH,EAAapF,WAAWR,UAAUuN,IAAMgK,EAAMhK,kCCF9C,IAAI63B,EAAU7mC,EAAQ,KAkBtBE,EAAQ8uB,MAHR,SAAe/T,EAAW/L,GACtB,OAAO23B,EAAQ7X,MAAM/T,EAAW/L,EAAzB23B,CAAkC1kC,qCChB7C,IAAIkF,EAAerH,EAAQ,GACvB6mC,EAAU7mC,EAAQ,KACtBqH,EAAapF,WAAWR,UAAUutB,MAAQ6X,EAAQ7X,oCCOlD9uB,EAAQu0C,SAHR,SAAkBC,GACd,OAAOA,EAAKvyC,qCCPhB,IAAIkF,EAAerH,EAAQ,GACvB20C,EAAQ30C,EAAQ,KACpBqH,EAAapF,WAAWR,UAAUmzC,IAAMD,EAAMF,SAC9CptC,EAAapF,WAAWR,UAAUozC,QAAUF,EAAMF,uCCHlD,IAAIlN,EAASvnC,EAAQ,KAsBrBE,EAAQqX,KAHR,SAAc0D,EAAWjK,EAAgBgL,GACrC,OAAOurB,EAAOhwB,KAAK0D,EAAWjK,EAAgBgL,EAAvCurB,CAAqDplC,qCCpBhE,IAAIkF,EAAerH,EAAQ,GACvBunC,EAASvnC,EAAQ,KACrBqH,EAAapF,WAAWR,UAAU8V,KAAOgwB,EAAOhwB,mCCFhD,IAAIwB,EAAU/Y,EAAQ,GAClB4lC,EAAc5lC,EAAQ,KA+C1BE,EAAQwvB,UAJR,SAAmBnb,EAAUxH,GAEzB,YADkB,IAAdA,IAAwBA,EAAYgM,EAAQ3P,OACzCw8B,EAAYlW,UAAUnb,EAAUxH,EAAhC64B,CAA2CzjC,qCC9CtD,IAAIkF,EAAerH,EAAQ,GACvB4lC,EAAc5lC,EAAQ,KAC1BqH,EAAapF,WAAWR,UAAUiuB,UAAYkW,EAAYlW,wCCF1D,IAAIF,EAAUxvB,EAAQ,IA4CtBE,EAAQ0a,MAHR,SAAe7G,GACX,OAAOyb,EAAQ5U,MAAM7G,EAAdyb,CAAgCrtB,qCC1C3C,IAAIkF,EAAerH,EAAQ,GACvBwvB,EAAUxvB,EAAQ,KACtBqH,EAAapF,WAAWR,UAAUmZ,MAAQ4U,EAAQ5U,oCCFlD,IAAI0sB,EAAYtnC,EAAQ,KAaxBE,EAAQic,QAHR,WACI,OAAOmrB,EAAUnrB,SAAVmrB,CAAoBnlC,qCCX/B,IAAIkF,EAAerH,EAAQ,GACvBsnC,EAAYtnC,EAAQ,KACxBqH,EAAapF,WAAWR,UAAU0a,QAAUmrB,EAAUnrB,sCCFtD,IAAIkrB,EAAmBrnC,EAAQ,KAc/BE,EAAQ4vB,eAHR,WACI,OAAOuX,EAAiBvX,gBAAjBuX,CAAkCllC,qCCZ7C,IAAIkF,EAAerH,EAAQ,GACvBqnC,EAAmBrnC,EAAQ,KAC/BqH,EAAapF,WAAWR,UAAUquB,eAAiBuX,EAAiBvX,6CCFpE,IAAIY,EAAW,WACX,SAASA,IACLvuB,KAAKkU,UAwBT,OAtBAqa,EAAQjvB,UAAUyvB,OAAS,SAAUzd,GAEjC,OADAtR,KAAKkU,OAAO5C,GAAO,MACZ,GAEXid,EAAQjvB,UAAUkZ,IAAM,SAAUlH,EAAKrS,GAEnC,OADAe,KAAKkU,OAAO5C,GAAOrS,EACZe,MAEXuuB,EAAQjvB,UAAUP,IAAM,SAAUuS,GAC9B,OAAOtR,KAAKkU,OAAO5C,IAEvBid,EAAQjvB,UAAU4B,QAAU,SAAU8nC,EAAIj8B,GACtC,IAAImH,EAASlU,KAAKkU,OAClB,IAAK,IAAI5C,KAAO4C,EACRA,EAAO3U,eAAe+R,IAAwB,OAAhB4C,EAAO5C,IACrC03B,EAAG5qC,KAAK2O,EAASmH,EAAO5C,GAAMA,IAI1Cid,EAAQjvB,UAAUuvB,MAAQ,WACtB7uB,KAAKkU,WAEFqa,EA1BI,GA4BfxwB,EAAQwwB,QAAUA,gCC5BlB,IAAIokB,EAAe,WACf,SAASA,IACL3yC,KAAK4yC,KAAO,EACZ5yC,KAAK6yC,WACL7yC,KAAK8yC,SAsCT,OApCAH,EAAYrzC,UAAUP,IAAM,SAAUuS,GAClC,IAAIrT,EAAI+B,KAAK8yC,MAAMlqC,QAAQ0I,GAC3B,OAAc,IAAPrT,OAAWoP,EAAYrN,KAAK6yC,QAAQ50C,IAE/C00C,EAAYrzC,UAAUkZ,IAAM,SAAUlH,EAAKrS,GACvC,IAAIhB,EAAI+B,KAAK8yC,MAAMlqC,QAAQ0I,GAS3B,OARW,IAAPrT,GACA+B,KAAK8yC,MAAMzqC,KAAKiJ,GAChBtR,KAAK6yC,QAAQxqC,KAAKpJ,GAClBe,KAAK4yC,QAGL5yC,KAAK6yC,QAAQ50C,GAAKgB,EAEfe,MAEX2yC,EAAYrzC,UAAUyvB,OAAS,SAAUzd,GACrC,IAAIrT,EAAI+B,KAAK8yC,MAAMlqC,QAAQ0I,GAC3B,OAAW,IAAPrT,IAGJ+B,KAAK6yC,QAAQhqC,OAAO5K,EAAG,GACvB+B,KAAK8yC,MAAMjqC,OAAO5K,EAAG,GACrB+B,KAAK4yC,QACE,IAEXD,EAAYrzC,UAAUuvB,MAAQ,WAC1B7uB,KAAK8yC,MAAM1wC,OAAS,EACpBpC,KAAK6yC,QAAQzwC,OAAS,EACtBpC,KAAK4yC,KAAO,GAEhBD,EAAYrzC,UAAU4B,QAAU,SAAU8nC,EAAIj8B,GAC1C,IAAK,IAAI9O,EAAI,EAAGA,EAAI+B,KAAK4yC,KAAM30C,IAC3B+qC,EAAG5qC,KAAK2O,EAAS/M,KAAK6yC,QAAQ50C,GAAI+B,KAAK8yC,MAAM70C,KAG9C00C,EA1CQ,GA4CnB50C,EAAQ40C,YAAcA,gCC5CtB,IAAIjzC,EAAS7B,EAAQ,GACjBk1C,EAAgBl1C,EAAQ,KAC5BE,EAAQoT,IAAMzR,EAAO4B,KAAK6P,KAA6B4hC,EAAcJ,0CCFrE,IAAI1N,EAAYpnC,EAAQ,KACxBE,EAAQ4wB,kBAAoBsW,EAAUtW,kBAwEtC5wB,EAAQgwB,QAHR,SAAiBxU,EAAayU,EAAiBpc,EAAkBqc,GAC7D,OAAOgX,EAAUlX,QAAQxU,EAAayU,EAAiBpc,EAAkBqc,EAAlEgX,CAAmFjlC,qCCvE9F,IAAIkF,EAAerH,EAAQ,GACvBonC,EAAYpnC,EAAQ,KACxBqH,EAAapF,WAAWR,UAAUyuB,QAAUkX,EAAUlX,sCCFtD,IAAIiX,EAAUnnC,EAAQ,KAqDtBE,EAAQoxB,MAHR,SAAerW,EAAWjK,EAAgBgL,GACtC,OAAOmrB,EAAQ7V,MAAMrW,EAAWjK,EAAgBgL,EAAzCmrB,CAAuDhlC,qCCnDlE,IAAIkF,EAAerH,EAAQ,GACvBmnC,EAAUnnC,EAAQ,KACtBqH,EAAapF,WAAWR,UAAU6vB,MAAQ6V,EAAQ7V,oCCFlD,IAAI4V,EAAclnC,EAAQ,KAsC1BE,EAAQ2xB,UAHR,SAAmB5W,EAAW/L,GAC1B,OAAOg4B,EAAYrV,UAAU5W,EAAW/L,EAAjCg4B,CAA0C/kC,qCCpCrD,IAAIkF,EAAerH,EAAQ,GACvBknC,EAAclnC,EAAQ,KAC1BqH,EAAapF,WAAWR,UAAUowB,UAAYqV,EAAYrV,wCCF1D,IAAID,EAAS5xB,EAAQ,IAsCrBE,EAAQ8a,KAHR,SAAcC,EAAW/L,GACrB,OAAO0iB,EAAO5W,KAAKC,EAAW/L,EAAvB0iB,CAAgCzvB,qCCpC3C,IAAIkF,EAAerH,EAAQ,GACvB4xB,EAAS5xB,EAAQ,KACrBqH,EAAapF,WAAWR,UAAUuZ,KAAO4W,EAAO5W,mCCFhD,IAAIisB,EAAajnC,EAAQ,KAYzBE,EAAQi1C,SAHR,SAAkBpjB,GACd,OAAOkV,EAAWnV,SAASC,EAApBkV,CAA8B9kC,qCCVzC,IAAIkF,EAAerH,EAAQ,GACvBo1C,EAAYp1C,EAAQ,KACxBqH,EAAapF,WAAWR,UAAU4zC,QAAUD,EAAUD,SACtD9tC,EAAapF,WAAWR,UAAU0zC,SAAWC,EAAUD,uCCHvD,IAAInoB,EAAWhtB,EAAQ,IA4CvBE,EAAQmb,OAHR,SAAgBJ,EAAW/L,GACvB,OAAO8d,EAAS3R,OAAOJ,EAAW/L,EAA3B8d,CAAoC7qB,qCC1C/C,IAAIkF,EAAerH,EAAQ,GACvBgtB,EAAWhtB,EAAQ,KACvBqH,EAAapF,WAAWR,UAAU4Z,OAAS2R,EAAS3R,qCCFpD,IAAIurB,EAAc5mC,EAAQ,KA8C1BE,EAAQgyB,UAHR,SAAmBpoB,EAAOkS,GACtB,OAAO4qB,EAAY1U,UAAUpoB,EAAOkS,EAA7B4qB,CAA2CzkC,qCC5CtD,IAAIkF,EAAerH,EAAQ,GACvB4mC,EAAc5mC,EAAQ,KAC1BqH,EAAapF,WAAWR,UAAUywB,UAAY0U,EAAY1U,wCCF1D,IAAI8U,EAAWhnC,EAAQ,KAqDvBE,EAAQmyB,OANR,SAAgBpjB,EAASgC,EAAYlE,GAIjC,YAHmB,IAAfkE,IAAyBA,EAAaC,OAAOC,wBAC/B,IAAdpE,IAAwBA,OAAYyC,GACxCyB,GAAcA,GAAc,GAAK,EAAIC,OAAOC,kBAAoBF,EACzD+1B,EAAS3U,OAAOpjB,EAASgC,EAAYlE,EAArCi6B,CAAgD7kC,qCCnD3D,IAAIkF,EAAerH,EAAQ,GACvBgnC,EAAWhnC,EAAQ,KACvBqH,EAAapF,WAAWR,UAAU4wB,OAAS2U,EAAS3U,qCCFpD,IAAI0U,EAAe/mC,EAAQ,KAkD3BE,EAAQuyB,WAHR,SAAoBxjB,EAAS+B,GACzB,OAAO+1B,EAAatU,WAAWxjB,EAAS+B,EAAjC+1B,CAAiD5kC,qCChD5D,IAAIkF,EAAerH,EAAQ,GACvB+mC,EAAe/mC,EAAQ,KAC3BqH,EAAapF,WAAWR,UAAUgxB,WAAasU,EAAatU,yCCF5D,IAAIqU,EAAY9mC,EAAQ,KAuCxBE,EAAQ2yB,QAHR,WACI,OAAOiU,EAAUjU,SAAViU,CAAoB3kC,qCCrC/B,IAAIkF,EAAerH,EAAQ,GACvB8mC,EAAY9mC,EAAQ,KACxBqH,EAAapF,WAAWR,UAAUoxB,QAAUiU,EAAUjU,sCCFtD,IAAI+W,EAAQ5pC,EAAQ,KAgDpBE,EAAQo1C,IAHR,SAAanjC,EAAgBxP,EAAOC,GAChC,OAAOgnC,EAAM5W,IAAI7gB,EAAgBxP,EAAOC,EAAjCgnC,CAA2CznC,qCC9CtD,IAAIkF,EAAerH,EAAQ,GACvBu1C,EAAOv1C,EAAQ,KACnBqH,EAAapF,WAAWR,UAAUwQ,GAAKsjC,EAAKD,IAC5CjuC,EAAapF,WAAWR,UAAU6zC,IAAMC,EAAKD,kCCH7C,IAAI3O,EAA4B3mC,EAAQ,KA8DxCE,EAAQmzB,wBAHR,SAAiC5f,EAAKgI,GAClC,OAAOkrB,EAA0BtT,wBAAwB5f,EAAKgI,EAAvDkrB,CAAgExkC,qCC5D3E,IAAIkF,EAAerH,EAAQ,GACvB2mC,EAA4B3mC,EAAQ,KACxCqH,EAAapF,WAAWR,UAAU4xB,wBAA0BsT,EAA0BtT,sDCFtF,IAAID,EAAyBpzB,EAAQ,IA4CrCE,EAAQsb,qBAHR,SAA8BC,EAASC,GACnC,OAAO0X,EAAuB5X,qBAAqBC,EAASC,EAArD0X,CAAkEjxB,qCC1C7E,IAAIkF,EAAerH,EAAQ,GACvBozB,EAAyBpzB,EAAQ,KACrCqH,EAAapF,WAAWR,UAAU+Z,qBAAuB4X,EAAuB5X,mDCFhF,IAAI3Z,EAAS7B,EAAQ,GACrB,SAASw1C,IAGL,OAAQ,WACJ,SAASC,IACLtzC,KAAK6yC,WAoBT,OAlBAS,EAAWh0C,UAAUsB,IAAM,SAAU3B,GAC5Be,KAAKyxB,IAAIxyB,IACVe,KAAK6yC,QAAQxqC,KAAKpJ,IAG1Bq0C,EAAWh0C,UAAUmyB,IAAM,SAAUxyB,GACjC,OAAwC,IAAjCe,KAAK6yC,QAAQjqC,QAAQ3J,IAEhCN,OAAOC,eAAe00C,EAAWh0C,UAAW,QACxCP,IAAK,WACD,OAAOiB,KAAK6yC,QAAQzwC,QAExBtD,YAAY,EACZD,cAAc,IAElBy0C,EAAWh0C,UAAUuvB,MAAQ,WACzB7uB,KAAK6yC,QAAQzwC,OAAS,GAEnBkxC,EAtBH,GAyBZv1C,EAAQs1C,eAAiBA,EACzBt1C,EAAQkT,IAAMvR,EAAO4B,KAAK2P,KAAOoiC,kCC9BjC,IAAI9O,EAAa1mC,EAAQ,KAiDzBE,EAAQozB,SAHR,SAAkB5X,EAAa6X,GAC3B,OAAOmT,EAAWpT,SAAS5X,EAAa6X,EAAjCmT,CAA0CvkC,qCC/CrD,IAAIkF,EAAerH,EAAQ,GACvB0mC,EAAa1mC,EAAQ,KACzBqH,EAAapF,WAAWR,UAAU6xB,SAAWoT,EAAWpT,uCCFxD,IAAIkT,EAAcxmC,EAAQ,KAiD1BE,EAAQ2zB,UAHR,SAAmBC,EAAuBC,GACtC,OAAOyS,EAAY3S,UAAUC,EAAuBC,EAA7CyS,CAAgErkC,qCC/C3E,IAAIkF,EAAerH,EAAQ,GACvBwmC,EAAcxmC,EAAQ,KAC1BqH,EAAapF,WAAWR,UAAUoyB,UAAY2S,EAAY3S,wCCF1D,IAAI9a,EAAU/Y,EAAQ,GAClBi1B,EAAUj1B,EAAQ,KA4CtBE,EAAQ0P,MAJR,SAAeA,EAAO7C,GAElB,YADkB,IAAdA,IAAwBA,EAAYgM,EAAQ3P,OACzC6rB,EAAQrlB,MAAMA,EAAO7C,EAArBkoB,CAAgC9yB,qCC3C3C,IAAIkF,EAAerH,EAAQ,GACvBi1B,EAAUj1B,EAAQ,KACtBqH,EAAapF,WAAWR,UAAUmO,MAAQqlB,EAAQrlB,oCCFlD,IAAItB,EAAmBtO,EAAQ,IAoC/BE,EAAQyO,eAJR,SAAwBqN,GAEpB,YADqB,IAAjBA,IAA2BA,EAAe,MACvC1N,EAAiBK,eAAeqN,EAAhC1N,CAA8CnM,qCClCzD,IAAIkF,EAAerH,EAAQ,GACvBsO,EAAmBtO,EAAQ,KAC/BqH,EAAapF,WAAWR,UAAUkN,eAAiBL,EAAiBK,6CCFpE,IAAIoK,EAAU/Y,EAAQ,GAClBumC,EAAiBvmC,EAAQ,KAmD7BE,EAAQm1B,aAJR,SAAsBC,EAASvoB,GAE3B,YADkB,IAAdA,IAAwBA,EAAYgM,EAAQ3P,OACzCm9B,EAAelR,aAAaC,EAASvoB,EAArCw5B,CAAgDpkC,qCClD3D,IAAIkF,EAAerH,EAAQ,GACvBumC,EAAiBvmC,EAAQ,KAC7BqH,EAAapF,WAAWR,UAAU4zB,aAAekR,EAAelR,2CCFhE,IAAIiR,EAAatmC,EAAQ,KA8CzBE,EAAQ01B,SAHR,SAAkB7hB,GACd,OAAOuyB,EAAW1Q,SAAS7hB,EAApBuyB,CAAsCnkC,qCC5CjD,IAAIkF,EAAerH,EAAQ,GACvBsmC,EAAatmC,EAAQ,KACzBqH,EAAapF,WAAWR,UAAUm0B,SAAW0Q,EAAW1Q,uCCFxD,IAAI6Q,EAAkBzmC,EAAQ,KA4C9BE,EAAQ81B,cAHR,WACI,OAAOyQ,EAAgBzQ,eAAhByQ,CAAgCtkC,qCC1C3C,IAAIkF,EAAerH,EAAQ,GACvBymC,EAAkBzmC,EAAQ,KAC9BqH,EAAapF,WAAWR,UAAUu0B,cAAgByQ,EAAgBzQ,4CCFlE,IAAIqQ,EAAUrmC,EAAQ,KAoDtBE,EAAQyN,MAHR,SAAesN,GACX,OAAOorB,EAAQ14B,MAAMsN,EAAdorB,CAAyBlkC,qCClDpC,IAAIkF,EAAerH,EAAQ,GACvBqmC,EAAUrmC,EAAQ,KACtBqH,EAAapF,WAAWR,UAAUkM,MAAQ04B,EAAQ14B,oCCFlD,IAAIy4B,EAAgBpmC,EAAQ,KA6D5BE,EAAQo2B,YAHR,SAAqBjR,EAAiBrU,GAClC,OAAOo1B,EAAc9P,YAAYjR,EAAiBrU,EAA3Co1B,CAA2DjkC,qCC3DtE,IAAIkF,EAAerH,EAAQ,GACvBomC,EAAgBpmC,EAAQ,KAC5BqH,EAAapF,WAAWR,UAAU60B,YAAc8P,EAAc9P,0CCF9D,IAAID,EAAcr2B,EAAQ,IAgE1BE,EAAQkc,UAHR,SAAmBnN,EAAS+B,GACxB,OAAOqlB,EAAYja,UAAUnN,EAAS+B,EAA/BqlB,CAA+Cl0B,qCC9D1D,IAAIkF,EAAerH,EAAQ,GACvBq2B,EAAcr2B,EAAQ,KAC1BqH,EAAapF,WAAWR,UAAU2a,UAAYia,EAAYja,wCCF1D,IAAIvJ,EAAc7S,EAAQ,IAqD1BE,EAAQ8S,UAHR,WACI,OAAOH,EAAYG,WAAZH,CAAwB1Q,qCCnDnC,IAAIkF,EAAerH,EAAQ,GACvB6S,EAAc7S,EAAQ,KAC1BqH,EAAapF,WAAWR,UAAUuR,UAAYH,EAAYG,wCCF1D,IAAIiU,EAAWjnB,EAAQ,KACnBu2B,EAAWv2B,EAAQ,IACvBE,EAAQs2B,aAAeD,EAAShsB,OA0DhCrK,EAAQqK,OAPR,WAEI,IADA,IAAIuI,KACKzO,EAAK,EAAGA,EAAKC,UAAUC,OAAQF,IACpCyO,EAAYzO,EAAK,GAAKC,UAAUD,GAEpC,OAAO4iB,EAAS1c,OAAO5B,WAAM,EAAQmK,EAA9BmU,CAA2C9kB,qCC1DtD,IAAIkF,EAAerH,EAAQ,GACvBinB,EAAWjnB,EAAQ,KACvBqH,EAAapF,WAAWR,UAAU8I,OAAS0c,EAAS1c,qCCFpD,IAAIksB,EAAkBz2B,EAAQ,IAoD9BE,EAAQiY,cAPR,WAEI,IADA,IAAIrF,KACKzO,EAAK,EAAGA,EAAKC,UAAUC,OAAQF,IACpCyO,EAAYzO,EAAK,GAAKC,UAAUD,GAEpC,OAAOoyB,EAAgBte,cAAcxP,WAAM,EAAQmK,EAA5C2jB,CAAyDt0B,qCClDpE,IAAIkF,EAAerH,EAAQ,GACvBy2B,EAAkBz2B,EAAQ,KAC9BqH,EAAapF,WAAWR,UAAU0W,cAAgBse,EAAgBte,4CCFlE,IAAIguB,EAAenmC,EAAQ,KA4C3BE,EAAQw2B,WAHR,SAAoBznB,GAChB,OAAOk3B,EAAazP,WAAWznB,EAAxBk3B,CAAiChkC,qCC1C5C,IAAIkF,EAAerH,EAAQ,GACvBmmC,EAAenmC,EAAQ,KAC3BqH,EAAapF,WAAWR,UAAUi1B,WAAayP,EAAazP,yCCF5D,IAAIwP,EAAelmC,EAAQ,KA+D3BE,EAAQw1C,OAHR,SAAgB3nC,GACZ,OAAOm4B,EAAavP,WAAW5oB,EAAxBm4B,CAAkC/jC,qCC7D7C,IAAIkF,EAAerH,EAAQ,GACvB21C,EAAU31C,EAAQ,KACtBqH,EAAapF,WAAWR,UAAUm0C,MAAQD,EAAQD,OAClDruC,EAAapF,WAAWR,UAAUi0C,OAASC,EAAQD,qCCHnD,IAAIzP,EAAejmC,EAAQ,KAqC3BE,EAAQ82B,WAHR,SAAoBtX,GAChB,OAAOumB,EAAajP,WAAWtX,EAAxBumB,CAAyC9jC,qCCnCpD,IAAIkF,EAAerH,EAAQ,GACvBimC,EAAejmC,EAAQ,KAC3BqH,EAAapF,WAAWR,UAAUu1B,WAAaiP,EAAajP,yCCF5D,IAAIgP,EAAiBhmC,EAAQ,KA0C7BE,EAAQo3B,aAHR,SAAsBnX,EAAUT,GAC5B,OAAOsmB,EAAe1O,aAAanX,EAAUT,EAAtCsmB,CAAuD7jC,qCCxClE,IAAIkF,EAAerH,EAAQ,GACvBgmC,EAAiBhmC,EAAQ,KAC7BqH,EAAapF,WAAWR,UAAU61B,aAAe0O,EAAe1O,2CCFhE,IAAIve,EAAU/Y,EAAQ,GAClBoN,EAAgBpN,EAAQ,IACxB+lC,EAAe/lC,EAAQ,KA8D3BE,EAAQy3B,WAjBR,SAAoBC,GAChB,IAAIrzB,EAASD,UAAUC,OACnBwI,EAAYgM,EAAQ3P,MACpBgE,EAAcT,YAAYrI,UAAUA,UAAUC,OAAS,MACvDwI,EAAYzI,UAAUA,UAAUC,OAAS,GACzCA,KAEJ,IAAIszB,EAAyB,KACzBtzB,GAAU,IACVszB,EAAyBvzB,UAAU,IAEvC,IAAIwzB,EAAgB5mB,OAAOC,kBAI3B,OAHI5M,GAAU,IACVuzB,EAAgBxzB,UAAU,IAEvByhC,EAAapO,WAAWC,EAAgBC,EAAwBC,EAAe/qB,EAA/Eg5B,CAA0F5jC,qCC9DrG,IAAIkF,EAAerH,EAAQ,GACvB+lC,EAAe/lC,EAAQ,KAC3BqH,EAAapF,WAAWR,UAAUk2B,WAAaoO,EAAapO,yCCF5D,IAAImO,EAAgB9lC,EAAQ,KA8C5BE,EAAQ04B,YAJR,SAAqB5jB,EAAY6jB,GAE7B,YADyB,IAArBA,IAA+BA,EAAmB,MAC/CiN,EAAclN,YAAY5jB,EAAY6jB,EAAtCiN,CAAwD3jC,qCC5CnE,IAAIkF,EAAerH,EAAQ,GACvB8lC,EAAgB9lC,EAAQ,KAC5BqH,EAAapF,WAAWR,UAAUm3B,YAAckN,EAAclN,0CCF9D,IAAIiN,EAAW7lC,EAAQ,KAoCvBE,EAAQsR,OAHR,SAAgByO,GACZ,OAAO4lB,EAASr0B,OAAOyO,EAAhB4lB,CAAiC1jC,qCClC5C,IAAIkF,EAAerH,EAAQ,GACvB6lC,EAAW7lC,EAAQ,KACvBqH,EAAapF,WAAWR,UAAU+P,OAASq0B,EAASr0B,qCCFpD,IAAI3P,EAAS7B,EAAQ,GACrB,SAAS61C,EAAWC,GAEhB,IADA,IAAIC,KACK1xC,EAAK,EAAGA,EAAKC,UAAUC,OAAQF,IACpC0xC,EAAQ1xC,EAAK,GAAKC,UAAUD,GAGhC,IADA,IAAI0D,EAAMguC,EAAQxxC,OACTnE,EAAI,EAAGA,EAAI2H,EAAK3H,IAAK,CAC1B,IAAIqC,EAASszC,EAAQ31C,GACrB,IAAK,IAAI41C,KAAKvzC,EACNA,EAAOf,eAAes0C,KACtBF,EAAOE,GAAKvzC,EAAOuzC,IAI/B,OAAOF,EAIX,SAASG,EAAUxyC,GACf,OAAOA,EAAK3C,OAAOo1C,QAAUL,EAHjC31C,EAAQ21C,WAAaA,EAKrB31C,EAAQ+1C,UAAYA,EACpB/1C,EAAQg2C,OAASD,EAAUp0C,EAAO4B,oCCvBlC,IAAImB,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAG/Ey0B,EAAkB,SAAUl0B,GAE5B,SAASk0B,IACLl0B,EAAOsD,MAAMxG,KAAMmC,WAEvB,OAJAM,EAAU20B,EAAgBl0B,GAInBk0B,EALW,CADCv5B,EAAQ,IAOZqJ,gBACnBnJ,EAAQq5B,eAAiBA,gCCbzB,IAAI30B,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAQ/E00B,EAAe,SAAUn0B,GAEzB,SAASm0B,EAAYzsB,EAAWgD,GAC5B1K,EAAO9E,KAAK4B,KAAM4K,EAAWgD,GAC7B5N,KAAK4K,UAAYA,EACjB5K,KAAK4N,KAAOA,EA4BhB,OAhCAnL,EAAU40B,EAAan0B,GAMvBm0B,EAAY/3B,UAAUmL,SAAW,SAAUc,EAAOkC,GAE9C,YADc,IAAVA,IAAoBA,EAAQ,GAC5BA,EAAQ,EACDvK,EAAO5D,UAAUmL,SAASrM,KAAK4B,KAAMuL,EAAOkC,IAEvDzN,KAAKyN,MAAQA,EACbzN,KAAKuL,MAAQA,EACbvL,KAAK4K,UAAU0C,MAAMtN,MACdA,OAEXq3B,EAAY/3B,UAAUkO,QAAU,SAAUjC,EAAOkC,GAC7C,OAAQA,EAAQ,GAAKzN,KAAK8D,OACtBZ,EAAO5D,UAAUkO,QAAQpP,KAAK4B,KAAMuL,EAAOkC,GAC3CzN,KAAKmO,SAAS5C,EAAOkC,IAE7B4pB,EAAY/3B,UAAU0O,eAAiB,SAAUpD,EAAWkD,EAAIL,GAK5D,YAJc,IAAVA,IAAoBA,EAAQ,GAIjB,OAAVA,GAAkBA,EAAQ,GAAiB,OAAVA,GAAkBzN,KAAKyN,MAAQ,EAC1DvK,EAAO5D,UAAU0O,eAAe5P,KAAK4B,KAAM4K,EAAWkD,EAAIL,GAG9D7C,EAAU0C,MAAMtN,OAEpBq3B,EAjCQ,CANCx5B,EAAQ,IAwCZsJ,aAChBpJ,EAAQs5B,YAAcA,gCC9CtB,IAAI50B,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/E8P,EAAY5U,EAAQ,GACpBmL,EAAenL,EAAQ,GACvBqH,EAAerH,EAAQ,GACvBiF,EAAiBjF,EAAQ,GACzB6B,EAAS7B,EAAQ,GACjBgpB,EAAkBhpB,EAAQ,IAC1BwJ,EAAaxJ,EAAQ,GACrByJ,EAAgBzJ,EAAQ,GACxBm2C,EAAWn2C,EAAQ,KAMnBo2C,EAAoB,SAAU/wC,GAE9B,SAAS+wC,EAAiBC,EAAmB7wC,GACzC,GAAI6wC,aAA6BhvC,EAAapF,WAC1CoD,EAAO9E,KAAK4B,KAAMqD,EAAa6wC,OAE9B,CAWD,GAVAhxC,EAAO9E,KAAK4B,MACZA,KAAKm0C,cAAgBz0C,EAAO4B,KAAK8yC,UACjCp0C,KAAKq0C,QAAU,IAAI5hC,EAAUrJ,QACI,iBAAtB8qC,EACPl0C,KAAKu3B,IAAM2c,EAIXF,EAASD,OAAO/zC,KAAMk0C,IAErBl0C,KAAKm0C,cACN,MAAM,IAAIzyC,MAAM,yCAEpB1B,KAAKqD,YAAc,IAAIwjB,EAAgBjU,eA8M/C,OAjOAnQ,EAAUwxC,EAAkB/wC,GAsB5B+wC,EAAiB30C,UAAUuP,eAAiB,SAAU9G,GAClD,OAAOqyB,KAAKsB,MAAM3zB,EAAEioC,OAwCxBiE,EAAiBzxC,OAAS,SAAU0xC,GAChC,OAAO,IAAID,EAAiBC,IAEhCD,EAAiB30C,UAAUa,KAAO,SAAUC,GACxC,IAAIk0C,EAAO,IAAIL,EAAiBj0C,KAAMA,KAAKqD,aAE3C,OADAixC,EAAKl0C,SAAWA,EACTk0C,GAEXL,EAAiB30C,UAAUi1C,YAAc,WACrCv0C,KAAKw0C,OAAS,KACTx0C,KAAKM,SACNN,KAAKqD,YAAc,IAAIwjB,EAAgBjU,eAE3C5S,KAAKq0C,QAAU,IAAI5hC,EAAUrJ,SAGjC6qC,EAAiB30C,UAAUm1C,UAAY,SAAUC,EAAQC,EAAUC,GAC/D,IAAIxqC,EAAOpK,KACX,OAAO,IAAIkF,EAAapF,WAAW,SAAUoP,GACzC,IAAI3J,EAAS8B,EAAWQ,SAAS6sC,EAApBrtC,GACT9B,IAAW+B,EAAcQ,YACzBoH,EAAS1O,MAAM8G,EAAcQ,YAAYC,GAGzCqC,EAAKjJ,KAAKoE,GAEd,IAAI1D,EAAeuI,EAAKrK,UAAU,SAAUwC,GACxC,IAAIgD,EAAS8B,EAAWQ,SAAS+sC,EAApBvtC,CAAmC9E,GAC5CgD,IAAW+B,EAAcQ,YACzBoH,EAAS1O,MAAM8G,EAAcQ,YAAYC,GAEpCxC,GACL2J,EAAS/N,KAAKoB,IAEnB,SAAUtB,GAAO,OAAOiO,EAAS1O,MAAMS,IAAS,WAAc,OAAOiO,EAASzO,aACjF,OAAO,WACH,IAAI8E,EAAS8B,EAAWQ,SAAS8sC,EAApBttC,GACT9B,IAAW+B,EAAcQ,YACzBoH,EAAS1O,MAAM8G,EAAcQ,YAAYC,GAGzCqC,EAAKjJ,KAAKoE,GAEd1D,EAAaC,kBAIzBmyC,EAAiB30C,UAAUu1C,eAAiB,WACxC,IAAIxzC,EAAQrB,KACRm0C,EAAgBn0C,KAAKm0C,cACrBjlC,EAAWlP,KAAKq0C,QAChBG,EAAS,KACb,IACIA,EAASx0C,KAAK80C,SACV,IAAIX,EAAcn0C,KAAKu3B,IAAKv3B,KAAK80C,UACjC,IAAIX,EAAcn0C,KAAKu3B,KAC3Bv3B,KAAKw0C,OAASA,EACVx0C,KAAK+0C,aACL/0C,KAAKw0C,OAAOO,WAAa/0C,KAAK+0C,YAGtC,MAAOhtC,GAEH,YADAmH,EAAS1O,MAAMuH,GAGnB,IAAIlG,EAAe,IAAIiB,EAAeoB,aAAa,WAC/C7C,EAAMmzC,OAAS,KACXA,GAAgC,IAAtBA,EAAOtZ,YACjBsZ,EAAO3wB,UAGf2wB,EAAOQ,OAAS,SAAUjtC,GACtB,IAAIktC,EAAe5zC,EAAM4zC,aACrBA,GACAA,EAAa9zC,KAAK4G,GAEtB,IAAIwL,EAAQlS,EAAMgC,YAClBhC,EAAMgC,YAAc2F,EAAa/F,WAAWT,OAAO,SAAUD,GAAK,OAA6B,IAAtBiyC,EAAOtZ,YAAoBsZ,EAAOjb,KAAKh3B,IAAO,SAAUwF,GAC7H,IAAImtC,EAAkB7zC,EAAM6zC,gBACxBA,GACAA,EAAgB/zC,UAAKkM,GAErBtF,GAAKA,EAAEotC,KACPX,EAAO3wB,MAAM9b,EAAEotC,KAAMptC,EAAEqtC,QAGvBlmC,EAAS1O,MAAM,IAAI4F,UAAU,sIAGjC/E,EAAMkzC,eACP,WACC,IAAIW,EAAkB7zC,EAAM6zC,gBACxBA,GACAA,EAAgB/zC,UAAKkM,GAEzBmnC,EAAO3wB,QACPxiB,EAAMkzC,gBAENhhC,GAASA,aAAiBsT,EAAgBjU,eAC1C/Q,EAAajB,IAAI2S,EAAMxT,UAAUsB,EAAMgC,eAG/CmxC,EAAOxZ,QAAU,SAAUjzB,GACvB1G,EAAMkzC,cACNrlC,EAAS1O,MAAMuH,IAEnBysC,EAAOa,QAAU,SAAUttC,GACvB1G,EAAMkzC,cACN,IAAIe,EAAgBj0C,EAAMi0C,cACtBA,GACAA,EAAcn0C,KAAK4G,GAEnBA,EAAEwtC,SACFrmC,EAASzO,WAGTyO,EAAS1O,MAAMuH,IAGvBysC,EAAO7E,UAAY,SAAU5nC,GACzB,IAAIxC,EAAS8B,EAAWQ,SAASxG,EAAMwN,eAA1BxH,CAA0CU,GACnDxC,IAAW+B,EAAcQ,YACzBoH,EAAS1O,MAAM8G,EAAcQ,YAAYC,GAGzCmH,EAAS/N,KAAKoE,KAI1B0uC,EAAiB30C,UAAUY,WAAa,SAAU6B,GAC9C,IAAIV,EAAQrB,KACRM,EAASN,KAAKM,OAClB,GAAIA,EACA,OAAOA,EAAOP,UAAUgC,GAEvB/B,KAAKw0C,QACNx0C,KAAK60C,iBAET,IAAIhzC,EAAe,IAAIiB,EAAeoB,aAWtC,OAVArC,EAAajB,IAAIZ,KAAKq0C,QAAQt0C,UAAUgC,IACxCF,EAAajB,IAAI,WACb,IAAI4zC,EAASnzC,EAAMmzC,OACoB,IAAnCnzC,EAAMgzC,QAAQhrC,UAAUjH,SACpBoyC,GAAgC,IAAtBA,EAAOtZ,YACjBsZ,EAAO3wB,QAEXxiB,EAAMkzC,iBAGP1yC,GAEXoyC,EAAiB30C,UAAUwC,YAAc,WACrC,IAAexB,EAANN,KAAkBM,OAAQk0C,EAA1Bx0C,KAAsCw0C,OAC3CA,GAAgC,IAAtBA,EAAOtZ,aACjBsZ,EAAO3wB,QACP7jB,KAAKu0C,eAETrxC,EAAO5D,UAAUwC,YAAY1D,KAAK4B,MAC7BM,IACDN,KAAKqD,YAAc,IAAIwjB,EAAgBjU,gBAGxCqhC,EAlOa,CAmOtBxhC,EAAUhJ,kBACZ1L,EAAQk2C,iBAAmBA,gCCvP3B,IAAIuB,EAAqB33C,EAAQ,KACjCE,EAAQ03C,UAAYD,EAAmBvB,iBAAiBzxC,qCCDxD,IAAI0C,EAAerH,EAAQ,GACvB63C,EAAc73C,EAAQ,KAC1BqH,EAAapF,WAAW21C,UAAYC,EAAYD,wCCFhD,IAAI7Y,EAAmB/+B,EAAQ,KAC/BE,EAAQ43C,KAAO/Y,EAAiBnF,eAAej1B,qCCD/C,IAAI0C,EAAerH,EAAQ,GACvB+3C,EAAS/3C,EAAQ,KACrBqH,EAAapF,WAAW61C,KAAOC,EAAOD,mCCFtC,IAAI34B,EAAQnf,EAAQ,IACpBE,EAAQiW,IAAMgJ,EAAMlJ,wCCDpB,IAAI5O,EAAerH,EAAQ,GACvBmf,EAAQnf,EAAQ,KACpBqH,EAAapF,WAAWkU,IAAMgJ,EAAMhJ,kCCFpC,IAAIvR,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/E6b,EAAc3gB,EAAQ,IACtBqH,EAAerH,EAAQ,GACvB+Y,EAAU/Y,EAAQ,GAClBoN,EAAgBpN,EAAQ,IACxB0iB,EAAW1iB,EAAQ,IAMnBg+B,EAAmB,SAAU34B,GAE7B,SAAS24B,EAAgB1I,EAASlL,EAAQrd,QACtB,IAAZuoB,IAAsBA,EAAU,GACpCjwB,EAAO9E,KAAK4B,MACZA,KAAKioB,QAAU,EACfjoB,KAAKmzB,QAAU,EACX3U,EAAYjQ,UAAU0Z,GACtBjoB,KAAKioB,OAASlZ,OAAOkZ,GAAU,EAAK,EAAKlZ,OAAOkZ,GAE3Chd,EAAcT,YAAYyd,KAC/Brd,EAAYqd,GAEXhd,EAAcT,YAAYI,KAC3BA,EAAYgM,EAAQ3P,OAExBjH,KAAK4K,UAAYA,EACjB5K,KAAKmzB,QAAU5S,EAASxL,OAAOoe,IACzBA,EAAUnzB,KAAK4K,UAAUsI,MAC3BigB,EAoER,OAtFA1wB,EAAUo5B,EAAiB34B,GA8D3B24B,EAAgBr5B,OAAS,SAAUqzC,EAAc5tB,EAAQrd,GAErD,YADqB,IAAjBirC,IAA2BA,EAAe,GACvC,IAAIha,EAAgBga,EAAc5tB,EAAQrd,IAErDixB,EAAgBhxB,SAAW,SAAUU,GACjC,IAAI5D,EAAQ4D,EAAM5D,MAAOsgB,EAAS1c,EAAM0c,OAAQlmB,EAAawJ,EAAMxJ,WAGnE,GADAA,EAAWZ,KAAKwG,IACZ5F,EAAW+B,OAAf,CAGK,IAAgB,IAAZmkB,EACL,OAAOlmB,EAAWtB,WAEtB8K,EAAM5D,MAAQA,EAAQ,EART3H,KASNyK,SAASc,EAAO0c,KAE3B4T,EAAgBv8B,UAAUY,WAAa,SAAU6B,GAC7C,IACekmB,EAANjoB,KAAkBioB,OAAQkL,EAA1BnzB,KAAuCmzB,QAChD,OADSnzB,KAA+D4K,UACvDH,SAASoxB,EAAgBhxB,SAAUsoB,GAChDxrB,MAHQ,EAGMsgB,OAAQA,EAAQlmB,WAAYA,KAG3C85B,EAvFY,CAwFrB32B,EAAapF,YACf/B,EAAQ89B,gBAAkBA,gCCxG1B,IAAI32B,EAAerH,EAAQ,GACvByvB,EAAUzvB,EAAQ,KACtBqH,EAAapF,WAAW0tB,MAAQF,EAAQE,oCCFxC,IAAI/qB,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAQ/EmzC,EAAmB,SAAU5yC,GAE7B,SAAS4yC,EAAgBt1C,EAAOoK,GAC5B1H,EAAO9E,KAAK4B,MACZA,KAAKQ,MAAQA,EACbR,KAAK4K,UAAYA,EA8DrB,OAlEAnI,EAAUqzC,EAAiB5yC,GA8C3B4yC,EAAgBtzC,OAAS,SAAUhC,EAAOoK,GACtC,OAAO,IAAIkrC,EAAgBt1C,EAAOoK,IAEtCkrC,EAAgBjrC,SAAW,SAAUC,GACjC,IAAItK,EAAQsK,EAAItK,MAAoBsK,EAAI/I,WAC7BvB,MAAMA,IAErBs1C,EAAgBx2C,UAAUY,WAAa,SAAU6B,GAC7C,IAAIvB,EAAQR,KAAKQ,MACboK,EAAY5K,KAAK4K,UAErB,GADA7I,EAAWlB,oBAAqB,EAC5B+J,EACA,OAAOA,EAAUH,SAASqrC,EAAgBjrC,SAAU,GAChDrK,MAAOA,EAAOuB,WAAYA,IAI9BA,EAAWvB,MAAMA,IAGlBs1C,EAnEY,CANJj4C,EAAQ,GA0EZiC,YACf/B,EAAQ+3C,gBAAkBA,gCChF1B,IAAIC,EAAoBl4C,EAAQ,KAChCE,EAAQi4C,OAASD,EAAkBD,gBAAgBtzC,qCCDnD,IAAI0C,EAAerH,EAAQ,GACvBo4C,EAAUp4C,EAAQ,KACtBqH,EAAapF,WAAWoQ,MAAQ+lC,EAAQD,qCCFxC,IAAIvzC,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/EuC,EAAerH,EAAQ,GACvB6Q,EAAsB7Q,EAAQ,GAC9B8Q,EAAoB9Q,EAAQ,GAM5Bq4C,EAAmB,SAAUhzC,GAE7B,SAASgzC,EAAgBC,EAAiBC,GACtClzC,EAAO9E,KAAK4B,MACZA,KAAKm2C,gBAAkBA,EACvBn2C,KAAKo2C,kBAAoBA,EAgB7B,OApBA3zC,EAAUyzC,EAAiBhzC,GAM3BgzC,EAAgB1zC,OAAS,SAAU2zC,EAAiBC,GAChD,OAAO,IAAIF,EAAgBC,EAAiBC,IAEhDF,EAAgB52C,UAAUY,WAAa,SAAU6B,GAC7C,IACIs0C,EADWF,EAANn2C,KAA2Bm2C,gBAAiBC,EAA5Cp2C,KAAmEo2C,kBAE5E,IAEI,OADAC,EAAWF,IACJ,IAAIG,EAAgBv0C,EAAYs0C,EAAUD,GAErD,MAAOn1C,GACHc,EAAWvB,MAAMS,KAGlBi1C,EArBY,CAsBrBhxC,EAAapF,YACf/B,EAAQm4C,gBAAkBA,EAC1B,IAAII,EAAmB,SAAUpzC,GAE7B,SAASozC,EAAgBjzC,EAAagzC,EAAUD,GAC5ClzC,EAAO9E,KAAK4B,KAAMqD,GAClBrD,KAAKq2C,SAAWA,EAChBr2C,KAAKo2C,kBAAoBA,EACzB/yC,EAAYzC,IAAIy1C,GAChBr2C,KAAKu2C,SAaT,OAnBA9zC,EAAU6zC,EAAiBpzC,GAQ3BozC,EAAgBh3C,UAAUi3C,OAAS,WAC/B,IACI,IAAIj2C,EAASN,KAAKo2C,kBAAkBh4C,KAAK4B,KAAMA,KAAKq2C,UAChD/1C,GACAN,KAAKY,IAAI8N,EAAoBrJ,kBAAkBrF,KAAMM,IAG7D,MAAOW,GACHjB,KAAK4D,OAAO3C,KAGbq1C,EApBY,CAqBrB3nC,EAAkBpI,+CC1DpB,IAAIiwC,EAAoB34C,EAAQ,KAChCE,EAAQ04C,MAAQD,EAAkBN,gBAAgB1zC,qCCDlD,IAAI0C,EAAerH,EAAQ,GACvB64C,EAAU74C,EAAQ,KACtBqH,EAAapF,WAAW22C,MAAQC,EAAQD,oCCFxC,IAAIh0C,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAQ/Eg0C,EAAmB,SAAUzzC,GAE7B,SAASyzC,EAAgBC,EAAOprC,EAAOZ,GACnC1H,EAAO9E,KAAK4B,MACZA,KAAK42C,MAAQA,EACb52C,KAAK6lB,OAASra,EACdxL,KAAK4K,UAAYA,EA0ErB,OA/EAnI,EAAUk0C,EAAiBzzC,GAqC3ByzC,EAAgBn0C,OAAS,SAAUo0C,EAAOprC,EAAOZ,GAG7C,YAFc,IAAVgsC,IAAoBA,EAAQ,QAClB,IAAVprC,IAAoBA,EAAQ,GACzB,IAAImrC,EAAgBC,EAAOprC,EAAOZ,IAE7C+rC,EAAgB9rC,SAAW,SAAUU,GACjC,IAAIqrC,EAAQrrC,EAAMqrC,MAAOjvC,EAAQ4D,EAAM5D,MAAO6D,EAAQD,EAAMC,MAAOzJ,EAAawJ,EAAMxJ,WAClF4F,GAAS6D,EACTzJ,EAAWtB,YAGfsB,EAAWZ,KAAKy1C,GACZ70C,EAAW+B,SAGfyH,EAAM5D,MAAQA,EAAQ,EACtB4D,EAAMqrC,MAAQA,EAAQ,EACtB52C,KAAKyK,SAASc,MAElBorC,EAAgBr3C,UAAUY,WAAa,SAAU6B,GAC7C,IAAI4F,EAAQ,EACRivC,EAAQ52C,KAAK42C,MACbprC,EAAQxL,KAAK6lB,OACbjb,EAAY5K,KAAK4K,UACrB,GAAIA,EACA,OAAOA,EAAUH,SAASksC,EAAgB9rC,SAAU,GAChDlD,MAAOA,EAAO6D,MAAOA,EAAOorC,MAAOA,EAAO70C,WAAYA,IAI1D,OAAG,CACC,GAAI4F,KAAW6D,EAAO,CAClBzJ,EAAWtB,WACX,MAGJ,GADAsB,EAAWZ,KAAKy1C,KACZ70C,EAAW+B,OACX,QAKT6yC,EAhFY,CANJ94C,EAAQ,GAuFZiC,YACf/B,EAAQ44C,gBAAkBA,gCC7F1B,IAAIE,EAAoBh5C,EAAQ,KAChCE,EAAQ+4C,MAAQD,EAAkBF,gBAAgBn0C,qCCDlD,IAAI0C,EAAerH,EAAQ,GACvBk5C,EAAUl5C,EAAQ,KACtBqH,EAAapF,WAAWg3C,MAAQC,EAAQD,oCCFxC,IAAIr0C,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAGnF,SAASkI,EAASU,GACd,IAAIzG,EAAMyG,EAAMzG,IAAKsM,EAAO7F,EAAM6F,KAAMhP,EAASmJ,EAAMnJ,OAAQuF,EAAQ4D,EAAM5D,MAAO5F,EAAawJ,EAAMxJ,WACvG,GAAI4F,IAAUvF,EAAd,CAIA,IAAIkP,EAAMF,EAAKzJ,GACf5F,EAAWZ,MAAMmQ,EAAKxM,EAAIwM,KAC1B/F,EAAM5D,MAAQA,EAAQ,EACtB3H,KAAKyK,SAASc,QANVxJ,EAAWtB,WAanB,IAAIu2C,EAAmB,SAAU9zC,GAE7B,SAAS8zC,EAAgBlyC,EAAK8F,GAC1B1H,EAAO9E,KAAK4B,MACZA,KAAK8E,IAAMA,EACX9E,KAAK4K,UAAYA,EACjB5K,KAAKoR,KAAOzS,OAAOyS,KAAKtM,GAoD5B,OAzDArC,EAAUu0C,EAAiB9zC,GAsC3B8zC,EAAgBx0C,OAAS,SAAUsC,EAAK8F,GACpC,OAAO,IAAIosC,EAAgBlyC,EAAK8F,IAEpCosC,EAAgB13C,UAAUY,WAAa,SAAU6B,GAC7C,IAAeqP,EAANpR,KAAgBoR,KAAMxG,EAAtB5K,KAAqC4K,UAC1CxI,EAASgP,EAAKhP,OAClB,GAAIwI,EACA,OAAOA,EAAUH,SAASI,EAAU,GAChC/F,IAAK9E,KAAK8E,IAAKsM,KAAMA,EAAMhP,OAAQA,EAAQuF,MAAO,EAAG5F,WAAYA,IAIrE,IAAK,IAAIoW,EAAM,EAAGA,EAAM/V,EAAQ+V,IAAO,CACnC,IAAI7G,EAAMF,EAAK+G,GACfpW,EAAWZ,MAAMmQ,EAAKtR,KAAK8E,IAAIwM,KAEnCvP,EAAWtB,YAGZu2C,EA1DY,CAjBJn5C,EAAQ,GA4EZiC,YACf/B,EAAQi5C,gBAAkBA,gCClF1B,IAAIC,EAAoBp5C,EAAQ,KAChCE,EAAQm5C,MAAQD,EAAkBD,gBAAgBx0C,qCCDlD,IAAI0C,EAAerH,EAAQ,GACvBs5C,EAAUt5C,EAAQ,KACtBqH,EAAapF,WAAWo3C,MAAQC,EAAQD,oCCFxC,IAAIrR,EAAsBhoC,EAAQ,IAClCE,EAAQoc,kBAAoB0rB,EAAoBvrB,sDCDhD,IAAIpV,EAAerH,EAAQ,GACvBgoC,EAAsBhoC,EAAQ,KAClCqH,EAAapF,WAAWqa,kBAAoB0rB,EAAoB1rB,gDCFhE,IAAIjV,EAAerH,EAAQ,GACvB2S,EAAO3S,EAAQ,KACnBqH,EAAapF,WAAWsL,GAAKoF,EAAKpF,iCCFlC,IAAI3I,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/EuC,EAAerH,EAAQ,GACvBkd,EAASld,EAAQ,IAMjBu5C,EAAmB,SAAUl0C,GAE7B,SAASk0C,IACLl0C,EAAO9E,KAAK4B,MAuChB,OAzCAyC,EAAU20C,EAAiBl0C,GAmC3Bk0C,EAAgB50C,OAAS,WACrB,OAAO,IAAI40C,GAEfA,EAAgB93C,UAAUY,WAAa,SAAU6B,GAC7CgZ,EAAOD,QAEJs8B,EA1CY,CA2CrBlyC,EAAapF,YACf/B,EAAQq5C,gBAAkBA,gCCxD1B,IAAIC,EAAoBx5C,EAAQ,KAChCE,EAAQu5C,MAAQD,EAAkBD,gBAAgB50C,qCCDlD,IAAI0C,EAAerH,EAAQ,GACvB05C,EAAU15C,EAAQ,KACtBqH,EAAapF,WAAWw3C,MAAQC,EAAQD,oCCFxC,IAAIpyC,EAAerH,EAAQ,GACvB+rB,EAAS/rB,EAAQ,IACrBqH,EAAapF,WAAW4a,KAAOkP,EAAOlP,mCCFtC,IAAIxV,EAAerH,EAAQ,GACvBuuB,EAAUvuB,EAAQ,IACtBqH,EAAapF,WAAWqV,MAAQiX,EAAQjX,oCCcxC,IAAIxH,EAAa,WACb,SAASA,EAAU4N,EAAiBrI,QACpB,IAARA,IAAkBA,EAAMvF,EAAUuF,KACtClT,KAAKub,gBAAkBA,EACvBvb,KAAKkT,IAAMA,EAwBf,OALAvF,EAAUrO,UAAUmL,SAAW,SAAUmD,EAAMH,EAAOlC,GAElD,YADc,IAAVkC,IAAoBA,EAAQ,GACzB,IAAIzN,KAAKub,gBAAgBvb,KAAM4N,GAAMnD,SAASc,EAAOkC,IAEhEE,EAAUuF,IAAM8B,KAAK9B,IAAM8B,KAAK9B,IAAM,WAAc,OAAQ,IAAI8B,MACzDrH,EA5BM,GA8BjB5P,EAAQ4P,UAAYA,gCC9CpB,IAAIlL,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAiB/E2L,EAAU,SAAUpL,GAEpB,SAASoL,EAAO1D,EAAWgD,GACvB1K,EAAO9E,KAAK4B,MAgBhB,OAlBAyC,EAAU6L,EAAQpL,GAclBoL,EAAOhP,UAAUmL,SAAW,SAAUc,EAAOkC,GAEzC,YADc,IAAVA,IAAoBA,EAAQ,GACzBzN,MAEJsO,EAnBG,CAfOzQ,EAAQ,GAmCZqG,cACjBnG,EAAQuQ,OAASA,gCCzCjB,IAAI7L,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/E6b,EAAc3gB,EAAQ,IACtBqH,EAAerH,EAAQ,GACvB+Y,EAAU/Y,EAAQ,GAMlB25C,EAAsB,SAAUt0C,GAEhC,SAASs0C,EAAmBvvB,EAAQrd,QACjB,IAAXqd,IAAqBA,EAAS,QAChB,IAAdrd,IAAwBA,EAAYgM,EAAQ3P,OAChD/D,EAAO9E,KAAK4B,MACZA,KAAKioB,OAASA,EACdjoB,KAAK4K,UAAYA,IACZ4T,EAAYjQ,UAAU0Z,IAAWA,EAAS,KAC3CjoB,KAAKioB,OAAS,GAEbrd,GAA2C,mBAAvBA,EAAUH,WAC/BzK,KAAK4K,UAAYgM,EAAQ3P,OA0DjC,OArEAxE,EAAU+0C,EAAoBt0C,GA+C9Bs0C,EAAmBh1C,OAAS,SAAUylB,EAAQrd,GAG1C,YAFe,IAAXqd,IAAqBA,EAAS,QAChB,IAAdrd,IAAwBA,EAAYgM,EAAQ3P,OACzC,IAAIuwC,EAAmBvvB,EAAQrd,IAE1C4sC,EAAmB3sC,SAAW,SAAUU,GACpC,IAAI5D,EAAQ4D,EAAM5D,MAAO5F,EAAawJ,EAAMxJ,WAAYkmB,EAAS1c,EAAM0c,OACvElmB,EAAWZ,KAAKwG,GACZ5F,EAAW+B,SAGfyH,EAAM5D,OAAS,EACf3H,KAAKyK,SAASc,EAAO0c,KAEzBuvB,EAAmBl4C,UAAUY,WAAa,SAAU6B,GAChD,IACIkmB,EAASjoB,KAAKioB,OACdrd,EAAY5K,KAAK4K,UACrB7I,EAAWnB,IAAIgK,EAAUH,SAAS+sC,EAAmB3sC,SAAUod,GAC3DtgB,MAJQ,EAIM5F,WAAYA,EAAYkmB,OAAQA,MAG/CuvB,EAtEe,CAuExBtyC,EAAapF,YACf/B,EAAQy5C,mBAAqBA,gCCrF7B,IAAIC,EAAuB55C,EAAQ,KACnCE,EAAQ4jB,SAAW81B,EAAqBD,mBAAmBh1C,qCCD3D,IAAI0C,EAAerH,EAAQ,GACvB65C,EAAa75C,EAAQ,KACzBqH,EAAapF,WAAW6hB,SAAW+1B,EAAW/1B,uCCF9C,IAAIlf,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/EuC,EAAerH,EAAQ,GACvB6Q,EAAsB7Q,EAAQ,GAC9B8Q,EAAoB9Q,EAAQ,GAM5B85C,EAAgB,SAAUz0C,GAE1B,SAASy0C,EAAaC,EAAWC,EAAYC,GACzC50C,EAAO9E,KAAK4B,MACZA,KAAK43C,UAAYA,EACjB53C,KAAK63C,WAAaA,EAClB73C,KAAK83C,WAAaA,EAStB,OAdAr1C,EAAUk1C,EAAcz0C,GAOxBy0C,EAAan1C,OAAS,SAAUo1C,EAAWC,EAAYC,GACnD,OAAO,IAAIH,EAAaC,EAAWC,EAAYC,IAEnDH,EAAar4C,UAAUY,WAAa,SAAU6B,GAC1C,IAAe61C,EAAN53C,KAAqB43C,UAAWC,EAAhC73C,KAAgD63C,WAAYC,EAA5D93C,KAA4E83C,WACrF,OAAO,IAAIC,EAAah2C,EAAY61C,EAAWC,EAAYC,IAExDH,EAfS,CAgBlBzyC,EAAapF,YACf/B,EAAQ45C,aAAeA,EACvB,IAAII,EAAgB,SAAU70C,GAE1B,SAAS60C,EAAa10C,EAAau0C,EAAWC,EAAYC,GACtD50C,EAAO9E,KAAK4B,KAAMqD,GAClBrD,KAAK43C,UAAYA,EACjB53C,KAAK63C,WAAaA,EAClB73C,KAAK83C,WAAaA,EAClB93C,KAAKg4C,QAmBT,OAzBAv1C,EAAUs1C,EAAc70C,GAQxB60C,EAAaz4C,UAAU04C,MAAQ,WAC3B,IAAeJ,EAAN53C,KAAqB43C,UAAWC,EAAhC73C,KAAgD63C,WAAYC,EAA5D93C,KAA4E83C,WAErF,IAEI,IAAIx3C,EADKs3C,IACaC,EAAaC,EAC/Bx3C,EACAN,KAAKY,IAAI8N,EAAoBrJ,kBAAkBrF,KAAMM,IAGrDN,KAAK6D,YAGb,MAAO5C,GACHjB,KAAK4D,OAAO3C,KAGb82C,EA1BS,CA2BlBppC,EAAkBpI,+CC1DpB,IAAI0xC,EAAiBp6C,EAAQ,KAC7BE,EAAQm6C,IAAMD,EAAeN,aAAan1C,qCCD1C,IAAI0C,EAAerH,EAAQ,GACvBs6C,EAAOt6C,EAAQ,KACnBqH,EAAapF,WAAWs4C,GAAKD,EAAKD,kCCFlC,IAAIz1C,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/EuC,EAAerH,EAAQ,GACvBoN,EAAgBpN,EAAQ,IACxBw6C,EAAe,SAAUp5C,GAAS,OAAOA,GAMzCq5C,EAAsB,SAAUp1C,GAEhC,SAASo1C,EAAmBC,EAAcX,EAAWY,EAAS3pC,EAAgBjE,GAC1E1H,EAAO9E,KAAK4B,MACZA,KAAKu4C,aAAeA,EACpBv4C,KAAK43C,UAAYA,EACjB53C,KAAKw4C,QAAUA,EACfx4C,KAAK6O,eAAiBA,EACtB7O,KAAK4K,UAAYA,EA6GrB,OApHAnI,EAAU61C,EAAoBp1C,GAS9Bo1C,EAAmB91C,OAAS,SAAUi2C,EAAuBb,EAAWY,EAASE,EAA4B9tC,GACzG,OAAwB,GAApBzI,UAAUC,OACH,IAAIk2C,EAAmBG,EAAsBF,aAAcE,EAAsBb,UAAWa,EAAsBD,QAASC,EAAsB5pC,gBAAkBwpC,EAAcI,EAAsB7tC,gBAE/KyC,IAA/BqrC,GAA4CztC,EAAcT,YAAYkuC,GAC/D,IAAIJ,EAAmBG,EAAuBb,EAAWY,EAASH,EAAcK,GAEpF,IAAIJ,EAAmBG,EAAuBb,EAAWY,EAASE,EAA4B9tC,IAEzG0tC,EAAmBh5C,UAAUY,WAAa,SAAU6B,GAChD,IAAIwJ,EAAQvL,KAAKu4C,aACjB,GAAIv4C,KAAK4K,UACL,OAAO5K,KAAK4K,UAAUH,SAAS6tC,EAAmBztC,SAAU,GACxD9I,WAAYA,EACZy2C,QAASx4C,KAAKw4C,QACdZ,UAAW53C,KAAK43C,UAChB/oC,eAAgB7O,KAAK6O,eACrBtD,MAAOA,IAGf,IADA,IAAeqsC,EAAN53C,KAAqB43C,UAAW/oC,EAAhC7O,KAAoD6O,eAAgB2pC,EAApEx4C,KAAiFw4C,UACvF,CACC,GAAIZ,EAAW,CACX,IAAIe,OAAkB,EACtB,IACIA,EAAkBf,EAAUrsC,GAEhC,MAAOtK,GAEH,YADAc,EAAWvB,MAAMS,GAGrB,IAAK03C,EAAiB,CAClB52C,EAAWtB,WACX,OAGR,IAAIxB,OAAQ,EACZ,IACIA,EAAQ4P,EAAetD,GAE3B,MAAOtK,GAEH,YADAc,EAAWvB,MAAMS,GAIrB,GADAc,EAAWZ,KAAKlC,GACZ8C,EAAW+B,OACX,MAEJ,IACIyH,EAAQitC,EAAQjtC,GAEpB,MAAOtK,GAEH,YADAc,EAAWvB,MAAMS,MAK7Bq3C,EAAmBztC,SAAW,SAAUU,GACpC,IAAIxJ,EAAawJ,EAAMxJ,WAAY61C,EAAYrsC,EAAMqsC,UACrD,IAAI71C,EAAW+B,OAAf,CAGA,GAAIyH,EAAMqtC,YACN,IACIrtC,EAAMA,MAAQA,EAAMitC,QAAQjtC,EAAMA,OAEtC,MAAOtK,GAEH,YADAc,EAAWvB,MAAMS,QAKrBsK,EAAMqtC,aAAc,EAExB,GAAIhB,EAAW,CACX,IAAIe,OAAkB,EACtB,IACIA,EAAkBf,EAAUrsC,EAAMA,OAEtC,MAAOtK,GAEH,YADAc,EAAWvB,MAAMS,GAGrB,IAAK03C,EAED,YADA52C,EAAWtB,WAGf,GAAIsB,EAAW+B,OACX,OAGR,IAAI7E,EACJ,IACIA,EAAQsM,EAAMsD,eAAetD,EAAMA,OAEvC,MAAOtK,GAEH,YADAc,EAAWvB,MAAMS,GAGrB,IAAIc,EAAW+B,SAGf/B,EAAWZ,KAAKlC,IACZ8C,EAAW+B,QAGf,OAAO9D,KAAKyK,SAASc,KAElB+sC,EArHe,CAsHxBpzC,EAAapF,YACf/B,EAAQu6C,mBAAqBA,gCCpI7B,IAAIO,EAAuBh7C,EAAQ,KACnCE,EAAQ+6C,SAAWD,EAAqBP,mBAAmB91C,qCCD3D,IAAI0C,EAAerH,EAAQ,GACvBk7C,EAAal7C,EAAQ,KACzBqH,EAAapF,WAAWg5C,SAAWC,EAAWD,uCCF9C,IAAI7c,EAAsBp+B,EAAQ,KAClCE,EAAQi7C,YAAc/c,EAAoBH,kBAAkBt5B,qCCD5D,IAAI0C,EAAerH,EAAQ,GACvBo7C,EAAgBp7C,EAAQ,KAC5BqH,EAAapF,WAAWk5C,YAAcC,EAAcD,0CCFpD,IAAIv2C,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/EE,EAAehF,EAAQ,IACvBqH,EAAerH,EAAQ,GACvBiF,EAAiBjF,EAAQ,GAMzBq7C,EAA8B,SAAUh2C,GAExC,SAASg2C,EAA2BC,EAAYC,EAAextC,GAC3D1I,EAAO9E,KAAK4B,MACZA,KAAKm5C,WAAaA,EAClBn5C,KAAKo5C,cAAgBA,EACrBp5C,KAAK4L,SAAWA,EAyFpB,OA9FAnJ,EAAUy2C,EAA4Bh2C,GAuDtCg2C,EAA2B12C,OAAS,SAAU22C,EAAYC,EAAextC,GACrE,OAAO,IAAIstC,EAA2BC,EAAYC,EAAextC,IAErEstC,EAA2B55C,UAAUY,WAAa,SAAU6B,GACxD,IAAIV,EAAQrB,KACRo5C,EAAgBp5C,KAAKo5C,cACrB9H,EAAYtxC,KAAK4L,SAAW,WAE5B,IADA,IAAI+I,KACKzS,EAAK,EAAGA,EAAKC,UAAUC,OAAQF,IACpCyS,EAAKzS,EAAK,GAAKC,UAAUD,GAE7Bb,EAAMg4C,cAAct3C,EAAY4S,IAChC,SAAU5M,GAAKhG,EAAWZ,KAAK4G,IAC/BuxC,EAAWt5C,KAAKu5C,gBAAgBjI,EAASvvC,GACxCc,EAAawB,WAAW+0C,IAG7Br3C,EAAWnB,IAAI,IAAIkC,EAAeoB,aAAa,WAE3Ck1C,EAAc9H,EAASgI,OAG/BJ,EAA2B55C,UAAU+5C,cAAgB,SAAUt3C,EAAY4S,GACvE,IACI,IAAIpP,EAASvF,KAAK4L,SAASpF,MAAMxG,KAAM2U,GACvC5S,EAAWZ,KAAKoE,GAEpB,MAAOwC,GACHhG,EAAWvB,MAAMuH,KAGzBmxC,EAA2B55C,UAAUi6C,gBAAkB,SAAUjI,EAASkI,GACtE,IACI,OAAOx5C,KAAKm5C,WAAW7H,IAAY,KAEvC,MAAOvpC,GACHyxC,EAAgBh5C,MAAMuH,KAGvBmxC,EA/FuB,CAgGhCh0C,EAAapF,YACf/B,EAAQm7C,2BAA6BA,gCC9GrC,IAAIO,EAA+B57C,EAAQ,KAC3CE,EAAQ27C,iBAAmBD,EAA6BP,2BAA2B12C,qCCDnF,IAAI0C,EAAerH,EAAQ,GACvB87C,EAAqB97C,EAAQ,KACjCqH,EAAapF,WAAW45C,iBAAmBC,EAAmBD,+CCF9D,IAAIj3C,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/EuC,EAAerH,EAAQ,GACvBwJ,EAAaxJ,EAAQ,GACrBgF,EAAehF,EAAQ,IACvByJ,EAAgBzJ,EAAQ,GACxBiF,EAAiBjF,EAAQ,GACzB0+B,EAAW59B,OAAOW,UAAUi9B,SAqBhC,IAAIqd,EAAuB,SAAU12C,GAEjC,SAAS02C,EAAoBC,EAAWC,EAAWluC,EAAU8zB,GACzDx8B,EAAO9E,KAAK4B,MACZA,KAAK65C,UAAYA,EACjB75C,KAAK85C,UAAYA,EACjB95C,KAAK4L,SAAWA,EAChB5L,KAAK0/B,QAAUA,EA6KnB,OAnLAj9B,EAAUm3C,EAAqB12C,GA6H/B02C,EAAoBp3C,OAAS,SAAUmxC,EAAQmG,EAAWpa,EAAS9zB,GAK/D,OAJI/I,EAAawB,WAAWq7B,KACxB9zB,EAAW8zB,EACXA,OAAUryB,GAEP,IAAIusC,EAAoBjG,EAAQmG,EAAWluC,EAAU8zB,IAEhEka,EAAoBG,kBAAoB,SAAUF,EAAWC,EAAWxI,EAASvvC,EAAY29B,GACzF,IAAI59B,EACJ,GArJR,SAAoB+3C,GAChB,QAASA,GAA0C,sBAA7Btd,EAASn+B,KAAKy7C,GAoJ5BG,CAAWH,IAlJvB,SAA0BA,GACtB,QAASA,GAA0C,4BAA7Btd,EAASn+B,KAAKy7C,GAiJHI,CAAiBJ,GAC1C,IAAK,IAAI57C,EAAI,EAAG2H,EAAMi0C,EAAUz3C,OAAQnE,EAAI2H,EAAK3H,IAC7C27C,EAAoBG,kBAAkBF,EAAU57C,GAAI67C,EAAWxI,EAASvvC,EAAY29B,QAGvF,GApJb,SAAuBma,GACnB,QAASA,GAAmD,mBAA/BA,EAAUxJ,kBAA4E,mBAAlCwJ,EAAUK,oBAmJ9EC,CAAcN,GAAY,CAC/B,IAAIO,EAAWP,EACfA,EAAUxJ,iBAAiByJ,EAAWxI,EAAS5R,GAC/C59B,EAAc,WAAc,OAAOs4C,EAASF,oBAAoBJ,EAAWxI,EAAS5R,SAEnF,GAlKb,SAAmCma,GAC/B,QAASA,GAAqC,mBAAjBA,EAAUjM,IAA8C,mBAAlBiM,EAAU9L,IAiKhEsM,CAA0BR,GAAY,CAC3C,IAAIS,EAAWT,EACfA,EAAUjM,GAAGkM,EAAWxI,GACxBxvC,EAAc,WAAc,OAAOw4C,EAASvM,IAAI+L,EAAWxI,QAE1D,KA1Kb,SAAiCuI,GAC7B,QAASA,GAA8C,mBAA1BA,EAAUhM,aAAkE,mBAA7BgM,EAAU7L,eAyKzEuM,CAAwBV,GAM7B,MAAM,IAAIzzC,UAAU,wBALpB,IAAIo0C,EAAWX,EACfA,EAAUhM,YAAYiM,EAAWxI,GACjCxvC,EAAc,WAAc,OAAO04C,EAASxM,eAAe8L,EAAWxI,IAK1EvvC,EAAWnB,IAAI,IAAIkC,EAAeoB,aAAapC,KAEnD83C,EAAoBt6C,UAAUY,WAAa,SAAU6B,GACjD,IAAI83C,EAAY75C,KAAK65C,UACjBC,EAAY95C,KAAK85C,UACjBpa,EAAU1/B,KAAK0/B,QACf9zB,EAAW5L,KAAK4L,SAChB0lC,EAAU1lC,EAAW,WAErB,IADA,IAAI+I,KACKzS,EAAK,EAAGA,EAAKC,UAAUC,OAAQF,IACpCyS,EAAKzS,EAAK,GAAKC,UAAUD,GAE7B,IAAIqD,EAAS8B,EAAWQ,SAAS+D,GAAUpF,WAAM,EAAQmO,GACrDpP,IAAW+B,EAAcQ,YACzB/F,EAAWvB,MAAM8G,EAAcQ,YAAYC,GAG3ChG,EAAWZ,KAAKoE,IAEpB,SAAUwC,GAAK,OAAOhG,EAAWZ,KAAK4G,IAC1C6xC,EAAoBG,kBAAkBF,EAAWC,EAAWxI,EAASvvC,EAAY29B,IAE9Eka,EApLgB,CAqLzB10C,EAAapF,YACf/B,EAAQ67C,oBAAsBA,gCCrN9B,IAAIa,EAAwB58C,EAAQ,KACpCE,EAAQygC,UAAYic,EAAsBb,oBAAoBp3C,qCCD9D,IAAI0C,EAAerH,EAAQ,GACvB68C,EAAc78C,EAAQ,KAC1BqH,EAAapF,WAAW0+B,UAAYkc,EAAYlc,wCCFhD,IAAIt5B,EAAerH,EAAQ,GACvB4S,EAAS5S,EAAQ,KACrBqH,EAAapF,WAAW8Q,KAAOH,EAAOG,mCCFtC,IAAInO,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/EuC,EAAerH,EAAQ,GACvBmN,EAAoBnN,EAAQ,IAC5BuJ,EAAYvJ,EAAQ,IACpB6Q,EAAsB7Q,EAAQ,GAC9B8Q,EAAoB9Q,EAAQ,GAM5B88C,EAAsB,SAAUz3C,GAEhC,SAASy3C,EAAmB/G,EAAS/kC,GACjC3L,EAAO9E,KAAK4B,MACZA,KAAK4zC,QAAUA,EACf5zC,KAAK6O,eAAiBA,EA6H1B,OAjIApM,EAAUk4C,EAAoBz3C,GAwG9By3C,EAAmBn4C,OAAS,WAExB,IADA,IAAIoxC,KACK1xC,EAAK,EAAGA,EAAKC,UAAUC,OAAQF,IACpC0xC,EAAQ1xC,EAAK,GAAKC,UAAUD,GAEhC,GAAgB,OAAZ0xC,GAAyC,IAArBzxC,UAAUC,OAC9B,OAAO,IAAI4I,EAAkBL,gBAEjC,IAAIkE,EAAiB,KASrB,MAR2C,mBAAhC+kC,EAAQA,EAAQxxC,OAAS,KAChCyM,EAAiB+kC,EAAQvoC,OAIN,IAAnBuoC,EAAQxxC,QAAgBgF,EAAUc,QAAQ0rC,EAAQ,MAClDA,EAAUA,EAAQ,IAEC,IAAnBA,EAAQxxC,OACD,IAAI4I,EAAkBL,gBAE1B,IAAIgwC,EAAmB/G,EAAS/kC,IAE3C8rC,EAAmBr7C,UAAUY,WAAa,SAAU6B,GAChD,OAAO,IAAI64C,EAAmB74C,EAAY/B,KAAK4zC,QAAS5zC,KAAK6O,iBAE1D8rC,EAlIe,CAmIxBz1C,EAAapF,YACf/B,EAAQ48C,mBAAqBA,EAM7B,IAAIC,EAAsB,SAAU13C,GAEhC,SAAS03C,EAAmBv3C,EAAauwC,EAAS/kC,GAC9C3L,EAAO9E,KAAK4B,KAAMqD,GAClBrD,KAAK4zC,QAAUA,EACf5zC,KAAK6O,eAAiBA,EACtB7O,KAAKgyB,UAAY,EACjBhyB,KAAK66C,WAAa,EAClB,IAAIj1C,EAAMguC,EAAQxxC,OAClBpC,KAAKgY,MAAQpS,EACb5F,KAAKkU,OAAS,IAAIxJ,MAAM9E,GACxB,IAAK,IAAI3H,EAAI,EAAGA,EAAI2H,EAAK3H,IAAK,CAC1B,IAAIqC,EAASszC,EAAQ31C,GACjBkZ,EAAoBzI,EAAoBrJ,kBAAkBrF,KAAMM,EAAQ,KAAMrC,GAC9EkZ,IACAA,EAAkB1R,WAAaxH,EAC/B+B,KAAKY,IAAIuW,KA6BrB,OA5CA1U,EAAUm4C,EAAoB13C,GAmB9B03C,EAAmBt7C,UAAUmH,WAAa,SAAUjB,EAAYkB,EAAYjB,EAAYkB,EAAYC,GAChG5G,KAAKkU,OAAOzO,GAAciB,EACrBE,EAASk0C,YACVl0C,EAASk0C,WAAY,EACrB96C,KAAK66C,eAGbD,EAAmBt7C,UAAUwH,eAAiB,SAAUF,GACpD,IAAIvD,EAAcrD,KAAKqD,YACRw3C,EAAN76C,KAAsB66C,WAAYhsC,EAAlC7O,KAAsD6O,eAAgBqF,EAAtElU,KAAkFkU,OACvFtO,EAAMsO,EAAO9R,OACjB,GAAKwE,EAASk0C,WAKd,GADA96C,KAAKgyB,YACDhyB,KAAKgyB,YAAcpsB,EAAvB,CAGA,GAAIi1C,IAAej1C,EAAK,CACpB,IAAI3G,EAAQ4P,EAAiBA,EAAerI,MAAMxG,KAAMkU,GAAUA,EAClE7Q,EAAYlC,KAAKlC,GAErBoE,EAAY5C,iBAXR4C,EAAY5C,YAabm6C,EA7Ce,CA8CxBjsC,EAAkBpI,+CCvMpB,IAAIw0C,EAAuBl9C,EAAQ,KACnCE,EAAQi9C,SAAWD,EAAqBJ,mBAAmBn4C,qCCD3D,IAAI0C,EAAerH,EAAQ,GACvBo9C,EAAap9C,EAAQ,KACzBqH,EAAapF,WAAWk7C,SAAWC,EAAWD,uCCF9C,IAAIhwC,EAAoBnN,EAAQ,IAChCE,EAAQuF,MAAQ0H,EAAkBL,gBAAgBnI,qCCDlD,IAAI0C,EAAerH,EAAQ,GACvBq9C,EAAUr9C,EAAQ,KACtBqH,EAAapF,WAAWwD,MAAQ43C,EAAQ53C,oCCFxC,IAAIb,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/EuC,EAAerH,EAAQ,GACvB6Q,EAAsB7Q,EAAQ,GAC9B8Q,EAAoB9Q,EAAQ,GAM5Bs9C,EAAmB,SAAUj4C,GAE7B,SAASi4C,EAAgB/E,GACrBlzC,EAAO9E,KAAK4B,MACZA,KAAKo2C,kBAAoBA,EAsD7B,OAzDA3zC,EAAU04C,EAAiBj4C,GAmD3Bi4C,EAAgB34C,OAAS,SAAU4zC,GAC/B,OAAO,IAAI+E,EAAgB/E,IAE/B+E,EAAgB77C,UAAUY,WAAa,SAAU6B,GAC7C,OAAO,IAAIq5C,EAAgBr5C,EAAY/B,KAAKo2C,oBAEzC+E,EA1DY,CA2DrBj2C,EAAapF,YACf/B,EAAQo9C,gBAAkBA,EAC1B,IAAIC,EAAmB,SAAUl4C,GAE7B,SAASk4C,EAAgB/3C,EAAag4C,GAClCn4C,EAAO9E,KAAK4B,KAAMqD,GAClBrD,KAAKq7C,QAAUA,EACfr7C,KAAKs7C,WAgBT,OApBA74C,EAAU24C,EAAiBl4C,GAM3Bk4C,EAAgB97C,UAAUg8C,SAAW,WACjC,IACIt7C,KAAKu7C,eAET,MAAOt6C,GACHjB,KAAK4D,OAAO3C,KAGpBm6C,EAAgB97C,UAAUi8C,aAAe,WACrC,IAAIh2C,EAASvF,KAAKq7C,UACd91C,GACAvF,KAAKY,IAAI8N,EAAoBrJ,kBAAkBrF,KAAMuF,KAGtD61C,EArBY,CAsBrBzsC,EAAkBpI,+CChGpB,IAAIi1C,EAAoB39C,EAAQ,KAChCE,EAAQ09C,MAAQD,EAAkBL,gBAAgB34C,qCCDlD,IAAI0C,EAAerH,EAAQ,GACvB69C,EAAU79C,EAAQ,KACtBqH,EAAapF,WAAW27C,MAAQC,EAAQD,oCCFxC,IAAIh5C,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/EuC,EAAerH,EAAQ,GACvBkN,EAAqBlN,EAAQ,IAC7BmN,EAAoBnN,EAAQ,IAM5Bw+B,EAAuB,SAAUn5B,GAEjC,SAASm5B,EAAoBsf,EAAW/wC,GACpC1H,EAAO9E,KAAK4B,MACZA,KAAK27C,UAAYA,EACjB37C,KAAK4K,UAAYA,EACZA,GAAkC,IAArB+wC,EAAUv5C,SACxBpC,KAAKC,WAAY,EACjBD,KAAKf,MAAQ08C,EAAU,IA4C/B,OAnDAl5C,EAAU45B,EAAqBn5B,GAU/Bm5B,EAAoB75B,OAAS,SAAUm5C,EAAW/wC,GAC9C,IAAIxI,EAASu5C,EAAUv5C,OACvB,OAAe,IAAXA,EACO,IAAI4I,EAAkBL,gBAEb,IAAXvI,EACE,IAAI2I,EAAmBO,iBAAiBqwC,EAAU,GAAI/wC,GAGtD,IAAIyxB,EAAoBsf,EAAW/wC,IAGlDyxB,EAAoBxxB,SAAW,SAAUU,GACrC,IAAIowC,EAAYpwC,EAAMowC,UAAWh0C,EAAQ4D,EAAM5D,MAAOvF,EAASmJ,EAAMnJ,OAAQL,EAAawJ,EAAMxJ,WAC5FA,EAAW+B,SAGX6D,GAASvF,EACTL,EAAWtB,YAGfsB,EAAWZ,KAAKw6C,EAAUh0C,IAC1B4D,EAAM5D,MAAQA,EAAQ,EACtB3H,KAAKyK,SAASc,MAElB8wB,EAAoB/8B,UAAUY,WAAa,SAAU6B,GACjD,IACe45C,EAAN37C,KAAqB27C,UAAW/wC,EAAhC5K,KAA+C4K,UACpDxI,EAASu5C,EAAUv5C,OACvB,GAAIwI,EACA,OAAOA,EAAUH,SAAS4xB,EAAoBxxB,SAAU,GACpD8wC,UAAWA,EAAWh0C,MALlB,EAKgCvF,OAAQA,EAAQL,WAAYA,IAIpE,IAAK,IAAI9D,EAAI,EAAGA,EAAImE,IAAWL,EAAW+B,OAAQ7F,IAC9C8D,EAAWZ,KAAKw6C,EAAU19C,IAE9B8D,EAAWtB,YAGZ47B,EApDgB,CAqDzBn3B,EAAapF,YACf/B,EAAQs+B,oBAAsBA,gCCnE9B,IAAI55B,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/EjD,EAAS7B,EAAQ,GACjBqH,EAAerH,EAAQ,GACvBsH,EAAatH,EAAQ,IAMrBu+B,EAAsB,SAAUl5B,GAEhC,SAASk5B,EAAmBp2B,EAAU4E,GAGlC,GAFA1H,EAAO9E,KAAK4B,MACZA,KAAK4K,UAAYA,EACD,MAAZ5E,EACA,MAAM,IAAItE,MAAM,4BAEpB1B,KAAKgG,SAgGb,SAAqBlB,GACjB,IAAI7G,EAAI6G,EAAIK,EAAWa,UACvB,IAAK/H,GAAoB,iBAAR6G,EACb,OAAO,IAAI82C,EAAe92C,GAE9B,IAAK7G,QAAoBoP,IAAfvI,EAAI1C,OACV,OAAO,IAAIy5C,EAAc/2C,GAE7B,IAAK7G,EACD,MAAM,IAAImI,UAAU,0BAExB,OAAOtB,EAAIK,EAAWa,YA3GF81C,CAAY91C,GAqDhC,OA5DAvD,EAAU25B,EAAoBl5B,GAS9Bk5B,EAAmB55B,OAAS,SAAUwD,EAAU4E,GAC5C,OAAO,IAAIwxB,EAAmBp2B,EAAU4E,IAE5CwxB,EAAmBvxB,SAAW,SAAUU,GACpC,IAAI5D,EAAQ4D,EAAM5D,MAAO2B,EAAWiC,EAAMjC,SAAUtD,EAAWuF,EAAMvF,SAAUjE,EAAawJ,EAAMxJ,WAClG,GAAIuH,EACAvH,EAAWvB,MAAM+K,EAAM/K,WAD3B,CAIA,IAAI+E,EAASS,EAAS7E,OAClBoE,EAAOW,KACPnE,EAAWtB,YAGfsB,EAAWZ,KAAKoE,EAAOtG,OACvBsM,EAAM5D,MAAQA,EAAQ,EAClB5F,EAAW+B,OACoB,mBAApBkC,EAAS+1C,QAChB/1C,EAAS+1C,SAIjB/7C,KAAKyK,SAASc,MAElB6wB,EAAmB98B,UAAUY,WAAa,SAAU6B,GAChD,IACeiE,EAANhG,KAAoBgG,SAAU4E,EAA9B5K,KAA6C4K,UACtD,GAAIA,EACA,OAAOA,EAAUH,SAAS2xB,EAAmBvxB,SAAU,GACnDlD,MAJI,EAIU3B,SAAUA,EAAUjE,WAAYA,IAIlD,OAAG,CACC,IAAIwD,EAASS,EAAS7E,OACtB,GAAIoE,EAAOW,KAAM,CACbnE,EAAWtB,WACX,MAKJ,GAFIsB,EAAWZ,KAAKoE,EAAOtG,OAEvB8C,EAAW+B,OAAQ,CACY,mBAApBkC,EAAS+1C,QAChB/1C,EAAS+1C,SAEb,SAKT3f,EA7De,CA8DxBl3B,EAAapF,YACf/B,EAAQq+B,mBAAqBA,EAC7B,IAAIwf,EAAkB,WAClB,SAASA,EAAeI,EAAK7jC,EAAKvS,QAClB,IAARuS,IAAkBA,EAAM,QAChB,IAARvS,IAAkBA,EAAMo2C,EAAI55C,QAChCpC,KAAKg8C,IAAMA,EACXh8C,KAAKmY,IAAMA,EACXnY,KAAK4F,IAAMA,EAYf,OAVAg2C,EAAet8C,UAAU6F,EAAWa,UAAY,WAAc,OAAQhG,MACtE47C,EAAet8C,UAAU6B,KAAO,WAC5B,OAAOnB,KAAKmY,IAAMnY,KAAK4F,KACnBM,MAAM,EACNjH,MAAOe,KAAKg8C,IAAI/a,OAAOjhC,KAAKmY,SAE5BjS,MAAM,EACNjH,WAAOoO,IAGRuuC,EAlBW,GAoBlBC,EAAiB,WACjB,SAASA,EAAcx7B,EAAKlI,EAAKvS,QACjB,IAARuS,IAAkBA,EAAM,QAChB,IAARvS,IAAkBA,EA+B9B,SAAkBlH,GACd,IAAIkH,GAAOlH,EAAE0D,OACb,GAAI6S,MAAMrP,GACN,OAAO,EAEX,GAAY,IAARA,IAYgB3G,EAZa2G,EAaT,iBAAV3G,IAAsBS,EAAO4B,KAAK26C,SAASh9C,IAZrD,OAAO2G,EAWf,IAAwB3G,EARpB,IADA2G,EAYJ,SAAc3G,GACV,IAAIi9C,GAAiBj9C,EACrB,OAAsB,IAAlBi9C,EACOA,EAEPjnC,MAAMinC,GACCA,EAEJA,EAAgB,GAAK,EAAI,EApB1BC,CAAKv2C,GAAO+N,KAAKyoC,MAAMzoC,KAAKkN,IAAIjb,MAC3B,EACP,OAAO,EAEX,GAAIA,EAAMy2C,EACN,OAAOA,EAEX,OAAOz2C,EA9CyB02C,CAASj8B,IACrCrgB,KAAKqgB,IAAMA,EACXrgB,KAAKmY,IAAMA,EACXnY,KAAK4F,IAAMA,EAYf,OAVAi2C,EAAcv8C,UAAU6F,EAAWa,UAAY,WAAc,OAAOhG,MACpE67C,EAAcv8C,UAAU6B,KAAO,WAC3B,OAAOnB,KAAKmY,IAAMnY,KAAK4F,KACnBM,MAAM,EACNjH,MAAOe,KAAKqgB,IAAIrgB,KAAKmY,SAErBjS,MAAM,EACNjH,WAAOoO,IAGRwuC,EAlBU,GAiCrB,IAAIQ,EAAiB1oC,KAAK4oC,IAAI,EAAG,IAAM,gCClIvC,IAAIr3C,EAAerH,EAAQ,GACvBinB,EAAWjnB,EAAQ,IACvBqH,EAAapF,WAAWsI,OAAS0c,EAAS1c,qCCF1C,IAAI3F,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAQ/E+C,EAAmB,SAAUxC,GAE7B,SAASwC,EAAgBd,EAAQY,EAAYC,GACzCvC,EAAO9E,KAAK4B,MACZA,KAAK4E,OAASA,EACd5E,KAAKwF,WAAaA,EAClBxF,KAAKyF,WAAaA,EAClBzF,KAAK2H,MAAQ,EAajB,OAnBAlF,EAAUiD,EAAiBxC,GAQ3BwC,EAAgBpG,UAAUqE,MAAQ,SAAU1E,GACxCe,KAAK4E,OAAO6B,WAAWzG,KAAKwF,WAAYvG,EAAOe,KAAKyF,WAAYzF,KAAK2H,QAAS3H,OAElF0F,EAAgBpG,UAAUsE,OAAS,SAAUpD,GACzCR,KAAK4E,OAAOiC,YAAYrG,EAAOR,MAC/BA,KAAK8B,eAET4D,EAAgBpG,UAAUuE,UAAY,WAClC7D,KAAK4E,OAAOkC,eAAe9G,MAC3BA,KAAK8B,eAEF4D,EApBY,CANJ7H,EAAQ,GA2BZoF,YACflF,EAAQ2H,gBAAkBA,gCCjC1B,IAAIuF,EAAgBpN,EAAQ,IACxBuJ,EAAYvJ,EAAQ,IACpBgW,EAAoBhW,EAAQ,IAC5By2B,EAAkBz2B,EAAQ,IAkI9BE,EAAQiY,cApBR,WAEI,IADA,IAAIrF,KACKzO,EAAK,EAAGA,EAAKC,UAAUC,OAAQF,IACpCyO,EAAYzO,EAAK,GAAKC,UAAUD,GAEpC,IAAI4K,EAAU,KACVlC,EAAY,KAYhB,OAXIK,EAAcT,YAAYmG,EAAYA,EAAYvO,OAAS,MAC3DwI,EAAY+F,EAAYtF,OAEuB,mBAAxCsF,EAAYA,EAAYvO,OAAS,KACxC0K,EAAU6D,EAAYtF,OAIC,IAAvBsF,EAAYvO,QAAgBgF,EAAUc,QAAQyI,EAAY,MAC1DA,EAAcA,EAAY,IAEvB,IAAIkD,EAAkB3I,gBAAgByF,EAAa/F,GAAWzK,KAAK,IAAIm0B,EAAgBre,sBAAsBnJ,mCCnIxH,IAAI5H,EAAerH,EAAQ,GACvBy2B,EAAkBz2B,EAAQ,KAC9BqH,EAAapF,WAAWkW,cAAgBse,EAAgBte,4CCFxD,IAAIvT,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/EuC,EAAerH,EAAQ,GACvBwJ,EAAaxJ,EAAQ,GACrByJ,EAAgBzJ,EAAQ,GACxBgsB,EAAiBhsB,EAAQ,IAMzB2+C,EAA+B,SAAUt5C,GAEzC,SAASs5C,EAA4BC,EAAc7wC,EAAU+I,EAAMvQ,EAASwG,GACxE1H,EAAO9E,KAAK4B,MACZA,KAAKy8C,aAAeA,EACpBz8C,KAAK4L,SAAWA,EAChB5L,KAAK2U,KAAOA,EACZ3U,KAAKoE,QAAUA,EACfpE,KAAK4K,UAAYA,EAyLrB,OAhMAnI,EAAU+5C,EAA6Bt5C,GAuIvCs5C,EAA4Bh6C,OAAS,SAAU+vC,EAAM3mC,EAAUhB,GAE3D,YADiB,IAAbgB,IAAuBA,OAAWyB,GAC/B,WAEH,IADA,IAAIsH,KACKzS,EAAK,EAAGA,EAAKC,UAAUC,OAAQF,IACpCyS,EAAKzS,EAAK,GAAKC,UAAUD,GAE7B,OAAO,IAAIs6C,EAA4BjK,EAAM3mC,EAAU+I,EAAM3U,KAAM4K,KAG3E4xC,EAA4Bl9C,UAAUY,WAAa,SAAU6B,GACzD,IAAI06C,EAAez8C,KAAKy8C,aACpB9nC,EAAO3U,KAAK2U,KACZ/J,EAAY5K,KAAK4K,UACjBpB,EAAUxJ,KAAKwJ,QACnB,GAAKoB,EAuCD,OAAOA,EAAUH,SAASI,EAAU,GAAKvK,OAAQN,KAAM+B,WAAYA,EAAYqC,QAASpE,KAAKoE,UAtC7F,IAAKoF,EAAS,CACVA,EAAUxJ,KAAKwJ,QAAU,IAAIqgB,EAAevT,aAC5C,IAAIg7B,EAAU,SAASoL,IAEnB,IADA,IAAIC,KACKz6C,EAAK,EAAGA,EAAKC,UAAUC,OAAQF,IACpCy6C,EAAUz6C,EAAK,GAAKC,UAAUD,GAElC,IAAI5B,EAASo8C,EAAUp8C,OACnBsL,EAAWtL,EAAOsL,SAAUpC,EAAUlJ,EAAOkJ,QAC7CvI,EAAM07C,EAAUjvC,QACpB,GAAIzM,EACAuI,EAAQhJ,MAAMS,QAEb,GAAI2K,EAAU,CACf,IAAIgxC,EAAWv1C,EAAWQ,SAAS+D,GAAUpF,MAAMxG,KAAM28C,GACrDC,IAAat1C,EAAcQ,YAC3B0B,EAAQhJ,MAAM8G,EAAcQ,YAAYC,IAGxCyB,EAAQrI,KAAKy7C,GACbpzC,EAAQ/I,iBAIZ+I,EAAQrI,KAAKw7C,EAAUv6C,QAAU,EAAIu6C,EAAU,GAAKA,GACpDnzC,EAAQ/I,YAIhB6wC,EAAQhxC,OAASN,KACJqH,EAAWQ,SAAS40C,GAAcj2C,MAAMxG,KAAKoE,QAASuQ,EAAKvM,OAAOkpC,MAChEhqC,EAAcQ,aACzB0B,EAAQhJ,MAAM8G,EAAcQ,YAAYC,GAGhD,OAAOyB,EAAQzJ,UAAUgC,IAM1By6C,EAjMwB,CAkMjCt3C,EAAapF,YAEf,SAAS+K,EAASU,GACd,IAAInB,EAAOpK,KACPM,EAASiL,EAAMjL,OAAQyB,EAAawJ,EAAMxJ,WAAYqC,EAAUmH,EAAMnH,QAEtEmO,EAAKjS,EAAQm8C,EAAelqC,EAAGkqC,aAAc9nC,EAAOpC,EAAGoC,KAAM/J,EAAY2H,EAAG3H,UAC5EpB,EAAUlJ,EAAOkJ,QACrB,IAAKA,EAAS,CACVA,EAAUlJ,EAAOkJ,QAAU,IAAIqgB,EAAevT,aAC9C,IAAIg7B,EAAU,SAASoL,IAEnB,IADA,IAAIC,KACKz6C,EAAK,EAAGA,EAAKC,UAAUC,OAAQF,IACpCy6C,EAAUz6C,EAAK,GAAKC,UAAUD,GAElC,IAAI5B,EAASo8C,EAAUp8C,OACnBsL,EAAWtL,EAAOsL,SAAUpC,EAAUlJ,EAAOkJ,QAC7CvI,EAAM07C,EAAUjvC,QACpB,GAAIzM,EACAmJ,EAAKxJ,IAAIgK,EAAUH,SAASuxB,EAAe,GAAK/6B,IAAKA,EAAKuI,QAASA,UAElE,GAAIoC,EAAU,CACf,IAAIixC,EAAWx1C,EAAWQ,SAAS+D,GAAUpF,MAAMxG,KAAM28C,GACrDE,IAAav1C,EAAcQ,YAC3BsC,EAAKxJ,IAAIgK,EAAUH,SAASuxB,EAAe,GAAK/6B,IAAKqG,EAAcQ,YAAYC,EAAGyB,QAASA,KAG3FY,EAAKxJ,IAAIgK,EAAUH,SAAS2X,EAAc,GAAKnjB,MAAO49C,EAAUrzC,QAASA,SAG5E,CACD,IAAIvK,EAAQ09C,EAAUv6C,QAAU,EAAIu6C,EAAU,GAAKA,EACnDvyC,EAAKxJ,IAAIgK,EAAUH,SAAS2X,EAAc,GAAKnjB,MAAOA,EAAOuK,QAASA,OAI9E8nC,EAAQhxC,OAASA,EACJ+G,EAAWQ,SAAS40C,GAAcj2C,MAAMpC,EAASuQ,EAAKvM,OAAOkpC,MAC3DhqC,EAAcQ,aACzBsC,EAAKxJ,IAAIgK,EAAUH,SAASuxB,EAAe,GAAK/6B,IAAKqG,EAAcQ,YAAYC,EAAGyB,QAASA,KAGnGY,EAAKxJ,IAAI4I,EAAQzJ,UAAUgC,IAE/B,SAASqgB,EAAatX,GAClB,IAAI7L,EAAQ6L,EAAI7L,MAAOuK,EAAUsB,EAAItB,QACrCA,EAAQrI,KAAKlC,GACbuK,EAAQ/I,WAEZ,SAASu7B,EAAclxB,GACnB,IAAI7J,EAAM6J,EAAI7J,IAAe6J,EAAItB,QACzBhJ,MAAMS,GAlDlBlD,EAAQy+C,4BAA8BA,gCCjNtC,IAAIM,EAAgCj/C,EAAQ,KAC5CE,EAAQg/C,iBAAmBD,EAA8BN,4BAA4Bh6C,qCCDrF,IAAI0C,EAAerH,EAAQ,GACvBm/C,EAAqBn/C,EAAQ,KACjCqH,EAAapF,WAAWi9C,iBAAmBC,EAAmBD,+CCF9D,IAAIt6C,EAAazC,MAAQA,KAAKyC,WAAc,SAAUlE,EAAGmE,GACrD,IAAK,IAAIlD,KAAKkD,EAAOA,EAAEnD,eAAeC,KAAIjB,EAAEiB,GAAKkD,EAAElD,IACnD,SAASmD,IAAO3C,KAAK4C,YAAcrE,EACnCA,EAAEe,UAAkB,OAANoD,EAAa/D,OAAO6D,OAAOE,IAAMC,EAAGrD,UAAYoD,EAAEpD,UAAW,IAAIqD,IAE/EuC,EAAerH,EAAQ,GACvBwJ,EAAaxJ,EAAQ,GACrByJ,EAAgBzJ,EAAQ,GACxBgsB,EAAiBhsB,EAAQ,IAMzBo/C,EAA2B,SAAU/5C,GAErC,SAAS+5C,EAAwBR,EAAc7wC,EAAU+I,EAAMvQ,EAASwG,GACpE1H,EAAO9E,KAAK4B,MACZA,KAAKy8C,aAAeA,EACpBz8C,KAAK4L,SAAWA,EAChB5L,KAAK2U,KAAOA,EACZ3U,KAAKoE,QAAUA,EACfpE,KAAK4K,UAAYA,EAoOrB,OA3OAnI,EAAUw6C,EAAyB/5C,GAiJnC+5C,EAAwBz6C,OAAS,SAAU+vC,EAAM3mC,EAAUhB,GAEvD,YADiB,IAAbgB,IAAuBA,OAAWyB,GAC/B,WAEH,IADA,IAAIsH,KACKzS,EAAK,EAAGA,EAAKC,UAAUC,OAAQF,IACpCyS,EAAKzS,EAAK,GAAKC,UAAUD,GAE7B,OAAO,IAAI+6C,EAAwB1K,EAAM3mC,EAAU+I,EAAM3U,KAAM4K,KAGvEqyC,EAAwB39C,UAAUY,WAAa,SAAU6B,GACrD,IAAI06C,EAAez8C,KAAKy8C,aACpB9nC,EAAO3U,KAAK2U,KACZ/J,EAAY5K,KAAK4K,UACjBpB,EAAUxJ,KAAKwJ,QACnB,GAAKoB,EAmCD,OAAOA,EAAUH,SAASwyC,EAAwBpyC,SAAU,GAAKvK,OAAQN,KAAM+B,WAAYA,EAAYqC,QAASpE,KAAKoE,UAlCrH,IAAKoF,EAAS,CACVA,EAAUxJ,KAAKwJ,QAAU,IAAIqgB,EAAevT,aAC5C,IAAIg7B,EAAU,SAASoL,IAEnB,IADA,IAAIC,KACKz6C,EAAK,EAAGA,EAAKC,UAAUC,OAAQF,IACpCy6C,EAAUz6C,EAAK,GAAKC,UAAUD,GAElC,IAAI5B,EAASo8C,EAAUp8C,OACnBsL,EAAWtL,EAAOsL,SAAUpC,EAAUlJ,EAAOkJ,QACjD,GAAIoC,EAAU,CACV,IAAIgxC,EAAWv1C,EAAWQ,SAAS+D,GAAUpF,MAAMxG,KAAM28C,GACrDC,IAAat1C,EAAcQ,YAC3B0B,EAAQhJ,MAAM8G,EAAcQ,YAAYC,IAGxCyB,EAAQrI,KAAKy7C,GACbpzC,EAAQ/I,iBAIZ+I,EAAQrI,KAAKw7C,EAAUv6C,QAAU,EAAIu6C,EAAU,GAAKA,GACpDnzC,EAAQ/I,YAIhB6wC,EAAQhxC,OAASN,KACJqH,EAAWQ,SAAS40C,GAAcj2C,MAAMxG,KAAKoE,QAASuQ,EAAKvM,OAAOkpC,MAChEhqC,EAAcQ,aACzB0B,EAAQhJ,MAAM8G,EAAcQ,YAAYC,GAGhD,OAAOyB,EAAQzJ,UAAUgC,IAMjCk7C,EAAwBpyC,SAAW,SAAUU,GACzC,IAAInB,EAAOpK,KACPM,EAASiL,EAAMjL,OAAQyB,EAAawJ,EAAMxJ,WAAYqC,EAAUmH,EAAMnH,QACtEq4C,EAAen8C,EAAOm8C,aAAc9nC,EAAOrU,EAAOqU,KAAM/J,EAAYtK,EAAOsK,UAC3EpB,EAAUlJ,EAAOkJ,QACrB,IAAKA,EAAS,CACVA,EAAUlJ,EAAOkJ,QAAU,IAAIqgB,EAAevT,aAC9C,IAAIg7B,EAAU,SAASoL,IAEnB,IADA,IAAIC,KACKz6C,EAAK,EAAGA,EAAKC,UAAUC,OAAQF,IACpCy6C,EAAUz6C,EAAK,GAAKC,UAAUD,GAElC,IAAI5B,EAASo8C,EAAUp8C,OACnBsL,EAAWtL,EAAOsL,SAAUpC,EAAUlJ,EAAOkJ,QACjD,GAAIoC,EAAU,CACV,IAAIixC,EAAWx1C,EAAWQ,SAAS+D,GAAUpF,MAAMxG,KAAM28C,GACrDE,IAAav1C,EAAcQ,YAC3BsC,EAAKxJ,IAAIgK,EAAUH,SAASuxB,EAAe,GAAK/6B,IAAKqG,EAAcQ,YAAYC,EAAGyB,QAASA,KAG3FY,EAAKxJ,IAAIgK,EAAUH,SAAS2X,EAAc,GAAKnjB,MAAO49C,EAAUrzC,QAASA,SAG5E,CACD,IAAIvK,EAAQ09C,EAAUv6C,QAAU,EAAIu6C,EAAU,GAAKA,EACnDvyC,EAAKxJ,IAAIgK,EAAUH,SAAS2X,EAAc,GAAKnjB,MAAOA,EAAOuK,QAASA,OAI9E8nC,EAAQhxC,OAASA,EACJ+G,EAAWQ,SAAS40C,GAAcj2C,MAAMpC,EAASuQ,EAAKvM,OAAOkpC,MAC3DhqC,EAAcQ,aACzB0B,EAAQhJ,MAAM8G,EAAcQ,YAAYC,GAGhDqC,EAAKxJ,IAAI4I,EAAQzJ,UAAUgC,KAExBk7C,EA5OoB,CA6O7B/3C,EAAapF,YAEf,SAASsiB,EAAatX,GAClB,IAAI7L,EAAQ6L,EAAI7L,MAAOuK,EAAUsB,EAAItB,QACrCA,EAAQrI,KAAKlC,GACbuK,EAAQ/I,WAEZ,SAASu7B,EAAclxB,GACnB,IAAI7J,EAAM6J,EAAI7J,IAAe6J,EAAItB,QACzBhJ,MAAMS,GARlBlD,EAAQk/C,wBAA0BA,gCC5PlC,IAAIC,EAA4Br/C,EAAQ,KACxCE,EAAQo/C,aAAeD,EAA0BD,wBAAwBz6C,qCCDzE,IAAI0C,EAAerH,EAAQ,GACvBu/C,EAAiBv/C,EAAQ,KAC7BqH,EAAapF,WAAWq9C,aAAeC,EAAeD,2CCFtD,IAAIn0C,EAAenL,EAAQ,GACvBmF,EAAiBnF,EAAQ,IACzBkF,EAAalF,EAAQ,KAezBE,EAAQ4C,aAdR,SAAsBqP,EAAgBxP,EAAOC,GACzC,GAAIuP,EAAgB,CAChB,GAAIA,aAA0BhH,EAAa/F,WACvC,OAAO+M,EAEX,GAAIA,EAAehN,EAAeS,cAC9B,OAAOuM,EAAehN,EAAeS,gBAG7C,OAAKuM,GAAmBxP,GAAUC,EAG3B,IAAIuI,EAAa/F,WAAW+M,EAAgBxP,EAAOC,GAF/C,IAAIuI,EAAa/F,WAAWF,EAAWO","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 160);\n","\"use strict\";\nvar root_1 = require('./util/root');\nvar toSubscriber_1 = require('./util/toSubscriber');\nvar observable_1 = require('./symbol/observable');\nvar pipe_1 = require('./util/pipe');\n/**\n * A representation of any set of values over any amount of time. This is the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nvar Observable = (function () {\n    /**\n     * @constructor\n     * @param {Function} subscribe the function that is called when the Observable is\n     * initially subscribed to. This function is given a Subscriber, to which new values\n     * can be `next`ed, or an `error` method can be called to raise an error, or\n     * `complete` can be called to notify of a successful completion.\n     */\n    function Observable(subscribe) {\n        this._isScalar = false;\n        if (subscribe) {\n            this._subscribe = subscribe;\n        }\n    }\n    /**\n     * Creates a new Observable, with this Observable as the source, and the passed\n     * operator defined as the new observable's operator.\n     * @method lift\n     * @param {Operator} operator the operator defining the operation to take on the observable\n     * @return {Observable} a new observable with the Operator applied\n     */\n    Observable.prototype.lift = function (operator) {\n        var observable = new Observable();\n        observable.source = this;\n        observable.operator = operator;\n        return observable;\n    };\n    /**\n     * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\n     *\n     * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\n     *\n     * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\n     * might be for example a function that you passed to a {@link create} static factory, but most of the time it is\n     * a library implementation, which defines what and when will be emitted by an Observable. This means that calling\n     * `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\n     * thought.\n     *\n     * Apart from starting the execution of an Observable, this method allows you to listen for values\n     * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\n     * following ways.\n     *\n     * The first way is creating an object that implements {@link Observer} interface. It should have methods\n     * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\n     * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do\n     * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\n     * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\n     * do anything, you can simply omit it. Note however, that if `error` method is not provided, all errors will\n     * be left uncaught.\n     *\n     * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\n     * This means you can provide three functions as arguments to `subscribe`, where first function is equivalent\n     * of a `next` method, second of an `error` method and third of a `complete` method. Just as in case of Observer,\n     * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,\n     * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\n     * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.\n     *\n     * Whatever style of calling `subscribe` you use, in both cases it returns a Subscription object.\n     * This object allows you to call `unsubscribe` on it, which in turn will stop work that an Observable does and will clean\n     * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\n     * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\n     *\n     * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\n     * It is an Observable itself that decides when these functions will be called. For example {@link of}\n     * by default emits all its values synchronously. Always check documentation for how given Observable\n     * will behave when subscribed and if its default behavior can be modified with a {@link Scheduler}.\n     *\n     * @example <caption>Subscribe with an Observer</caption>\n     * const sumObserver = {\n     *   sum: 0,\n     *   next(value) {\n     *     console.log('Adding: ' + value);\n     *     this.sum = this.sum + value;\n     *   },\n     *   error() { // We actually could just remove this method,\n     *   },        // since we do not really care about errors right now.\n     *   complete() {\n     *     console.log('Sum equals: ' + this.sum);\n     *   }\n     * };\n     *\n     * Rx.Observable.of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\n     * .subscribe(sumObserver);\n     *\n     * // Logs:\n     * // \"Adding: 1\"\n     * // \"Adding: 2\"\n     * // \"Adding: 3\"\n     * // \"Sum equals: 6\"\n     *\n     *\n     * @example <caption>Subscribe with functions</caption>\n     * let sum = 0;\n     *\n     * Rx.Observable.of(1, 2, 3)\n     * .subscribe(\n     *   function(value) {\n     *     console.log('Adding: ' + value);\n     *     sum = sum + value;\n     *   },\n     *   undefined,\n     *   function() {\n     *     console.log('Sum equals: ' + sum);\n     *   }\n     * );\n     *\n     * // Logs:\n     * // \"Adding: 1\"\n     * // \"Adding: 2\"\n     * // \"Adding: 3\"\n     * // \"Sum equals: 6\"\n     *\n     *\n     * @example <caption>Cancel a subscription</caption>\n     * const subscription = Rx.Observable.interval(1000).subscribe(\n     *   num => console.log(num),\n     *   undefined,\n     *   () => console.log('completed!') // Will not be called, even\n     * );                                // when cancelling subscription\n     *\n     *\n     * setTimeout(() => {\n     *   subscription.unsubscribe();\n     *   console.log('unsubscribed!');\n     * }, 2500);\n     *\n     * // Logs:\n     * // 0 after 1s\n     * // 1 after 2s\n     * // \"unsubscribed!\" after 2.5s\n     *\n     *\n     * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\n     *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed\n     *  Observable.\n     * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\n     *  the error will be thrown as unhandled.\n     * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\n     * @return {ISubscription} a subscription reference to the registered handlers\n     * @method subscribe\n     */\n    Observable.prototype.subscribe = function (observerOrNext, error, complete) {\n        var operator = this.operator;\n        var sink = toSubscriber_1.toSubscriber(observerOrNext, error, complete);\n        if (operator) {\n            operator.call(sink, this.source);\n        }\n        else {\n            sink.add(this.source || !sink.syncErrorThrowable ? this._subscribe(sink) : this._trySubscribe(sink));\n        }\n        if (sink.syncErrorThrowable) {\n            sink.syncErrorThrowable = false;\n            if (sink.syncErrorThrown) {\n                throw sink.syncErrorValue;\n            }\n        }\n        return sink;\n    };\n    Observable.prototype._trySubscribe = function (sink) {\n        try {\n            return this._subscribe(sink);\n        }\n        catch (err) {\n            sink.syncErrorThrown = true;\n            sink.syncErrorValue = err;\n            sink.error(err);\n        }\n    };\n    /**\n     * @method forEach\n     * @param {Function} next a handler for each value emitted by the observable\n     * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise\n     * @return {Promise} a promise that either resolves on observable completion or\n     *  rejects with the handled error\n     */\n    Observable.prototype.forEach = function (next, PromiseCtor) {\n        var _this = this;\n        if (!PromiseCtor) {\n            if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {\n                PromiseCtor = root_1.root.Rx.config.Promise;\n            }\n            else if (root_1.root.Promise) {\n                PromiseCtor = root_1.root.Promise;\n            }\n        }\n        if (!PromiseCtor) {\n            throw new Error('no Promise impl found');\n        }\n        return new PromiseCtor(function (resolve, reject) {\n            // Must be declared in a separate statement to avoid a RefernceError when\n            // accessing subscription below in the closure due to Temporal Dead Zone.\n            var subscription;\n            subscription = _this.subscribe(function (value) {\n                if (subscription) {\n                    // if there is a subscription, then we can surmise\n                    // the next handling is asynchronous. Any errors thrown\n                    // need to be rejected explicitly and unsubscribe must be\n                    // called manually\n                    try {\n                        next(value);\n                    }\n                    catch (err) {\n                        reject(err);\n                        subscription.unsubscribe();\n                    }\n                }\n                else {\n                    // if there is NO subscription, then we're getting a nexted\n                    // value synchronously during subscription. We can just call it.\n                    // If it errors, Observable's `subscribe` will ensure the\n                    // unsubscription logic is called, then synchronously rethrow the error.\n                    // After that, Promise will trap the error and send it\n                    // down the rejection path.\n                    next(value);\n                }\n            }, reject, resolve);\n        });\n    };\n    Observable.prototype._subscribe = function (subscriber) {\n        return this.source.subscribe(subscriber);\n    };\n    /**\n     * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n     * @method Symbol.observable\n     * @return {Observable} this instance of the observable\n     */\n    Observable.prototype[observable_1.observable] = function () {\n        return this;\n    };\n    /* tslint:enable:max-line-length */\n    /**\n     * Used to stitch together functional operators into a chain.\n     * @method pipe\n     * @return {Observable} the Observable result of all of the operators having\n     * been called in the order they were passed in.\n     *\n     * @example\n     *\n     * import { map, filter, scan } from 'rxjs/operators';\n     *\n     * Rx.Observable.interval(1000)\n     *   .pipe(\n     *     filter(x => x % 2 === 0),\n     *     map(x => x + x),\n     *     scan((acc, x) => acc + x)\n     *   )\n     *   .subscribe(x => console.log(x))\n     */\n    Observable.prototype.pipe = function () {\n        var operations = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            operations[_i - 0] = arguments[_i];\n        }\n        if (operations.length === 0) {\n            return this;\n        }\n        return pipe_1.pipeFromArray(operations)(this);\n    };\n    /* tslint:enable:max-line-length */\n    Observable.prototype.toPromise = function (PromiseCtor) {\n        var _this = this;\n        if (!PromiseCtor) {\n            if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {\n                PromiseCtor = root_1.root.Rx.config.Promise;\n            }\n            else if (root_1.root.Promise) {\n                PromiseCtor = root_1.root.Promise;\n            }\n        }\n        if (!PromiseCtor) {\n            throw new Error('no Promise impl found');\n        }\n        return new PromiseCtor(function (resolve, reject) {\n            var value;\n            _this.subscribe(function (x) { return value = x; }, function (err) { return reject(err); }, function () { return resolve(value); });\n        });\n    };\n    // HACK: Since TypeScript inherits static properties too, we have to\n    // fight against TypeScript here so Subject can have a different static create signature\n    /**\n     * Creates a new cold Observable by calling the Observable constructor\n     * @static true\n     * @owner Observable\n     * @method create\n     * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n     * @return {Observable} a new cold observable\n     */\n    Observable.create = function (subscribe) {\n        return new Observable(subscribe);\n    };\n    return Observable;\n}());\nexports.Observable = Observable;\n//# sourceMappingURL=Observable.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar isFunction_1 = require('./util/isFunction');\nvar Subscription_1 = require('./Subscription');\nvar Observer_1 = require('./Observer');\nvar rxSubscriber_1 = require('./symbol/rxSubscriber');\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nvar Subscriber = (function (_super) {\n    __extends(Subscriber, _super);\n    /**\n     * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n     * defined Observer or a `next` callback function.\n     * @param {function(e: ?any): void} [error] The `error` callback of an\n     * Observer.\n     * @param {function(): void} [complete] The `complete` callback of an\n     * Observer.\n     */\n    function Subscriber(destinationOrNext, error, complete) {\n        _super.call(this);\n        this.syncErrorValue = null;\n        this.syncErrorThrown = false;\n        this.syncErrorThrowable = false;\n        this.isStopped = false;\n        switch (arguments.length) {\n            case 0:\n                this.destination = Observer_1.empty;\n                break;\n            case 1:\n                if (!destinationOrNext) {\n                    this.destination = Observer_1.empty;\n                    break;\n                }\n                if (typeof destinationOrNext === 'object') {\n                    // HACK(benlesh): To resolve an issue where Node users may have multiple\n                    // copies of rxjs in their node_modules directory.\n                    if (isTrustedSubscriber(destinationOrNext)) {\n                        var trustedSubscriber = destinationOrNext[rxSubscriber_1.rxSubscriber]();\n                        this.syncErrorThrowable = trustedSubscriber.syncErrorThrowable;\n                        this.destination = trustedSubscriber;\n                        trustedSubscriber.add(this);\n                    }\n                    else {\n                        this.syncErrorThrowable = true;\n                        this.destination = new SafeSubscriber(this, destinationOrNext);\n                    }\n                    break;\n                }\n            default:\n                this.syncErrorThrowable = true;\n                this.destination = new SafeSubscriber(this, destinationOrNext, error, complete);\n                break;\n        }\n    }\n    Subscriber.prototype[rxSubscriber_1.rxSubscriber] = function () { return this; };\n    /**\n     * A static factory for a Subscriber, given a (potentially partial) definition\n     * of an Observer.\n     * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n     * @param {function(e: ?any): void} [error] The `error` callback of an\n     * Observer.\n     * @param {function(): void} [complete] The `complete` callback of an\n     * Observer.\n     * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n     * Observer represented by the given arguments.\n     */\n    Subscriber.create = function (next, error, complete) {\n        var subscriber = new Subscriber(next, error, complete);\n        subscriber.syncErrorThrowable = false;\n        return subscriber;\n    };\n    /**\n     * The {@link Observer} callback to receive notifications of type `next` from\n     * the Observable, with a value. The Observable may call this method 0 or more\n     * times.\n     * @param {T} [value] The `next` value.\n     * @return {void}\n     */\n    Subscriber.prototype.next = function (value) {\n        if (!this.isStopped) {\n            this._next(value);\n        }\n    };\n    /**\n     * The {@link Observer} callback to receive notifications of type `error` from\n     * the Observable, with an attached {@link Error}. Notifies the Observer that\n     * the Observable has experienced an error condition.\n     * @param {any} [err] The `error` exception.\n     * @return {void}\n     */\n    Subscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            this.isStopped = true;\n            this._error(err);\n        }\n    };\n    /**\n     * The {@link Observer} callback to receive a valueless notification of type\n     * `complete` from the Observable. Notifies the Observer that the Observable\n     * has finished sending push-based notifications.\n     * @return {void}\n     */\n    Subscriber.prototype.complete = function () {\n        if (!this.isStopped) {\n            this.isStopped = true;\n            this._complete();\n        }\n    };\n    Subscriber.prototype.unsubscribe = function () {\n        if (this.closed) {\n            return;\n        }\n        this.isStopped = true;\n        _super.prototype.unsubscribe.call(this);\n    };\n    Subscriber.prototype._next = function (value) {\n        this.destination.next(value);\n    };\n    Subscriber.prototype._error = function (err) {\n        this.destination.error(err);\n        this.unsubscribe();\n    };\n    Subscriber.prototype._complete = function () {\n        this.destination.complete();\n        this.unsubscribe();\n    };\n    Subscriber.prototype._unsubscribeAndRecycle = function () {\n        var _a = this, _parent = _a._parent, _parents = _a._parents;\n        this._parent = null;\n        this._parents = null;\n        this.unsubscribe();\n        this.closed = false;\n        this.isStopped = false;\n        this._parent = _parent;\n        this._parents = _parents;\n        return this;\n    };\n    return Subscriber;\n}(Subscription_1.Subscription));\nexports.Subscriber = Subscriber;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SafeSubscriber = (function (_super) {\n    __extends(SafeSubscriber, _super);\n    function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {\n        _super.call(this);\n        this._parentSubscriber = _parentSubscriber;\n        var next;\n        var context = this;\n        if (isFunction_1.isFunction(observerOrNext)) {\n            next = observerOrNext;\n        }\n        else if (observerOrNext) {\n            next = observerOrNext.next;\n            error = observerOrNext.error;\n            complete = observerOrNext.complete;\n            if (observerOrNext !== Observer_1.empty) {\n                context = Object.create(observerOrNext);\n                if (isFunction_1.isFunction(context.unsubscribe)) {\n                    this.add(context.unsubscribe.bind(context));\n                }\n                context.unsubscribe = this.unsubscribe.bind(this);\n            }\n        }\n        this._context = context;\n        this._next = next;\n        this._error = error;\n        this._complete = complete;\n    }\n    SafeSubscriber.prototype.next = function (value) {\n        if (!this.isStopped && this._next) {\n            var _parentSubscriber = this._parentSubscriber;\n            if (!_parentSubscriber.syncErrorThrowable) {\n                this.__tryOrUnsub(this._next, value);\n            }\n            else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            var _parentSubscriber = this._parentSubscriber;\n            if (this._error) {\n                if (!_parentSubscriber.syncErrorThrowable) {\n                    this.__tryOrUnsub(this._error, err);\n                    this.unsubscribe();\n                }\n                else {\n                    this.__tryOrSetError(_parentSubscriber, this._error, err);\n                    this.unsubscribe();\n                }\n            }\n            else if (!_parentSubscriber.syncErrorThrowable) {\n                this.unsubscribe();\n                throw err;\n            }\n            else {\n                _parentSubscriber.syncErrorValue = err;\n                _parentSubscriber.syncErrorThrown = true;\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.complete = function () {\n        var _this = this;\n        if (!this.isStopped) {\n            var _parentSubscriber = this._parentSubscriber;\n            if (this._complete) {\n                var wrappedComplete = function () { return _this._complete.call(_this._context); };\n                if (!_parentSubscriber.syncErrorThrowable) {\n                    this.__tryOrUnsub(wrappedComplete);\n                    this.unsubscribe();\n                }\n                else {\n                    this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n                    this.unsubscribe();\n                }\n            }\n            else {\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {\n        try {\n            fn.call(this._context, value);\n        }\n        catch (err) {\n            this.unsubscribe();\n            throw err;\n        }\n    };\n    SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {\n        try {\n            fn.call(this._context, value);\n        }\n        catch (err) {\n            parent.syncErrorValue = err;\n            parent.syncErrorThrown = true;\n            return true;\n        }\n        return false;\n    };\n    SafeSubscriber.prototype._unsubscribe = function () {\n        var _parentSubscriber = this._parentSubscriber;\n        this._context = null;\n        this._parentSubscriber = null;\n        _parentSubscriber.unsubscribe();\n    };\n    return SafeSubscriber;\n}(Subscriber));\nfunction isTrustedSubscriber(obj) {\n    return obj instanceof Subscriber || ('syncErrorThrowable' in obj && obj[rxSubscriber_1.rxSubscriber]);\n}\n//# sourceMappingURL=Subscriber.js.map","\"use strict\";\nvar root_1 = require('./root');\nvar isArrayLike_1 = require('./isArrayLike');\nvar isPromise_1 = require('./isPromise');\nvar isObject_1 = require('./isObject');\nvar Observable_1 = require('../Observable');\nvar iterator_1 = require('../symbol/iterator');\nvar InnerSubscriber_1 = require('../InnerSubscriber');\nvar observable_1 = require('../symbol/observable');\nfunction subscribeToResult(outerSubscriber, result, outerValue, outerIndex) {\n    var destination = new InnerSubscriber_1.InnerSubscriber(outerSubscriber, outerValue, outerIndex);\n    if (destination.closed) {\n        return null;\n    }\n    if (result instanceof Observable_1.Observable) {\n        if (result._isScalar) {\n            destination.next(result.value);\n            destination.complete();\n            return null;\n        }\n        else {\n            destination.syncErrorThrowable = true;\n            return result.subscribe(destination);\n        }\n    }\n    else if (isArrayLike_1.isArrayLike(result)) {\n        for (var i = 0, len = result.length; i < len && !destination.closed; i++) {\n            destination.next(result[i]);\n        }\n        if (!destination.closed) {\n            destination.complete();\n        }\n    }\n    else if (isPromise_1.isPromise(result)) {\n        result.then(function (value) {\n            if (!destination.closed) {\n                destination.next(value);\n                destination.complete();\n            }\n        }, function (err) { return destination.error(err); })\n            .then(null, function (err) {\n            // Escaping the Promise trap: globally throw unhandled errors\n            root_1.root.setTimeout(function () { throw err; });\n        });\n        return destination;\n    }\n    else if (result && typeof result[iterator_1.iterator] === 'function') {\n        var iterator = result[iterator_1.iterator]();\n        do {\n            var item = iterator.next();\n            if (item.done) {\n                destination.complete();\n                break;\n            }\n            destination.next(item.value);\n            if (destination.closed) {\n                break;\n            }\n        } while (true);\n    }\n    else if (result && typeof result[observable_1.observable] === 'function') {\n        var obs = result[observable_1.observable]();\n        if (typeof obs.subscribe !== 'function') {\n            destination.error(new TypeError('Provided object does not correctly implement Symbol.observable'));\n        }\n        else {\n            return obs.subscribe(new InnerSubscriber_1.InnerSubscriber(outerSubscriber, outerValue, outerIndex));\n        }\n    }\n    else {\n        var value = isObject_1.isObject(result) ? 'an invalid object' : \"'\" + result + \"'\";\n        var msg = (\"You provided \" + value + \" where a stream was expected.\")\n            + ' You can provide an Observable, Promise, Array, or Iterable.';\n        destination.error(new TypeError(msg));\n    }\n    return null;\n}\nexports.subscribeToResult = subscribeToResult;\n//# sourceMappingURL=subscribeToResult.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('./Subscriber');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar OuterSubscriber = (function (_super) {\n    __extends(OuterSubscriber, _super);\n    function OuterSubscriber() {\n        _super.apply(this, arguments);\n    }\n    OuterSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.destination.next(innerValue);\n    };\n    OuterSubscriber.prototype.notifyError = function (error, innerSub) {\n        this.destination.error(error);\n    };\n    OuterSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.destination.complete();\n    };\n    return OuterSubscriber;\n}(Subscriber_1.Subscriber));\nexports.OuterSubscriber = OuterSubscriber;\n//# sourceMappingURL=OuterSubscriber.js.map","\"use strict\";\nvar AsyncAction_1 = require('./AsyncAction');\nvar AsyncScheduler_1 = require('./AsyncScheduler');\n/**\n *\n * Async Scheduler\n *\n * <span class=\"informal\">Schedule task as if you used setTimeout(task, duration)</span>\n *\n * `async` scheduler schedules tasks asynchronously, by putting them on the JavaScript\n * event loop queue. It is best used to delay tasks in time or to schedule tasks repeating\n * in intervals.\n *\n * If you just want to \"defer\" task, that is to perform it right after currently\n * executing synchronous code ends (commonly achieved by `setTimeout(deferredTask, 0)`),\n * better choice will be the {@link asap} scheduler.\n *\n * @example <caption>Use async scheduler to delay task</caption>\n * const task = () => console.log('it works!');\n *\n * Rx.Scheduler.async.schedule(task, 2000);\n *\n * // After 2 seconds logs:\n * // \"it works!\"\n *\n *\n * @example <caption>Use async scheduler to repeat task in intervals</caption>\n * function task(state) {\n *   console.log(state);\n *   this.schedule(state + 1, 1000); // `this` references currently executing Action,\n *                                   // which we reschedule with new state and delay\n * }\n *\n * Rx.Scheduler.async.schedule(task, 3000, 0);\n *\n * // Logs:\n * // 0 after 3s\n * // 1 after 4s\n * // 2 after 5s\n * // 3 after 6s\n *\n * @static true\n * @name async\n * @owner Scheduler\n */\nexports.async = new AsyncScheduler_1.AsyncScheduler(AsyncAction_1.AsyncAction);\n//# sourceMappingURL=async.js.map","\"use strict\";\nvar isArray_1 = require('./util/isArray');\nvar isObject_1 = require('./util/isObject');\nvar isFunction_1 = require('./util/isFunction');\nvar tryCatch_1 = require('./util/tryCatch');\nvar errorObject_1 = require('./util/errorObject');\nvar UnsubscriptionError_1 = require('./util/UnsubscriptionError');\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nvar Subscription = (function () {\n    /**\n     * @param {function(): void} [unsubscribe] A function describing how to\n     * perform the disposal of resources when the `unsubscribe` method is called.\n     */\n    function Subscription(unsubscribe) {\n        /**\n         * A flag to indicate whether this Subscription has already been unsubscribed.\n         * @type {boolean}\n         */\n        this.closed = false;\n        this._parent = null;\n        this._parents = null;\n        this._subscriptions = null;\n        if (unsubscribe) {\n            this._unsubscribe = unsubscribe;\n        }\n    }\n    /**\n     * Disposes the resources held by the subscription. May, for instance, cancel\n     * an ongoing Observable execution or cancel any other type of work that\n     * started when the Subscription was created.\n     * @return {void}\n     */\n    Subscription.prototype.unsubscribe = function () {\n        var hasErrors = false;\n        var errors;\n        if (this.closed) {\n            return;\n        }\n        var _a = this, _parent = _a._parent, _parents = _a._parents, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;\n        this.closed = true;\n        this._parent = null;\n        this._parents = null;\n        // null out _subscriptions first so any child subscriptions that attempt\n        // to remove themselves from this subscription will noop\n        this._subscriptions = null;\n        var index = -1;\n        var len = _parents ? _parents.length : 0;\n        // if this._parent is null, then so is this._parents, and we\n        // don't have to remove ourselves from any parent subscriptions.\n        while (_parent) {\n            _parent.remove(this);\n            // if this._parents is null or index >= len,\n            // then _parent is set to null, and the loop exits\n            _parent = ++index < len && _parents[index] || null;\n        }\n        if (isFunction_1.isFunction(_unsubscribe)) {\n            var trial = tryCatch_1.tryCatch(_unsubscribe).call(this);\n            if (trial === errorObject_1.errorObject) {\n                hasErrors = true;\n                errors = errors || (errorObject_1.errorObject.e instanceof UnsubscriptionError_1.UnsubscriptionError ?\n                    flattenUnsubscriptionErrors(errorObject_1.errorObject.e.errors) : [errorObject_1.errorObject.e]);\n            }\n        }\n        if (isArray_1.isArray(_subscriptions)) {\n            index = -1;\n            len = _subscriptions.length;\n            while (++index < len) {\n                var sub = _subscriptions[index];\n                if (isObject_1.isObject(sub)) {\n                    var trial = tryCatch_1.tryCatch(sub.unsubscribe).call(sub);\n                    if (trial === errorObject_1.errorObject) {\n                        hasErrors = true;\n                        errors = errors || [];\n                        var err = errorObject_1.errorObject.e;\n                        if (err instanceof UnsubscriptionError_1.UnsubscriptionError) {\n                            errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n                        }\n                        else {\n                            errors.push(err);\n                        }\n                    }\n                }\n            }\n        }\n        if (hasErrors) {\n            throw new UnsubscriptionError_1.UnsubscriptionError(errors);\n        }\n    };\n    /**\n     * Adds a tear down to be called during the unsubscribe() of this\n     * Subscription.\n     *\n     * If the tear down being added is a subscription that is already\n     * unsubscribed, is the same reference `add` is being called on, or is\n     * `Subscription.EMPTY`, it will not be added.\n     *\n     * If this subscription is already in an `closed` state, the passed\n     * tear down logic will be executed immediately.\n     *\n     * @param {TeardownLogic} teardown The additional logic to execute on\n     * teardown.\n     * @return {Subscription} Returns the Subscription used or created to be\n     * added to the inner subscriptions list. This Subscription can be used with\n     * `remove()` to remove the passed teardown logic from the inner subscriptions\n     * list.\n     */\n    Subscription.prototype.add = function (teardown) {\n        if (!teardown || (teardown === Subscription.EMPTY)) {\n            return Subscription.EMPTY;\n        }\n        if (teardown === this) {\n            return this;\n        }\n        var subscription = teardown;\n        switch (typeof teardown) {\n            case 'function':\n                subscription = new Subscription(teardown);\n            case 'object':\n                if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n                    return subscription;\n                }\n                else if (this.closed) {\n                    subscription.unsubscribe();\n                    return subscription;\n                }\n                else if (typeof subscription._addParent !== 'function' /* quack quack */) {\n                    var tmp = subscription;\n                    subscription = new Subscription();\n                    subscription._subscriptions = [tmp];\n                }\n                break;\n            default:\n                throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n        }\n        var subscriptions = this._subscriptions || (this._subscriptions = []);\n        subscriptions.push(subscription);\n        subscription._addParent(this);\n        return subscription;\n    };\n    /**\n     * Removes a Subscription from the internal list of subscriptions that will\n     * unsubscribe during the unsubscribe process of this Subscription.\n     * @param {Subscription} subscription The subscription to remove.\n     * @return {void}\n     */\n    Subscription.prototype.remove = function (subscription) {\n        var subscriptions = this._subscriptions;\n        if (subscriptions) {\n            var subscriptionIndex = subscriptions.indexOf(subscription);\n            if (subscriptionIndex !== -1) {\n                subscriptions.splice(subscriptionIndex, 1);\n            }\n        }\n    };\n    Subscription.prototype._addParent = function (parent) {\n        var _a = this, _parent = _a._parent, _parents = _a._parents;\n        if (!_parent || _parent === parent) {\n            // If we don't have a parent, or the new parent is the same as the\n            // current parent, then set this._parent to the new parent.\n            this._parent = parent;\n        }\n        else if (!_parents) {\n            // If there's already one parent, but not multiple, allocate an Array to\n            // store the rest of the parent Subscriptions.\n            this._parents = [parent];\n        }\n        else if (_parents.indexOf(parent) === -1) {\n            // Only add the new parent to the _parents list if it's not already there.\n            _parents.push(parent);\n        }\n    };\n    Subscription.EMPTY = (function (empty) {\n        empty.closed = true;\n        return empty;\n    }(new Subscription()));\n    return Subscription;\n}());\nexports.Subscription = Subscription;\nfunction flattenUnsubscriptionErrors(errors) {\n    return errors.reduce(function (errs, err) { return errs.concat((err instanceof UnsubscriptionError_1.UnsubscriptionError) ? err.errors : err); }, []);\n}\n//# sourceMappingURL=Subscription.js.map","\"use strict\";\n// typeof any so that it we don't have to cast when comparing a result to the error object\nexports.errorObject = { e: {} };\n//# sourceMappingURL=errorObject.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('./Observable');\nvar Subscriber_1 = require('./Subscriber');\nvar Subscription_1 = require('./Subscription');\nvar ObjectUnsubscribedError_1 = require('./util/ObjectUnsubscribedError');\nvar SubjectSubscription_1 = require('./SubjectSubscription');\nvar rxSubscriber_1 = require('./symbol/rxSubscriber');\n/**\n * @class SubjectSubscriber<T>\n */\nvar SubjectSubscriber = (function (_super) {\n    __extends(SubjectSubscriber, _super);\n    function SubjectSubscriber(destination) {\n        _super.call(this, destination);\n        this.destination = destination;\n    }\n    return SubjectSubscriber;\n}(Subscriber_1.Subscriber));\nexports.SubjectSubscriber = SubjectSubscriber;\n/**\n * @class Subject<T>\n */\nvar Subject = (function (_super) {\n    __extends(Subject, _super);\n    function Subject() {\n        _super.call(this);\n        this.observers = [];\n        this.closed = false;\n        this.isStopped = false;\n        this.hasError = false;\n        this.thrownError = null;\n    }\n    Subject.prototype[rxSubscriber_1.rxSubscriber] = function () {\n        return new SubjectSubscriber(this);\n    };\n    Subject.prototype.lift = function (operator) {\n        var subject = new AnonymousSubject(this, this);\n        subject.operator = operator;\n        return subject;\n    };\n    Subject.prototype.next = function (value) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        if (!this.isStopped) {\n            var observers = this.observers;\n            var len = observers.length;\n            var copy = observers.slice();\n            for (var i = 0; i < len; i++) {\n                copy[i].next(value);\n            }\n        }\n    };\n    Subject.prototype.error = function (err) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        this.hasError = true;\n        this.thrownError = err;\n        this.isStopped = true;\n        var observers = this.observers;\n        var len = observers.length;\n        var copy = observers.slice();\n        for (var i = 0; i < len; i++) {\n            copy[i].error(err);\n        }\n        this.observers.length = 0;\n    };\n    Subject.prototype.complete = function () {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        this.isStopped = true;\n        var observers = this.observers;\n        var len = observers.length;\n        var copy = observers.slice();\n        for (var i = 0; i < len; i++) {\n            copy[i].complete();\n        }\n        this.observers.length = 0;\n    };\n    Subject.prototype.unsubscribe = function () {\n        this.isStopped = true;\n        this.closed = true;\n        this.observers = null;\n    };\n    Subject.prototype._trySubscribe = function (subscriber) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        else {\n            return _super.prototype._trySubscribe.call(this, subscriber);\n        }\n    };\n    Subject.prototype._subscribe = function (subscriber) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        else if (this.hasError) {\n            subscriber.error(this.thrownError);\n            return Subscription_1.Subscription.EMPTY;\n        }\n        else if (this.isStopped) {\n            subscriber.complete();\n            return Subscription_1.Subscription.EMPTY;\n        }\n        else {\n            this.observers.push(subscriber);\n            return new SubjectSubscription_1.SubjectSubscription(this, subscriber);\n        }\n    };\n    Subject.prototype.asObservable = function () {\n        var observable = new Observable_1.Observable();\n        observable.source = this;\n        return observable;\n    };\n    Subject.create = function (destination, source) {\n        return new AnonymousSubject(destination, source);\n    };\n    return Subject;\n}(Observable_1.Observable));\nexports.Subject = Subject;\n/**\n * @class AnonymousSubject<T>\n */\nvar AnonymousSubject = (function (_super) {\n    __extends(AnonymousSubject, _super);\n    function AnonymousSubject(destination, source) {\n        _super.call(this);\n        this.destination = destination;\n        this.source = source;\n    }\n    AnonymousSubject.prototype.next = function (value) {\n        var destination = this.destination;\n        if (destination && destination.next) {\n            destination.next(value);\n        }\n    };\n    AnonymousSubject.prototype.error = function (err) {\n        var destination = this.destination;\n        if (destination && destination.error) {\n            this.destination.error(err);\n        }\n    };\n    AnonymousSubject.prototype.complete = function () {\n        var destination = this.destination;\n        if (destination && destination.complete) {\n            this.destination.complete();\n        }\n    };\n    AnonymousSubject.prototype._subscribe = function (subscriber) {\n        var source = this.source;\n        if (source) {\n            return this.source.subscribe(subscriber);\n        }\n        else {\n            return Subscription_1.Subscription.EMPTY;\n        }\n    };\n    return AnonymousSubject;\n}(Subject));\nexports.AnonymousSubject = AnonymousSubject;\n//# sourceMappingURL=Subject.js.map","\"use strict\";\nvar errorObject_1 = require('./errorObject');\nvar tryCatchTarget;\nfunction tryCatcher() {\n    try {\n        return tryCatchTarget.apply(this, arguments);\n    }\n    catch (e) {\n        errorObject_1.errorObject.e = e;\n        return errorObject_1.errorObject;\n    }\n}\nfunction tryCatch(fn) {\n    tryCatchTarget = fn;\n    return tryCatcher;\n}\nexports.tryCatch = tryCatch;\n;\n//# sourceMappingURL=tryCatch.js.map","\"use strict\";\n// CommonJS / Node have global context exposed as \"global\" variable.\n// We don't want to include the whole node.d.ts this this compilation unit so we'll just fake\n// the global \"global\" var for now.\nvar __window = typeof window !== 'undefined' && window;\nvar __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&\n    self instanceof WorkerGlobalScope && self;\nvar __global = typeof global !== 'undefined' && global;\nvar _root = __window || __global || __self;\nexports.root = _root;\n// Workaround Closure Compiler restriction: The body of a goog.module cannot use throw.\n// This is needed when used with angular/tsickle which inserts a goog.module statement.\n// Wrap in IIFE\n(function () {\n    if (!_root) {\n        throw new Error('RxJS could not find any global context (window, self, global)');\n    }\n})();\n//# sourceMappingURL=root.js.map","\"use strict\";\nfunction isScheduler(value) {\n    return value && typeof value.schedule === 'function';\n}\nexports.isScheduler = isScheduler;\n//# sourceMappingURL=isScheduler.js.map","\"use strict\";\nexports.isArray = Array.isArray || (function (x) { return x && typeof x.length === 'number'; });\n//# sourceMappingURL=isArray.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar EmptyObservable = (function (_super) {\n    __extends(EmptyObservable, _super);\n    function EmptyObservable(scheduler) {\n        _super.call(this);\n        this.scheduler = scheduler;\n    }\n    /**\n     * Creates an Observable that emits no items to the Observer and immediately\n     * emits a complete notification.\n     *\n     * <span class=\"informal\">Just emits 'complete', and nothing else.\n     * </span>\n     *\n     * <img src=\"./img/empty.png\" width=\"100%\">\n     *\n     * This static operator is useful for creating a simple Observable that only\n     * emits the complete notification. It can be used for composing with other\n     * Observables, such as in a {@link mergeMap}.\n     *\n     * @example <caption>Emit the number 7, then complete.</caption>\n     * var result = Rx.Observable.empty().startWith(7);\n     * result.subscribe(x => console.log(x));\n     *\n     * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>\n     * var interval = Rx.Observable.interval(1000);\n     * var result = interval.mergeMap(x =>\n     *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()\n     * );\n     * result.subscribe(x => console.log(x));\n     *\n     * // Results in the following to the console:\n     * // x is equal to the count on the interval eg(0,1,2,3,...)\n     * // x will occur every 1000ms\n     * // if x % 2 is equal to 1 print abc\n     * // if x % 2 is not equal to 1 nothing will be output\n     *\n     * @see {@link create}\n     * @see {@link never}\n     * @see {@link of}\n     * @see {@link throw}\n     *\n     * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n     * the emission of the complete notification.\n     * @return {Observable} An \"empty\" Observable: emits only the complete\n     * notification.\n     * @static true\n     * @name empty\n     * @owner Observable\n     */\n    EmptyObservable.create = function (scheduler) {\n        return new EmptyObservable(scheduler);\n    };\n    EmptyObservable.dispatch = function (arg) {\n        var subscriber = arg.subscriber;\n        subscriber.complete();\n    };\n    EmptyObservable.prototype._subscribe = function (subscriber) {\n        var scheduler = this.scheduler;\n        if (scheduler) {\n            return scheduler.schedule(EmptyObservable.dispatch, 0, { subscriber: subscriber });\n        }\n        else {\n            subscriber.complete();\n        }\n    };\n    return EmptyObservable;\n}(Observable_1.Observable));\nexports.EmptyObservable = EmptyObservable;\n//# sourceMappingURL=EmptyObservable.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar ScalarObservable_1 = require('./ScalarObservable');\nvar EmptyObservable_1 = require('./EmptyObservable');\nvar isScheduler_1 = require('../util/isScheduler');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar ArrayObservable = (function (_super) {\n    __extends(ArrayObservable, _super);\n    function ArrayObservable(array, scheduler) {\n        _super.call(this);\n        this.array = array;\n        this.scheduler = scheduler;\n        if (!scheduler && array.length === 1) {\n            this._isScalar = true;\n            this.value = array[0];\n        }\n    }\n    ArrayObservable.create = function (array, scheduler) {\n        return new ArrayObservable(array, scheduler);\n    };\n    /**\n     * Creates an Observable that emits some values you specify as arguments,\n     * immediately one after the other, and then emits a complete notification.\n     *\n     * <span class=\"informal\">Emits the arguments you provide, then completes.\n     * </span>\n     *\n     * <img src=\"./img/of.png\" width=\"100%\">\n     *\n     * This static operator is useful for creating a simple Observable that only\n     * emits the arguments given, and the complete notification thereafter. It can\n     * be used for composing with other Observables, such as with {@link concat}.\n     * By default, it uses a `null` IScheduler, which means the `next`\n     * notifications are sent synchronously, although with a different IScheduler\n     * it is possible to determine when those notifications will be delivered.\n     *\n     * @example <caption>Emit 10, 20, 30, then 'a', 'b', 'c', then start ticking every second.</caption>\n     * var numbers = Rx.Observable.of(10, 20, 30);\n     * var letters = Rx.Observable.of('a', 'b', 'c');\n     * var interval = Rx.Observable.interval(1000);\n     * var result = numbers.concat(letters).concat(interval);\n     * result.subscribe(x => console.log(x));\n     *\n     * @see {@link create}\n     * @see {@link empty}\n     * @see {@link never}\n     * @see {@link throw}\n     *\n     * @param {...T} values Arguments that represent `next` values to be emitted.\n     * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n     * the emissions of the `next` notifications.\n     * @return {Observable<T>} An Observable that emits each given input value.\n     * @static true\n     * @name of\n     * @owner Observable\n     */\n    ArrayObservable.of = function () {\n        var array = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            array[_i - 0] = arguments[_i];\n        }\n        var scheduler = array[array.length - 1];\n        if (isScheduler_1.isScheduler(scheduler)) {\n            array.pop();\n        }\n        else {\n            scheduler = null;\n        }\n        var len = array.length;\n        if (len > 1) {\n            return new ArrayObservable(array, scheduler);\n        }\n        else if (len === 1) {\n            return new ScalarObservable_1.ScalarObservable(array[0], scheduler);\n        }\n        else {\n            return new EmptyObservable_1.EmptyObservable(scheduler);\n        }\n    };\n    ArrayObservable.dispatch = function (state) {\n        var array = state.array, index = state.index, count = state.count, subscriber = state.subscriber;\n        if (index >= count) {\n            subscriber.complete();\n            return;\n        }\n        subscriber.next(array[index]);\n        if (subscriber.closed) {\n            return;\n        }\n        state.index = index + 1;\n        this.schedule(state);\n    };\n    ArrayObservable.prototype._subscribe = function (subscriber) {\n        var index = 0;\n        var array = this.array;\n        var count = array.length;\n        var scheduler = this.scheduler;\n        if (scheduler) {\n            return scheduler.schedule(ArrayObservable.dispatch, 0, {\n                array: array, index: index, count: count, subscriber: subscriber\n            });\n        }\n        else {\n            for (var i = 0; i < count && !subscriber.closed; i++) {\n                subscriber.next(array[i]);\n            }\n            subscriber.complete();\n        }\n    };\n    return ArrayObservable;\n}(Observable_1.Observable));\nexports.ArrayObservable = ArrayObservable;\n//# sourceMappingURL=ArrayObservable.js.map","\"use strict\";\nvar ConnectableObservable_1 = require('../observable/ConnectableObservable');\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits the results of invoking a specified selector on items\n * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.\n *\n * <img src=\"./img/multicast.png\" width=\"100%\">\n *\n * @param {Function|Subject} subjectOrSubjectFactory - Factory function to create an intermediate subject through\n * which the source sequence's elements will be multicast to the selector function\n * or Subject to push source elements into.\n * @param {Function} [selector] - Optional selector function that can use the multicasted source stream\n * as many times as needed, without causing multiple subscriptions to the source stream.\n * Subscribers to the given source will receive all notifications of the source from the\n * time of the subscription forward.\n * @return {Observable} An Observable that emits the results of invoking the selector\n * on the items emitted by a `ConnectableObservable` that shares a single subscription to\n * the underlying stream.\n * @method multicast\n * @owner Observable\n */\nfunction multicast(subjectOrSubjectFactory, selector) {\n    return function multicastOperatorFunction(source) {\n        var subjectFactory;\n        if (typeof subjectOrSubjectFactory === 'function') {\n            subjectFactory = subjectOrSubjectFactory;\n        }\n        else {\n            subjectFactory = function subjectFactory() {\n                return subjectOrSubjectFactory;\n            };\n        }\n        if (typeof selector === 'function') {\n            return source.lift(new MulticastOperator(subjectFactory, selector));\n        }\n        var connectable = Object.create(source, ConnectableObservable_1.connectableObservableDescriptor);\n        connectable.source = source;\n        connectable.subjectFactory = subjectFactory;\n        return connectable;\n    };\n}\nexports.multicast = multicast;\nvar MulticastOperator = (function () {\n    function MulticastOperator(subjectFactory, selector) {\n        this.subjectFactory = subjectFactory;\n        this.selector = selector;\n    }\n    MulticastOperator.prototype.call = function (subscriber, source) {\n        var selector = this.selector;\n        var subject = this.subjectFactory();\n        var subscription = selector(subject).subscribe(subscriber);\n        subscription.add(source.subscribe(subject));\n        return subscription;\n    };\n    return MulticastOperator;\n}());\nexports.MulticastOperator = MulticastOperator;\n//# sourceMappingURL=multicast.js.map","\"use strict\";\nvar scan_1 = require('./scan');\nvar takeLast_1 = require('./takeLast');\nvar defaultIfEmpty_1 = require('./defaultIfEmpty');\nvar pipe_1 = require('../util/pipe');\n/* tslint:enable:max-line-length */\n/**\n * Applies an accumulator function over the source Observable, and returns the\n * accumulated result when the source completes, given an optional seed value.\n *\n * <span class=\"informal\">Combines together all values emitted on the source,\n * using an accumulator function that knows how to join a new source value into\n * the accumulation from the past.</span>\n *\n * <img src=\"./img/reduce.png\" width=\"100%\">\n *\n * Like\n * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),\n * `reduce` applies an `accumulator` function against an accumulation and each\n * value of the source Observable (from the past) to reduce it to a single\n * value, emitted on the output Observable. Note that `reduce` will only emit\n * one value, only when the source Observable completes. It is equivalent to\n * applying operator {@link scan} followed by operator {@link last}.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events that happened in 5 seconds</caption>\n * var clicksInFiveSeconds = Rx.Observable.fromEvent(document, 'click')\n *   .takeUntil(Rx.Observable.interval(5000));\n * var ones = clicksInFiveSeconds.mapTo(1);\n * var seed = 0;\n * var count = ones.reduce((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link count}\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link scan}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator The accumulator function\n * called on each source value.\n * @param {R} [seed] The initial accumulation value.\n * @return {Observable<R>} An Observable that emits a single value that is the\n * result of accumulating the values emitted by the source Observable.\n * @method reduce\n * @owner Observable\n */\nfunction reduce(accumulator, seed) {\n    // providing a seed of `undefined` *should* be valid and trigger\n    // hasSeed! so don't use `seed !== undefined` checks!\n    // For this reason, we have to check it here at the original call site\n    // otherwise inside Operator/Subscriber we won't know if `undefined`\n    // means they didn't provide anything or if they literally provided `undefined`\n    if (arguments.length >= 2) {\n        return function reduceOperatorFunctionWithSeed(source) {\n            return pipe_1.pipe(scan_1.scan(accumulator, seed), takeLast_1.takeLast(1), defaultIfEmpty_1.defaultIfEmpty(seed))(source);\n        };\n    }\n    return function reduceOperatorFunction(source) {\n        return pipe_1.pipe(scan_1.scan(function (acc, value, index) {\n            return accumulator(acc, value, index + 1);\n        }), takeLast_1.takeLast(1))(source);\n    };\n}\nexports.reduce = reduce;\n//# sourceMappingURL=reduce.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * An error thrown when an element was queried at a certain index of an\n * Observable, but no such index or position exists in that sequence.\n *\n * @see {@link elementAt}\n * @see {@link take}\n * @see {@link takeLast}\n *\n * @class ArgumentOutOfRangeError\n */\nvar ArgumentOutOfRangeError = (function (_super) {\n    __extends(ArgumentOutOfRangeError, _super);\n    function ArgumentOutOfRangeError() {\n        var err = _super.call(this, 'argument out of range');\n        this.name = err.name = 'ArgumentOutOfRangeError';\n        this.stack = err.stack;\n        this.message = err.message;\n    }\n    return ArgumentOutOfRangeError;\n}(Error));\nexports.ArgumentOutOfRangeError = ArgumentOutOfRangeError;\n//# sourceMappingURL=ArgumentOutOfRangeError.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nfunction map(project, thisArg) {\n    return function mapOperation(source) {\n        if (typeof project !== 'function') {\n            throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n        }\n        return source.lift(new MapOperator(project, thisArg));\n    };\n}\nexports.map = map;\nvar MapOperator = (function () {\n    function MapOperator(project, thisArg) {\n        this.project = project;\n        this.thisArg = thisArg;\n    }\n    MapOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n    };\n    return MapOperator;\n}());\nexports.MapOperator = MapOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MapSubscriber = (function (_super) {\n    __extends(MapSubscriber, _super);\n    function MapSubscriber(destination, project, thisArg) {\n        _super.call(this, destination);\n        this.project = project;\n        this.count = 0;\n        this.thisArg = thisArg || this;\n    }\n    // NOTE: This looks unoptimized, but it's actually purposefully NOT\n    // using try/catch optimizations.\n    MapSubscriber.prototype._next = function (value) {\n        var result;\n        try {\n            result = this.project.call(this.thisArg, value, this.count++);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return MapSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=map.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Scheduler_1 = require('../Scheduler');\nvar AsyncScheduler = (function (_super) {\n    __extends(AsyncScheduler, _super);\n    function AsyncScheduler() {\n        _super.apply(this, arguments);\n        this.actions = [];\n        /**\n         * A flag to indicate whether the Scheduler is currently executing a batch of\n         * queued actions.\n         * @type {boolean}\n         */\n        this.active = false;\n        /**\n         * An internal ID used to track the latest asynchronous task such as those\n         * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n         * others.\n         * @type {any}\n         */\n        this.scheduled = undefined;\n    }\n    AsyncScheduler.prototype.flush = function (action) {\n        var actions = this.actions;\n        if (this.active) {\n            actions.push(action);\n            return;\n        }\n        var error;\n        this.active = true;\n        do {\n            if (error = action.execute(action.state, action.delay)) {\n                break;\n            }\n        } while (action = actions.shift()); // exhaust the scheduler queue\n        this.active = false;\n        if (error) {\n            while (action = actions.shift()) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    };\n    return AsyncScheduler;\n}(Scheduler_1.Scheduler));\nexports.AsyncScheduler = AsyncScheduler;\n//# sourceMappingURL=AsyncScheduler.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar root_1 = require('../util/root');\nvar Action_1 = require('./Action');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar AsyncAction = (function (_super) {\n    __extends(AsyncAction, _super);\n    function AsyncAction(scheduler, work) {\n        _super.call(this, scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n        this.pending = false;\n    }\n    AsyncAction.prototype.schedule = function (state, delay) {\n        if (delay === void 0) { delay = 0; }\n        if (this.closed) {\n            return this;\n        }\n        // Always replace the current state with the new state.\n        this.state = state;\n        // Set the pending flag indicating that this action has been scheduled, or\n        // has recursively rescheduled itself.\n        this.pending = true;\n        var id = this.id;\n        var scheduler = this.scheduler;\n        //\n        // Important implementation note:\n        //\n        // Actions only execute once by default, unless rescheduled from within the\n        // scheduled callback. This allows us to implement single and repeat\n        // actions via the same code path, without adding API surface area, as well\n        // as mimic traditional recursion but across asynchronous boundaries.\n        //\n        // However, JS runtimes and timers distinguish between intervals achieved by\n        // serial `setTimeout` calls vs. a single `setInterval` call. An interval of\n        // serial `setTimeout` calls can be individually delayed, which delays\n        // scheduling the next `setTimeout`, and so on. `setInterval` attempts to\n        // guarantee the interval callback will be invoked more precisely to the\n        // interval period, regardless of load.\n        //\n        // Therefore, we use `setInterval` to schedule single and repeat actions.\n        // If the action reschedules itself with the same delay, the interval is not\n        // canceled. If the action doesn't reschedule, or reschedules with a\n        // different delay, the interval will be canceled after scheduled callback\n        // execution.\n        //\n        if (id != null) {\n            this.id = this.recycleAsyncId(scheduler, id, delay);\n        }\n        this.delay = delay;\n        // If this action has already an async Id, don't request a new one.\n        this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n        return this;\n    };\n    AsyncAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        return root_1.root.setInterval(scheduler.flush.bind(scheduler, this), delay);\n    };\n    AsyncAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        // If this action is rescheduled with the same delay time, don't clear the interval id.\n        if (delay !== null && this.delay === delay && this.pending === false) {\n            return id;\n        }\n        // Otherwise, if the action's delay time is different from the current delay,\n        // or the action has been rescheduled before it's executed, clear the interval id\n        return root_1.root.clearInterval(id) && undefined || undefined;\n    };\n    /**\n     * Immediately executes this action and the `work` it contains.\n     * @return {any}\n     */\n    AsyncAction.prototype.execute = function (state, delay) {\n        if (this.closed) {\n            return new Error('executing a cancelled action');\n        }\n        this.pending = false;\n        var error = this._execute(state, delay);\n        if (error) {\n            return error;\n        }\n        else if (this.pending === false && this.id != null) {\n            // Dequeue if the action didn't reschedule itself. Don't call\n            // unsubscribe(), because the action could reschedule later.\n            // For example:\n            // ```\n            // scheduler.schedule(function doWork(counter) {\n            //   /* ... I'm a busy worker bee ... */\n            //   var originalAction = this;\n            //   /* wait 100ms before rescheduling the action */\n            //   setTimeout(function () {\n            //     originalAction.schedule(counter + 1);\n            //   }, 100);\n            // }, 1000);\n            // ```\n            this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n        }\n    };\n    AsyncAction.prototype._execute = function (state, delay) {\n        var errored = false;\n        var errorValue = undefined;\n        try {\n            this.work(state);\n        }\n        catch (e) {\n            errored = true;\n            errorValue = !!e && e || new Error(e);\n        }\n        if (errored) {\n            this.unsubscribe();\n            return errorValue;\n        }\n    };\n    AsyncAction.prototype._unsubscribe = function () {\n        var id = this.id;\n        var scheduler = this.scheduler;\n        var actions = scheduler.actions;\n        var index = actions.indexOf(this);\n        this.work = null;\n        this.state = null;\n        this.pending = false;\n        this.scheduler = null;\n        if (index !== -1) {\n            actions.splice(index, 1);\n        }\n        if (id != null) {\n            this.id = this.recycleAsyncId(scheduler, id, null);\n        }\n        this.delay = null;\n    };\n    return AsyncAction;\n}(Action_1.Action));\nexports.AsyncAction = AsyncAction;\n//# sourceMappingURL=AsyncAction.js.map","\"use strict\";\nvar isArray_1 = require('../util/isArray');\nfunction isNumeric(val) {\n    // parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\n    // ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n    // subtraction forces infinities to NaN\n    // adding 1 corrects loss of precision from parseFloat (#15100)\n    return !isArray_1.isArray(val) && (val - parseFloat(val) + 1) >= 0;\n}\nexports.isNumeric = isNumeric;\n;\n//# sourceMappingURL=isNumeric.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nfunction mergeMap(project, resultSelector, concurrent) {\n    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n    return function mergeMapOperatorFunction(source) {\n        if (typeof resultSelector === 'number') {\n            concurrent = resultSelector;\n            resultSelector = null;\n        }\n        return source.lift(new MergeMapOperator(project, resultSelector, concurrent));\n    };\n}\nexports.mergeMap = mergeMap;\nvar MergeMapOperator = (function () {\n    function MergeMapOperator(project, resultSelector, concurrent) {\n        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n        this.project = project;\n        this.resultSelector = resultSelector;\n        this.concurrent = concurrent;\n    }\n    MergeMapOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new MergeMapSubscriber(observer, this.project, this.resultSelector, this.concurrent));\n    };\n    return MergeMapOperator;\n}());\nexports.MergeMapOperator = MergeMapOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MergeMapSubscriber = (function (_super) {\n    __extends(MergeMapSubscriber, _super);\n    function MergeMapSubscriber(destination, project, resultSelector, concurrent) {\n        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n        _super.call(this, destination);\n        this.project = project;\n        this.resultSelector = resultSelector;\n        this.concurrent = concurrent;\n        this.hasCompleted = false;\n        this.buffer = [];\n        this.active = 0;\n        this.index = 0;\n    }\n    MergeMapSubscriber.prototype._next = function (value) {\n        if (this.active < this.concurrent) {\n            this._tryNext(value);\n        }\n        else {\n            this.buffer.push(value);\n        }\n    };\n    MergeMapSubscriber.prototype._tryNext = function (value) {\n        var result;\n        var index = this.index++;\n        try {\n            result = this.project(value, index);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.active++;\n        this._innerSub(result, value, index);\n    };\n    MergeMapSubscriber.prototype._innerSub = function (ish, value, index) {\n        this.add(subscribeToResult_1.subscribeToResult(this, ish, value, index));\n    };\n    MergeMapSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (this.active === 0 && this.buffer.length === 0) {\n            this.destination.complete();\n        }\n    };\n    MergeMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        if (this.resultSelector) {\n            this._notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        else {\n            this.destination.next(innerValue);\n        }\n    };\n    MergeMapSubscriber.prototype._notifyResultSelector = function (outerValue, innerValue, outerIndex, innerIndex) {\n        var result;\n        try {\n            result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    MergeMapSubscriber.prototype.notifyComplete = function (innerSub) {\n        var buffer = this.buffer;\n        this.remove(innerSub);\n        this.active--;\n        if (buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        else if (this.active === 0 && this.hasCompleted) {\n            this.destination.complete();\n        }\n    };\n    return MergeMapSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\nexports.MergeMapSubscriber = MergeMapSubscriber;\n//# sourceMappingURL=mergeMap.js.map","\"use strict\";\nvar Observable_1 = require('./Observable');\n/**\n * Represents a push-based event or value that an {@link Observable} can emit.\n * This class is particularly useful for operators that manage notifications,\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n * others. Besides wrapping the actual delivered value, it also annotates it\n * with metadata of, for instance, what type of push message it is (`next`,\n * `error`, or `complete`).\n *\n * @see {@link materialize}\n * @see {@link dematerialize}\n * @see {@link observeOn}\n *\n * @class Notification<T>\n */\nvar Notification = (function () {\n    function Notification(kind, value, error) {\n        this.kind = kind;\n        this.value = value;\n        this.error = error;\n        this.hasValue = kind === 'N';\n    }\n    /**\n     * Delivers to the given `observer` the value wrapped by this Notification.\n     * @param {Observer} observer\n     * @return\n     */\n    Notification.prototype.observe = function (observer) {\n        switch (this.kind) {\n            case 'N':\n                return observer.next && observer.next(this.value);\n            case 'E':\n                return observer.error && observer.error(this.error);\n            case 'C':\n                return observer.complete && observer.complete();\n        }\n    };\n    /**\n     * Given some {@link Observer} callbacks, deliver the value represented by the\n     * current Notification to the correctly corresponding callback.\n     * @param {function(value: T): void} next An Observer `next` callback.\n     * @param {function(err: any): void} [error] An Observer `error` callback.\n     * @param {function(): void} [complete] An Observer `complete` callback.\n     * @return {any}\n     */\n    Notification.prototype.do = function (next, error, complete) {\n        var kind = this.kind;\n        switch (kind) {\n            case 'N':\n                return next && next(this.value);\n            case 'E':\n                return error && error(this.error);\n            case 'C':\n                return complete && complete();\n        }\n    };\n    /**\n     * Takes an Observer or its individual callback functions, and calls `observe`\n     * or `do` methods accordingly.\n     * @param {Observer|function(value: T): void} nextOrObserver An Observer or\n     * the `next` callback.\n     * @param {function(err: any): void} [error] An Observer `error` callback.\n     * @param {function(): void} [complete] An Observer `complete` callback.\n     * @return {any}\n     */\n    Notification.prototype.accept = function (nextOrObserver, error, complete) {\n        if (nextOrObserver && typeof nextOrObserver.next === 'function') {\n            return this.observe(nextOrObserver);\n        }\n        else {\n            return this.do(nextOrObserver, error, complete);\n        }\n    };\n    /**\n     * Returns a simple Observable that just delivers the notification represented\n     * by this Notification instance.\n     * @return {any}\n     */\n    Notification.prototype.toObservable = function () {\n        var kind = this.kind;\n        switch (kind) {\n            case 'N':\n                return Observable_1.Observable.of(this.value);\n            case 'E':\n                return Observable_1.Observable.throw(this.error);\n            case 'C':\n                return Observable_1.Observable.empty();\n        }\n        throw new Error('unexpected notification kind value');\n    };\n    /**\n     * A shortcut to create a Notification instance of the type `next` from a\n     * given value.\n     * @param {T} value The `next` value.\n     * @return {Notification<T>} The \"next\" Notification representing the\n     * argument.\n     */\n    Notification.createNext = function (value) {\n        if (typeof value !== 'undefined') {\n            return new Notification('N', value);\n        }\n        return Notification.undefinedValueNotification;\n    };\n    /**\n     * A shortcut to create a Notification instance of the type `error` from a\n     * given error.\n     * @param {any} [err] The `error` error.\n     * @return {Notification<T>} The \"error\" Notification representing the\n     * argument.\n     */\n    Notification.createError = function (err) {\n        return new Notification('E', undefined, err);\n    };\n    /**\n     * A shortcut to create a Notification instance of the type `complete`.\n     * @return {Notification<any>} The valueless \"complete\" Notification.\n     */\n    Notification.createComplete = function () {\n        return Notification.completeNotification;\n    };\n    Notification.completeNotification = new Notification('C');\n    Notification.undefinedValueNotification = new Notification('N', undefined);\n    return Notification;\n}());\nexports.Notification = Notification;\n//# sourceMappingURL=Notification.js.map","\"use strict\";\nvar isScheduler_1 = require('../util/isScheduler');\nvar of_1 = require('./of');\nvar from_1 = require('./from');\nvar concatAll_1 = require('../operators/concatAll');\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which sequentially emits all values from given\n * Observable and then moves on to the next.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * `concat` joins multiple Observables together, by subscribing to them one at a time and\n * merging their results into the output Observable. You can pass either an array of\n * Observables, or put them directly as arguments. Passing an empty array will result\n * in Observable that completes immediately.\n *\n * `concat` will subscribe to first input Observable and emit all its values, without\n * changing or affecting them in any way. When that Observable completes, it will\n * subscribe to then next Observable passed and, again, emit its values. This will be\n * repeated, until the operator runs out of Observables. When last input Observable completes,\n * `concat` will complete as well. At any given moment only one Observable passed to operator\n * emits values. If you would like to emit values from passed Observables concurrently, check out\n * {@link merge} instead, especially with optional `concurrent` parameter. As a matter of fact,\n * `concat` is an equivalent of `merge` operator with `concurrent` parameter set to `1`.\n *\n * Note that if some input Observable never completes, `concat` will also never complete\n * and Observables following the one that did not complete will never be subscribed. On the other\n * hand, if some Observable simply completes immediately after it is subscribed, it will be\n * invisible for `concat`, which will just move on to the next Observable.\n *\n * If any Observable in chain errors, instead of passing control to the next Observable,\n * `concat` will error immediately as well. Observables that would be subscribed after\n * the one that emitted error, never will.\n *\n * If you pass to `concat` the same Observable many times, its stream of values\n * will be \"replayed\" on every subscription, which means you can repeat given Observable\n * as many times as you like. If passing the same Observable to `concat` 1000 times becomes tedious,\n * you can always use {@link repeat}.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = Rx.Observable.concat(timer, sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n *\n * @example <caption>Concatenate an array of 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = Rx.Observable.concat([timer1, timer2, timer3]); // note that array is passed\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n *\n * @example <caption>Concatenate the same Observable to repeat it</caption>\n * const timer = Rx.Observable.interval(1000).take(2);\n *\n * Rx.Observable.concat(timer, timer) // concating the same Observable!\n * .subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('...and it is done!')\n * );\n *\n * // Logs:\n * // 0 after 1s\n * // 1 after 2s\n * // 0 after 3s\n * // 1 after 4s\n * // \"...and it is done!\" also after 4s\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} input1 An input Observable to concatenate with others.\n * @param {ObservableInput} input2 An input Observable to concatenate with others.\n * More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @static true\n * @name concat\n * @owner Observable\n */\nfunction concat() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    if (observables.length === 1 || (observables.length === 2 && isScheduler_1.isScheduler(observables[1]))) {\n        return from_1.from(observables[0]);\n    }\n    return concatAll_1.concatAll()(of_1.of.apply(void 0, observables));\n}\nexports.concat = concat;\n//# sourceMappingURL=concat.js.map","\"use strict\";\nvar root_1 = require('../util/root');\nfunction symbolIteratorPonyfill(root) {\n    var Symbol = root.Symbol;\n    if (typeof Symbol === 'function') {\n        if (!Symbol.iterator) {\n            Symbol.iterator = Symbol('iterator polyfill');\n        }\n        return Symbol.iterator;\n    }\n    else {\n        // [for Mozilla Gecko 27-35:](https://mzl.la/2ewE1zC)\n        var Set_1 = root.Set;\n        if (Set_1 && typeof new Set_1()['@@iterator'] === 'function') {\n            return '@@iterator';\n        }\n        var Map_1 = root.Map;\n        // required for compatability with es6-shim\n        if (Map_1) {\n            var keys = Object.getOwnPropertyNames(Map_1.prototype);\n            for (var i = 0; i < keys.length; ++i) {\n                var key = keys[i];\n                // according to spec, Map.prototype[@@iterator] and Map.orototype.entries must be equal.\n                if (key !== 'entries' && key !== 'size' && Map_1.prototype[key] === Map_1.prototype['entries']) {\n                    return key;\n                }\n            }\n        }\n        return '@@iterator';\n    }\n}\nexports.symbolIteratorPonyfill = symbolIteratorPonyfill;\nexports.iterator = symbolIteratorPonyfill(root_1.root);\n/**\n * @deprecated use iterator instead\n */\nexports.$$iterator = exports.iterator;\n//# sourceMappingURL=iterator.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nexports.defaultThrottleConfig = {\n    leading: true,\n    trailing: false\n};\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for a duration determined by another Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link throttleTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/throttle.png\" width=\"100%\">\n *\n * `throttle` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled by calling the `durationSelector` function with the source value,\n * which returns the \"duration\" Observable. When the duration Observable emits a\n * value or completes, the timer is disabled, and this process repeats for the\n * next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttle(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration for each source value, returned as an Observable or a Promise.\n * @param {Object} config a configuration object to define `leading` and `trailing` behavior. Defaults\n * to `{ leading: true, trailing: false }`.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttle\n * @owner Observable\n */\nfunction throttle(durationSelector, config) {\n    if (config === void 0) { config = exports.defaultThrottleConfig; }\n    return function (source) { return source.lift(new ThrottleOperator(durationSelector, config.leading, config.trailing)); };\n}\nexports.throttle = throttle;\nvar ThrottleOperator = (function () {\n    function ThrottleOperator(durationSelector, leading, trailing) {\n        this.durationSelector = durationSelector;\n        this.leading = leading;\n        this.trailing = trailing;\n    }\n    ThrottleOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ThrottleSubscriber(subscriber, this.durationSelector, this.leading, this.trailing));\n    };\n    return ThrottleOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc\n * @ignore\n * @extends {Ignored}\n */\nvar ThrottleSubscriber = (function (_super) {\n    __extends(ThrottleSubscriber, _super);\n    function ThrottleSubscriber(destination, durationSelector, _leading, _trailing) {\n        _super.call(this, destination);\n        this.destination = destination;\n        this.durationSelector = durationSelector;\n        this._leading = _leading;\n        this._trailing = _trailing;\n        this._hasTrailingValue = false;\n    }\n    ThrottleSubscriber.prototype._next = function (value) {\n        if (this.throttled) {\n            if (this._trailing) {\n                this._hasTrailingValue = true;\n                this._trailingValue = value;\n            }\n        }\n        else {\n            var duration = this.tryDurationSelector(value);\n            if (duration) {\n                this.add(this.throttled = subscribeToResult_1.subscribeToResult(this, duration));\n            }\n            if (this._leading) {\n                this.destination.next(value);\n                if (this._trailing) {\n                    this._hasTrailingValue = true;\n                    this._trailingValue = value;\n                }\n            }\n        }\n    };\n    ThrottleSubscriber.prototype.tryDurationSelector = function (value) {\n        try {\n            return this.durationSelector(value);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return null;\n        }\n    };\n    ThrottleSubscriber.prototype._unsubscribe = function () {\n        var _a = this, throttled = _a.throttled, _trailingValue = _a._trailingValue, _hasTrailingValue = _a._hasTrailingValue, _trailing = _a._trailing;\n        this._trailingValue = null;\n        this._hasTrailingValue = false;\n        if (throttled) {\n            this.remove(throttled);\n            this.throttled = null;\n            throttled.unsubscribe();\n        }\n    };\n    ThrottleSubscriber.prototype._sendTrailing = function () {\n        var _a = this, destination = _a.destination, throttled = _a.throttled, _trailing = _a._trailing, _trailingValue = _a._trailingValue, _hasTrailingValue = _a._hasTrailingValue;\n        if (throttled && _trailing && _hasTrailingValue) {\n            destination.next(_trailingValue);\n            this._trailingValue = null;\n            this._hasTrailingValue = false;\n        }\n    };\n    ThrottleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this._sendTrailing();\n        this._unsubscribe();\n    };\n    ThrottleSubscriber.prototype.notifyComplete = function () {\n        this._sendTrailing();\n        this._unsubscribe();\n    };\n    return ThrottleSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=throttle.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * An error thrown when an Observable or a sequence was queried but has no\n * elements.\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link single}\n *\n * @class EmptyError\n */\nvar EmptyError = (function (_super) {\n    __extends(EmptyError, _super);\n    function EmptyError() {\n        var err = _super.call(this, 'no elements in sequence');\n        this.name = err.name = 'EmptyError';\n        this.stack = err.stack;\n        this.message = err.message;\n    }\n    return EmptyError;\n}(Error));\nexports.EmptyError = EmptyError;\n//# sourceMappingURL=EmptyError.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subject_1 = require('./Subject');\nvar queue_1 = require('./scheduler/queue');\nvar Subscription_1 = require('./Subscription');\nvar observeOn_1 = require('./operators/observeOn');\nvar ObjectUnsubscribedError_1 = require('./util/ObjectUnsubscribedError');\nvar SubjectSubscription_1 = require('./SubjectSubscription');\n/**\n * @class ReplaySubject<T>\n */\nvar ReplaySubject = (function (_super) {\n    __extends(ReplaySubject, _super);\n    function ReplaySubject(bufferSize, windowTime, scheduler) {\n        if (bufferSize === void 0) { bufferSize = Number.POSITIVE_INFINITY; }\n        if (windowTime === void 0) { windowTime = Number.POSITIVE_INFINITY; }\n        _super.call(this);\n        this.scheduler = scheduler;\n        this._events = [];\n        this._bufferSize = bufferSize < 1 ? 1 : bufferSize;\n        this._windowTime = windowTime < 1 ? 1 : windowTime;\n    }\n    ReplaySubject.prototype.next = function (value) {\n        var now = this._getNow();\n        this._events.push(new ReplayEvent(now, value));\n        this._trimBufferThenGetEvents();\n        _super.prototype.next.call(this, value);\n    };\n    ReplaySubject.prototype._subscribe = function (subscriber) {\n        var _events = this._trimBufferThenGetEvents();\n        var scheduler = this.scheduler;\n        var subscription;\n        if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        else if (this.hasError) {\n            subscription = Subscription_1.Subscription.EMPTY;\n        }\n        else if (this.isStopped) {\n            subscription = Subscription_1.Subscription.EMPTY;\n        }\n        else {\n            this.observers.push(subscriber);\n            subscription = new SubjectSubscription_1.SubjectSubscription(this, subscriber);\n        }\n        if (scheduler) {\n            subscriber.add(subscriber = new observeOn_1.ObserveOnSubscriber(subscriber, scheduler));\n        }\n        var len = _events.length;\n        for (var i = 0; i < len && !subscriber.closed; i++) {\n            subscriber.next(_events[i].value);\n        }\n        if (this.hasError) {\n            subscriber.error(this.thrownError);\n        }\n        else if (this.isStopped) {\n            subscriber.complete();\n        }\n        return subscription;\n    };\n    ReplaySubject.prototype._getNow = function () {\n        return (this.scheduler || queue_1.queue).now();\n    };\n    ReplaySubject.prototype._trimBufferThenGetEvents = function () {\n        var now = this._getNow();\n        var _bufferSize = this._bufferSize;\n        var _windowTime = this._windowTime;\n        var _events = this._events;\n        var eventsCount = _events.length;\n        var spliceCount = 0;\n        // Trim events that fall out of the time window.\n        // Start at the front of the list. Break early once\n        // we encounter an event that falls within the window.\n        while (spliceCount < eventsCount) {\n            if ((now - _events[spliceCount].time) < _windowTime) {\n                break;\n            }\n            spliceCount++;\n        }\n        if (eventsCount > _bufferSize) {\n            spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);\n        }\n        if (spliceCount > 0) {\n            _events.splice(0, spliceCount);\n        }\n        return _events;\n    };\n    return ReplaySubject;\n}(Subject_1.Subject));\nexports.ReplaySubject = ReplaySubject;\nvar ReplayEvent = (function () {\n    function ReplayEvent(time, value) {\n        this.time = time;\n        this.value = value;\n    }\n    return ReplayEvent;\n}());\n//# sourceMappingURL=ReplaySubject.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar ArrayObservable_1 = require('../observable/ArrayObservable');\nvar isArray_1 = require('../util/isArray');\nvar Subscriber_1 = require('../Subscriber');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nvar iterator_1 = require('../symbol/iterator');\n/* tslint:enable:max-line-length */\n/**\n * @param observables\n * @return {Observable<R>}\n * @method zip\n * @owner Observable\n */\nfunction zip() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    return function zipOperatorFunction(source) {\n        return source.lift.call(zipStatic.apply(void 0, [source].concat(observables)));\n    };\n}\nexports.zip = zip;\n/* tslint:enable:max-line-length */\n/**\n * Combines multiple Observables to create an Observable whose values are calculated from the values, in order, of each\n * of its input Observables.\n *\n * If the latest parameter is a function, this function is used to compute the created value from the input values.\n * Otherwise, an array of the input values is returned.\n *\n * @example <caption>Combine age and name from different sources</caption>\n *\n * let age$ = Observable.of<number>(27, 25, 29);\n * let name$ = Observable.of<string>('Foo', 'Bar', 'Beer');\n * let isDev$ = Observable.of<boolean>(true, true, false);\n *\n * Observable\n *     .zip(age$,\n *          name$,\n *          isDev$,\n *          (age: number, name: string, isDev: boolean) => ({ age, name, isDev }))\n *     .subscribe(x => console.log(x));\n *\n * // outputs\n * // { age: 27, name: 'Foo', isDev: true }\n * // { age: 25, name: 'Bar', isDev: true }\n * // { age: 29, name: 'Beer', isDev: false }\n *\n * @param observables\n * @return {Observable<R>}\n * @static true\n * @name zip\n * @owner Observable\n */\nfunction zipStatic() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    var project = observables[observables.length - 1];\n    if (typeof project === 'function') {\n        observables.pop();\n    }\n    return new ArrayObservable_1.ArrayObservable(observables).lift(new ZipOperator(project));\n}\nexports.zipStatic = zipStatic;\nvar ZipOperator = (function () {\n    function ZipOperator(project) {\n        this.project = project;\n    }\n    ZipOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ZipSubscriber(subscriber, this.project));\n    };\n    return ZipOperator;\n}());\nexports.ZipOperator = ZipOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ZipSubscriber = (function (_super) {\n    __extends(ZipSubscriber, _super);\n    function ZipSubscriber(destination, project, values) {\n        if (values === void 0) { values = Object.create(null); }\n        _super.call(this, destination);\n        this.iterators = [];\n        this.active = 0;\n        this.project = (typeof project === 'function') ? project : null;\n        this.values = values;\n    }\n    ZipSubscriber.prototype._next = function (value) {\n        var iterators = this.iterators;\n        if (isArray_1.isArray(value)) {\n            iterators.push(new StaticArrayIterator(value));\n        }\n        else if (typeof value[iterator_1.iterator] === 'function') {\n            iterators.push(new StaticIterator(value[iterator_1.iterator]()));\n        }\n        else {\n            iterators.push(new ZipBufferIterator(this.destination, this, value));\n        }\n    };\n    ZipSubscriber.prototype._complete = function () {\n        var iterators = this.iterators;\n        var len = iterators.length;\n        if (len === 0) {\n            this.destination.complete();\n            return;\n        }\n        this.active = len;\n        for (var i = 0; i < len; i++) {\n            var iterator = iterators[i];\n            if (iterator.stillUnsubscribed) {\n                this.add(iterator.subscribe(iterator, i));\n            }\n            else {\n                this.active--; // not an observable\n            }\n        }\n    };\n    ZipSubscriber.prototype.notifyInactive = function () {\n        this.active--;\n        if (this.active === 0) {\n            this.destination.complete();\n        }\n    };\n    ZipSubscriber.prototype.checkIterators = function () {\n        var iterators = this.iterators;\n        var len = iterators.length;\n        var destination = this.destination;\n        // abort if not all of them have values\n        for (var i = 0; i < len; i++) {\n            var iterator = iterators[i];\n            if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {\n                return;\n            }\n        }\n        var shouldComplete = false;\n        var args = [];\n        for (var i = 0; i < len; i++) {\n            var iterator = iterators[i];\n            var result = iterator.next();\n            // check to see if it's completed now that you've gotten\n            // the next value.\n            if (iterator.hasCompleted()) {\n                shouldComplete = true;\n            }\n            if (result.done) {\n                destination.complete();\n                return;\n            }\n            args.push(result.value);\n        }\n        if (this.project) {\n            this._tryProject(args);\n        }\n        else {\n            destination.next(args);\n        }\n        if (shouldComplete) {\n            destination.complete();\n        }\n    };\n    ZipSubscriber.prototype._tryProject = function (args) {\n        var result;\n        try {\n            result = this.project.apply(this, args);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return ZipSubscriber;\n}(Subscriber_1.Subscriber));\nexports.ZipSubscriber = ZipSubscriber;\nvar StaticIterator = (function () {\n    function StaticIterator(iterator) {\n        this.iterator = iterator;\n        this.nextResult = iterator.next();\n    }\n    StaticIterator.prototype.hasValue = function () {\n        return true;\n    };\n    StaticIterator.prototype.next = function () {\n        var result = this.nextResult;\n        this.nextResult = this.iterator.next();\n        return result;\n    };\n    StaticIterator.prototype.hasCompleted = function () {\n        var nextResult = this.nextResult;\n        return nextResult && nextResult.done;\n    };\n    return StaticIterator;\n}());\nvar StaticArrayIterator = (function () {\n    function StaticArrayIterator(array) {\n        this.array = array;\n        this.index = 0;\n        this.length = 0;\n        this.length = array.length;\n    }\n    StaticArrayIterator.prototype[iterator_1.iterator] = function () {\n        return this;\n    };\n    StaticArrayIterator.prototype.next = function (value) {\n        var i = this.index++;\n        var array = this.array;\n        return i < this.length ? { value: array[i], done: false } : { value: null, done: true };\n    };\n    StaticArrayIterator.prototype.hasValue = function () {\n        return this.array.length > this.index;\n    };\n    StaticArrayIterator.prototype.hasCompleted = function () {\n        return this.array.length === this.index;\n    };\n    return StaticArrayIterator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ZipBufferIterator = (function (_super) {\n    __extends(ZipBufferIterator, _super);\n    function ZipBufferIterator(destination, parent, observable) {\n        _super.call(this, destination);\n        this.parent = parent;\n        this.observable = observable;\n        this.stillUnsubscribed = true;\n        this.buffer = [];\n        this.isComplete = false;\n    }\n    ZipBufferIterator.prototype[iterator_1.iterator] = function () {\n        return this;\n    };\n    // NOTE: there is actually a name collision here with Subscriber.next and Iterator.next\n    //    this is legit because `next()` will never be called by a subscription in this case.\n    ZipBufferIterator.prototype.next = function () {\n        var buffer = this.buffer;\n        if (buffer.length === 0 && this.isComplete) {\n            return { value: null, done: true };\n        }\n        else {\n            return { value: buffer.shift(), done: false };\n        }\n    };\n    ZipBufferIterator.prototype.hasValue = function () {\n        return this.buffer.length > 0;\n    };\n    ZipBufferIterator.prototype.hasCompleted = function () {\n        return this.buffer.length === 0 && this.isComplete;\n    };\n    ZipBufferIterator.prototype.notifyComplete = function () {\n        if (this.buffer.length > 0) {\n            this.isComplete = true;\n            this.parent.notifyInactive();\n        }\n        else {\n            this.destination.complete();\n        }\n    };\n    ZipBufferIterator.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.buffer.push(innerValue);\n        this.parent.checkIterators();\n    };\n    ZipBufferIterator.prototype.subscribe = function (value, index) {\n        return subscribeToResult_1.subscribeToResult(this, this.observable, this, index);\n    };\n    return ZipBufferIterator;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=zip.js.map","\"use strict\";\nfunction isDate(value) {\n    return value instanceof Date && !isNaN(+value);\n}\nexports.isDate = isDate;\n//# sourceMappingURL=isDate.js.map","\"use strict\";\nvar Observable_1 = require('../Observable');\nvar ArrayObservable_1 = require('./ArrayObservable');\nvar isScheduler_1 = require('../util/isScheduler');\nvar mergeAll_1 = require('../operators/mergeAll');\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (as arguments), and simply\n * forwards (without doing any transformation) all the values from all the input\n * Observables to the output Observable. The output Observable only completes\n * once all input Observables have completed. Any error delivered by an input\n * Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = Rx.Observable.merge(clicks, timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // timer will emit ascending values, one every second(1000ms) to console\n * // clicks logs MouseEvents to console everytime the \"document\" is clicked\n * // Since the two streams are merged you see these happening\n * // as they occur.\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = Rx.Observable.merge(timer1, timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - First timer1 and timer2 will run concurrently\n * // - timer1 will emit a value every 1000ms for 10 iterations\n * // - timer2 will emit a value every 2000ms for 6 iterations\n * // - after timer1 hits it's max iteration, timer2 will\n * //   continue, and timer3 will start to run concurrently with timer2\n * // - when timer2 hits it's max iteration it terminates, and\n * //   timer3 will continue to emit a value every 500ms until it is complete\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {...ObservableInput} observables Input Observables to merge together.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @static true\n * @name merge\n * @owner Observable\n */\nfunction merge() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    var concurrent = Number.POSITIVE_INFINITY;\n    var scheduler = null;\n    var last = observables[observables.length - 1];\n    if (isScheduler_1.isScheduler(last)) {\n        scheduler = observables.pop();\n        if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {\n            concurrent = observables.pop();\n        }\n    }\n    else if (typeof last === 'number') {\n        concurrent = observables.pop();\n    }\n    if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable_1.Observable) {\n        return observables[0];\n    }\n    return mergeAll_1.mergeAll(concurrent)(new ArrayObservable_1.ArrayObservable(observables, scheduler));\n}\nexports.merge = merge;\n//# sourceMappingURL=merge.js.map","\"use strict\";\nvar mergeMap_1 = require('./mergeMap');\nvar identity_1 = require('../util/identity');\n/**\n * Converts a higher-order Observable into a first-order Observable which\n * concurrently delivers all values that are emitted on the inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n *\n * <img src=\"./img/mergeAll.png\" width=\"100%\">\n *\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\n * a higher-order Observable. Each time it observes one of these emitted inner\n * Observables, it subscribes to that and delivers all the values from the\n * inner Observable on the output Observable. The output Observable only\n * completes once all inner Observables have completed. Any error delivered by\n * a inner Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var firstOrder = higherOrder.mergeAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));\n * var firstOrder = higherOrder.mergeAll(2);\n * firstOrder.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link merge}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits values coming from all the\n * inner Observables emitted by the source Observable.\n * @method mergeAll\n * @owner Observable\n */\nfunction mergeAll(concurrent) {\n    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n    return mergeMap_1.mergeMap(identity_1.identity, null, concurrent);\n}\nexports.mergeAll = mergeAll;\n//# sourceMappingURL=mergeAll.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar Notification_1 = require('../Notification');\n/**\n *\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>\n * const intervals = Rx.Observable.interval(10); // Intervals are scheduled\n *                                               // with async scheduler by default...\n *\n * intervals\n * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame\n * .subscribe(val => {                           // scheduler to ensure smooth animation.\n *   someDiv.style.height = val + 'px';\n * });\n *\n * @see {@link delay}\n *\n * @param {IScheduler} scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return {Observable<T>} Observable that emits the same notifications as the source Observable,\n * but with provided scheduler.\n *\n * @method observeOn\n * @owner Observable\n */\nfunction observeOn(scheduler, delay) {\n    if (delay === void 0) { delay = 0; }\n    return function observeOnOperatorFunction(source) {\n        return source.lift(new ObserveOnOperator(scheduler, delay));\n    };\n}\nexports.observeOn = observeOn;\nvar ObserveOnOperator = (function () {\n    function ObserveOnOperator(scheduler, delay) {\n        if (delay === void 0) { delay = 0; }\n        this.scheduler = scheduler;\n        this.delay = delay;\n    }\n    ObserveOnOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n    };\n    return ObserveOnOperator;\n}());\nexports.ObserveOnOperator = ObserveOnOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ObserveOnSubscriber = (function (_super) {\n    __extends(ObserveOnSubscriber, _super);\n    function ObserveOnSubscriber(destination, scheduler, delay) {\n        if (delay === void 0) { delay = 0; }\n        _super.call(this, destination);\n        this.scheduler = scheduler;\n        this.delay = delay;\n    }\n    ObserveOnSubscriber.dispatch = function (arg) {\n        var notification = arg.notification, destination = arg.destination;\n        notification.observe(destination);\n        this.unsubscribe();\n    };\n    ObserveOnSubscriber.prototype.scheduleMessage = function (notification) {\n        this.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(notification, this.destination)));\n    };\n    ObserveOnSubscriber.prototype._next = function (value) {\n        this.scheduleMessage(Notification_1.Notification.createNext(value));\n    };\n    ObserveOnSubscriber.prototype._error = function (err) {\n        this.scheduleMessage(Notification_1.Notification.createError(err));\n    };\n    ObserveOnSubscriber.prototype._complete = function () {\n        this.scheduleMessage(Notification_1.Notification.createComplete());\n    };\n    return ObserveOnSubscriber;\n}(Subscriber_1.Subscriber));\nexports.ObserveOnSubscriber = ObserveOnSubscriber;\nvar ObserveOnMessage = (function () {\n    function ObserveOnMessage(notification, destination) {\n        this.notification = notification;\n        this.destination = destination;\n    }\n    return ObserveOnMessage;\n}());\nexports.ObserveOnMessage = ObserveOnMessage;\n//# sourceMappingURL=observeOn.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar ArrayObservable_1 = require('../observable/ArrayObservable');\nvar isArray_1 = require('../util/isArray');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nvar none = {};\n/* tslint:enable:max-line-length */\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from this Observable with values from\n * Observables passed as arguments. This is done by subscribing to each\n * Observable, in order, and collecting an array of each of the most recent\n * values any time any of the input Observables emits, then either taking that\n * array and passing it as arguments to an optional `project` function and\n * emitting the return value of that, or just emitting the array of recent\n * values directly if there is no `project` function.\n *\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = weight.combineLatest(height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method combineLatest\n * @owner Observable\n */\nfunction combineLatest() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    var project = null;\n    if (typeof observables[observables.length - 1] === 'function') {\n        project = observables.pop();\n    }\n    // if the first and only other argument besides the resultSelector is an array\n    // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n    if (observables.length === 1 && isArray_1.isArray(observables[0])) {\n        observables = observables[0].slice();\n    }\n    return function (source) { return source.lift.call(new ArrayObservable_1.ArrayObservable([source].concat(observables)), new CombineLatestOperator(project)); };\n}\nexports.combineLatest = combineLatest;\nvar CombineLatestOperator = (function () {\n    function CombineLatestOperator(project) {\n        this.project = project;\n    }\n    CombineLatestOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new CombineLatestSubscriber(subscriber, this.project));\n    };\n    return CombineLatestOperator;\n}());\nexports.CombineLatestOperator = CombineLatestOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar CombineLatestSubscriber = (function (_super) {\n    __extends(CombineLatestSubscriber, _super);\n    function CombineLatestSubscriber(destination, project) {\n        _super.call(this, destination);\n        this.project = project;\n        this.active = 0;\n        this.values = [];\n        this.observables = [];\n    }\n    CombineLatestSubscriber.prototype._next = function (observable) {\n        this.values.push(none);\n        this.observables.push(observable);\n    };\n    CombineLatestSubscriber.prototype._complete = function () {\n        var observables = this.observables;\n        var len = observables.length;\n        if (len === 0) {\n            this.destination.complete();\n        }\n        else {\n            this.active = len;\n            this.toRespond = len;\n            for (var i = 0; i < len; i++) {\n                var observable = observables[i];\n                this.add(subscribeToResult_1.subscribeToResult(this, observable, observable, i));\n            }\n        }\n    };\n    CombineLatestSubscriber.prototype.notifyComplete = function (unused) {\n        if ((this.active -= 1) === 0) {\n            this.destination.complete();\n        }\n    };\n    CombineLatestSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var values = this.values;\n        var oldVal = values[outerIndex];\n        var toRespond = !this.toRespond\n            ? 0\n            : oldVal === none ? --this.toRespond : this.toRespond;\n        values[outerIndex] = innerValue;\n        if (toRespond === 0) {\n            if (this.project) {\n                this._tryProject(values);\n            }\n            else {\n                this.destination.next(values.slice());\n            }\n        }\n    };\n    CombineLatestSubscriber.prototype._tryProject = function (values) {\n        var result;\n        try {\n            result = this.project.apply(this, values);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return CombineLatestSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\nexports.CombineLatestSubscriber = CombineLatestSubscriber;\n//# sourceMappingURL=combineLatest.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subject_1 = require('./Subject');\nvar Subscription_1 = require('./Subscription');\n/**\n * @class AsyncSubject<T>\n */\nvar AsyncSubject = (function (_super) {\n    __extends(AsyncSubject, _super);\n    function AsyncSubject() {\n        _super.apply(this, arguments);\n        this.value = null;\n        this.hasNext = false;\n        this.hasCompleted = false;\n    }\n    AsyncSubject.prototype._subscribe = function (subscriber) {\n        if (this.hasError) {\n            subscriber.error(this.thrownError);\n            return Subscription_1.Subscription.EMPTY;\n        }\n        else if (this.hasCompleted && this.hasNext) {\n            subscriber.next(this.value);\n            subscriber.complete();\n            return Subscription_1.Subscription.EMPTY;\n        }\n        return _super.prototype._subscribe.call(this, subscriber);\n    };\n    AsyncSubject.prototype.next = function (value) {\n        if (!this.hasCompleted) {\n            this.value = value;\n            this.hasNext = true;\n        }\n    };\n    AsyncSubject.prototype.error = function (error) {\n        if (!this.hasCompleted) {\n            _super.prototype.error.call(this, error);\n        }\n    };\n    AsyncSubject.prototype.complete = function () {\n        this.hasCompleted = true;\n        if (this.hasNext) {\n            _super.prototype.next.call(this, this.value);\n        }\n        _super.prototype.complete.call(this);\n    };\n    return AsyncSubject;\n}(Subject_1.Subject));\nexports.AsyncSubject = AsyncSubject;\n//# sourceMappingURL=AsyncSubject.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nvar ObjectUnsubscribedError = (function (_super) {\n    __extends(ObjectUnsubscribedError, _super);\n    function ObjectUnsubscribedError() {\n        var err = _super.call(this, 'object unsubscribed');\n        this.name = err.name = 'ObjectUnsubscribedError';\n        this.stack = err.stack;\n        this.message = err.message;\n    }\n    return ObjectUnsubscribedError;\n}(Error));\nexports.ObjectUnsubscribedError = ObjectUnsubscribedError;\n//# sourceMappingURL=ObjectUnsubscribedError.js.map","\"use strict\";\nvar root_1 = require('../util/root');\nfunction getSymbolObservable(context) {\n    var $$observable;\n    var Symbol = context.Symbol;\n    if (typeof Symbol === 'function') {\n        if (Symbol.observable) {\n            $$observable = Symbol.observable;\n        }\n        else {\n            $$observable = Symbol('observable');\n            Symbol.observable = $$observable;\n        }\n    }\n    else {\n        $$observable = '@@observable';\n    }\n    return $$observable;\n}\nexports.getSymbolObservable = getSymbolObservable;\nexports.observable = getSymbolObservable(root_1.root);\n/**\n * @deprecated use observable instead\n */\nexports.$$observable = exports.observable;\n//# sourceMappingURL=observable.js.map","\"use strict\";\nvar root_1 = require('../util/root');\nvar Symbol = root_1.root.Symbol;\nexports.rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?\n    Symbol.for('rxSubscriber') : '@@rxSubscriber';\n/**\n * @deprecated use rxSubscriber instead\n */\nexports.$$rxSubscriber = exports.rxSubscriber;\n//# sourceMappingURL=rxSubscriber.js.map","\"use strict\";\nfunction isFunction(x) {\n    return typeof x === 'function';\n}\nexports.isFunction = isFunction;\n//# sourceMappingURL=isFunction.js.map","\"use strict\";\nvar async_1 = require('../scheduler/async');\nvar map_1 = require('./map');\n/**\n * @param scheduler\n * @return {Observable<Timestamp<any>>|WebSocketSubject<T>|Observable<T>}\n * @method timestamp\n * @owner Observable\n */\nfunction timestamp(scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return map_1.map(function (value) { return new Timestamp(value, scheduler.now()); });\n    // return (source: Observable<T>) => source.lift(new TimestampOperator(scheduler));\n}\nexports.timestamp = timestamp;\nvar Timestamp = (function () {\n    function Timestamp(value, timestamp) {\n        this.value = value;\n        this.timestamp = timestamp;\n    }\n    return Timestamp;\n}());\nexports.Timestamp = Timestamp;\n;\n//# sourceMappingURL=timestamp.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link switch}.</span>\n *\n * <img src=\"./img/switchMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switch}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking only the values from the most recently\n * projected inner Observable.\n * @method switchMap\n * @owner Observable\n */\nfunction switchMap(project, resultSelector) {\n    return function switchMapOperatorFunction(source) {\n        return source.lift(new SwitchMapOperator(project, resultSelector));\n    };\n}\nexports.switchMap = switchMap;\nvar SwitchMapOperator = (function () {\n    function SwitchMapOperator(project, resultSelector) {\n        this.project = project;\n        this.resultSelector = resultSelector;\n    }\n    SwitchMapOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SwitchMapSubscriber(subscriber, this.project, this.resultSelector));\n    };\n    return SwitchMapOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SwitchMapSubscriber = (function (_super) {\n    __extends(SwitchMapSubscriber, _super);\n    function SwitchMapSubscriber(destination, project, resultSelector) {\n        _super.call(this, destination);\n        this.project = project;\n        this.resultSelector = resultSelector;\n        this.index = 0;\n    }\n    SwitchMapSubscriber.prototype._next = function (value) {\n        var result;\n        var index = this.index++;\n        try {\n            result = this.project(value, index);\n        }\n        catch (error) {\n            this.destination.error(error);\n            return;\n        }\n        this._innerSub(result, value, index);\n    };\n    SwitchMapSubscriber.prototype._innerSub = function (result, value, index) {\n        var innerSubscription = this.innerSubscription;\n        if (innerSubscription) {\n            innerSubscription.unsubscribe();\n        }\n        this.add(this.innerSubscription = subscribeToResult_1.subscribeToResult(this, result, value, index));\n    };\n    SwitchMapSubscriber.prototype._complete = function () {\n        var innerSubscription = this.innerSubscription;\n        if (!innerSubscription || innerSubscription.closed) {\n            _super.prototype._complete.call(this);\n        }\n    };\n    SwitchMapSubscriber.prototype._unsubscribe = function () {\n        this.innerSubscription = null;\n    };\n    SwitchMapSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.remove(innerSub);\n        this.innerSubscription = null;\n        if (this.isStopped) {\n            _super.prototype._complete.call(this);\n        }\n    };\n    SwitchMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        if (this.resultSelector) {\n            this._tryNotifyNext(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        else {\n            this.destination.next(innerValue);\n        }\n    };\n    SwitchMapSubscriber.prototype._tryNotifyNext = function (outerValue, innerValue, outerIndex, innerIndex) {\n        var result;\n        try {\n            result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return SwitchMapSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=switchMap.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nfunction refCount() {\n    return function refCountOperatorFunction(source) {\n        return source.lift(new RefCountOperator(source));\n    };\n}\nexports.refCount = refCount;\nvar RefCountOperator = (function () {\n    function RefCountOperator(connectable) {\n        this.connectable = connectable;\n    }\n    RefCountOperator.prototype.call = function (subscriber, source) {\n        var connectable = this.connectable;\n        connectable._refCount++;\n        var refCounter = new RefCountSubscriber(subscriber, connectable);\n        var subscription = source.subscribe(refCounter);\n        if (!refCounter.closed) {\n            refCounter.connection = connectable.connect();\n        }\n        return subscription;\n    };\n    return RefCountOperator;\n}());\nvar RefCountSubscriber = (function (_super) {\n    __extends(RefCountSubscriber, _super);\n    function RefCountSubscriber(destination, connectable) {\n        _super.call(this, destination);\n        this.connectable = connectable;\n    }\n    RefCountSubscriber.prototype._unsubscribe = function () {\n        var connectable = this.connectable;\n        if (!connectable) {\n            this.connection = null;\n            return;\n        }\n        this.connectable = null;\n        var refCount = connectable._refCount;\n        if (refCount <= 0) {\n            this.connection = null;\n            return;\n        }\n        connectable._refCount = refCount - 1;\n        if (refCount > 1) {\n            this.connection = null;\n            return;\n        }\n        ///\n        // Compare the local RefCountSubscriber's connection Subscription to the\n        // connection Subscription on the shared ConnectableObservable. In cases\n        // where the ConnectableObservable source synchronously emits values, and\n        // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n        // execution continues to here before the RefCountOperator has a chance to\n        // supply the RefCountSubscriber with the shared connection Subscription.\n        // For example:\n        // ```\n        // Observable.range(0, 10)\n        //   .publish()\n        //   .refCount()\n        //   .take(5)\n        //   .subscribe();\n        // ```\n        // In order to account for this case, RefCountSubscriber should only dispose\n        // the ConnectableObservable's shared connection Subscription if the\n        // connection Subscription exists, *and* either:\n        //   a. RefCountSubscriber doesn't have a reference to the shared connection\n        //      Subscription yet, or,\n        //   b. RefCountSubscriber's connection Subscription reference is identical\n        //      to the shared connection Subscription\n        ///\n        var connection = this.connection;\n        var sharedConnection = connectable._connection;\n        this.connection = null;\n        if (sharedConnection && (!connection || sharedConnection === connection)) {\n            sharedConnection.unsubscribe();\n        }\n    };\n    return RefCountSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=refCount.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar ArgumentOutOfRangeError_1 = require('../util/ArgumentOutOfRangeError');\nvar EmptyObservable_1 = require('../observable/EmptyObservable');\n/**\n * Emits only the last `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Remembers the latest `count` values, then emits those\n * only when the source completes.</span>\n *\n * <img src=\"./img/takeLast.png\" width=\"100%\">\n *\n * `takeLast` returns an Observable that emits at most the last `count` values\n * emitted by the source Observable. If the source emits fewer than `count`\n * values then all of its values are emitted. This operator must wait until the\n * `complete` notification emission from the source in order to emit the `next`\n * values on the output Observable, because otherwise it is impossible to know\n * whether or not more values will be emitted on the source. For this reason,\n * all values are emitted synchronously, followed by the complete notification.\n *\n * @example <caption>Take the last 3 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 100);\n * var lastThree = many.takeLast(3);\n * lastThree.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of values to emit from the end of\n * the sequence of values emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits at most the last count\n * values emitted by the source Observable.\n * @method takeLast\n * @owner Observable\n */\nfunction takeLast(count) {\n    return function takeLastOperatorFunction(source) {\n        if (count === 0) {\n            return new EmptyObservable_1.EmptyObservable();\n        }\n        else {\n            return source.lift(new TakeLastOperator(count));\n        }\n    };\n}\nexports.takeLast = takeLast;\nvar TakeLastOperator = (function () {\n    function TakeLastOperator(total) {\n        this.total = total;\n        if (this.total < 0) {\n            throw new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError;\n        }\n    }\n    TakeLastOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TakeLastSubscriber(subscriber, this.total));\n    };\n    return TakeLastOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TakeLastSubscriber = (function (_super) {\n    __extends(TakeLastSubscriber, _super);\n    function TakeLastSubscriber(destination, total) {\n        _super.call(this, destination);\n        this.total = total;\n        this.ring = new Array();\n        this.count = 0;\n    }\n    TakeLastSubscriber.prototype._next = function (value) {\n        var ring = this.ring;\n        var total = this.total;\n        var count = this.count++;\n        if (ring.length < total) {\n            ring.push(value);\n        }\n        else {\n            var index = count % total;\n            ring[index] = value;\n        }\n    };\n    TakeLastSubscriber.prototype._complete = function () {\n        var destination = this.destination;\n        var count = this.count;\n        if (count > 0) {\n            var total = this.count >= this.total ? this.total : this.count;\n            var ring = this.ring;\n            for (var i = 0; i < total; i++) {\n                var idx = (count++) % total;\n                destination.next(ring[idx]);\n            }\n        }\n        destination.complete();\n    };\n    return TakeLastSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=takeLast.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/* tslint:enable:max-line-length */\n/**\n * Applies an accumulator function over the source Observable, and returns each\n * intermediate result, with an optional seed value.\n *\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\n * accumulation whenever the source emits a value.</span>\n *\n * <img src=\"./img/scan.png\" width=\"100%\">\n *\n * Combines together all values emitted on the source, using an accumulator\n * function that knows how to join a new source value into the accumulation from\n * the past. Is similar to {@link reduce}, but emits the intermediate\n * accumulations.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var ones = clicks.mapTo(1);\n * var seed = 0;\n * var count = ones.scan((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link reduce}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator\n * The accumulator function called on each source value.\n * @param {T|R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method scan\n * @owner Observable\n */\nfunction scan(accumulator, seed) {\n    var hasSeed = false;\n    // providing a seed of `undefined` *should* be valid and trigger\n    // hasSeed! so don't use `seed !== undefined` checks!\n    // For this reason, we have to check it here at the original call site\n    // otherwise inside Operator/Subscriber we won't know if `undefined`\n    // means they didn't provide anything or if they literally provided `undefined`\n    if (arguments.length >= 2) {\n        hasSeed = true;\n    }\n    return function scanOperatorFunction(source) {\n        return source.lift(new ScanOperator(accumulator, seed, hasSeed));\n    };\n}\nexports.scan = scan;\nvar ScanOperator = (function () {\n    function ScanOperator(accumulator, seed, hasSeed) {\n        if (hasSeed === void 0) { hasSeed = false; }\n        this.accumulator = accumulator;\n        this.seed = seed;\n        this.hasSeed = hasSeed;\n    }\n    ScanOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));\n    };\n    return ScanOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ScanSubscriber = (function (_super) {\n    __extends(ScanSubscriber, _super);\n    function ScanSubscriber(destination, accumulator, _seed, hasSeed) {\n        _super.call(this, destination);\n        this.accumulator = accumulator;\n        this._seed = _seed;\n        this.hasSeed = hasSeed;\n        this.index = 0;\n    }\n    Object.defineProperty(ScanSubscriber.prototype, \"seed\", {\n        get: function () {\n            return this._seed;\n        },\n        set: function (value) {\n            this.hasSeed = true;\n            this._seed = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ScanSubscriber.prototype._next = function (value) {\n        if (!this.hasSeed) {\n            this.seed = value;\n            this.destination.next(value);\n        }\n        else {\n            return this._tryNext(value);\n        }\n    };\n    ScanSubscriber.prototype._tryNext = function (value) {\n        var index = this.index++;\n        var result;\n        try {\n            result = this.accumulator(this.seed, value, index);\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n        this.seed = result;\n        this.destination.next(result);\n    };\n    return ScanSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=scan.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Ignores source values for a duration determined by another Observable, then\n * emits the most recent value from the source Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link auditTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/audit.png\" width=\"100%\">\n *\n * `audit` is similar to `throttle`, but emits the last value from the silenced\n * time window, instead of the first value. `audit` emits the most recent value\n * from the source Observable on the output Observable as soon as its internal\n * timer becomes disabled, and ignores source values while the timer is enabled.\n * Initially, the timer is disabled. As soon as the first source value arrives,\n * the timer is enabled by calling the `durationSelector` function with the\n * source value, which returns the \"duration\" Observable. When the duration\n * Observable emits a value or completes, the timer is disabled, then the most\n * recent source value is emitted on the output Observable, and this process\n * repeats for the next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.audit(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method audit\n * @owner Observable\n */\nfunction audit(durationSelector) {\n    return function auditOperatorFunction(source) {\n        return source.lift(new AuditOperator(durationSelector));\n    };\n}\nexports.audit = audit;\nvar AuditOperator = (function () {\n    function AuditOperator(durationSelector) {\n        this.durationSelector = durationSelector;\n    }\n    AuditOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new AuditSubscriber(subscriber, this.durationSelector));\n    };\n    return AuditOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar AuditSubscriber = (function (_super) {\n    __extends(AuditSubscriber, _super);\n    function AuditSubscriber(destination, durationSelector) {\n        _super.call(this, destination);\n        this.durationSelector = durationSelector;\n        this.hasValue = false;\n    }\n    AuditSubscriber.prototype._next = function (value) {\n        this.value = value;\n        this.hasValue = true;\n        if (!this.throttled) {\n            var duration = tryCatch_1.tryCatch(this.durationSelector)(value);\n            if (duration === errorObject_1.errorObject) {\n                this.destination.error(errorObject_1.errorObject.e);\n            }\n            else {\n                var innerSubscription = subscribeToResult_1.subscribeToResult(this, duration);\n                if (innerSubscription.closed) {\n                    this.clearThrottle();\n                }\n                else {\n                    this.add(this.throttled = innerSubscription);\n                }\n            }\n        }\n    };\n    AuditSubscriber.prototype.clearThrottle = function () {\n        var _a = this, value = _a.value, hasValue = _a.hasValue, throttled = _a.throttled;\n        if (throttled) {\n            this.remove(throttled);\n            this.throttled = null;\n            throttled.unsubscribe();\n        }\n        if (hasValue) {\n            this.value = null;\n            this.hasValue = false;\n            this.destination.next(value);\n        }\n    };\n    AuditSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex) {\n        this.clearThrottle();\n    };\n    AuditSubscriber.prototype.notifyComplete = function () {\n        this.clearThrottle();\n    };\n    return AuditSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=audit.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Emits only the first value emitted by the source Observable that meets some\n * condition.\n *\n * <span class=\"informal\">Finds the first value that passes some test and emits\n * that.</span>\n *\n * <img src=\"./img/find.png\" width=\"100%\">\n *\n * `find` searches for the first item in the source Observable that matches the\n * specified condition embodied by the `predicate`, and returns the first\n * occurrence in the source. Unlike {@link first}, the `predicate` is required\n * in `find`, and does not emit an error if a valid value is not found.\n *\n * @example <caption>Find and emit the first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.find(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link first}\n * @see {@link findIndex}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable<T>} An Observable of the first item that matches the\n * condition.\n * @method find\n * @owner Observable\n */\nfunction find(predicate, thisArg) {\n    if (typeof predicate !== 'function') {\n        throw new TypeError('predicate is not a function');\n    }\n    return function (source) { return source.lift(new FindValueOperator(predicate, source, false, thisArg)); };\n}\nexports.find = find;\nvar FindValueOperator = (function () {\n    function FindValueOperator(predicate, source, yieldIndex, thisArg) {\n        this.predicate = predicate;\n        this.source = source;\n        this.yieldIndex = yieldIndex;\n        this.thisArg = thisArg;\n    }\n    FindValueOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new FindValueSubscriber(observer, this.predicate, this.source, this.yieldIndex, this.thisArg));\n    };\n    return FindValueOperator;\n}());\nexports.FindValueOperator = FindValueOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar FindValueSubscriber = (function (_super) {\n    __extends(FindValueSubscriber, _super);\n    function FindValueSubscriber(destination, predicate, source, yieldIndex, thisArg) {\n        _super.call(this, destination);\n        this.predicate = predicate;\n        this.source = source;\n        this.yieldIndex = yieldIndex;\n        this.thisArg = thisArg;\n        this.index = 0;\n    }\n    FindValueSubscriber.prototype.notifyComplete = function (value) {\n        var destination = this.destination;\n        destination.next(value);\n        destination.complete();\n    };\n    FindValueSubscriber.prototype._next = function (value) {\n        var _a = this, predicate = _a.predicate, thisArg = _a.thisArg;\n        var index = this.index++;\n        try {\n            var result = predicate.call(thisArg || this, value, index, this.source);\n            if (result) {\n                this.notifyComplete(this.yieldIndex ? index : value);\n            }\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    };\n    FindValueSubscriber.prototype._complete = function () {\n        this.notifyComplete(this.yieldIndex ? -1 : undefined);\n    };\n    return FindValueSubscriber;\n}(Subscriber_1.Subscriber));\nexports.FindValueSubscriber = FindValueSubscriber;\n//# sourceMappingURL=find.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/* tslint:enable:max-line-length */\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * <img src=\"./img/filter.png\" width=\"100%\">\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * @example <caption>Emit only click events whose target was a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');\n * clicksOnDivs.subscribe(x => console.log(x));\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of values from the source that were\n * allowed by the `predicate` function.\n * @method filter\n * @owner Observable\n */\nfunction filter(predicate, thisArg) {\n    return function filterOperatorFunction(source) {\n        return source.lift(new FilterOperator(predicate, thisArg));\n    };\n}\nexports.filter = filter;\nvar FilterOperator = (function () {\n    function FilterOperator(predicate, thisArg) {\n        this.predicate = predicate;\n        this.thisArg = thisArg;\n    }\n    FilterOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));\n    };\n    return FilterOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar FilterSubscriber = (function (_super) {\n    __extends(FilterSubscriber, _super);\n    function FilterSubscriber(destination, predicate, thisArg) {\n        _super.call(this, destination);\n        this.predicate = predicate;\n        this.thisArg = thisArg;\n        this.count = 0;\n    }\n    // the try catch block below is left specifically for\n    // optimization and perf reasons. a tryCatcher is not necessary here.\n    FilterSubscriber.prototype._next = function (value) {\n        var result;\n        try {\n            result = this.predicate.call(this.thisArg, value, this.count++);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        if (result) {\n            this.destination.next(value);\n        }\n    };\n    return FilterSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=filter.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 1, 2, 3, 3, 4)\n *   .distinctUntilChanged()\n *   .subscribe(x => console.log(x)); // 1, 2, 1, 2, 3, 4\n *\n * @example <caption>An example using a compare function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilChanged((p: Person, q: Person) => p.name === q.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinctUntilChanged\n * @owner Observable\n */\nfunction distinctUntilChanged(compare, keySelector) {\n    return function (source) { return source.lift(new DistinctUntilChangedOperator(compare, keySelector)); };\n}\nexports.distinctUntilChanged = distinctUntilChanged;\nvar DistinctUntilChangedOperator = (function () {\n    function DistinctUntilChangedOperator(compare, keySelector) {\n        this.compare = compare;\n        this.keySelector = keySelector;\n    }\n    DistinctUntilChangedOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));\n    };\n    return DistinctUntilChangedOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DistinctUntilChangedSubscriber = (function (_super) {\n    __extends(DistinctUntilChangedSubscriber, _super);\n    function DistinctUntilChangedSubscriber(destination, compare, keySelector) {\n        _super.call(this, destination);\n        this.keySelector = keySelector;\n        this.hasKey = false;\n        if (typeof compare === 'function') {\n            this.compare = compare;\n        }\n    }\n    DistinctUntilChangedSubscriber.prototype.compare = function (x, y) {\n        return x === y;\n    };\n    DistinctUntilChangedSubscriber.prototype._next = function (value) {\n        var keySelector = this.keySelector;\n        var key = value;\n        if (keySelector) {\n            key = tryCatch_1.tryCatch(this.keySelector)(value);\n            if (key === errorObject_1.errorObject) {\n                return this.destination.error(errorObject_1.errorObject.e);\n            }\n        }\n        var result = false;\n        if (this.hasKey) {\n            result = tryCatch_1.tryCatch(this.compare)(this.key, key);\n            if (result === errorObject_1.errorObject) {\n                return this.destination.error(errorObject_1.errorObject.e);\n            }\n        }\n        else {\n            this.hasKey = true;\n        }\n        if (Boolean(result) === false) {\n            this.key = key;\n            this.destination.next(value);\n        }\n    };\n    return DistinctUntilChangedSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=distinctUntilChanged.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/* tslint:enable:max-line-length */\n/**\n * Emits a given value if the source Observable completes without emitting any\n * `next` value, otherwise mirrors the source Observable.\n *\n * <span class=\"informal\">If the source Observable turns out to be empty, then\n * this operator will emit a default value.</span>\n *\n * <img src=\"./img/defaultIfEmpty.png\" width=\"100%\">\n *\n * `defaultIfEmpty` emits the values emitted by the source Observable or a\n * specified default value if the source Observable is empty (completes without\n * having emitted any `next` value).\n *\n * @example <caption>If no clicks happen in 5 seconds, then emit \"no clicks\"</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksBeforeFive = clicks.takeUntil(Rx.Observable.interval(5000));\n * var result = clicksBeforeFive.defaultIfEmpty('no clicks');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link empty}\n * @see {@link last}\n *\n * @param {any} [defaultValue=null] The default value used if the source\n * Observable is empty.\n * @return {Observable} An Observable that emits either the specified\n * `defaultValue` if the source Observable emits no items, or the values emitted\n * by the source Observable.\n * @method defaultIfEmpty\n * @owner Observable\n */\nfunction defaultIfEmpty(defaultValue) {\n    if (defaultValue === void 0) { defaultValue = null; }\n    return function (source) { return source.lift(new DefaultIfEmptyOperator(defaultValue)); };\n}\nexports.defaultIfEmpty = defaultIfEmpty;\nvar DefaultIfEmptyOperator = (function () {\n    function DefaultIfEmptyOperator(defaultValue) {\n        this.defaultValue = defaultValue;\n    }\n    DefaultIfEmptyOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));\n    };\n    return DefaultIfEmptyOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DefaultIfEmptySubscriber = (function (_super) {\n    __extends(DefaultIfEmptySubscriber, _super);\n    function DefaultIfEmptySubscriber(destination, defaultValue) {\n        _super.call(this, destination);\n        this.defaultValue = defaultValue;\n        this.isEmpty = true;\n    }\n    DefaultIfEmptySubscriber.prototype._next = function (value) {\n        this.isEmpty = false;\n        this.destination.next(value);\n    };\n    DefaultIfEmptySubscriber.prototype._complete = function () {\n        if (this.isEmpty) {\n            this.destination.next(this.defaultValue);\n        }\n        this.destination.complete();\n    };\n    return DefaultIfEmptySubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=defaultIfEmpty.js.map","\"use strict\";\nvar mergeMap_1 = require('./mergeMap');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, in a serialized fashion waiting for each one to complete before\n * merging the next.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link concatAll}.</span>\n *\n * <img src=\"./img/concatMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each new inner Observable is\n * concatenated with the previous inner Observable.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMap(ev => Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMapTo}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking values from each projected inner\n * Observable sequentially.\n * @method concatMap\n * @owner Observable\n */\nfunction concatMap(project, resultSelector) {\n    return mergeMap_1.mergeMap(project, resultSelector, 1);\n}\nexports.concatMap = concatMap;\n//# sourceMappingURL=concatMap.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar FromObservable_1 = require('../observable/FromObservable');\nvar isArray_1 = require('../util/isArray');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/* tslint:enable:max-line-length */\n/**\n * When any of the provided Observable emits an complete or error notification, it immediately subscribes to the next one\n * that was passed.\n *\n * <span class=\"informal\">Execute series of Observables no matter what, even if it means swallowing errors.</span>\n *\n * <img src=\"./img/onErrorResumeNext.png\" width=\"100%\">\n *\n * `onErrorResumeNext` is an operator that accepts a series of Observables, provided either directly as\n * arguments or as an array. If no single Observable is provided, returned Observable will simply behave the same\n * as the source.\n *\n * `onErrorResumeNext` returns an Observable that starts by subscribing and re-emitting values from the source Observable.\n * When its stream of values ends - no matter if Observable completed or emitted an error - `onErrorResumeNext`\n * will subscribe to the first Observable that was passed as an argument to the method. It will start re-emitting\n * its values as well and - again - when that stream ends, `onErrorResumeNext` will proceed to subscribing yet another\n * Observable in provided series, no matter if previous Observable completed or ended with an error. This will\n * be happening until there is no more Observables left in the series, at which point returned Observable will\n * complete - even if the last subscribed stream ended with an error.\n *\n * `onErrorResumeNext` can be therefore thought of as version of {@link concat} operator, which is more permissive\n * when it comes to the errors emitted by its input Observables. While `concat` subscribes to the next Observable\n * in series only if previous one successfully completed, `onErrorResumeNext` subscribes even if it ended with\n * an error.\n *\n * Note that you do not get any access to errors emitted by the Observables. In particular do not\n * expect these errors to appear in error callback passed to {@link subscribe}. If you want to take\n * specific actions based on what error was emitted by an Observable, you should try out {@link catch} instead.\n *\n *\n * @example <caption>Subscribe to the next Observable after map fails</caption>\n * Rx.Observable.of(1, 2, 3, 0)\n *   .map(x => {\n *       if (x === 0) { throw Error(); }\n         return 10 / x;\n *   })\n *   .onErrorResumeNext(Rx.Observable.of(1, 2, 3))\n *   .subscribe(\n *     val => console.log(val),\n *     err => console.log(err),          // Will never be called.\n *     () => console.log('that\\'s it!')\n *   );\n *\n * // Logs:\n * // 10\n * // 5\n * // 3.3333333333333335\n * // 1\n * // 2\n * // 3\n * // \"that's it!\"\n *\n * @see {@link concat}\n * @see {@link catch}\n *\n * @param {...ObservableInput} observables Observables passed either directly or as an array.\n * @return {Observable} An Observable that emits values from source Observable, but - if it errors - subscribes\n * to the next passed Observable and so on, until it completes or runs out of Observables.\n * @method onErrorResumeNext\n * @owner Observable\n */\nfunction onErrorResumeNext() {\n    var nextSources = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        nextSources[_i - 0] = arguments[_i];\n    }\n    if (nextSources.length === 1 && isArray_1.isArray(nextSources[0])) {\n        nextSources = nextSources[0];\n    }\n    return function (source) { return source.lift(new OnErrorResumeNextOperator(nextSources)); };\n}\nexports.onErrorResumeNext = onErrorResumeNext;\n/* tslint:enable:max-line-length */\nfunction onErrorResumeNextStatic() {\n    var nextSources = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        nextSources[_i - 0] = arguments[_i];\n    }\n    var source = null;\n    if (nextSources.length === 1 && isArray_1.isArray(nextSources[0])) {\n        nextSources = nextSources[0];\n    }\n    source = nextSources.shift();\n    return new FromObservable_1.FromObservable(source, null).lift(new OnErrorResumeNextOperator(nextSources));\n}\nexports.onErrorResumeNextStatic = onErrorResumeNextStatic;\nvar OnErrorResumeNextOperator = (function () {\n    function OnErrorResumeNextOperator(nextSources) {\n        this.nextSources = nextSources;\n    }\n    OnErrorResumeNextOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new OnErrorResumeNextSubscriber(subscriber, this.nextSources));\n    };\n    return OnErrorResumeNextOperator;\n}());\nvar OnErrorResumeNextSubscriber = (function (_super) {\n    __extends(OnErrorResumeNextSubscriber, _super);\n    function OnErrorResumeNextSubscriber(destination, nextSources) {\n        _super.call(this, destination);\n        this.destination = destination;\n        this.nextSources = nextSources;\n    }\n    OnErrorResumeNextSubscriber.prototype.notifyError = function (error, innerSub) {\n        this.subscribeToNextSource();\n    };\n    OnErrorResumeNextSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.subscribeToNextSource();\n    };\n    OnErrorResumeNextSubscriber.prototype._error = function (err) {\n        this.subscribeToNextSource();\n    };\n    OnErrorResumeNextSubscriber.prototype._complete = function () {\n        this.subscribeToNextSource();\n    };\n    OnErrorResumeNextSubscriber.prototype.subscribeToNextSource = function () {\n        var next = this.nextSources.shift();\n        if (next) {\n            this.add(subscribeToResult_1.subscribeToResult(this, next));\n        }\n        else {\n            this.destination.complete();\n        }\n    };\n    return OnErrorResumeNextSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=onErrorResumeNext.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar isArray_1 = require('../util/isArray');\nvar ArrayObservable_1 = require('../observable/ArrayObservable');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nfunction race() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    // if the only argument is an array, it was most likely called with\n    // `race([obs1, obs2, ...])`\n    if (observables.length === 1) {\n        if (isArray_1.isArray(observables[0])) {\n            observables = observables[0];\n        }\n        else {\n            return observables[0];\n        }\n    }\n    return new ArrayObservable_1.ArrayObservable(observables).lift(new RaceOperator());\n}\nexports.race = race;\nvar RaceOperator = (function () {\n    function RaceOperator() {\n    }\n    RaceOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new RaceSubscriber(subscriber));\n    };\n    return RaceOperator;\n}());\nexports.RaceOperator = RaceOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar RaceSubscriber = (function (_super) {\n    __extends(RaceSubscriber, _super);\n    function RaceSubscriber(destination) {\n        _super.call(this, destination);\n        this.hasFirst = false;\n        this.observables = [];\n        this.subscriptions = [];\n    }\n    RaceSubscriber.prototype._next = function (observable) {\n        this.observables.push(observable);\n    };\n    RaceSubscriber.prototype._complete = function () {\n        var observables = this.observables;\n        var len = observables.length;\n        if (len === 0) {\n            this.destination.complete();\n        }\n        else {\n            for (var i = 0; i < len && !this.hasFirst; i++) {\n                var observable = observables[i];\n                var subscription = subscribeToResult_1.subscribeToResult(this, observable, observable, i);\n                if (this.subscriptions) {\n                    this.subscriptions.push(subscription);\n                }\n                this.add(subscription);\n            }\n            this.observables = null;\n        }\n    };\n    RaceSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        if (!this.hasFirst) {\n            this.hasFirst = true;\n            for (var i = 0; i < this.subscriptions.length; i++) {\n                if (i !== outerIndex) {\n                    var subscription = this.subscriptions[i];\n                    subscription.unsubscribe();\n                    this.remove(subscription);\n                }\n            }\n            this.subscriptions = null;\n        }\n        this.destination.next(innerValue);\n    };\n    return RaceSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\nexports.RaceSubscriber = RaceSubscriber;\n//# sourceMappingURL=race.js.map","\"use strict\";\nvar mergeAll_1 = require('./mergeAll');\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * concatenating the inner Observables in order.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by putting one\n * inner Observable after the other.</span>\n *\n * <img src=\"./img/concatAll.png\" width=\"100%\">\n *\n * Joins every Observable emitted by the source (a higher-order Observable), in\n * a serial fashion. It subscribes to each inner Observable only after the\n * previous inner Observable has completed, and merges all of their values into\n * the returned observable.\n *\n * __Warning:__ If the source Observable emits Observables quickly and\n * endlessly, and the inner Observables it emits generally complete slower than\n * the source emits, you can run into memory issues as the incoming Observables\n * collect in an unbounded buffer.\n *\n * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));\n * var firstOrder = higherOrder.concatAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link combineAll}\n * @see {@link concat}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable emitting values from all the inner\n * Observables concatenated.\n * @method concatAll\n * @owner Observable\n */\nfunction concatAll() {\n    return mergeAll_1.mergeAll(1);\n}\nexports.concatAll = concatAll;\n//# sourceMappingURL=concatAll.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar ScalarObservable = (function (_super) {\n    __extends(ScalarObservable, _super);\n    function ScalarObservable(value, scheduler) {\n        _super.call(this);\n        this.value = value;\n        this.scheduler = scheduler;\n        this._isScalar = true;\n        if (scheduler) {\n            this._isScalar = false;\n        }\n    }\n    ScalarObservable.create = function (value, scheduler) {\n        return new ScalarObservable(value, scheduler);\n    };\n    ScalarObservable.dispatch = function (state) {\n        var done = state.done, value = state.value, subscriber = state.subscriber;\n        if (done) {\n            subscriber.complete();\n            return;\n        }\n        subscriber.next(value);\n        if (subscriber.closed) {\n            return;\n        }\n        state.done = true;\n        this.schedule(state);\n    };\n    ScalarObservable.prototype._subscribe = function (subscriber) {\n        var value = this.value;\n        var scheduler = this.scheduler;\n        if (scheduler) {\n            return scheduler.schedule(ScalarObservable.dispatch, 0, {\n                done: false, value: value, subscriber: subscriber\n            });\n        }\n        else {\n            subscriber.next(value);\n            if (!subscriber.closed) {\n                subscriber.complete();\n            }\n        }\n    };\n    return ScalarObservable;\n}(Observable_1.Observable));\nexports.ScalarObservable = ScalarObservable;\n//# sourceMappingURL=ScalarObservable.js.map","\"use strict\";\n/* tslint:disable:no-empty */\nfunction noop() { }\nexports.noop = noop;\n//# sourceMappingURL=noop.js.map","\"use strict\";\nvar noop_1 = require('./noop');\n/* tslint:enable:max-line-length */\nfunction pipe() {\n    var fns = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        fns[_i - 0] = arguments[_i];\n    }\n    return pipeFromArray(fns);\n}\nexports.pipe = pipe;\n/* @internal */\nfunction pipeFromArray(fns) {\n    if (!fns) {\n        return noop_1.noop;\n    }\n    if (fns.length === 1) {\n        return fns[0];\n    }\n    return function piped(input) {\n        return fns.reduce(function (prev, fn) { return fn(prev); }, input);\n    };\n}\nexports.pipeFromArray = pipeFromArray;\n//# sourceMappingURL=pipe.js.map","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\r\n} catch (e) {\r\n\t// This works if the window reference is available\r\n\tif (typeof window === \"object\") g = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar AsyncAction_1 = require('./AsyncAction');\nvar AsyncScheduler_1 = require('./AsyncScheduler');\nvar VirtualTimeScheduler = (function (_super) {\n    __extends(VirtualTimeScheduler, _super);\n    function VirtualTimeScheduler(SchedulerAction, maxFrames) {\n        var _this = this;\n        if (SchedulerAction === void 0) { SchedulerAction = VirtualAction; }\n        if (maxFrames === void 0) { maxFrames = Number.POSITIVE_INFINITY; }\n        _super.call(this, SchedulerAction, function () { return _this.frame; });\n        this.maxFrames = maxFrames;\n        this.frame = 0;\n        this.index = -1;\n    }\n    /**\n     * Prompt the Scheduler to execute all of its queued actions, therefore\n     * clearing its queue.\n     * @return {void}\n     */\n    VirtualTimeScheduler.prototype.flush = function () {\n        var _a = this, actions = _a.actions, maxFrames = _a.maxFrames;\n        var error, action;\n        while ((action = actions.shift()) && (this.frame = action.delay) <= maxFrames) {\n            if (error = action.execute(action.state, action.delay)) {\n                break;\n            }\n        }\n        if (error) {\n            while (action = actions.shift()) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    };\n    VirtualTimeScheduler.frameTimeFactor = 10;\n    return VirtualTimeScheduler;\n}(AsyncScheduler_1.AsyncScheduler));\nexports.VirtualTimeScheduler = VirtualTimeScheduler;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar VirtualAction = (function (_super) {\n    __extends(VirtualAction, _super);\n    function VirtualAction(scheduler, work, index) {\n        if (index === void 0) { index = scheduler.index += 1; }\n        _super.call(this, scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n        this.index = index;\n        this.active = true;\n        this.index = scheduler.index = index;\n    }\n    VirtualAction.prototype.schedule = function (state, delay) {\n        if (delay === void 0) { delay = 0; }\n        if (!this.id) {\n            return _super.prototype.schedule.call(this, state, delay);\n        }\n        this.active = false;\n        // If an action is rescheduled, we save allocations by mutating its state,\n        // pushing it to the end of the scheduler queue, and recycling the action.\n        // But since the VirtualTimeScheduler is used for testing, VirtualActions\n        // must be immutable so they can be inspected later.\n        var action = new VirtualAction(this.scheduler, this.work);\n        this.add(action);\n        return action.schedule(state, delay);\n    };\n    VirtualAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        this.delay = scheduler.frame + delay;\n        var actions = scheduler.actions;\n        actions.push(this);\n        actions.sort(VirtualAction.sortActions);\n        return true;\n    };\n    VirtualAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        return undefined;\n    };\n    VirtualAction.prototype._execute = function (state, delay) {\n        if (this.active === true) {\n            return _super.prototype._execute.call(this, state, delay);\n        }\n    };\n    VirtualAction.sortActions = function (a, b) {\n        if (a.delay === b.delay) {\n            if (a.index === b.index) {\n                return 0;\n            }\n            else if (a.index > b.index) {\n                return 1;\n            }\n            else {\n                return -1;\n            }\n        }\n        else if (a.delay > b.delay) {\n            return 1;\n        }\n        else {\n            return -1;\n        }\n    };\n    return VirtualAction;\n}(AsyncAction_1.AsyncAction));\nexports.VirtualAction = VirtualAction;\n//# sourceMappingURL=VirtualTimeScheduler.js.map","\"use strict\";\nfunction applyMixins(derivedCtor, baseCtors) {\n    for (var i = 0, len = baseCtors.length; i < len; i++) {\n        var baseCtor = baseCtors[i];\n        var propertyKeys = Object.getOwnPropertyNames(baseCtor.prototype);\n        for (var j = 0, len2 = propertyKeys.length; j < len2; j++) {\n            var name_1 = propertyKeys[j];\n            derivedCtor.prototype[name_1] = baseCtor.prototype[name_1];\n        }\n    }\n}\nexports.applyMixins = applyMixins;\n//# sourceMappingURL=applyMixins.js.map","\"use strict\";\nvar SubscriptionLog = (function () {\n    function SubscriptionLog(subscribedFrame, unsubscribedFrame) {\n        if (unsubscribedFrame === void 0) { unsubscribedFrame = Number.POSITIVE_INFINITY; }\n        this.subscribedFrame = subscribedFrame;\n        this.unsubscribedFrame = unsubscribedFrame;\n    }\n    return SubscriptionLog;\n}());\nexports.SubscriptionLog = SubscriptionLog;\n//# sourceMappingURL=SubscriptionLog.js.map","\"use strict\";\nvar SubscriptionLog_1 = require('./SubscriptionLog');\nvar SubscriptionLoggable = (function () {\n    function SubscriptionLoggable() {\n        this.subscriptions = [];\n    }\n    SubscriptionLoggable.prototype.logSubscribedFrame = function () {\n        this.subscriptions.push(new SubscriptionLog_1.SubscriptionLog(this.scheduler.now()));\n        return this.subscriptions.length - 1;\n    };\n    SubscriptionLoggable.prototype.logUnsubscribedFrame = function (index) {\n        var subscriptionLogs = this.subscriptions;\n        var oldSubscriptionLog = subscriptionLogs[index];\n        subscriptionLogs[index] = new SubscriptionLog_1.SubscriptionLog(oldSubscriptionLog.subscribedFrame, this.scheduler.now());\n    };\n    return SubscriptionLoggable;\n}());\nexports.SubscriptionLoggable = SubscriptionLoggable;\n//# sourceMappingURL=SubscriptionLoggable.js.map","\"use strict\";\nvar zip_1 = require('./zip');\nfunction zipAll(project) {\n    return function (source) { return source.lift(new zip_1.ZipOperator(project)); };\n}\nexports.zipAll = zipAll;\n//# sourceMappingURL=zipAll.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/* tslint:enable:max-line-length */\n/**\n * Combines the source Observable with other Observables to create an Observable\n * whose values are calculated from the latest values of each, only when the\n * source emits.\n *\n * <span class=\"informal\">Whenever the source Observable emits a value, it\n * computes a formula using that value plus the latest values from other input\n * Observables, then emits the output of that formula.</span>\n *\n * <img src=\"./img/withLatestFrom.png\" width=\"100%\">\n *\n * `withLatestFrom` combines each value from the source Observable (the\n * instance) with the latest values from the other input Observables only when\n * the source emits a value, optionally using a `project` function to determine\n * the value to be emitted on the output Observable. All input Observables must\n * emit at least one value before the output Observable will emit a value.\n *\n * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var result = clicks.withLatestFrom(timer);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Function} [project] Projection function for combining values\n * together. Receives all values in order of the Observables passed, where the\n * first parameter is a value from the source Observable. (e.g.\n * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not\n * passed, arrays will be emitted on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method withLatestFrom\n * @owner Observable\n */\nfunction withLatestFrom() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i - 0] = arguments[_i];\n    }\n    return function (source) {\n        var project;\n        if (typeof args[args.length - 1] === 'function') {\n            project = args.pop();\n        }\n        var observables = args;\n        return source.lift(new WithLatestFromOperator(observables, project));\n    };\n}\nexports.withLatestFrom = withLatestFrom;\nvar WithLatestFromOperator = (function () {\n    function WithLatestFromOperator(observables, project) {\n        this.observables = observables;\n        this.project = project;\n    }\n    WithLatestFromOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));\n    };\n    return WithLatestFromOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WithLatestFromSubscriber = (function (_super) {\n    __extends(WithLatestFromSubscriber, _super);\n    function WithLatestFromSubscriber(destination, observables, project) {\n        _super.call(this, destination);\n        this.observables = observables;\n        this.project = project;\n        this.toRespond = [];\n        var len = observables.length;\n        this.values = new Array(len);\n        for (var i = 0; i < len; i++) {\n            this.toRespond.push(i);\n        }\n        for (var i = 0; i < len; i++) {\n            var observable = observables[i];\n            this.add(subscribeToResult_1.subscribeToResult(this, observable, observable, i));\n        }\n    }\n    WithLatestFromSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.values[outerIndex] = innerValue;\n        var toRespond = this.toRespond;\n        if (toRespond.length > 0) {\n            var found = toRespond.indexOf(outerIndex);\n            if (found !== -1) {\n                toRespond.splice(found, 1);\n            }\n        }\n    };\n    WithLatestFromSubscriber.prototype.notifyComplete = function () {\n        // noop\n    };\n    WithLatestFromSubscriber.prototype._next = function (value) {\n        if (this.toRespond.length === 0) {\n            var args = [value].concat(this.values);\n            if (this.project) {\n                this._tryProject(args);\n            }\n            else {\n                this.destination.next(args);\n            }\n        }\n    };\n    WithLatestFromSubscriber.prototype._tryProject = function (args) {\n        var result;\n        try {\n            result = this.project.apply(this, args);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return WithLatestFromSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=withLatestFrom.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subject_1 = require('../Subject');\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Branch out the source Observable values as a nested Observable using a\n * factory function of closing Observables to determine when to start a new\n * window.\n *\n * <span class=\"informal\">It's like {@link bufferWhen}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowWhen.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping windows.\n * It emits the current window and opens a new one whenever the Observable\n * produced by the specified `closingSelector` function emits an item. The first\n * window is opened immediately when subscribing to the output Observable.\n *\n * @example <caption>Emit only the first two clicks events in every window of [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks\n *   .windowWhen(() => Rx.Observable.interval(1000 + Math.random() * 4000))\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link bufferWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals (on either `next` or\n * `complete`) when to close the previous window and start a new one.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowWhen\n * @owner Observable\n */\nfunction windowWhen(closingSelector) {\n    return function windowWhenOperatorFunction(source) {\n        return source.lift(new WindowOperator(closingSelector));\n    };\n}\nexports.windowWhen = windowWhen;\nvar WindowOperator = (function () {\n    function WindowOperator(closingSelector) {\n        this.closingSelector = closingSelector;\n    }\n    WindowOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new WindowSubscriber(subscriber, this.closingSelector));\n    };\n    return WindowOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WindowSubscriber = (function (_super) {\n    __extends(WindowSubscriber, _super);\n    function WindowSubscriber(destination, closingSelector) {\n        _super.call(this, destination);\n        this.destination = destination;\n        this.closingSelector = closingSelector;\n        this.openWindow();\n    }\n    WindowSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.openWindow(innerSub);\n    };\n    WindowSubscriber.prototype.notifyError = function (error, innerSub) {\n        this._error(error);\n    };\n    WindowSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.openWindow(innerSub);\n    };\n    WindowSubscriber.prototype._next = function (value) {\n        this.window.next(value);\n    };\n    WindowSubscriber.prototype._error = function (err) {\n        this.window.error(err);\n        this.destination.error(err);\n        this.unsubscribeClosingNotification();\n    };\n    WindowSubscriber.prototype._complete = function () {\n        this.window.complete();\n        this.destination.complete();\n        this.unsubscribeClosingNotification();\n    };\n    WindowSubscriber.prototype.unsubscribeClosingNotification = function () {\n        if (this.closingNotification) {\n            this.closingNotification.unsubscribe();\n        }\n    };\n    WindowSubscriber.prototype.openWindow = function (innerSub) {\n        if (innerSub === void 0) { innerSub = null; }\n        if (innerSub) {\n            this.remove(innerSub);\n            innerSub.unsubscribe();\n        }\n        var prevWindow = this.window;\n        if (prevWindow) {\n            prevWindow.complete();\n        }\n        var window = this.window = new Subject_1.Subject();\n        this.destination.next(window);\n        var closingNotifier = tryCatch_1.tryCatch(this.closingSelector)();\n        if (closingNotifier === errorObject_1.errorObject) {\n            var err = errorObject_1.errorObject.e;\n            this.destination.error(err);\n            this.window.error(err);\n        }\n        else {\n            this.add(this.closingNotification = subscribeToResult_1.subscribeToResult(this, closingNotifier));\n        }\n    };\n    return WindowSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=windowWhen.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subject_1 = require('../Subject');\nvar Subscription_1 = require('../Subscription');\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Branch out the source Observable values as a nested Observable starting from\n * an emission from `openings` and ending when the output of `closingSelector`\n * emits.\n *\n * <span class=\"informal\">It's like {@link bufferToggle}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowToggle.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows that contain those items\n * emitted by the source Observable between the time when the `openings`\n * Observable emits an item and when the Observable returned by\n * `closingSelector` emits an item.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var result = clicks.windowToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * ).mergeAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowWhen}\n * @see {@link bufferToggle}\n *\n * @param {Observable<O>} openings An observable of notifications to start new\n * windows.\n * @param {function(value: O): Observable} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns an Observable,\n * which, when it emits (either `next` or `complete`), signals that the\n * associated window should complete.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowToggle\n * @owner Observable\n */\nfunction windowToggle(openings, closingSelector) {\n    return function (source) { return source.lift(new WindowToggleOperator(openings, closingSelector)); };\n}\nexports.windowToggle = windowToggle;\nvar WindowToggleOperator = (function () {\n    function WindowToggleOperator(openings, closingSelector) {\n        this.openings = openings;\n        this.closingSelector = closingSelector;\n    }\n    WindowToggleOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new WindowToggleSubscriber(subscriber, this.openings, this.closingSelector));\n    };\n    return WindowToggleOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WindowToggleSubscriber = (function (_super) {\n    __extends(WindowToggleSubscriber, _super);\n    function WindowToggleSubscriber(destination, openings, closingSelector) {\n        _super.call(this, destination);\n        this.openings = openings;\n        this.closingSelector = closingSelector;\n        this.contexts = [];\n        this.add(this.openSubscription = subscribeToResult_1.subscribeToResult(this, openings, openings));\n    }\n    WindowToggleSubscriber.prototype._next = function (value) {\n        var contexts = this.contexts;\n        if (contexts) {\n            var len = contexts.length;\n            for (var i = 0; i < len; i++) {\n                contexts[i].window.next(value);\n            }\n        }\n    };\n    WindowToggleSubscriber.prototype._error = function (err) {\n        var contexts = this.contexts;\n        this.contexts = null;\n        if (contexts) {\n            var len = contexts.length;\n            var index = -1;\n            while (++index < len) {\n                var context = contexts[index];\n                context.window.error(err);\n                context.subscription.unsubscribe();\n            }\n        }\n        _super.prototype._error.call(this, err);\n    };\n    WindowToggleSubscriber.prototype._complete = function () {\n        var contexts = this.contexts;\n        this.contexts = null;\n        if (contexts) {\n            var len = contexts.length;\n            var index = -1;\n            while (++index < len) {\n                var context = contexts[index];\n                context.window.complete();\n                context.subscription.unsubscribe();\n            }\n        }\n        _super.prototype._complete.call(this);\n    };\n    WindowToggleSubscriber.prototype._unsubscribe = function () {\n        var contexts = this.contexts;\n        this.contexts = null;\n        if (contexts) {\n            var len = contexts.length;\n            var index = -1;\n            while (++index < len) {\n                var context = contexts[index];\n                context.window.unsubscribe();\n                context.subscription.unsubscribe();\n            }\n        }\n    };\n    WindowToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        if (outerValue === this.openings) {\n            var closingSelector = this.closingSelector;\n            var closingNotifier = tryCatch_1.tryCatch(closingSelector)(innerValue);\n            if (closingNotifier === errorObject_1.errorObject) {\n                return this.error(errorObject_1.errorObject.e);\n            }\n            else {\n                var window_1 = new Subject_1.Subject();\n                var subscription = new Subscription_1.Subscription();\n                var context = { window: window_1, subscription: subscription };\n                this.contexts.push(context);\n                var innerSubscription = subscribeToResult_1.subscribeToResult(this, closingNotifier, context);\n                if (innerSubscription.closed) {\n                    this.closeWindow(this.contexts.length - 1);\n                }\n                else {\n                    innerSubscription.context = context;\n                    subscription.add(innerSubscription);\n                }\n                this.destination.next(window_1);\n            }\n        }\n        else {\n            this.closeWindow(this.contexts.indexOf(outerValue));\n        }\n    };\n    WindowToggleSubscriber.prototype.notifyError = function (err) {\n        this.error(err);\n    };\n    WindowToggleSubscriber.prototype.notifyComplete = function (inner) {\n        if (inner !== this.openSubscription) {\n            this.closeWindow(this.contexts.indexOf(inner.context));\n        }\n    };\n    WindowToggleSubscriber.prototype.closeWindow = function (index) {\n        if (index === -1) {\n            return;\n        }\n        var contexts = this.contexts;\n        var context = contexts[index];\n        var window = context.window, subscription = context.subscription;\n        contexts.splice(index, 1);\n        window.complete();\n        subscription.unsubscribe();\n    };\n    return WindowToggleSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=windowToggle.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subject_1 = require('../Subject');\nvar async_1 = require('../scheduler/async');\nvar Subscriber_1 = require('../Subscriber');\nvar isNumeric_1 = require('../util/isNumeric');\nvar isScheduler_1 = require('../util/isScheduler');\nfunction windowTime(windowTimeSpan) {\n    var scheduler = async_1.async;\n    var windowCreationInterval = null;\n    var maxWindowSize = Number.POSITIVE_INFINITY;\n    if (isScheduler_1.isScheduler(arguments[3])) {\n        scheduler = arguments[3];\n    }\n    if (isScheduler_1.isScheduler(arguments[2])) {\n        scheduler = arguments[2];\n    }\n    else if (isNumeric_1.isNumeric(arguments[2])) {\n        maxWindowSize = arguments[2];\n    }\n    if (isScheduler_1.isScheduler(arguments[1])) {\n        scheduler = arguments[1];\n    }\n    else if (isNumeric_1.isNumeric(arguments[1])) {\n        windowCreationInterval = arguments[1];\n    }\n    return function windowTimeOperatorFunction(source) {\n        return source.lift(new WindowTimeOperator(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler));\n    };\n}\nexports.windowTime = windowTime;\nvar WindowTimeOperator = (function () {\n    function WindowTimeOperator(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler) {\n        this.windowTimeSpan = windowTimeSpan;\n        this.windowCreationInterval = windowCreationInterval;\n        this.maxWindowSize = maxWindowSize;\n        this.scheduler = scheduler;\n    }\n    WindowTimeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new WindowTimeSubscriber(subscriber, this.windowTimeSpan, this.windowCreationInterval, this.maxWindowSize, this.scheduler));\n    };\n    return WindowTimeOperator;\n}());\nvar CountedSubject = (function (_super) {\n    __extends(CountedSubject, _super);\n    function CountedSubject() {\n        _super.apply(this, arguments);\n        this._numberOfNextedValues = 0;\n    }\n    CountedSubject.prototype.next = function (value) {\n        this._numberOfNextedValues++;\n        _super.prototype.next.call(this, value);\n    };\n    Object.defineProperty(CountedSubject.prototype, \"numberOfNextedValues\", {\n        get: function () {\n            return this._numberOfNextedValues;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return CountedSubject;\n}(Subject_1.Subject));\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WindowTimeSubscriber = (function (_super) {\n    __extends(WindowTimeSubscriber, _super);\n    function WindowTimeSubscriber(destination, windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler) {\n        _super.call(this, destination);\n        this.destination = destination;\n        this.windowTimeSpan = windowTimeSpan;\n        this.windowCreationInterval = windowCreationInterval;\n        this.maxWindowSize = maxWindowSize;\n        this.scheduler = scheduler;\n        this.windows = [];\n        var window = this.openWindow();\n        if (windowCreationInterval !== null && windowCreationInterval >= 0) {\n            var closeState = { subscriber: this, window: window, context: null };\n            var creationState = { windowTimeSpan: windowTimeSpan, windowCreationInterval: windowCreationInterval, subscriber: this, scheduler: scheduler };\n            this.add(scheduler.schedule(dispatchWindowClose, windowTimeSpan, closeState));\n            this.add(scheduler.schedule(dispatchWindowCreation, windowCreationInterval, creationState));\n        }\n        else {\n            var timeSpanOnlyState = { subscriber: this, window: window, windowTimeSpan: windowTimeSpan };\n            this.add(scheduler.schedule(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));\n        }\n    }\n    WindowTimeSubscriber.prototype._next = function (value) {\n        var windows = this.windows;\n        var len = windows.length;\n        for (var i = 0; i < len; i++) {\n            var window_1 = windows[i];\n            if (!window_1.closed) {\n                window_1.next(value);\n                if (window_1.numberOfNextedValues >= this.maxWindowSize) {\n                    this.closeWindow(window_1);\n                }\n            }\n        }\n    };\n    WindowTimeSubscriber.prototype._error = function (err) {\n        var windows = this.windows;\n        while (windows.length > 0) {\n            windows.shift().error(err);\n        }\n        this.destination.error(err);\n    };\n    WindowTimeSubscriber.prototype._complete = function () {\n        var windows = this.windows;\n        while (windows.length > 0) {\n            var window_2 = windows.shift();\n            if (!window_2.closed) {\n                window_2.complete();\n            }\n        }\n        this.destination.complete();\n    };\n    WindowTimeSubscriber.prototype.openWindow = function () {\n        var window = new CountedSubject();\n        this.windows.push(window);\n        var destination = this.destination;\n        destination.next(window);\n        return window;\n    };\n    WindowTimeSubscriber.prototype.closeWindow = function (window) {\n        window.complete();\n        var windows = this.windows;\n        windows.splice(windows.indexOf(window), 1);\n    };\n    return WindowTimeSubscriber;\n}(Subscriber_1.Subscriber));\nfunction dispatchWindowTimeSpanOnly(state) {\n    var subscriber = state.subscriber, windowTimeSpan = state.windowTimeSpan, window = state.window;\n    if (window) {\n        subscriber.closeWindow(window);\n    }\n    state.window = subscriber.openWindow();\n    this.schedule(state, windowTimeSpan);\n}\nfunction dispatchWindowCreation(state) {\n    var windowTimeSpan = state.windowTimeSpan, subscriber = state.subscriber, scheduler = state.scheduler, windowCreationInterval = state.windowCreationInterval;\n    var window = subscriber.openWindow();\n    var action = this;\n    var context = { action: action, subscription: null };\n    var timeSpanState = { subscriber: subscriber, window: window, context: context };\n    context.subscription = scheduler.schedule(dispatchWindowClose, windowTimeSpan, timeSpanState);\n    action.add(context.subscription);\n    action.schedule(state, windowCreationInterval);\n}\nfunction dispatchWindowClose(state) {\n    var subscriber = state.subscriber, window = state.window, context = state.context;\n    if (context && context.action && context.subscription) {\n        context.action.remove(context.subscription);\n    }\n    subscriber.closeWindow(window);\n}\n//# sourceMappingURL=windowTime.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar Subject_1 = require('../Subject');\n/**\n * Branch out the source Observable values as a nested Observable with each\n * nested Observable emitting at most `windowSize` values.\n *\n * <span class=\"informal\">It's like {@link bufferCount}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowCount.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows every `startWindowEvery`\n * items, each containing no more than `windowSize` items. When the source\n * Observable completes or encounters an error, the output Observable emits\n * the current window and propagates the notification from the source\n * Observable. If `startWindowEvery` is not provided, then new windows are\n * started immediately at the start of the source and when each window completes\n * with size `windowSize`.\n *\n * @example <caption>Ignore every 3rd click event, starting from the first one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(3)\n *   .map(win => win.skip(1)) // skip first of every 3 clicks\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Ignore every 3rd click event, starting from the third one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(2, 3)\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferCount}\n *\n * @param {number} windowSize The maximum number of values emitted by each\n * window.\n * @param {number} [startWindowEvery] Interval at which to start a new window.\n * For example if `startWindowEvery` is `2`, then a new window will be started\n * on every other value from the source. A new window is started at the\n * beginning of the source by default.\n * @return {Observable<Observable<T>>} An Observable of windows, which in turn\n * are Observable of values.\n * @method windowCount\n * @owner Observable\n */\nfunction windowCount(windowSize, startWindowEvery) {\n    if (startWindowEvery === void 0) { startWindowEvery = 0; }\n    return function windowCountOperatorFunction(source) {\n        return source.lift(new WindowCountOperator(windowSize, startWindowEvery));\n    };\n}\nexports.windowCount = windowCount;\nvar WindowCountOperator = (function () {\n    function WindowCountOperator(windowSize, startWindowEvery) {\n        this.windowSize = windowSize;\n        this.startWindowEvery = startWindowEvery;\n    }\n    WindowCountOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new WindowCountSubscriber(subscriber, this.windowSize, this.startWindowEvery));\n    };\n    return WindowCountOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WindowCountSubscriber = (function (_super) {\n    __extends(WindowCountSubscriber, _super);\n    function WindowCountSubscriber(destination, windowSize, startWindowEvery) {\n        _super.call(this, destination);\n        this.destination = destination;\n        this.windowSize = windowSize;\n        this.startWindowEvery = startWindowEvery;\n        this.windows = [new Subject_1.Subject()];\n        this.count = 0;\n        destination.next(this.windows[0]);\n    }\n    WindowCountSubscriber.prototype._next = function (value) {\n        var startWindowEvery = (this.startWindowEvery > 0) ? this.startWindowEvery : this.windowSize;\n        var destination = this.destination;\n        var windowSize = this.windowSize;\n        var windows = this.windows;\n        var len = windows.length;\n        for (var i = 0; i < len && !this.closed; i++) {\n            windows[i].next(value);\n        }\n        var c = this.count - windowSize + 1;\n        if (c >= 0 && c % startWindowEvery === 0 && !this.closed) {\n            windows.shift().complete();\n        }\n        if (++this.count % startWindowEvery === 0 && !this.closed) {\n            var window_1 = new Subject_1.Subject();\n            windows.push(window_1);\n            destination.next(window_1);\n        }\n    };\n    WindowCountSubscriber.prototype._error = function (err) {\n        var windows = this.windows;\n        if (windows) {\n            while (windows.length > 0 && !this.closed) {\n                windows.shift().error(err);\n            }\n        }\n        this.destination.error(err);\n    };\n    WindowCountSubscriber.prototype._complete = function () {\n        var windows = this.windows;\n        if (windows) {\n            while (windows.length > 0 && !this.closed) {\n                windows.shift().complete();\n            }\n        }\n        this.destination.complete();\n    };\n    WindowCountSubscriber.prototype._unsubscribe = function () {\n        this.count = 0;\n        this.windows = null;\n    };\n    return WindowCountSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=windowCount.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subject_1 = require('../Subject');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Branch out the source Observable values as a nested Observable whenever\n * `windowBoundaries` emits.\n *\n * <span class=\"informal\">It's like {@link buffer}, but emits a nested Observable\n * instead of an array.</span>\n *\n * <img src=\"./img/window.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping\n * windows. It emits the current window and opens a new one whenever the\n * Observable `windowBoundaries` emits an item. Because each window is an\n * Observable, the output is a higher-order Observable.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var result = clicks.window(interval)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link buffer}\n *\n * @param {Observable<any>} windowBoundaries An Observable that completes the\n * previous window and starts a new window.\n * @return {Observable<Observable<T>>} An Observable of windows, which are\n * Observables emitting values of the source Observable.\n * @method window\n * @owner Observable\n */\nfunction window(windowBoundaries) {\n    return function windowOperatorFunction(source) {\n        return source.lift(new WindowOperator(windowBoundaries));\n    };\n}\nexports.window = window;\nvar WindowOperator = (function () {\n    function WindowOperator(windowBoundaries) {\n        this.windowBoundaries = windowBoundaries;\n    }\n    WindowOperator.prototype.call = function (subscriber, source) {\n        var windowSubscriber = new WindowSubscriber(subscriber);\n        var sourceSubscription = source.subscribe(windowSubscriber);\n        if (!sourceSubscription.closed) {\n            windowSubscriber.add(subscribeToResult_1.subscribeToResult(windowSubscriber, this.windowBoundaries));\n        }\n        return sourceSubscription;\n    };\n    return WindowOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WindowSubscriber = (function (_super) {\n    __extends(WindowSubscriber, _super);\n    function WindowSubscriber(destination) {\n        _super.call(this, destination);\n        this.window = new Subject_1.Subject();\n        destination.next(this.window);\n    }\n    WindowSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.openWindow();\n    };\n    WindowSubscriber.prototype.notifyError = function (error, innerSub) {\n        this._error(error);\n    };\n    WindowSubscriber.prototype.notifyComplete = function (innerSub) {\n        this._complete();\n    };\n    WindowSubscriber.prototype._next = function (value) {\n        this.window.next(value);\n    };\n    WindowSubscriber.prototype._error = function (err) {\n        this.window.error(err);\n        this.destination.error(err);\n    };\n    WindowSubscriber.prototype._complete = function () {\n        this.window.complete();\n        this.destination.complete();\n    };\n    WindowSubscriber.prototype._unsubscribe = function () {\n        this.window = null;\n    };\n    WindowSubscriber.prototype.openWindow = function () {\n        var prevWindow = this.window;\n        if (prevWindow) {\n            prevWindow.complete();\n        }\n        var destination = this.destination;\n        var newWindow = this.window = new Subject_1.Subject();\n        destination.next(newWindow);\n    };\n    return WindowSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=window.js.map","\"use strict\";\nvar reduce_1 = require('./reduce');\nfunction toArrayReducer(arr, item, index) {\n    if (index === 0) {\n        return [item];\n    }\n    arr.push(item);\n    return arr;\n}\nfunction toArray() {\n    return reduce_1.reduce(toArrayReducer, []);\n}\nexports.toArray = toArray;\n//# sourceMappingURL=toArray.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar async_1 = require('../scheduler/async');\nvar isDate_1 = require('../util/isDate');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/* tslint:enable:max-line-length */\n/**\n *\n * Errors if Observable does not emit a value in given time span, in case of which\n * subscribes to the second Observable.\n *\n * <span class=\"informal\">It's a version of `timeout` operator that let's you specify fallback Observable.</span>\n *\n * <img src=\"./img/timeoutWith.png\" width=\"100%\">\n *\n * `timeoutWith` is a variation of `timeout` operator. It behaves exactly the same,\n * still accepting as a first argument either a number or a Date, which control - respectively -\n * when values of source Observable should be emitted or when it should complete.\n *\n * The only difference is that it accepts a second, required parameter. This parameter\n * should be an Observable which will be subscribed when source Observable fails any timeout check.\n * So whenever regular `timeout` would emit an error, `timeoutWith` will instead start re-emitting\n * values from second Observable. Note that this fallback Observable is not checked for timeouts\n * itself, so it can emit values and complete at arbitrary points in time. From the moment of a second\n * subscription, Observable returned from `timeoutWith` simply mirrors fallback stream. When that\n * stream completes, it completes as well.\n *\n * Scheduler, which in case of `timeout` is provided as as second argument, can be still provided\n * here - as a third, optional parameter. It still is used to schedule timeout checks and -\n * as a consequence - when second Observable will be subscribed, since subscription happens\n * immediately after failing check.\n *\n * @example <caption>Add fallback observable</caption>\n * const seconds = Rx.Observable.interval(1000);\n * const minutes = Rx.Observable.interval(60 * 1000);\n *\n * seconds.timeoutWith(900, minutes)\n *     .subscribe(\n *         value => console.log(value), // After 900ms, will start emitting `minutes`,\n *                                      // since first value of `seconds` will not arrive fast enough.\n *         err => console.log(err) // Would be called after 900ms in case of `timeout`,\n *                                 // but here will never be called.\n *     );\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Observable<T>} withObservable Observable which will be subscribed if source fails timeout check.\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source or, when timeout check fails, of an Observable\n *                          passed as a second parameter.\n * @method timeoutWith\n * @owner Observable\n */\nfunction timeoutWith(due, withObservable, scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return function (source) {\n        var absoluteTimeout = isDate_1.isDate(due);\n        var waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(due);\n        return source.lift(new TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler));\n    };\n}\nexports.timeoutWith = timeoutWith;\nvar TimeoutWithOperator = (function () {\n    function TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler) {\n        this.waitFor = waitFor;\n        this.absoluteTimeout = absoluteTimeout;\n        this.withObservable = withObservable;\n        this.scheduler = scheduler;\n    }\n    TimeoutWithOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TimeoutWithSubscriber(subscriber, this.absoluteTimeout, this.waitFor, this.withObservable, this.scheduler));\n    };\n    return TimeoutWithOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TimeoutWithSubscriber = (function (_super) {\n    __extends(TimeoutWithSubscriber, _super);\n    function TimeoutWithSubscriber(destination, absoluteTimeout, waitFor, withObservable, scheduler) {\n        _super.call(this, destination);\n        this.absoluteTimeout = absoluteTimeout;\n        this.waitFor = waitFor;\n        this.withObservable = withObservable;\n        this.scheduler = scheduler;\n        this.action = null;\n        this.scheduleTimeout();\n    }\n    TimeoutWithSubscriber.dispatchTimeout = function (subscriber) {\n        var withObservable = subscriber.withObservable;\n        subscriber._unsubscribeAndRecycle();\n        subscriber.add(subscribeToResult_1.subscribeToResult(subscriber, withObservable));\n    };\n    TimeoutWithSubscriber.prototype.scheduleTimeout = function () {\n        var action = this.action;\n        if (action) {\n            // Recycle the action if we've already scheduled one. All the production\n            // Scheduler Actions mutate their state/delay time and return themeselves.\n            // VirtualActions are immutable, so they create and return a clone. In this\n            // case, we need to set the action reference to the most recent VirtualAction,\n            // to ensure that's the one we clone from next time.\n            this.action = action.schedule(this, this.waitFor);\n        }\n        else {\n            this.add(this.action = this.scheduler.schedule(TimeoutWithSubscriber.dispatchTimeout, this.waitFor, this));\n        }\n    };\n    TimeoutWithSubscriber.prototype._next = function (value) {\n        if (!this.absoluteTimeout) {\n            this.scheduleTimeout();\n        }\n        _super.prototype._next.call(this, value);\n    };\n    TimeoutWithSubscriber.prototype._unsubscribe = function () {\n        this.action = null;\n        this.scheduler = null;\n        this.withObservable = null;\n    };\n    return TimeoutWithSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=timeoutWith.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * An error thrown when duetime elapses.\n *\n * @see {@link timeout}\n *\n * @class TimeoutError\n */\nvar TimeoutError = (function (_super) {\n    __extends(TimeoutError, _super);\n    function TimeoutError() {\n        var err = _super.call(this, 'Timeout has occurred');\n        this.name = err.name = 'TimeoutError';\n        this.stack = err.stack;\n        this.message = err.message;\n    }\n    return TimeoutError;\n}(Error));\nexports.TimeoutError = TimeoutError;\n//# sourceMappingURL=TimeoutError.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar async_1 = require('../scheduler/async');\nvar isDate_1 = require('../util/isDate');\nvar Subscriber_1 = require('../Subscriber');\nvar TimeoutError_1 = require('../util/TimeoutError');\n/**\n *\n * Errors if Observable does not emit a value in given time span.\n *\n * <span class=\"informal\">Timeouts on Observable that doesn't emit values fast enough.</span>\n *\n * <img src=\"./img/timeout.png\" width=\"100%\">\n *\n * `timeout` operator accepts as an argument either a number or a Date.\n *\n * If number was provided, it returns an Observable that behaves like a source\n * Observable, unless there is a period of time where there is no value emitted.\n * So if you provide `100` as argument and first value comes after 50ms from\n * the moment of subscription, this value will be simply re-emitted by the resulting\n * Observable. If however after that 100ms passes without a second value being emitted,\n * stream will end with an error and source Observable will be unsubscribed.\n * These checks are performed throughout whole lifecycle of Observable - from the moment\n * it was subscribed to, until it completes or errors itself. Thus every value must be\n * emitted within specified period since previous value.\n *\n * If provided argument was Date, returned Observable behaves differently. It throws\n * if Observable did not complete before provided Date. This means that periods between\n * emission of particular values do not matter in this case. If Observable did not complete\n * before provided Date, source Observable will be unsubscribed. Other than that, resulting\n * stream behaves just as source Observable.\n *\n * `timeout` accepts also a Scheduler as a second parameter. It is used to schedule moment (or moments)\n * when returned Observable will check if source stream emitted value or completed.\n *\n * @example <caption>Check if ticks are emitted within certain timespan</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(1100) // Let's use bigger timespan to be safe,\n *                       // since `interval` might fire a bit later then scheduled.\n * .subscribe(\n *     value => console.log(value), // Will emit numbers just as regular `interval` would.\n *     err => console.log(err) // Will never be called.\n * );\n *\n * seconds.timeout(900).subscribe(\n *     value => console.log(value), // Will never be called.\n *     err => console.log(err) // Will emit error before even first value is emitted,\n *                             // since it did not arrive within 900ms period.\n * );\n *\n * @example <caption>Use Date to check if Observable completed</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(new Date(\"December 17, 2020 03:24:00\"))\n * .subscribe(\n *     value => console.log(value), // Will emit values as regular `interval` would\n *                                  // until December 17, 2020 at 03:24:00.\n *     err => console.log(err) // On December 17, 2020 at 03:24:00 it will emit an error,\n *                             // since Observable did not complete by then.\n * );\n *\n * @see {@link timeoutWith}\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source, unless timeout checks fail.\n * @method timeout\n * @owner Observable\n */\nfunction timeout(due, scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    var absoluteTimeout = isDate_1.isDate(due);\n    var waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(due);\n    return function (source) { return source.lift(new TimeoutOperator(waitFor, absoluteTimeout, scheduler, new TimeoutError_1.TimeoutError())); };\n}\nexports.timeout = timeout;\nvar TimeoutOperator = (function () {\n    function TimeoutOperator(waitFor, absoluteTimeout, scheduler, errorInstance) {\n        this.waitFor = waitFor;\n        this.absoluteTimeout = absoluteTimeout;\n        this.scheduler = scheduler;\n        this.errorInstance = errorInstance;\n    }\n    TimeoutOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TimeoutSubscriber(subscriber, this.absoluteTimeout, this.waitFor, this.scheduler, this.errorInstance));\n    };\n    return TimeoutOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TimeoutSubscriber = (function (_super) {\n    __extends(TimeoutSubscriber, _super);\n    function TimeoutSubscriber(destination, absoluteTimeout, waitFor, scheduler, errorInstance) {\n        _super.call(this, destination);\n        this.absoluteTimeout = absoluteTimeout;\n        this.waitFor = waitFor;\n        this.scheduler = scheduler;\n        this.errorInstance = errorInstance;\n        this.action = null;\n        this.scheduleTimeout();\n    }\n    TimeoutSubscriber.dispatchTimeout = function (subscriber) {\n        subscriber.error(subscriber.errorInstance);\n    };\n    TimeoutSubscriber.prototype.scheduleTimeout = function () {\n        var action = this.action;\n        if (action) {\n            // Recycle the action if we've already scheduled one. All the production\n            // Scheduler Actions mutate their state/delay time and return themeselves.\n            // VirtualActions are immutable, so they create and return a clone. In this\n            // case, we need to set the action reference to the most recent VirtualAction,\n            // to ensure that's the one we clone from next time.\n            this.action = action.schedule(this, this.waitFor);\n        }\n        else {\n            this.add(this.action = this.scheduler.schedule(TimeoutSubscriber.dispatchTimeout, this.waitFor, this));\n        }\n    };\n    TimeoutSubscriber.prototype._next = function (value) {\n        if (!this.absoluteTimeout) {\n            this.scheduleTimeout();\n        }\n        _super.prototype._next.call(this, value);\n    };\n    TimeoutSubscriber.prototype._unsubscribe = function () {\n        this.action = null;\n        this.scheduler = null;\n        this.errorInstance = null;\n    };\n    return TimeoutSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=timeout.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar async_1 = require('../scheduler/async');\nfunction timeInterval(scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return function (source) { return source.lift(new TimeIntervalOperator(scheduler)); };\n}\nexports.timeInterval = timeInterval;\nvar TimeInterval = (function () {\n    function TimeInterval(value, interval) {\n        this.value = value;\n        this.interval = interval;\n    }\n    return TimeInterval;\n}());\nexports.TimeInterval = TimeInterval;\n;\nvar TimeIntervalOperator = (function () {\n    function TimeIntervalOperator(scheduler) {\n        this.scheduler = scheduler;\n    }\n    TimeIntervalOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new TimeIntervalSubscriber(observer, this.scheduler));\n    };\n    return TimeIntervalOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TimeIntervalSubscriber = (function (_super) {\n    __extends(TimeIntervalSubscriber, _super);\n    function TimeIntervalSubscriber(destination, scheduler) {\n        _super.call(this, destination);\n        this.scheduler = scheduler;\n        this.lastTime = 0;\n        this.lastTime = scheduler.now();\n    }\n    TimeIntervalSubscriber.prototype._next = function (value) {\n        var now = this.scheduler.now();\n        var span = now - this.lastTime;\n        this.lastTime = now;\n        this.destination.next(new TimeInterval(value, span));\n    };\n    return TimeIntervalSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=timeInterval.js.map","\"use strict\";\nvar async_1 = require('../scheduler/async');\nvar timeInterval_1 = require('../operators/timeInterval');\nexports.TimeInterval = timeInterval_1.TimeInterval;\n/**\n * @param scheduler\n * @return {Observable<TimeInterval<any>>|WebSocketSubject<T>|Observable<T>}\n * @method timeInterval\n * @owner Observable\n */\nfunction timeInterval(scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return timeInterval_1.timeInterval(scheduler)(this);\n}\nexports.timeInterval = timeInterval;\n//# sourceMappingURL=timeInterval.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar async_1 = require('../scheduler/async');\nvar throttle_1 = require('./throttle');\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for `duration` milliseconds, then repeats this process.\n *\n * <span class=\"informal\">Lets a value pass, then ignores source values for the\n * next `duration` milliseconds.</span>\n *\n * <img src=\"./img/throttleTime.png\" width=\"100%\">\n *\n * `throttleTime` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled. After `duration` milliseconds (or the time unit determined\n * internally by the optional `scheduler`) has passed, the timer is disabled,\n * and this process repeats for the next source value. Optionally takes a\n * {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {number} duration Time to wait before emitting another value after\n * emitting the last value, measured in milliseconds or the time unit determined\n * internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the throttling.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttleTime\n * @owner Observable\n */\nfunction throttleTime(duration, scheduler, config) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    if (config === void 0) { config = throttle_1.defaultThrottleConfig; }\n    return function (source) { return source.lift(new ThrottleTimeOperator(duration, scheduler, config.leading, config.trailing)); };\n}\nexports.throttleTime = throttleTime;\nvar ThrottleTimeOperator = (function () {\n    function ThrottleTimeOperator(duration, scheduler, leading, trailing) {\n        this.duration = duration;\n        this.scheduler = scheduler;\n        this.leading = leading;\n        this.trailing = trailing;\n    }\n    ThrottleTimeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler, this.leading, this.trailing));\n    };\n    return ThrottleTimeOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ThrottleTimeSubscriber = (function (_super) {\n    __extends(ThrottleTimeSubscriber, _super);\n    function ThrottleTimeSubscriber(destination, duration, scheduler, leading, trailing) {\n        _super.call(this, destination);\n        this.duration = duration;\n        this.scheduler = scheduler;\n        this.leading = leading;\n        this.trailing = trailing;\n        this._hasTrailingValue = false;\n        this._trailingValue = null;\n    }\n    ThrottleTimeSubscriber.prototype._next = function (value) {\n        if (this.throttled) {\n            if (this.trailing) {\n                this._trailingValue = value;\n                this._hasTrailingValue = true;\n            }\n        }\n        else {\n            this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, { subscriber: this }));\n            if (this.leading) {\n                this.destination.next(value);\n            }\n        }\n    };\n    ThrottleTimeSubscriber.prototype.clearThrottle = function () {\n        var throttled = this.throttled;\n        if (throttled) {\n            if (this.trailing && this._hasTrailingValue) {\n                this.destination.next(this._trailingValue);\n                this._trailingValue = null;\n                this._hasTrailingValue = false;\n            }\n            throttled.unsubscribe();\n            this.remove(throttled);\n            this.throttled = null;\n        }\n    };\n    return ThrottleTimeSubscriber;\n}(Subscriber_1.Subscriber));\nfunction dispatchNext(arg) {\n    var subscriber = arg.subscriber;\n    subscriber.clearThrottle();\n}\n//# sourceMappingURL=throttleTime.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Emits values emitted by the source Observable so long as each value satisfies\n * the given `predicate`, and then completes as soon as this `predicate` is not\n * satisfied.\n *\n * <span class=\"informal\">Takes values from the source only while they pass the\n * condition given. When the first value does not satisfy, it completes.</span>\n *\n * <img src=\"./img/takeWhile.png\" width=\"100%\">\n *\n * `takeWhile` subscribes and begins mirroring the source Observable. Each value\n * emitted on the source is given to the `predicate` function which returns a\n * boolean, representing a condition to be satisfied by the source values. The\n * output Observable emits the source values until such time as the `predicate`\n * returns false, at which point `takeWhile` stops mirroring the source\n * Observable and completes the output Observable.\n *\n * @example <caption>Emit click events only while the clientX property is greater than 200</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.takeWhile(ev => ev.clientX > 200);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates a value emitted by the source Observable and returns a boolean.\n * Also takes the (zero-based) index as the second argument.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable so long as each value satisfies the condition defined by the\n * `predicate`, then completes.\n * @method takeWhile\n * @owner Observable\n */\nfunction takeWhile(predicate) {\n    return function (source) { return source.lift(new TakeWhileOperator(predicate)); };\n}\nexports.takeWhile = takeWhile;\nvar TakeWhileOperator = (function () {\n    function TakeWhileOperator(predicate) {\n        this.predicate = predicate;\n    }\n    TakeWhileOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TakeWhileSubscriber(subscriber, this.predicate));\n    };\n    return TakeWhileOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TakeWhileSubscriber = (function (_super) {\n    __extends(TakeWhileSubscriber, _super);\n    function TakeWhileSubscriber(destination, predicate) {\n        _super.call(this, destination);\n        this.predicate = predicate;\n        this.index = 0;\n    }\n    TakeWhileSubscriber.prototype._next = function (value) {\n        var destination = this.destination;\n        var result;\n        try {\n            result = this.predicate(value, this.index++);\n        }\n        catch (err) {\n            destination.error(err);\n            return;\n        }\n        this.nextOrComplete(value, result);\n    };\n    TakeWhileSubscriber.prototype.nextOrComplete = function (value, predicateResult) {\n        var destination = this.destination;\n        if (Boolean(predicateResult)) {\n            destination.next(value);\n        }\n        else {\n            destination.complete();\n        }\n    };\n    return TakeWhileSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=takeWhile.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits something. Then, it completes.</span>\n *\n * <img src=\"./img/takeUntil.png\" width=\"100%\">\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value or a complete notification, the output Observable stops\n * mirroring the source Observable and completes.\n *\n * @example <caption>Tick every second until the first click happens</caption>\n * var interval = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = interval.takeUntil(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable until such time as `notifier` emits its first value.\n * @method takeUntil\n * @owner Observable\n */\nfunction takeUntil(notifier) {\n    return function (source) { return source.lift(new TakeUntilOperator(notifier)); };\n}\nexports.takeUntil = takeUntil;\nvar TakeUntilOperator = (function () {\n    function TakeUntilOperator(notifier) {\n        this.notifier = notifier;\n    }\n    TakeUntilOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TakeUntilSubscriber(subscriber, this.notifier));\n    };\n    return TakeUntilOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TakeUntilSubscriber = (function (_super) {\n    __extends(TakeUntilSubscriber, _super);\n    function TakeUntilSubscriber(destination, notifier) {\n        _super.call(this, destination);\n        this.notifier = notifier;\n        this.add(subscribeToResult_1.subscribeToResult(this, notifier));\n    }\n    TakeUntilSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.complete();\n    };\n    TakeUntilSubscriber.prototype.notifyComplete = function () {\n        // noop\n    };\n    return TakeUntilSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=takeUntil.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar ArgumentOutOfRangeError_1 = require('../util/ArgumentOutOfRangeError');\nvar EmptyObservable_1 = require('../observable/EmptyObservable');\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * <img src=\"./img/take.png\" width=\"100%\">\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>\n * var interval = Rx.Observable.interval(1000);\n * var five = interval.take(5);\n * five.subscribe(x => console.log(x));\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of `next` values to emit.\n * @return {Observable<T>} An Observable that emits only the first `count`\n * values emitted by the source Observable, or all of the values from the source\n * if the source emits fewer than `count` values.\n * @method take\n * @owner Observable\n */\nfunction take(count) {\n    return function (source) {\n        if (count === 0) {\n            return new EmptyObservable_1.EmptyObservable();\n        }\n        else {\n            return source.lift(new TakeOperator(count));\n        }\n    };\n}\nexports.take = take;\nvar TakeOperator = (function () {\n    function TakeOperator(total) {\n        this.total = total;\n        if (this.total < 0) {\n            throw new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError;\n        }\n    }\n    TakeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TakeSubscriber(subscriber, this.total));\n    };\n    return TakeOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TakeSubscriber = (function (_super) {\n    __extends(TakeSubscriber, _super);\n    function TakeSubscriber(destination, total) {\n        _super.call(this, destination);\n        this.total = total;\n        this.count = 0;\n    }\n    TakeSubscriber.prototype._next = function (value) {\n        var total = this.total;\n        var count = ++this.count;\n        if (count <= total) {\n            this.destination.next(value);\n            if (count === total) {\n                this.destination.complete();\n                this.unsubscribe();\n            }\n        }\n    };\n    return TakeSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=take.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to the same Observable which is flattened multiple\n * times with {@link switch} in the output Observable.\n *\n * <span class=\"informal\">It's like {@link switchMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/switchMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. The output Observables\n * emits values only from the most recently emitted instance of\n * `innerObservable`.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link switch}\n * @see {@link switchMap}\n * @see {@link mergeMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable, and taking only the values\n * from the most recently projected inner Observable.\n * @method switchMapTo\n * @owner Observable\n */\nfunction switchMapTo(innerObservable, resultSelector) {\n    return function (source) { return source.lift(new SwitchMapToOperator(innerObservable, resultSelector)); };\n}\nexports.switchMapTo = switchMapTo;\nvar SwitchMapToOperator = (function () {\n    function SwitchMapToOperator(observable, resultSelector) {\n        this.observable = observable;\n        this.resultSelector = resultSelector;\n    }\n    SwitchMapToOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SwitchMapToSubscriber(subscriber, this.observable, this.resultSelector));\n    };\n    return SwitchMapToOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SwitchMapToSubscriber = (function (_super) {\n    __extends(SwitchMapToSubscriber, _super);\n    function SwitchMapToSubscriber(destination, inner, resultSelector) {\n        _super.call(this, destination);\n        this.inner = inner;\n        this.resultSelector = resultSelector;\n        this.index = 0;\n    }\n    SwitchMapToSubscriber.prototype._next = function (value) {\n        var innerSubscription = this.innerSubscription;\n        if (innerSubscription) {\n            innerSubscription.unsubscribe();\n        }\n        this.add(this.innerSubscription = subscribeToResult_1.subscribeToResult(this, this.inner, value, this.index++));\n    };\n    SwitchMapToSubscriber.prototype._complete = function () {\n        var innerSubscription = this.innerSubscription;\n        if (!innerSubscription || innerSubscription.closed) {\n            _super.prototype._complete.call(this);\n        }\n    };\n    SwitchMapToSubscriber.prototype._unsubscribe = function () {\n        this.innerSubscription = null;\n    };\n    SwitchMapToSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.remove(innerSub);\n        this.innerSubscription = null;\n        if (this.isStopped) {\n            _super.prototype._complete.call(this);\n        }\n    };\n    SwitchMapToSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;\n        if (resultSelector) {\n            this.tryResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        else {\n            destination.next(innerValue);\n        }\n    };\n    SwitchMapToSubscriber.prototype.tryResultSelector = function (outerValue, innerValue, outerIndex, innerIndex) {\n        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;\n        var result;\n        try {\n            result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        catch (err) {\n            destination.error(err);\n            return;\n        }\n        destination.next(result);\n    };\n    return SwitchMapToSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=switchMapTo.js.map","\"use strict\";\nvar switchMap_1 = require('./switchMap');\nvar identity_1 = require('../util/identity');\nfunction switchAll() {\n    return switchMap_1.switchMap(identity_1.identity);\n}\nexports.switchAll = switchAll;\n//# sourceMappingURL=switchAll.js.map","var apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(window, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\nrequire(\"setimmediate\");\n// On some exotic environments, it's not clear which object `setimmeidate` was\n// able to install onto.  Search each possibility in the same order as the\n// `setimmediate` library.\nexports.setImmediate = (typeof self !== \"undefined\" && self.setImmediate) ||\n                       (typeof global !== \"undefined\" && global.setImmediate) ||\n                       (this && this.setImmediate);\nexports.clearImmediate = (typeof self !== \"undefined\" && self.clearImmediate) ||\n                         (typeof global !== \"undefined\" && global.clearImmediate) ||\n                         (this && this.clearImmediate);\n","\"use strict\";\nvar AsapAction_1 = require('./AsapAction');\nvar AsapScheduler_1 = require('./AsapScheduler');\n/**\n *\n * Asap Scheduler\n *\n * <span class=\"informal\">Perform task as fast as it can be performed asynchronously</span>\n *\n * `asap` scheduler behaves the same as {@link async} scheduler when you use it to delay task\n * in time. If however you set delay to `0`, `asap` will wait for current synchronously executing\n * code to end and then it will try to execute given task as fast as possible.\n *\n * `asap` scheduler will do its best to minimize time between end of currently executing code\n * and start of scheduled task. This makes it best candidate for performing so called \"deferring\".\n * Traditionally this was achieved by calling `setTimeout(deferredTask, 0)`, but that technique involves\n * some (although minimal) unwanted delay.\n *\n * Note that using `asap` scheduler does not necessarily mean that your task will be first to process\n * after currently executing code. In particular, if some task was also scheduled with `asap` before,\n * that task will execute first. That being said, if you need to schedule task asynchronously, but\n * as soon as possible, `asap` scheduler is your best bet.\n *\n * @example <caption>Compare async and asap scheduler</caption>\n *\n * Rx.Scheduler.async.schedule(() => console.log('async')); // scheduling 'async' first...\n * Rx.Scheduler.asap.schedule(() => console.log('asap'));\n *\n * // Logs:\n * // \"asap\"\n * // \"async\"\n * // ... but 'asap' goes first!\n *\n * @static true\n * @name asap\n * @owner Scheduler\n */\nexports.asap = new AsapScheduler_1.AsapScheduler(AsapAction_1.AsapAction);\n//# sourceMappingURL=asap.js.map","\"use strict\";\nvar ArrayObservable_1 = require('../observable/ArrayObservable');\nvar ScalarObservable_1 = require('../observable/ScalarObservable');\nvar EmptyObservable_1 = require('../observable/EmptyObservable');\nvar concat_1 = require('../observable/concat');\nvar isScheduler_1 = require('../util/isScheduler');\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits the items you specify as arguments before it begins to emit\n * items emitted by the source Observable.\n *\n * <img src=\"./img/startWith.png\" width=\"100%\">\n *\n * @param {...T} values - Items you want the modified Observable to emit first.\n * @param {Scheduler} [scheduler] - A {@link IScheduler} to use for scheduling\n * the emissions of the `next` notifications.\n * @return {Observable} An Observable that emits the items in the specified Iterable and then emits the items\n * emitted by the source Observable.\n * @method startWith\n * @owner Observable\n */\nfunction startWith() {\n    var array = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        array[_i - 0] = arguments[_i];\n    }\n    return function (source) {\n        var scheduler = array[array.length - 1];\n        if (isScheduler_1.isScheduler(scheduler)) {\n            array.pop();\n        }\n        else {\n            scheduler = null;\n        }\n        var len = array.length;\n        if (len === 1) {\n            return concat_1.concat(new ScalarObservable_1.ScalarObservable(array[0], scheduler), source);\n        }\n        else if (len > 1) {\n            return concat_1.concat(new ArrayObservable_1.ArrayObservable(array, scheduler), source);\n        }\n        else {\n            return concat_1.concat(new EmptyObservable_1.EmptyObservable(scheduler), source);\n        }\n    };\n}\nexports.startWith = startWith;\n//# sourceMappingURL=startWith.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\n * true, but emits all further source items as soon as the condition becomes false.\n *\n * <img src=\"./img/skipWhile.png\" width=\"100%\">\n *\n * @param {Function} predicate - A function to test each item emitted from the source Observable.\n * @return {Observable<T>} An Observable that begins emitting items emitted by the source Observable when the\n * specified predicate becomes false.\n * @method skipWhile\n * @owner Observable\n */\nfunction skipWhile(predicate) {\n    return function (source) { return source.lift(new SkipWhileOperator(predicate)); };\n}\nexports.skipWhile = skipWhile;\nvar SkipWhileOperator = (function () {\n    function SkipWhileOperator(predicate) {\n        this.predicate = predicate;\n    }\n    SkipWhileOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SkipWhileSubscriber(subscriber, this.predicate));\n    };\n    return SkipWhileOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SkipWhileSubscriber = (function (_super) {\n    __extends(SkipWhileSubscriber, _super);\n    function SkipWhileSubscriber(destination, predicate) {\n        _super.call(this, destination);\n        this.predicate = predicate;\n        this.skipping = true;\n        this.index = 0;\n    }\n    SkipWhileSubscriber.prototype._next = function (value) {\n        var destination = this.destination;\n        if (this.skipping) {\n            this.tryCallPredicate(value);\n        }\n        if (!this.skipping) {\n            destination.next(value);\n        }\n    };\n    SkipWhileSubscriber.prototype.tryCallPredicate = function (value) {\n        try {\n            var result = this.predicate(value, this.index++);\n            this.skipping = Boolean(result);\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    };\n    return SkipWhileSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=skipWhile.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n *\n * <img src=\"./img/skipUntil.png\" width=\"100%\">\n *\n * @param {Observable} notifier - The second Observable that has to emit an item before the source Observable's elements begin to\n * be mirrored by the resulting Observable.\n * @return {Observable<T>} An Observable that skips items from the source Observable until the second Observable emits\n * an item, then emits the remaining items.\n * @method skipUntil\n * @owner Observable\n */\nfunction skipUntil(notifier) {\n    return function (source) { return source.lift(new SkipUntilOperator(notifier)); };\n}\nexports.skipUntil = skipUntil;\nvar SkipUntilOperator = (function () {\n    function SkipUntilOperator(notifier) {\n        this.notifier = notifier;\n    }\n    SkipUntilOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SkipUntilSubscriber(subscriber, this.notifier));\n    };\n    return SkipUntilOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SkipUntilSubscriber = (function (_super) {\n    __extends(SkipUntilSubscriber, _super);\n    function SkipUntilSubscriber(destination, notifier) {\n        _super.call(this, destination);\n        this.hasValue = false;\n        this.isInnerStopped = false;\n        this.add(subscribeToResult_1.subscribeToResult(this, notifier));\n    }\n    SkipUntilSubscriber.prototype._next = function (value) {\n        if (this.hasValue) {\n            _super.prototype._next.call(this, value);\n        }\n    };\n    SkipUntilSubscriber.prototype._complete = function () {\n        if (this.isInnerStopped) {\n            _super.prototype._complete.call(this);\n        }\n        else {\n            this.unsubscribe();\n        }\n    };\n    SkipUntilSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.hasValue = true;\n    };\n    SkipUntilSubscriber.prototype.notifyComplete = function () {\n        this.isInnerStopped = true;\n        if (this.isStopped) {\n            _super.prototype._complete.call(this);\n        }\n    };\n    return SkipUntilSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=skipUntil.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar ArgumentOutOfRangeError_1 = require('../util/ArgumentOutOfRangeError');\n/**\n * Skip the last `count` values emitted by the source Observable.\n *\n * <img src=\"./img/skipLast.png\" width=\"100%\">\n *\n * `skipLast` returns an Observable that accumulates a queue with a length\n * enough to store the first `count` values. As more values are received,\n * values are taken from the front of the queue and produced on the result\n * sequence. This causes values to be delayed.\n *\n * @example <caption>Skip the last 2 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 5);\n * var skipLastTwo = many.skipLast(2);\n * skipLastTwo.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 1 2 3\n *\n * @see {@link skip}\n * @see {@link skipUntil}\n * @see {@link skipWhile}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `skipLast(i)`, it throws\n * ArgumentOutOrRangeError if `i < 0`.\n *\n * @param {number} count Number of elements to skip from the end of the source Observable.\n * @returns {Observable<T>} An Observable that skips the last count values\n * emitted by the source Observable.\n * @method skipLast\n * @owner Observable\n */\nfunction skipLast(count) {\n    return function (source) { return source.lift(new SkipLastOperator(count)); };\n}\nexports.skipLast = skipLast;\nvar SkipLastOperator = (function () {\n    function SkipLastOperator(_skipCount) {\n        this._skipCount = _skipCount;\n        if (this._skipCount < 0) {\n            throw new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError;\n        }\n    }\n    SkipLastOperator.prototype.call = function (subscriber, source) {\n        if (this._skipCount === 0) {\n            // If we don't want to skip any values then just subscribe\n            // to Subscriber without any further logic.\n            return source.subscribe(new Subscriber_1.Subscriber(subscriber));\n        }\n        else {\n            return source.subscribe(new SkipLastSubscriber(subscriber, this._skipCount));\n        }\n    };\n    return SkipLastOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SkipLastSubscriber = (function (_super) {\n    __extends(SkipLastSubscriber, _super);\n    function SkipLastSubscriber(destination, _skipCount) {\n        _super.call(this, destination);\n        this._skipCount = _skipCount;\n        this._count = 0;\n        this._ring = new Array(_skipCount);\n    }\n    SkipLastSubscriber.prototype._next = function (value) {\n        var skipCount = this._skipCount;\n        var count = this._count++;\n        if (count < skipCount) {\n            this._ring[count] = value;\n        }\n        else {\n            var currentIndex = count % skipCount;\n            var ring = this._ring;\n            var oldValue = ring[currentIndex];\n            ring[currentIndex] = value;\n            this.destination.next(oldValue);\n        }\n    };\n    return SkipLastSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=skipLast.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Returns an Observable that skips the first `count` items emitted by the source Observable.\n *\n * <img src=\"./img/skip.png\" width=\"100%\">\n *\n * @param {Number} count - The number of times, items emitted by source Observable should be skipped.\n * @return {Observable} An Observable that skips values emitted by the source Observable.\n *\n * @method skip\n * @owner Observable\n */\nfunction skip(count) {\n    return function (source) { return source.lift(new SkipOperator(count)); };\n}\nexports.skip = skip;\nvar SkipOperator = (function () {\n    function SkipOperator(total) {\n        this.total = total;\n    }\n    SkipOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SkipSubscriber(subscriber, this.total));\n    };\n    return SkipOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SkipSubscriber = (function (_super) {\n    __extends(SkipSubscriber, _super);\n    function SkipSubscriber(destination, total) {\n        _super.call(this, destination);\n        this.total = total;\n        this.count = 0;\n    }\n    SkipSubscriber.prototype._next = function (x) {\n        if (++this.count > this.total) {\n            this.destination.next(x);\n        }\n    };\n    return SkipSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=skip.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar EmptyError_1 = require('../util/EmptyError');\n/**\n * Returns an Observable that emits the single item emitted by the source Observable that matches a specified\n * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no\n * such items, notify of an IllegalArgumentException or NoSuchElementException respectively.\n *\n * <img src=\"./img/single.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {Function} predicate - A predicate function to evaluate items emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits the single item emitted by the source Observable that matches\n * the predicate.\n .\n * @method single\n * @owner Observable\n */\nfunction single(predicate) {\n    return function (source) { return source.lift(new SingleOperator(predicate, source)); };\n}\nexports.single = single;\nvar SingleOperator = (function () {\n    function SingleOperator(predicate, source) {\n        this.predicate = predicate;\n        this.source = source;\n    }\n    SingleOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SingleSubscriber(subscriber, this.predicate, this.source));\n    };\n    return SingleOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SingleSubscriber = (function (_super) {\n    __extends(SingleSubscriber, _super);\n    function SingleSubscriber(destination, predicate, source) {\n        _super.call(this, destination);\n        this.predicate = predicate;\n        this.source = source;\n        this.seenValue = false;\n        this.index = 0;\n    }\n    SingleSubscriber.prototype.applySingleValue = function (value) {\n        if (this.seenValue) {\n            this.destination.error('Sequence contains more than one element');\n        }\n        else {\n            this.seenValue = true;\n            this.singleValue = value;\n        }\n    };\n    SingleSubscriber.prototype._next = function (value) {\n        var index = this.index++;\n        if (this.predicate) {\n            this.tryNext(value, index);\n        }\n        else {\n            this.applySingleValue(value);\n        }\n    };\n    SingleSubscriber.prototype.tryNext = function (value, index) {\n        try {\n            if (this.predicate(value, index, this.source)) {\n                this.applySingleValue(value);\n            }\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    };\n    SingleSubscriber.prototype._complete = function () {\n        var destination = this.destination;\n        if (this.index > 0) {\n            destination.next(this.seenValue ? this.singleValue : undefined);\n            destination.complete();\n        }\n        else {\n            destination.error(new EmptyError_1.EmptyError);\n        }\n    };\n    return SingleSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=single.js.map","\"use strict\";\nvar ReplaySubject_1 = require('../ReplaySubject');\n/**\n * @method shareReplay\n * @owner Observable\n */\nfunction shareReplay(bufferSize, windowTime, scheduler) {\n    return function (source) { return source.lift(shareReplayOperator(bufferSize, windowTime, scheduler)); };\n}\nexports.shareReplay = shareReplay;\nfunction shareReplayOperator(bufferSize, windowTime, scheduler) {\n    var subject;\n    var refCount = 0;\n    var subscription;\n    var hasError = false;\n    var isComplete = false;\n    return function shareReplayOperation(source) {\n        refCount++;\n        if (!subject || hasError) {\n            hasError = false;\n            subject = new ReplaySubject_1.ReplaySubject(bufferSize, windowTime, scheduler);\n            subscription = source.subscribe({\n                next: function (value) { subject.next(value); },\n                error: function (err) {\n                    hasError = true;\n                    subject.error(err);\n                },\n                complete: function () {\n                    isComplete = true;\n                    subject.complete();\n                },\n            });\n        }\n        var innerSub = subject.subscribe(this);\n        return function () {\n            refCount--;\n            innerSub.unsubscribe();\n            if (subscription && refCount === 0 && isComplete) {\n                subscription.unsubscribe();\n            }\n        };\n    };\n}\n;\n//# sourceMappingURL=shareReplay.js.map","\"use strict\";\nvar multicast_1 = require('./multicast');\nvar refCount_1 = require('./refCount');\nvar Subject_1 = require('../Subject');\nfunction shareSubjectFactory() {\n    return new Subject_1.Subject();\n}\n/**\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n * This is an alias for .multicast(() => new Subject()).refCount().\n *\n * <img src=\"./img/share.png\" width=\"100%\">\n *\n * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.\n * @method share\n * @owner Observable\n */\nfunction share() {\n    return function (source) { return refCount_1.refCount()(multicast_1.multicast(shareSubjectFactory)(source)); };\n}\nexports.share = share;\n;\n//# sourceMappingURL=share.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\n/**\n * Compares all values of two observables in sequence using an optional comparor function\n * and returns an observable of a single boolean value representing whether or not the two sequences\n * are equal.\n *\n * <span class=\"informal\">Checks to see of all values emitted by both observables are equal, in order.</span>\n *\n * <img src=\"./img/sequenceEqual.png\" width=\"100%\">\n *\n * `sequenceEqual` subscribes to two observables and buffers incoming values from each observable. Whenever either\n * observable emits a value, the value is buffered and the buffers are shifted and compared from the bottom\n * up; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the\n * observables completes, the operator will wait for the other observable to complete; If the other\n * observable emits before completing, the returned observable will emit `false` and complete. If one observable never\n * completes or emits after the other complets, the returned observable will never complete.\n *\n * @example <caption>figure out if the Konami code matches</caption>\n * var code = Rx.Observable.from([\n *  \"ArrowUp\",\n *  \"ArrowUp\",\n *  \"ArrowDown\",\n *  \"ArrowDown\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"KeyB\",\n *  \"KeyA\",\n *  \"Enter\" // no start key, clearly.\n * ]);\n *\n * var keys = Rx.Observable.fromEvent(document, 'keyup')\n *  .map(e => e.code);\n * var matches = keys.bufferCount(11, 1)\n *  .mergeMap(\n *    last11 =>\n *      Rx.Observable.from(last11)\n *        .sequenceEqual(code)\n *   );\n * matches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} compareTo The observable sequence to compare the source sequence to.\n * @param {function} [comparor] An optional function to compare each value pair\n * @return {Observable} An Observable of a single boolean value representing whether or not\n * the values emitted by both observables were equal in sequence.\n * @method sequenceEqual\n * @owner Observable\n */\nfunction sequenceEqual(compareTo, comparor) {\n    return function (source) { return source.lift(new SequenceEqualOperator(compareTo, comparor)); };\n}\nexports.sequenceEqual = sequenceEqual;\nvar SequenceEqualOperator = (function () {\n    function SequenceEqualOperator(compareTo, comparor) {\n        this.compareTo = compareTo;\n        this.comparor = comparor;\n    }\n    SequenceEqualOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SequenceEqualSubscriber(subscriber, this.compareTo, this.comparor));\n    };\n    return SequenceEqualOperator;\n}());\nexports.SequenceEqualOperator = SequenceEqualOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SequenceEqualSubscriber = (function (_super) {\n    __extends(SequenceEqualSubscriber, _super);\n    function SequenceEqualSubscriber(destination, compareTo, comparor) {\n        _super.call(this, destination);\n        this.compareTo = compareTo;\n        this.comparor = comparor;\n        this._a = [];\n        this._b = [];\n        this._oneComplete = false;\n        this.add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, this)));\n    }\n    SequenceEqualSubscriber.prototype._next = function (value) {\n        if (this._oneComplete && this._b.length === 0) {\n            this.emit(false);\n        }\n        else {\n            this._a.push(value);\n            this.checkValues();\n        }\n    };\n    SequenceEqualSubscriber.prototype._complete = function () {\n        if (this._oneComplete) {\n            this.emit(this._a.length === 0 && this._b.length === 0);\n        }\n        else {\n            this._oneComplete = true;\n        }\n    };\n    SequenceEqualSubscriber.prototype.checkValues = function () {\n        var _c = this, _a = _c._a, _b = _c._b, comparor = _c.comparor;\n        while (_a.length > 0 && _b.length > 0) {\n            var a = _a.shift();\n            var b = _b.shift();\n            var areEqual = false;\n            if (comparor) {\n                areEqual = tryCatch_1.tryCatch(comparor)(a, b);\n                if (areEqual === errorObject_1.errorObject) {\n                    this.destination.error(errorObject_1.errorObject.e);\n                }\n            }\n            else {\n                areEqual = a === b;\n            }\n            if (!areEqual) {\n                this.emit(false);\n            }\n        }\n    };\n    SequenceEqualSubscriber.prototype.emit = function (value) {\n        var destination = this.destination;\n        destination.next(value);\n        destination.complete();\n    };\n    SequenceEqualSubscriber.prototype.nextB = function (value) {\n        if (this._oneComplete && this._a.length === 0) {\n            this.emit(false);\n        }\n        else {\n            this._b.push(value);\n            this.checkValues();\n        }\n    };\n    return SequenceEqualSubscriber;\n}(Subscriber_1.Subscriber));\nexports.SequenceEqualSubscriber = SequenceEqualSubscriber;\nvar SequenceEqualCompareToSubscriber = (function (_super) {\n    __extends(SequenceEqualCompareToSubscriber, _super);\n    function SequenceEqualCompareToSubscriber(destination, parent) {\n        _super.call(this, destination);\n        this.parent = parent;\n    }\n    SequenceEqualCompareToSubscriber.prototype._next = function (value) {\n        this.parent.nextB(value);\n    };\n    SequenceEqualCompareToSubscriber.prototype._error = function (err) {\n        this.parent.error(err);\n    };\n    SequenceEqualCompareToSubscriber.prototype._complete = function () {\n        this.parent._complete();\n    };\n    return SequenceEqualCompareToSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=sequenceEqual.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar async_1 = require('../scheduler/async');\n/**\n * Emits the most recently emitted value from the source Observable within\n * periodic time intervals.\n *\n * <span class=\"informal\">Samples the source Observable at periodic time\n * intervals, emitting what it samples.</span>\n *\n * <img src=\"./img/sampleTime.png\" width=\"100%\">\n *\n * `sampleTime` periodically looks at the source Observable and emits whichever\n * value it has most recently emitted since the previous sampling, unless the\n * source has not emitted anything since the previous sampling. The sampling\n * happens periodically in time every `period` milliseconds (or the time unit\n * defined by the optional `scheduler` argument). The sampling starts as soon as\n * the output Observable is subscribed.\n *\n * @example <caption>Every second, emit the most recent click at most once</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.sampleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {number} period The sampling period expressed in milliseconds or the\n * time unit determined internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the sampling.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable at the specified time interval.\n * @method sampleTime\n * @owner Observable\n */\nfunction sampleTime(period, scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return function (source) { return source.lift(new SampleTimeOperator(period, scheduler)); };\n}\nexports.sampleTime = sampleTime;\nvar SampleTimeOperator = (function () {\n    function SampleTimeOperator(period, scheduler) {\n        this.period = period;\n        this.scheduler = scheduler;\n    }\n    SampleTimeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SampleTimeSubscriber(subscriber, this.period, this.scheduler));\n    };\n    return SampleTimeOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SampleTimeSubscriber = (function (_super) {\n    __extends(SampleTimeSubscriber, _super);\n    function SampleTimeSubscriber(destination, period, scheduler) {\n        _super.call(this, destination);\n        this.period = period;\n        this.scheduler = scheduler;\n        this.hasValue = false;\n        this.add(scheduler.schedule(dispatchNotification, period, { subscriber: this, period: period }));\n    }\n    SampleTimeSubscriber.prototype._next = function (value) {\n        this.lastValue = value;\n        this.hasValue = true;\n    };\n    SampleTimeSubscriber.prototype.notifyNext = function () {\n        if (this.hasValue) {\n            this.hasValue = false;\n            this.destination.next(this.lastValue);\n        }\n    };\n    return SampleTimeSubscriber;\n}(Subscriber_1.Subscriber));\nfunction dispatchNotification(state) {\n    var subscriber = state.subscriber, period = state.period;\n    subscriber.notifyNext();\n    this.schedule(state, period);\n}\n//# sourceMappingURL=sampleTime.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Emits the most recently emitted value from the source Observable whenever\n * another Observable, the `notifier`, emits.\n *\n * <span class=\"informal\">It's like {@link sampleTime}, but samples whenever\n * the `notifier` Observable emits something.</span>\n *\n * <img src=\"./img/sample.png\" width=\"100%\">\n *\n * Whenever the `notifier` Observable emits a value or completes, `sample`\n * looks at the source Observable and emits whichever value it has most recently\n * emitted since the previous sampling, unless the source has not emitted\n * anything since the previous sampling. The `notifier` is subscribed to as soon\n * as the output Observable is subscribed.\n *\n * @example <caption>On every click, sample the most recent \"seconds\" timer</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = seconds.sample(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {Observable<any>} notifier The Observable to use for sampling the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable whenever the notifier Observable\n * emits value or completes.\n * @method sample\n * @owner Observable\n */\nfunction sample(notifier) {\n    return function (source) { return source.lift(new SampleOperator(notifier)); };\n}\nexports.sample = sample;\nvar SampleOperator = (function () {\n    function SampleOperator(notifier) {\n        this.notifier = notifier;\n    }\n    SampleOperator.prototype.call = function (subscriber, source) {\n        var sampleSubscriber = new SampleSubscriber(subscriber);\n        var subscription = source.subscribe(sampleSubscriber);\n        subscription.add(subscribeToResult_1.subscribeToResult(sampleSubscriber, this.notifier));\n        return subscription;\n    };\n    return SampleOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SampleSubscriber = (function (_super) {\n    __extends(SampleSubscriber, _super);\n    function SampleSubscriber() {\n        _super.apply(this, arguments);\n        this.hasValue = false;\n    }\n    SampleSubscriber.prototype._next = function (value) {\n        this.value = value;\n        this.hasValue = true;\n    };\n    SampleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.emitValue();\n    };\n    SampleSubscriber.prototype.notifyComplete = function () {\n        this.emitValue();\n    };\n    SampleSubscriber.prototype.emitValue = function () {\n        if (this.hasValue) {\n            this.hasValue = false;\n            this.destination.next(this.value);\n        }\n    };\n    return SampleSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=sample.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subject_1 = require('../Subject');\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will emit the Throwable that caused the error to the Observable returned from `notifier`.\n * If that Observable calls `complete` or `error` then this method will call `complete` or `error` on the child\n * subscription. Otherwise this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/retryWhen.png\" width=\"100%\">\n *\n * @param {function(errors: Observable): Observable} notifier - Receives an Observable of notifications with which a\n * user can `complete` or `error`, aborting the retry.\n * @return {Observable} The source Observable modified with retry logic.\n * @method retryWhen\n * @owner Observable\n */\nfunction retryWhen(notifier) {\n    return function (source) { return source.lift(new RetryWhenOperator(notifier, source)); };\n}\nexports.retryWhen = retryWhen;\nvar RetryWhenOperator = (function () {\n    function RetryWhenOperator(notifier, source) {\n        this.notifier = notifier;\n        this.source = source;\n    }\n    RetryWhenOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n    };\n    return RetryWhenOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar RetryWhenSubscriber = (function (_super) {\n    __extends(RetryWhenSubscriber, _super);\n    function RetryWhenSubscriber(destination, notifier, source) {\n        _super.call(this, destination);\n        this.notifier = notifier;\n        this.source = source;\n    }\n    RetryWhenSubscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            var errors = this.errors;\n            var retries = this.retries;\n            var retriesSubscription = this.retriesSubscription;\n            if (!retries) {\n                errors = new Subject_1.Subject();\n                retries = tryCatch_1.tryCatch(this.notifier)(errors);\n                if (retries === errorObject_1.errorObject) {\n                    return _super.prototype.error.call(this, errorObject_1.errorObject.e);\n                }\n                retriesSubscription = subscribeToResult_1.subscribeToResult(this, retries);\n            }\n            else {\n                this.errors = null;\n                this.retriesSubscription = null;\n            }\n            this._unsubscribeAndRecycle();\n            this.errors = errors;\n            this.retries = retries;\n            this.retriesSubscription = retriesSubscription;\n            errors.next(err);\n        }\n    };\n    RetryWhenSubscriber.prototype._unsubscribe = function () {\n        var _a = this, errors = _a.errors, retriesSubscription = _a.retriesSubscription;\n        if (errors) {\n            errors.unsubscribe();\n            this.errors = null;\n        }\n        if (retriesSubscription) {\n            retriesSubscription.unsubscribe();\n            this.retriesSubscription = null;\n        }\n        this.retries = null;\n    };\n    RetryWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var _a = this, errors = _a.errors, retries = _a.retries, retriesSubscription = _a.retriesSubscription;\n        this.errors = null;\n        this.retries = null;\n        this.retriesSubscription = null;\n        this._unsubscribeAndRecycle();\n        this.errors = errors;\n        this.retries = retries;\n        this.retriesSubscription = retriesSubscription;\n        this.source.subscribe(this);\n    };\n    return RetryWhenSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=retryWhen.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will resubscribe to the source Observable for a maximum of `count` resubscriptions (given\n * as a number parameter) rather than propagating the `error` call.\n *\n * <img src=\"./img/retry.png\" width=\"100%\">\n *\n * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted\n * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second\n * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications\n * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].\n * @param {number} count - Number of retry attempts before failing.\n * @return {Observable} The source Observable modified with the retry logic.\n * @method retry\n * @owner Observable\n */\nfunction retry(count) {\n    if (count === void 0) { count = -1; }\n    return function (source) { return source.lift(new RetryOperator(count, source)); };\n}\nexports.retry = retry;\nvar RetryOperator = (function () {\n    function RetryOperator(count, source) {\n        this.count = count;\n        this.source = source;\n    }\n    RetryOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new RetrySubscriber(subscriber, this.count, this.source));\n    };\n    return RetryOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar RetrySubscriber = (function (_super) {\n    __extends(RetrySubscriber, _super);\n    function RetrySubscriber(destination, count, source) {\n        _super.call(this, destination);\n        this.count = count;\n        this.source = source;\n    }\n    RetrySubscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            var _a = this, source = _a.source, count = _a.count;\n            if (count === 0) {\n                return _super.prototype.error.call(this, err);\n            }\n            else if (count > -1) {\n                this.count = count - 1;\n            }\n            source.subscribe(this._unsubscribeAndRecycle());\n        }\n    };\n    return RetrySubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=retry.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subject_1 = require('../Subject');\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Returns an Observable that mirrors the source Observable with the exception of a `complete`. If the source\n * Observable calls `complete`, this method will emit to the Observable returned from `notifier`. If that Observable\n * calls `complete` or `error`, then this method will call `complete` or `error` on the child subscription. Otherwise\n * this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/repeatWhen.png\" width=\"100%\">\n *\n * @param {function(notifications: Observable): Observable} notifier - Receives an Observable of notifications with\n * which a user can `complete` or `error`, aborting the repetition.\n * @return {Observable} The source Observable modified with repeat logic.\n * @method repeatWhen\n * @owner Observable\n */\nfunction repeatWhen(notifier) {\n    return function (source) { return source.lift(new RepeatWhenOperator(notifier)); };\n}\nexports.repeatWhen = repeatWhen;\nvar RepeatWhenOperator = (function () {\n    function RepeatWhenOperator(notifier) {\n        this.notifier = notifier;\n    }\n    RepeatWhenOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));\n    };\n    return RepeatWhenOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar RepeatWhenSubscriber = (function (_super) {\n    __extends(RepeatWhenSubscriber, _super);\n    function RepeatWhenSubscriber(destination, notifier, source) {\n        _super.call(this, destination);\n        this.notifier = notifier;\n        this.source = source;\n        this.sourceIsBeingSubscribedTo = true;\n    }\n    RepeatWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.sourceIsBeingSubscribedTo = true;\n        this.source.subscribe(this);\n    };\n    RepeatWhenSubscriber.prototype.notifyComplete = function (innerSub) {\n        if (this.sourceIsBeingSubscribedTo === false) {\n            return _super.prototype.complete.call(this);\n        }\n    };\n    RepeatWhenSubscriber.prototype.complete = function () {\n        this.sourceIsBeingSubscribedTo = false;\n        if (!this.isStopped) {\n            if (!this.retries) {\n                this.subscribeToRetries();\n            }\n            if (!this.retriesSubscription || this.retriesSubscription.closed) {\n                return _super.prototype.complete.call(this);\n            }\n            this._unsubscribeAndRecycle();\n            this.notifications.next();\n        }\n    };\n    RepeatWhenSubscriber.prototype._unsubscribe = function () {\n        var _a = this, notifications = _a.notifications, retriesSubscription = _a.retriesSubscription;\n        if (notifications) {\n            notifications.unsubscribe();\n            this.notifications = null;\n        }\n        if (retriesSubscription) {\n            retriesSubscription.unsubscribe();\n            this.retriesSubscription = null;\n        }\n        this.retries = null;\n    };\n    RepeatWhenSubscriber.prototype._unsubscribeAndRecycle = function () {\n        var _a = this, notifications = _a.notifications, retries = _a.retries, retriesSubscription = _a.retriesSubscription;\n        this.notifications = null;\n        this.retries = null;\n        this.retriesSubscription = null;\n        _super.prototype._unsubscribeAndRecycle.call(this);\n        this.notifications = notifications;\n        this.retries = retries;\n        this.retriesSubscription = retriesSubscription;\n        return this;\n    };\n    RepeatWhenSubscriber.prototype.subscribeToRetries = function () {\n        this.notifications = new Subject_1.Subject();\n        var retries = tryCatch_1.tryCatch(this.notifier)(this.notifications);\n        if (retries === errorObject_1.errorObject) {\n            return _super.prototype.complete.call(this);\n        }\n        this.retries = retries;\n        this.retriesSubscription = subscribeToResult_1.subscribeToResult(this, retries);\n    };\n    return RepeatWhenSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=repeatWhen.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar EmptyObservable_1 = require('../observable/EmptyObservable');\n/**\n * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times.\n *\n * <img src=\"./img/repeat.png\" width=\"100%\">\n *\n * @param {number} [count] The number of times the source Observable items are repeated, a count of 0 will yield\n * an empty Observable.\n * @return {Observable} An Observable that repeats the stream of items emitted by the source Observable at most\n * count times.\n * @method repeat\n * @owner Observable\n */\nfunction repeat(count) {\n    if (count === void 0) { count = -1; }\n    return function (source) {\n        if (count === 0) {\n            return new EmptyObservable_1.EmptyObservable();\n        }\n        else if (count < 0) {\n            return source.lift(new RepeatOperator(-1, source));\n        }\n        else {\n            return source.lift(new RepeatOperator(count - 1, source));\n        }\n    };\n}\nexports.repeat = repeat;\nvar RepeatOperator = (function () {\n    function RepeatOperator(count, source) {\n        this.count = count;\n        this.source = source;\n    }\n    RepeatOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new RepeatSubscriber(subscriber, this.count, this.source));\n    };\n    return RepeatOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar RepeatSubscriber = (function (_super) {\n    __extends(RepeatSubscriber, _super);\n    function RepeatSubscriber(destination, count, source) {\n        _super.call(this, destination);\n        this.count = count;\n        this.source = source;\n    }\n    RepeatSubscriber.prototype.complete = function () {\n        if (!this.isStopped) {\n            var _a = this, source = _a.source, count = _a.count;\n            if (count === 0) {\n                return _super.prototype.complete.call(this);\n            }\n            else if (count > -1) {\n                this.count = count - 1;\n            }\n            source.subscribe(this._unsubscribeAndRecycle());\n        }\n    };\n    return RepeatSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=repeat.js.map","\"use strict\";\nvar isArray_1 = require('../util/isArray');\nvar race_1 = require('../observable/race');\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item\n * from the combination of this Observable and supplied Observables.\n * @param {...Observables} ...observables Sources used to race for which Observable emits first.\n * @return {Observable} An Observable that mirrors the output of the first Observable to emit an item.\n * @method race\n * @owner Observable\n */\nfunction race() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    return function raceOperatorFunction(source) {\n        // if the only argument is an array, it was most likely called with\n        // `pair([obs1, obs2, ...])`\n        if (observables.length === 1 && isArray_1.isArray(observables[0])) {\n            observables = observables[0];\n        }\n        return source.lift.call(race_1.race.apply(void 0, [source].concat(observables)));\n    };\n}\nexports.race = race;\n//# sourceMappingURL=race.js.map","\"use strict\";\nvar AsyncSubject_1 = require('../AsyncSubject');\nvar multicast_1 = require('./multicast');\nfunction publishLast() {\n    return function (source) { return multicast_1.multicast(new AsyncSubject_1.AsyncSubject())(source); };\n}\nexports.publishLast = publishLast;\n//# sourceMappingURL=publishLast.js.map","\"use strict\";\nvar ReplaySubject_1 = require('../ReplaySubject');\nvar multicast_1 = require('./multicast');\n/* tslint:enable:max-line-length */\nfunction publishReplay(bufferSize, windowTime, selectorOrScheduler, scheduler) {\n    if (selectorOrScheduler && typeof selectorOrScheduler !== 'function') {\n        scheduler = selectorOrScheduler;\n    }\n    var selector = typeof selectorOrScheduler === 'function' ? selectorOrScheduler : undefined;\n    var subject = new ReplaySubject_1.ReplaySubject(bufferSize, windowTime, scheduler);\n    return function (source) { return multicast_1.multicast(function () { return subject; }, selector)(source); };\n}\nexports.publishReplay = publishReplay;\n//# sourceMappingURL=publishReplay.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subject_1 = require('./Subject');\nvar ObjectUnsubscribedError_1 = require('./util/ObjectUnsubscribedError');\n/**\n * @class BehaviorSubject<T>\n */\nvar BehaviorSubject = (function (_super) {\n    __extends(BehaviorSubject, _super);\n    function BehaviorSubject(_value) {\n        _super.call(this);\n        this._value = _value;\n    }\n    Object.defineProperty(BehaviorSubject.prototype, \"value\", {\n        get: function () {\n            return this.getValue();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    BehaviorSubject.prototype._subscribe = function (subscriber) {\n        var subscription = _super.prototype._subscribe.call(this, subscriber);\n        if (subscription && !subscription.closed) {\n            subscriber.next(this._value);\n        }\n        return subscription;\n    };\n    BehaviorSubject.prototype.getValue = function () {\n        if (this.hasError) {\n            throw this.thrownError;\n        }\n        else if (this.closed) {\n            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();\n        }\n        else {\n            return this._value;\n        }\n    };\n    BehaviorSubject.prototype.next = function (value) {\n        _super.prototype.next.call(this, this._value = value);\n    };\n    return BehaviorSubject;\n}(Subject_1.Subject));\nexports.BehaviorSubject = BehaviorSubject;\n//# sourceMappingURL=BehaviorSubject.js.map","\"use strict\";\nvar BehaviorSubject_1 = require('../BehaviorSubject');\nvar multicast_1 = require('./multicast');\n/**\n * @param value\n * @return {ConnectableObservable<T>}\n * @method publishBehavior\n * @owner Observable\n */\nfunction publishBehavior(value) {\n    return function (source) { return multicast_1.multicast(new BehaviorSubject_1.BehaviorSubject(value))(source); };\n}\nexports.publishBehavior = publishBehavior;\n//# sourceMappingURL=publishBehavior.js.map","\"use strict\";\nvar Subject_1 = require('../Subject');\nvar multicast_1 = require('./multicast');\n/* tslint:enable:max-line-length */\n/**\n * Returns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called\n * before it begins emitting items to those Observers that have subscribed to it.\n *\n * <img src=\"./img/publish.png\" width=\"100%\">\n *\n * @param {Function} [selector] - Optional selector function which can use the multicasted source sequence as many times\n * as needed, without causing multiple subscriptions to the source sequence.\n * Subscribers to the given source will receive all notifications of the source from the time of the subscription on.\n * @return A ConnectableObservable that upon connection causes the source Observable to emit items to its Observers.\n * @method publish\n * @owner Observable\n */\nfunction publish(selector) {\n    return selector ?\n        multicast_1.multicast(function () { return new Subject_1.Subject(); }, selector) :\n        multicast_1.multicast(new Subject_1.Subject());\n}\nexports.publish = publish;\n//# sourceMappingURL=publish.js.map","\"use strict\";\nvar map_1 = require('./map');\n/**\n * Maps each source value (an object) to its specified nested property.\n *\n * <span class=\"informal\">Like {@link map}, but meant only for picking one of\n * the nested properties of every emitted object.</span>\n *\n * <img src=\"./img/pluck.png\" width=\"100%\">\n *\n * Given a list of strings describing a path to an object property, retrieves\n * the value of a specified nested property from all values in the source\n * Observable. If a property can't be resolved, it will return `undefined` for\n * that value.\n *\n * @example <caption>Map every click to the tagName of the clicked target element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var tagNames = clicks.pluck('target', 'tagName');\n * tagNames.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {...string} properties The nested properties to pluck from each source\n * value (an object).\n * @return {Observable} A new Observable of property values from the source values.\n * @method pluck\n * @owner Observable\n */\nfunction pluck() {\n    var properties = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        properties[_i - 0] = arguments[_i];\n    }\n    var length = properties.length;\n    if (length === 0) {\n        throw new Error('list of properties cannot be empty.');\n    }\n    return function (source) { return map_1.map(plucker(properties, length))(source); };\n}\nexports.pluck = pluck;\nfunction plucker(props, length) {\n    var mapper = function (x) {\n        var currentProp = x;\n        for (var i = 0; i < length; i++) {\n            var p = currentProp[props[i]];\n            if (typeof p !== 'undefined') {\n                currentProp = p;\n            }\n            else {\n                return undefined;\n            }\n        }\n        return currentProp;\n    };\n    return mapper;\n}\n//# sourceMappingURL=pluck.js.map","\"use strict\";\nvar not_1 = require('../util/not');\nvar filter_1 = require('./filter');\n/**\n * Splits the source Observable into two, one with values that satisfy a\n * predicate, and another with values that don't satisfy the predicate.\n *\n * <span class=\"informal\">It's like {@link filter}, but returns two Observables:\n * one like the output of {@link filter}, and the other with values that did not\n * pass the condition.</span>\n *\n * <img src=\"./img/partition.png\" width=\"100%\">\n *\n * `partition` outputs an array with two Observables that partition the values\n * from the source Observable through the given `predicate` function. The first\n * Observable in that array emits source values for which the predicate argument\n * returns true. The second Observable emits source values for which the\n * predicate returns false. The first behaves like {@link filter} and the second\n * behaves like {@link filter} with the predicate negated.\n *\n * @example <caption>Partition click events into those on DIV elements and those elsewhere</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var parts = clicks.partition(ev => ev.target.tagName === 'DIV');\n * var clicksOnDivs = parts[0];\n * var clicksElsewhere = parts[1];\n * clicksOnDivs.subscribe(x => console.log('DIV clicked: ', x));\n * clicksElsewhere.subscribe(x => console.log('Other clicked: ', x));\n *\n * @see {@link filter}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted on the first Observable in the returned array, if\n * `false` the value is emitted on the second Observable in the array. The\n * `index` parameter is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {[Observable<T>, Observable<T>]} An array with two Observables: one\n * with values that passed the predicate, and another with values that did not\n * pass the predicate.\n * @method partition\n * @owner Observable\n */\nfunction partition(predicate, thisArg) {\n    return function (source) { return [\n        filter_1.filter(predicate, thisArg)(source),\n        filter_1.filter(not_1.not(predicate, thisArg))(source)\n    ]; };\n}\nexports.partition = partition;\n//# sourceMappingURL=partition.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Groups pairs of consecutive emissions together and emits them as an array of\n * two values.\n *\n * <span class=\"informal\">Puts the current value and previous value together as\n * an array, and emits that.</span>\n *\n * <img src=\"./img/pairwise.png\" width=\"100%\">\n *\n * The Nth emission from the source Observable will cause the output Observable\n * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\n * pair. For this reason, `pairwise` emits on the second and subsequent\n * emissions from the source Observable, but not on the first emission, because\n * there is no previous value in that case.\n *\n * @example <caption>On every click (starting from the second), emit the relative distance to the previous click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var pairs = clicks.pairwise();\n * var distance = pairs.map(pair => {\n *   var x0 = pair[0].clientX;\n *   var y0 = pair[0].clientY;\n *   var x1 = pair[1].clientX;\n *   var y1 = pair[1].clientY;\n *   return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n * });\n * distance.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n *\n * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of\n * consecutive values from the source Observable.\n * @method pairwise\n * @owner Observable\n */\nfunction pairwise() {\n    return function (source) { return source.lift(new PairwiseOperator()); };\n}\nexports.pairwise = pairwise;\nvar PairwiseOperator = (function () {\n    function PairwiseOperator() {\n    }\n    PairwiseOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new PairwiseSubscriber(subscriber));\n    };\n    return PairwiseOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar PairwiseSubscriber = (function (_super) {\n    __extends(PairwiseSubscriber, _super);\n    function PairwiseSubscriber(destination) {\n        _super.call(this, destination);\n        this.hasPrev = false;\n    }\n    PairwiseSubscriber.prototype._next = function (value) {\n        if (this.hasPrev) {\n            this.destination.next([this.prev, value]);\n        }\n        else {\n            this.hasPrev = true;\n        }\n        this.prev = value;\n    };\n    return PairwiseSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=pairwise.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subject_1 = require('../Subject');\nvar Observable_1 = require('../Observable');\nvar Subscriber_1 = require('../Subscriber');\nvar Subscription_1 = require('../Subscription');\nvar refCount_1 = require('../operators/refCount');\n/**\n * @class ConnectableObservable<T>\n */\nvar ConnectableObservable = (function (_super) {\n    __extends(ConnectableObservable, _super);\n    function ConnectableObservable(source, subjectFactory) {\n        _super.call(this);\n        this.source = source;\n        this.subjectFactory = subjectFactory;\n        this._refCount = 0;\n        this._isComplete = false;\n    }\n    ConnectableObservable.prototype._subscribe = function (subscriber) {\n        return this.getSubject().subscribe(subscriber);\n    };\n    ConnectableObservable.prototype.getSubject = function () {\n        var subject = this._subject;\n        if (!subject || subject.isStopped) {\n            this._subject = this.subjectFactory();\n        }\n        return this._subject;\n    };\n    ConnectableObservable.prototype.connect = function () {\n        var connection = this._connection;\n        if (!connection) {\n            this._isComplete = false;\n            connection = this._connection = new Subscription_1.Subscription();\n            connection.add(this.source\n                .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n            if (connection.closed) {\n                this._connection = null;\n                connection = Subscription_1.Subscription.EMPTY;\n            }\n            else {\n                this._connection = connection;\n            }\n        }\n        return connection;\n    };\n    ConnectableObservable.prototype.refCount = function () {\n        return refCount_1.refCount()(this);\n    };\n    return ConnectableObservable;\n}(Observable_1.Observable));\nexports.ConnectableObservable = ConnectableObservable;\nvar connectableProto = ConnectableObservable.prototype;\nexports.connectableObservableDescriptor = {\n    operator: { value: null },\n    _refCount: { value: 0, writable: true },\n    _subject: { value: null, writable: true },\n    _connection: { value: null, writable: true },\n    _subscribe: { value: connectableProto._subscribe },\n    _isComplete: { value: connectableProto._isComplete, writable: true },\n    getSubject: { value: connectableProto.getSubject },\n    connect: { value: connectableProto.connect },\n    refCount: { value: connectableProto.refCount }\n};\nvar ConnectableSubscriber = (function (_super) {\n    __extends(ConnectableSubscriber, _super);\n    function ConnectableSubscriber(destination, connectable) {\n        _super.call(this, destination);\n        this.connectable = connectable;\n    }\n    ConnectableSubscriber.prototype._error = function (err) {\n        this._unsubscribe();\n        _super.prototype._error.call(this, err);\n    };\n    ConnectableSubscriber.prototype._complete = function () {\n        this.connectable._isComplete = true;\n        this._unsubscribe();\n        _super.prototype._complete.call(this);\n    };\n    ConnectableSubscriber.prototype._unsubscribe = function () {\n        var connectable = this.connectable;\n        if (connectable) {\n            this.connectable = null;\n            var connection = connectable._connection;\n            connectable._refCount = 0;\n            connectable._subject = null;\n            connectable._connection = null;\n            if (connection) {\n                connection.unsubscribe();\n            }\n        }\n    };\n    return ConnectableSubscriber;\n}(Subject_1.SubjectSubscriber));\nvar RefCountOperator = (function () {\n    function RefCountOperator(connectable) {\n        this.connectable = connectable;\n    }\n    RefCountOperator.prototype.call = function (subscriber, source) {\n        var connectable = this.connectable;\n        connectable._refCount++;\n        var refCounter = new RefCountSubscriber(subscriber, connectable);\n        var subscription = source.subscribe(refCounter);\n        if (!refCounter.closed) {\n            refCounter.connection = connectable.connect();\n        }\n        return subscription;\n    };\n    return RefCountOperator;\n}());\nvar RefCountSubscriber = (function (_super) {\n    __extends(RefCountSubscriber, _super);\n    function RefCountSubscriber(destination, connectable) {\n        _super.call(this, destination);\n        this.connectable = connectable;\n    }\n    RefCountSubscriber.prototype._unsubscribe = function () {\n        var connectable = this.connectable;\n        if (!connectable) {\n            this.connection = null;\n            return;\n        }\n        this.connectable = null;\n        var refCount = connectable._refCount;\n        if (refCount <= 0) {\n            this.connection = null;\n            return;\n        }\n        connectable._refCount = refCount - 1;\n        if (refCount > 1) {\n            this.connection = null;\n            return;\n        }\n        ///\n        // Compare the local RefCountSubscriber's connection Subscription to the\n        // connection Subscription on the shared ConnectableObservable. In cases\n        // where the ConnectableObservable source synchronously emits values, and\n        // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n        // execution continues to here before the RefCountOperator has a chance to\n        // supply the RefCountSubscriber with the shared connection Subscription.\n        // For example:\n        // ```\n        // Observable.range(0, 10)\n        //   .publish()\n        //   .refCount()\n        //   .take(5)\n        //   .subscribe();\n        // ```\n        // In order to account for this case, RefCountSubscriber should only dispose\n        // the ConnectableObservable's shared connection Subscription if the\n        // connection Subscription exists, *and* either:\n        //   a. RefCountSubscriber doesn't have a reference to the shared connection\n        //      Subscription yet, or,\n        //   b. RefCountSubscriber's connection Subscription reference is identical\n        //      to the shared connection Subscription\n        ///\n        var connection = this.connection;\n        var sharedConnection = connectable._connection;\n        this.connection = null;\n        if (sharedConnection && (!connection || sharedConnection === connection)) {\n            sharedConnection.unsubscribe();\n        }\n    };\n    return RefCountSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=ConnectableObservable.js.map","\"use strict\";\nvar reduce_1 = require('./reduce');\n/**\n * The Min operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the smallest value.\n *\n * <img src=\"./img/min.png\" width=\"100%\">\n *\n * @example <caption>Get the minimal value of a series of numbers</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .min()\n *   .subscribe(x => console.log(x)); // -> 2\n *\n * @example <caption>Use a comparer function to get the minimal item</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .min<Person>( (a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Bar'\n * }\n *\n * @see {@link max}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return {Observable<R>} An Observable that emits item with the smallest value.\n * @method min\n * @owner Observable\n */\nfunction min(comparer) {\n    var min = (typeof comparer === 'function')\n        ? function (x, y) { return comparer(x, y) < 0 ? x : y; }\n        : function (x, y) { return x < y ? x : y; };\n    return reduce_1.reduce(min);\n}\nexports.min = min;\n//# sourceMappingURL=min.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\n/**\n * Applies an accumulator function over the source Observable where the\n * accumulator function itself returns an Observable, then each intermediate\n * Observable returned is merged into the output Observable.\n *\n * <span class=\"informal\">It's like {@link scan}, but the Observables returned\n * by the accumulator are merged into the outer Observable.</span>\n *\n * @example <caption>Count the number of click events</caption>\n * const click$ = Rx.Observable.fromEvent(document, 'click');\n * const one$ = click$.mapTo(1);\n * const seed = 0;\n * const count$ = one$.mergeScan((acc, one) => Rx.Observable.of(acc + one), seed);\n * count$.subscribe(x => console.log(x));\n *\n * // Results:\n * 1\n * 2\n * 3\n * 4\n * // ...and so on for each click\n *\n * @param {function(acc: R, value: T): Observable<R>} accumulator\n * The accumulator function called on each source value.\n * @param seed The initial accumulation value.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of\n * input Observables being subscribed to concurrently.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method mergeScan\n * @owner Observable\n */\nfunction mergeScan(accumulator, seed, concurrent) {\n    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n    return function (source) { return source.lift(new MergeScanOperator(accumulator, seed, concurrent)); };\n}\nexports.mergeScan = mergeScan;\nvar MergeScanOperator = (function () {\n    function MergeScanOperator(accumulator, seed, concurrent) {\n        this.accumulator = accumulator;\n        this.seed = seed;\n        this.concurrent = concurrent;\n    }\n    MergeScanOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new MergeScanSubscriber(subscriber, this.accumulator, this.seed, this.concurrent));\n    };\n    return MergeScanOperator;\n}());\nexports.MergeScanOperator = MergeScanOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MergeScanSubscriber = (function (_super) {\n    __extends(MergeScanSubscriber, _super);\n    function MergeScanSubscriber(destination, accumulator, acc, concurrent) {\n        _super.call(this, destination);\n        this.accumulator = accumulator;\n        this.acc = acc;\n        this.concurrent = concurrent;\n        this.hasValue = false;\n        this.hasCompleted = false;\n        this.buffer = [];\n        this.active = 0;\n        this.index = 0;\n    }\n    MergeScanSubscriber.prototype._next = function (value) {\n        if (this.active < this.concurrent) {\n            var index = this.index++;\n            var ish = tryCatch_1.tryCatch(this.accumulator)(this.acc, value);\n            var destination = this.destination;\n            if (ish === errorObject_1.errorObject) {\n                destination.error(errorObject_1.errorObject.e);\n            }\n            else {\n                this.active++;\n                this._innerSub(ish, value, index);\n            }\n        }\n        else {\n            this.buffer.push(value);\n        }\n    };\n    MergeScanSubscriber.prototype._innerSub = function (ish, value, index) {\n        this.add(subscribeToResult_1.subscribeToResult(this, ish, value, index));\n    };\n    MergeScanSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (this.active === 0 && this.buffer.length === 0) {\n            if (this.hasValue === false) {\n                this.destination.next(this.acc);\n            }\n            this.destination.complete();\n        }\n    };\n    MergeScanSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var destination = this.destination;\n        this.acc = innerValue;\n        this.hasValue = true;\n        destination.next(innerValue);\n    };\n    MergeScanSubscriber.prototype.notifyComplete = function (innerSub) {\n        var buffer = this.buffer;\n        this.remove(innerSub);\n        this.active--;\n        if (buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        else if (this.active === 0 && this.hasCompleted) {\n            if (this.hasValue === false) {\n                this.destination.next(this.acc);\n            }\n            this.destination.complete();\n        }\n    };\n    return MergeScanSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\nexports.MergeScanSubscriber = MergeScanSubscriber;\n//# sourceMappingURL=mergeScan.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in the output Observable.\n *\n * <span class=\"informal\">It's like {@link mergeMap}, but maps each value always\n * to the same inner Observable.</span>\n *\n * <img src=\"./img/mergeMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then merges those resulting Observables into one\n * single Observable, which is the output Observable.\n *\n * @example <caption>For each click event, start an interval Observable ticking every 1 second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.mergeMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable.\n * @method mergeMapTo\n * @owner Observable\n */\nfunction mergeMapTo(innerObservable, resultSelector, concurrent) {\n    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n    if (typeof resultSelector === 'number') {\n        concurrent = resultSelector;\n        resultSelector = null;\n    }\n    return function (source) { return source.lift(new MergeMapToOperator(innerObservable, resultSelector, concurrent)); };\n}\nexports.mergeMapTo = mergeMapTo;\n// TODO: Figure out correct signature here: an Operator<Observable<T>, R>\n//       needs to implement call(observer: Subscriber<R>): Subscriber<Observable<T>>\nvar MergeMapToOperator = (function () {\n    function MergeMapToOperator(ish, resultSelector, concurrent) {\n        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n        this.ish = ish;\n        this.resultSelector = resultSelector;\n        this.concurrent = concurrent;\n    }\n    MergeMapToOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new MergeMapToSubscriber(observer, this.ish, this.resultSelector, this.concurrent));\n    };\n    return MergeMapToOperator;\n}());\nexports.MergeMapToOperator = MergeMapToOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MergeMapToSubscriber = (function (_super) {\n    __extends(MergeMapToSubscriber, _super);\n    function MergeMapToSubscriber(destination, ish, resultSelector, concurrent) {\n        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n        _super.call(this, destination);\n        this.ish = ish;\n        this.resultSelector = resultSelector;\n        this.concurrent = concurrent;\n        this.hasCompleted = false;\n        this.buffer = [];\n        this.active = 0;\n        this.index = 0;\n    }\n    MergeMapToSubscriber.prototype._next = function (value) {\n        if (this.active < this.concurrent) {\n            var resultSelector = this.resultSelector;\n            var index = this.index++;\n            var ish = this.ish;\n            var destination = this.destination;\n            this.active++;\n            this._innerSub(ish, destination, resultSelector, value, index);\n        }\n        else {\n            this.buffer.push(value);\n        }\n    };\n    MergeMapToSubscriber.prototype._innerSub = function (ish, destination, resultSelector, value, index) {\n        this.add(subscribeToResult_1.subscribeToResult(this, ish, value, index));\n    };\n    MergeMapToSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (this.active === 0 && this.buffer.length === 0) {\n            this.destination.complete();\n        }\n    };\n    MergeMapToSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;\n        if (resultSelector) {\n            this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        else {\n            destination.next(innerValue);\n        }\n    };\n    MergeMapToSubscriber.prototype.trySelectResult = function (outerValue, innerValue, outerIndex, innerIndex) {\n        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;\n        var result;\n        try {\n            result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        catch (err) {\n            destination.error(err);\n            return;\n        }\n        destination.next(result);\n    };\n    MergeMapToSubscriber.prototype.notifyError = function (err) {\n        this.destination.error(err);\n    };\n    MergeMapToSubscriber.prototype.notifyComplete = function (innerSub) {\n        var buffer = this.buffer;\n        this.remove(innerSub);\n        this.active--;\n        if (buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        else if (this.active === 0 && this.hasCompleted) {\n            this.destination.complete();\n        }\n    };\n    return MergeMapToSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\nexports.MergeMapToSubscriber = MergeMapToSubscriber;\n//# sourceMappingURL=mergeMapTo.js.map","\"use strict\";\nvar merge_1 = require('../observable/merge');\nvar merge_2 = require('../observable/merge');\nexports.mergeStatic = merge_2.merge;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (either the source or an\n * Observable given as argument), and simply forwards (without doing any\n * transformation) all the values from all the input Observables to the output\n * Observable. The output Observable only completes once all input Observables\n * have completed. Any error delivered by an input Observable will be immediately\n * emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = clicks.merge(timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = timer1.merge(timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {ObservableInput} other An input Observable to merge with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} An Observable that emits items that are the result of\n * every input Observable.\n * @method merge\n * @owner Observable\n */\nfunction merge() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    return function (source) { return source.lift.call(merge_1.merge.apply(void 0, [source].concat(observables))); };\n}\nexports.merge = merge;\n//# sourceMappingURL=merge.js.map","\"use strict\";\nvar reduce_1 = require('./reduce');\n/**\n * The Max operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the largest value.\n *\n * <img src=\"./img/max.png\" width=\"100%\">\n *\n * @example <caption>Get the maximal value of a series of numbers</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .max()\n *   .subscribe(x => console.log(x)); // -> 8\n *\n * @example <caption>Use a comparer function to get the maximal item</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .max<Person>((a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Beer'\n * }\n *\n * @see {@link min}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return {Observable} An Observable that emits item with the largest value.\n * @method max\n * @owner Observable\n */\nfunction max(comparer) {\n    var max = (typeof comparer === 'function')\n        ? function (x, y) { return comparer(x, y) > 0 ? x : y; }\n        : function (x, y) { return x > y ? x : y; };\n    return reduce_1.reduce(max);\n}\nexports.max = max;\n//# sourceMappingURL=max.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar Notification_1 = require('../Notification');\n/**\n * Represents all of the notifications from the source Observable as `next`\n * emissions marked with their original types within {@link Notification}\n * objects.\n *\n * <span class=\"informal\">Wraps `next`, `error` and `complete` emissions in\n * {@link Notification} objects, emitted as `next` on the output Observable.\n * </span>\n *\n * <img src=\"./img/materialize.png\" width=\"100%\">\n *\n * `materialize` returns an Observable that emits a `next` notification for each\n * `next`, `error`, or `complete` emission of the source Observable. When the\n * source Observable emits `complete`, the output Observable will emit `next` as\n * a Notification of type \"complete\", and then it will emit `complete` as well.\n * When the source Observable emits `error`, the output will emit `next` as a\n * Notification of type \"error\", and then `complete`.\n *\n * This operator is useful for producing metadata of the source Observable, to\n * be consumed as `next` emissions. Use it in conjunction with\n * {@link dematerialize}.\n *\n * @example <caption>Convert a faulty Observable to an Observable of Notifications</caption>\n * var letters = Rx.Observable.of('a', 'b', 13, 'd');\n * var upperCase = letters.map(x => x.toUpperCase());\n * var materialized = upperCase.materialize();\n * materialized.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - Notification {kind: \"N\", value: \"A\", error: undefined, hasValue: true}\n * // - Notification {kind: \"N\", value: \"B\", error: undefined, hasValue: true}\n * // - Notification {kind: \"E\", value: undefined, error: TypeError:\n * //   x.toUpperCase is not a function at MapSubscriber.letters.map.x\n * //   [as project] (http://1…, hasValue: false}\n *\n * @see {@link Notification}\n * @see {@link dematerialize}\n *\n * @return {Observable<Notification<T>>} An Observable that emits\n * {@link Notification} objects that wrap the original emissions from the source\n * Observable with metadata.\n * @method materialize\n * @owner Observable\n */\nfunction materialize() {\n    return function materializeOperatorFunction(source) {\n        return source.lift(new MaterializeOperator());\n    };\n}\nexports.materialize = materialize;\nvar MaterializeOperator = (function () {\n    function MaterializeOperator() {\n    }\n    MaterializeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new MaterializeSubscriber(subscriber));\n    };\n    return MaterializeOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MaterializeSubscriber = (function (_super) {\n    __extends(MaterializeSubscriber, _super);\n    function MaterializeSubscriber(destination) {\n        _super.call(this, destination);\n    }\n    MaterializeSubscriber.prototype._next = function (value) {\n        this.destination.next(Notification_1.Notification.createNext(value));\n    };\n    MaterializeSubscriber.prototype._error = function (err) {\n        var destination = this.destination;\n        destination.next(Notification_1.Notification.createError(err));\n        destination.complete();\n    };\n    MaterializeSubscriber.prototype._complete = function () {\n        var destination = this.destination;\n        destination.next(Notification_1.Notification.createComplete());\n        destination.complete();\n    };\n    return MaterializeSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=materialize.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Emits the given constant value on the output Observable every time the source\n * Observable emits a value.\n *\n * <span class=\"informal\">Like {@link map}, but it maps every source value to\n * the same output value every time.</span>\n *\n * <img src=\"./img/mapTo.png\" width=\"100%\">\n *\n * Takes a constant `value` as argument, and emits that whenever the source\n * Observable emits a value. In other words, ignores the actual source value,\n * and simply uses the emission moment to know when to emit the given `value`.\n *\n * @example <caption>Map every click to the string 'Hi'</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var greetings = clicks.mapTo('Hi');\n * greetings.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {any} value The value to map each source value to.\n * @return {Observable} An Observable that emits the given `value` every time\n * the source Observable emits something.\n * @method mapTo\n * @owner Observable\n */\nfunction mapTo(value) {\n    return function (source) { return source.lift(new MapToOperator(value)); };\n}\nexports.mapTo = mapTo;\nvar MapToOperator = (function () {\n    function MapToOperator(value) {\n        this.value = value;\n    }\n    MapToOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new MapToSubscriber(subscriber, this.value));\n    };\n    return MapToOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MapToSubscriber = (function (_super) {\n    __extends(MapToSubscriber, _super);\n    function MapToSubscriber(destination, value) {\n        _super.call(this, destination);\n        this.value = value;\n    }\n    MapToSubscriber.prototype._next = function (x) {\n        this.destination.next(this.value);\n    };\n    return MapToSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=mapTo.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.\n *\n * @example <caption>A simple example emitting true if all elements are less than 5, false otherwise</caption>\n *  Observable.of(1, 2, 3, 4, 5, 6)\n *     .every(x => x < 5)\n *     .subscribe(x => console.log(x)); // -> false\n *\n * @param {function} predicate A function for determining if an item meets a specified condition.\n * @param {any} [thisArg] Optional object to use for `this` in the callback.\n * @return {Observable} An Observable of booleans that determines if all items of the source Observable meet the condition specified.\n * @method every\n * @owner Observable\n */\nfunction every(predicate, thisArg) {\n    return function (source) { return source.lift(new EveryOperator(predicate, thisArg, source)); };\n}\nexports.every = every;\nvar EveryOperator = (function () {\n    function EveryOperator(predicate, thisArg, source) {\n        this.predicate = predicate;\n        this.thisArg = thisArg;\n        this.source = source;\n    }\n    EveryOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));\n    };\n    return EveryOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar EverySubscriber = (function (_super) {\n    __extends(EverySubscriber, _super);\n    function EverySubscriber(destination, predicate, thisArg, source) {\n        _super.call(this, destination);\n        this.predicate = predicate;\n        this.thisArg = thisArg;\n        this.source = source;\n        this.index = 0;\n        this.thisArg = thisArg || this;\n    }\n    EverySubscriber.prototype.notifyComplete = function (everyValueMatch) {\n        this.destination.next(everyValueMatch);\n        this.destination.complete();\n    };\n    EverySubscriber.prototype._next = function (value) {\n        var result = false;\n        try {\n            result = this.predicate.call(this.thisArg, value, this.index++, this.source);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        if (!result) {\n            this.notifyComplete(false);\n        }\n    };\n    EverySubscriber.prototype._complete = function () {\n        this.notifyComplete(true);\n    };\n    return EverySubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=every.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar EmptyError_1 = require('../util/EmptyError');\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits only the last item emitted by the source Observable.\n * It optionally takes a predicate function as a parameter, in which case, rather than emitting\n * the last item from the source Observable, the resulting Observable will emit the last item\n * from the source Observable that satisfies the predicate.\n *\n * <img src=\"./img/last.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {function} predicate - The condition any source emitted item has to satisfy.\n * @return {Observable} An Observable that emits only the last item satisfying the given condition\n * from the source, or an NoSuchElementException if no such items are emitted.\n * @throws - Throws if no items that match the predicate are emitted by the source Observable.\n * @method last\n * @owner Observable\n */\nfunction last(predicate, resultSelector, defaultValue) {\n    return function (source) { return source.lift(new LastOperator(predicate, resultSelector, defaultValue, source)); };\n}\nexports.last = last;\nvar LastOperator = (function () {\n    function LastOperator(predicate, resultSelector, defaultValue, source) {\n        this.predicate = predicate;\n        this.resultSelector = resultSelector;\n        this.defaultValue = defaultValue;\n        this.source = source;\n    }\n    LastOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new LastSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n    };\n    return LastOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar LastSubscriber = (function (_super) {\n    __extends(LastSubscriber, _super);\n    function LastSubscriber(destination, predicate, resultSelector, defaultValue, source) {\n        _super.call(this, destination);\n        this.predicate = predicate;\n        this.resultSelector = resultSelector;\n        this.defaultValue = defaultValue;\n        this.source = source;\n        this.hasValue = false;\n        this.index = 0;\n        if (typeof defaultValue !== 'undefined') {\n            this.lastValue = defaultValue;\n            this.hasValue = true;\n        }\n    }\n    LastSubscriber.prototype._next = function (value) {\n        var index = this.index++;\n        if (this.predicate) {\n            this._tryPredicate(value, index);\n        }\n        else {\n            if (this.resultSelector) {\n                this._tryResultSelector(value, index);\n                return;\n            }\n            this.lastValue = value;\n            this.hasValue = true;\n        }\n    };\n    LastSubscriber.prototype._tryPredicate = function (value, index) {\n        var result;\n        try {\n            result = this.predicate(value, index, this.source);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        if (result) {\n            if (this.resultSelector) {\n                this._tryResultSelector(value, index);\n                return;\n            }\n            this.lastValue = value;\n            this.hasValue = true;\n        }\n    };\n    LastSubscriber.prototype._tryResultSelector = function (value, index) {\n        var result;\n        try {\n            result = this.resultSelector(value, index);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.lastValue = result;\n        this.hasValue = true;\n    };\n    LastSubscriber.prototype._complete = function () {\n        var destination = this.destination;\n        if (this.hasValue) {\n            destination.next(this.lastValue);\n            destination.complete();\n        }\n        else {\n            destination.error(new EmptyError_1.EmptyError);\n        }\n    };\n    return LastSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=last.js.map","\"use strict\";\nvar async_1 = require('../scheduler/async');\nvar audit_1 = require('./audit');\nvar timer_1 = require('../observable/timer');\n/**\n * Ignores source values for `duration` milliseconds, then emits the most recent\n * value from the source Observable, then repeats this process.\n *\n * <span class=\"informal\">When it sees a source values, it ignores that plus\n * the next ones for `duration` milliseconds, and then it emits the most recent\n * value from the source.</span>\n *\n * <img src=\"./img/auditTime.png\" width=\"100%\">\n *\n * `auditTime` is similar to `throttleTime`, but emits the last value from the\n * silenced time window, instead of the first value. `auditTime` emits the most\n * recent value from the source Observable on the output Observable as soon as\n * its internal timer becomes disabled, and ignores source values while the\n * timer is enabled. Initially, the timer is disabled. As soon as the first\n * source value arrives, the timer is enabled. After `duration` milliseconds (or\n * the time unit determined internally by the optional `scheduler`) has passed,\n * the timer is disabled, then the most recent source value is emitted on the\n * output Observable, and this process repeats for the next source value.\n * Optionally takes a {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.auditTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} duration Time to wait before emitting the most recent source\n * value, measured in milliseconds or the time unit determined internally\n * by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the rate-limiting behavior.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method auditTime\n * @owner Observable\n */\nfunction auditTime(duration, scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return audit_1.audit(function () { return timer_1.timer(duration, scheduler); });\n}\nexports.auditTime = auditTime;\n//# sourceMappingURL=auditTime.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nfunction isEmpty() {\n    return function (source) { return source.lift(new IsEmptyOperator()); };\n}\nexports.isEmpty = isEmpty;\nvar IsEmptyOperator = (function () {\n    function IsEmptyOperator() {\n    }\n    IsEmptyOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new IsEmptySubscriber(observer));\n    };\n    return IsEmptyOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar IsEmptySubscriber = (function (_super) {\n    __extends(IsEmptySubscriber, _super);\n    function IsEmptySubscriber(destination) {\n        _super.call(this, destination);\n    }\n    IsEmptySubscriber.prototype.notifyComplete = function (isEmpty) {\n        var destination = this.destination;\n        destination.next(isEmpty);\n        destination.complete();\n    };\n    IsEmptySubscriber.prototype._next = function (value) {\n        this.notifyComplete(false);\n    };\n    IsEmptySubscriber.prototype._complete = function () {\n        this.notifyComplete(true);\n    };\n    return IsEmptySubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=isEmpty.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar noop_1 = require('../util/noop');\n/**\n * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\n *\n * <img src=\"./img/ignoreElements.png\" width=\"100%\">\n *\n * @return {Observable} An empty Observable that only calls `complete`\n * or `error`, based on which one is called by the source Observable.\n * @method ignoreElements\n * @owner Observable\n */\nfunction ignoreElements() {\n    return function ignoreElementsOperatorFunction(source) {\n        return source.lift(new IgnoreElementsOperator());\n    };\n}\nexports.ignoreElements = ignoreElements;\nvar IgnoreElementsOperator = (function () {\n    function IgnoreElementsOperator() {\n    }\n    IgnoreElementsOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new IgnoreElementsSubscriber(subscriber));\n    };\n    return IgnoreElementsOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar IgnoreElementsSubscriber = (function (_super) {\n    __extends(IgnoreElementsSubscriber, _super);\n    function IgnoreElementsSubscriber() {\n        _super.apply(this, arguments);\n    }\n    IgnoreElementsSubscriber.prototype._next = function (unused) {\n        noop_1.noop();\n    };\n    return IgnoreElementsSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=ignoreElements.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar Subscription_1 = require('../Subscription');\nvar Observable_1 = require('../Observable');\nvar Subject_1 = require('../Subject');\nvar Map_1 = require('../util/Map');\nvar FastMap_1 = require('../util/FastMap');\n/* tslint:enable:max-line-length */\n/**\n * Groups the items emitted by an Observable according to a specified criterion,\n * and emits these grouped items as `GroupedObservables`, one\n * {@link GroupedObservable} per group.\n *\n * <img src=\"./img/groupBy.png\" width=\"100%\">\n *\n * @example <caption>Group objects by id and return as array</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs3'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *     )\n *     .groupBy(p => p.id)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], []))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // [ { id: 1, name: 'aze1' },\n * //   { id: 1, name: 'erg1' },\n * //   { id: 1, name: 'df1' } ]\n * //\n * // [ { id: 2, name: 'sf2' },\n * //   { id: 2, name: 'dg2' },\n * //   { id: 2, name: 'sfqfb2' },\n * //   { id: 2, name: 'qsgqsfg2' } ]\n * //\n * // [ { id: 3, name: 'qfs3' } ]\n *\n * @example <caption>Pivot data on the id field</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs1'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *                   )\n *     .groupBy(p => p.id, p => p.name)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], [\"\" + group$.key]))\n *     .map(arr => ({'id': parseInt(arr[0]), 'values': arr.slice(1)}))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // { id: 1, values: [ 'aze1', 'erg1', 'df1' ] }\n * // { id: 2, values: [ 'sf2', 'dg2', 'sfqfb2', 'qsgqsfg2' ] }\n * // { id: 3, values: [ 'qfs1' ] }\n *\n * @param {function(value: T): K} keySelector A function that extracts the key\n * for each item.\n * @param {function(value: T): R} [elementSelector] A function that extracts the\n * return element for each item.\n * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]\n * A function that returns an Observable to determine how long each group should\n * exist.\n * @return {Observable<GroupedObservable<K,R>>} An Observable that emits\n * GroupedObservables, each of which corresponds to a unique key value and each\n * of which emits those items from the source Observable that share that key\n * value.\n * @method groupBy\n * @owner Observable\n */\nfunction groupBy(keySelector, elementSelector, durationSelector, subjectSelector) {\n    return function (source) {\n        return source.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));\n    };\n}\nexports.groupBy = groupBy;\nvar GroupByOperator = (function () {\n    function GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector) {\n        this.keySelector = keySelector;\n        this.elementSelector = elementSelector;\n        this.durationSelector = durationSelector;\n        this.subjectSelector = subjectSelector;\n    }\n    GroupByOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new GroupBySubscriber(subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector));\n    };\n    return GroupByOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar GroupBySubscriber = (function (_super) {\n    __extends(GroupBySubscriber, _super);\n    function GroupBySubscriber(destination, keySelector, elementSelector, durationSelector, subjectSelector) {\n        _super.call(this, destination);\n        this.keySelector = keySelector;\n        this.elementSelector = elementSelector;\n        this.durationSelector = durationSelector;\n        this.subjectSelector = subjectSelector;\n        this.groups = null;\n        this.attemptedToUnsubscribe = false;\n        this.count = 0;\n    }\n    GroupBySubscriber.prototype._next = function (value) {\n        var key;\n        try {\n            key = this.keySelector(value);\n        }\n        catch (err) {\n            this.error(err);\n            return;\n        }\n        this._group(value, key);\n    };\n    GroupBySubscriber.prototype._group = function (value, key) {\n        var groups = this.groups;\n        if (!groups) {\n            groups = this.groups = typeof key === 'string' ? new FastMap_1.FastMap() : new Map_1.Map();\n        }\n        var group = groups.get(key);\n        var element;\n        if (this.elementSelector) {\n            try {\n                element = this.elementSelector(value);\n            }\n            catch (err) {\n                this.error(err);\n            }\n        }\n        else {\n            element = value;\n        }\n        if (!group) {\n            group = this.subjectSelector ? this.subjectSelector() : new Subject_1.Subject();\n            groups.set(key, group);\n            var groupedObservable = new GroupedObservable(key, group, this);\n            this.destination.next(groupedObservable);\n            if (this.durationSelector) {\n                var duration = void 0;\n                try {\n                    duration = this.durationSelector(new GroupedObservable(key, group));\n                }\n                catch (err) {\n                    this.error(err);\n                    return;\n                }\n                this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));\n            }\n        }\n        if (!group.closed) {\n            group.next(element);\n        }\n    };\n    GroupBySubscriber.prototype._error = function (err) {\n        var groups = this.groups;\n        if (groups) {\n            groups.forEach(function (group, key) {\n                group.error(err);\n            });\n            groups.clear();\n        }\n        this.destination.error(err);\n    };\n    GroupBySubscriber.prototype._complete = function () {\n        var groups = this.groups;\n        if (groups) {\n            groups.forEach(function (group, key) {\n                group.complete();\n            });\n            groups.clear();\n        }\n        this.destination.complete();\n    };\n    GroupBySubscriber.prototype.removeGroup = function (key) {\n        this.groups.delete(key);\n    };\n    GroupBySubscriber.prototype.unsubscribe = function () {\n        if (!this.closed) {\n            this.attemptedToUnsubscribe = true;\n            if (this.count === 0) {\n                _super.prototype.unsubscribe.call(this);\n            }\n        }\n    };\n    return GroupBySubscriber;\n}(Subscriber_1.Subscriber));\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar GroupDurationSubscriber = (function (_super) {\n    __extends(GroupDurationSubscriber, _super);\n    function GroupDurationSubscriber(key, group, parent) {\n        _super.call(this, group);\n        this.key = key;\n        this.group = group;\n        this.parent = parent;\n    }\n    GroupDurationSubscriber.prototype._next = function (value) {\n        this.complete();\n    };\n    GroupDurationSubscriber.prototype._unsubscribe = function () {\n        var _a = this, parent = _a.parent, key = _a.key;\n        this.key = this.parent = null;\n        if (parent) {\n            parent.removeGroup(key);\n        }\n    };\n    return GroupDurationSubscriber;\n}(Subscriber_1.Subscriber));\n/**\n * An Observable representing values belonging to the same group represented by\n * a common key. The values emitted by a GroupedObservable come from the source\n * Observable. The common key is available as the field `key` on a\n * GroupedObservable instance.\n *\n * @class GroupedObservable<K, T>\n */\nvar GroupedObservable = (function (_super) {\n    __extends(GroupedObservable, _super);\n    function GroupedObservable(key, groupSubject, refCountSubscription) {\n        _super.call(this);\n        this.key = key;\n        this.groupSubject = groupSubject;\n        this.refCountSubscription = refCountSubscription;\n    }\n    GroupedObservable.prototype._subscribe = function (subscriber) {\n        var subscription = new Subscription_1.Subscription();\n        var _a = this, refCountSubscription = _a.refCountSubscription, groupSubject = _a.groupSubject;\n        if (refCountSubscription && !refCountSubscription.closed) {\n            subscription.add(new InnerRefCountSubscription(refCountSubscription));\n        }\n        subscription.add(groupSubject.subscribe(subscriber));\n        return subscription;\n    };\n    return GroupedObservable;\n}(Observable_1.Observable));\nexports.GroupedObservable = GroupedObservable;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar InnerRefCountSubscription = (function (_super) {\n    __extends(InnerRefCountSubscription, _super);\n    function InnerRefCountSubscription(parent) {\n        _super.call(this);\n        this.parent = parent;\n        parent.count++;\n    }\n    InnerRefCountSubscription.prototype.unsubscribe = function () {\n        var parent = this.parent;\n        if (!parent.closed && !this.closed) {\n            _super.prototype.unsubscribe.call(this);\n            parent.count -= 1;\n            if (parent.count === 0 && parent.attemptedToUnsubscribe) {\n                parent.unsubscribe();\n            }\n        }\n    };\n    return InnerRefCountSubscription;\n}(Subscription_1.Subscription));\n//# sourceMappingURL=groupBy.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar EmptyError_1 = require('../util/EmptyError');\n/**\n * Emits only the first value (or the first value that meets some condition)\n * emitted by the source Observable.\n *\n * <span class=\"informal\">Emits only the first value. Or emits only the first\n * value that passes some test.</span>\n *\n * <img src=\"./img/first.png\" width=\"100%\">\n *\n * If called with no arguments, `first` emits the first value of the source\n * Observable, then completes. If called with a `predicate` function, `first`\n * emits the first value of the source that matches the specified condition. It\n * may also take a `resultSelector` function to produce the output value from\n * the input value, and a `defaultValue` to emit in case the source completes\n * before it is able to emit a valid value. Throws an error if `defaultValue`\n * was not provided and a matching element is not found.\n *\n * @example <caption>Emit only the first click that happens on the DOM</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Emits the first click that happens on a DIV</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link take}\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]\n * An optional function called with each item to test for condition matching.\n * @param {function(value: T, index: number): R} [resultSelector] A function to\n * produce the value on the output Observable based on the values\n * and the indices of the source Observable. The arguments passed to this\n * function are:\n * - `value`: the value that was emitted on the source.\n * - `index`: the \"index\" of the value from the source.\n * @param {R} [defaultValue] The default value emitted in case no valid value\n * was found on the source.\n * @return {Observable<T|R>} An Observable of the first item that matches the\n * condition.\n * @method first\n * @owner Observable\n */\nfunction first(predicate, resultSelector, defaultValue) {\n    return function (source) { return source.lift(new FirstOperator(predicate, resultSelector, defaultValue, source)); };\n}\nexports.first = first;\nvar FirstOperator = (function () {\n    function FirstOperator(predicate, resultSelector, defaultValue, source) {\n        this.predicate = predicate;\n        this.resultSelector = resultSelector;\n        this.defaultValue = defaultValue;\n        this.source = source;\n    }\n    FirstOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new FirstSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n    };\n    return FirstOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar FirstSubscriber = (function (_super) {\n    __extends(FirstSubscriber, _super);\n    function FirstSubscriber(destination, predicate, resultSelector, defaultValue, source) {\n        _super.call(this, destination);\n        this.predicate = predicate;\n        this.resultSelector = resultSelector;\n        this.defaultValue = defaultValue;\n        this.source = source;\n        this.index = 0;\n        this.hasCompleted = false;\n        this._emitted = false;\n    }\n    FirstSubscriber.prototype._next = function (value) {\n        var index = this.index++;\n        if (this.predicate) {\n            this._tryPredicate(value, index);\n        }\n        else {\n            this._emit(value, index);\n        }\n    };\n    FirstSubscriber.prototype._tryPredicate = function (value, index) {\n        var result;\n        try {\n            result = this.predicate(value, index, this.source);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        if (result) {\n            this._emit(value, index);\n        }\n    };\n    FirstSubscriber.prototype._emit = function (value, index) {\n        if (this.resultSelector) {\n            this._tryResultSelector(value, index);\n            return;\n        }\n        this._emitFinal(value);\n    };\n    FirstSubscriber.prototype._tryResultSelector = function (value, index) {\n        var result;\n        try {\n            result = this.resultSelector(value, index);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this._emitFinal(result);\n    };\n    FirstSubscriber.prototype._emitFinal = function (value) {\n        var destination = this.destination;\n        if (!this._emitted) {\n            this._emitted = true;\n            destination.next(value);\n            destination.complete();\n            this.hasCompleted = true;\n        }\n    };\n    FirstSubscriber.prototype._complete = function () {\n        var destination = this.destination;\n        if (!this.hasCompleted && typeof this.defaultValue !== 'undefined') {\n            destination.next(this.defaultValue);\n            destination.complete();\n        }\n        else if (!this.hasCompleted) {\n            destination.error(new EmptyError_1.EmptyError);\n        }\n    };\n    return FirstSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=first.js.map","\"use strict\";\nvar find_1 = require('../operators/find');\n/**\n * Emits only the index of the first value emitted by the source Observable that\n * meets some condition.\n *\n * <span class=\"informal\">It's like {@link find}, but emits the index of the\n * found value, not the value itself.</span>\n *\n * <img src=\"./img/findIndex.png\" width=\"100%\">\n *\n * `findIndex` searches for the first item in the source Observable that matches\n * the specified condition embodied by the `predicate`, and returns the\n * (zero-based) index of the first occurrence in the source. Unlike\n * {@link first}, the `predicate` is required in `findIndex`, and does not emit\n * an error if a valid value is not found.\n *\n * @example <caption>Emit the index of first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.findIndex(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link first}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of the index of the first item that\n * matches the condition.\n * @method find\n * @owner Observable\n */\nfunction findIndex(predicate, thisArg) {\n    return function (source) { return source.lift(new find_1.FindValueOperator(predicate, source, true, thisArg)); };\n}\nexports.findIndex = findIndex;\n//# sourceMappingURL=findIndex.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar Subscription_1 = require('../Subscription');\n/**\n * Returns an Observable that mirrors the source Observable, but will call a specified function when\n * the source terminates on complete or error.\n * @param {function} callback Function to be called when source terminates.\n * @return {Observable} An Observable that mirrors the source, but will call the specified function on termination.\n * @method finally\n * @owner Observable\n */\nfunction finalize(callback) {\n    return function (source) { return source.lift(new FinallyOperator(callback)); };\n}\nexports.finalize = finalize;\nvar FinallyOperator = (function () {\n    function FinallyOperator(callback) {\n        this.callback = callback;\n    }\n    FinallyOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new FinallySubscriber(subscriber, this.callback));\n    };\n    return FinallyOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar FinallySubscriber = (function (_super) {\n    __extends(FinallySubscriber, _super);\n    function FinallySubscriber(destination, callback) {\n        _super.call(this, destination);\n        this.add(new Subscription_1.Subscription(callback));\n    }\n    return FinallySubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=finalize.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar ArgumentOutOfRangeError_1 = require('../util/ArgumentOutOfRangeError');\n/**\n * Emits the single value at the specified `index` in a sequence of emissions\n * from the source Observable.\n *\n * <span class=\"informal\">Emits only the i-th value, then completes.</span>\n *\n * <img src=\"./img/elementAt.png\" width=\"100%\">\n *\n * `elementAt` returns an Observable that emits the item at the specified\n * `index` in the source Observable, or a default value if that `index` is out\n * of range and the `default` argument is provided. If the `default` argument is\n * not given and the `index` is out of range, the output Observable will emit an\n * `ArgumentOutOfRangeError` error.\n *\n * @example <caption>Emit only the third click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.elementAt(2);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // click 1 = nothing\n * // click 2 = nothing\n * // click 3 = MouseEvent object logged to console\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link skip}\n * @see {@link single}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `elementAt(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0` or the\n * Observable has completed before emitting the i-th `next` notification.\n *\n * @param {number} index Is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {T} [defaultValue] The default value returned for missing indices.\n * @return {Observable} An Observable that emits a single item, if it is found.\n * Otherwise, will emit the default value if given. If not, then emits an error.\n * @method elementAt\n * @owner Observable\n */\nfunction elementAt(index, defaultValue) {\n    return function (source) { return source.lift(new ElementAtOperator(index, defaultValue)); };\n}\nexports.elementAt = elementAt;\nvar ElementAtOperator = (function () {\n    function ElementAtOperator(index, defaultValue) {\n        this.index = index;\n        this.defaultValue = defaultValue;\n        if (index < 0) {\n            throw new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError;\n        }\n    }\n    ElementAtOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ElementAtSubscriber(subscriber, this.index, this.defaultValue));\n    };\n    return ElementAtOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ElementAtSubscriber = (function (_super) {\n    __extends(ElementAtSubscriber, _super);\n    function ElementAtSubscriber(destination, index, defaultValue) {\n        _super.call(this, destination);\n        this.index = index;\n        this.defaultValue = defaultValue;\n    }\n    ElementAtSubscriber.prototype._next = function (x) {\n        if (this.index-- === 0) {\n            this.destination.next(x);\n            this.destination.complete();\n        }\n    };\n    ElementAtSubscriber.prototype._complete = function () {\n        var destination = this.destination;\n        if (this.index >= 0) {\n            if (typeof this.defaultValue !== 'undefined') {\n                destination.next(this.defaultValue);\n            }\n            else {\n                destination.error(new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError);\n            }\n        }\n        destination.complete();\n    };\n    return ElementAtSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=elementAt.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/* tslint:enable:max-line-length */\n/**\n * Recursively projects each source value to an Observable which is merged in\n * the output Observable.\n *\n * <span class=\"informal\">It's similar to {@link mergeMap}, but applies the\n * projection function to every source value as well as every output value.\n * It's recursive.</span>\n *\n * <img src=\"./img/expand.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger. *Expand* will re-emit on the output\n * Observable every source value. Then, each output value is given to the\n * `project` function which returns an inner Observable to be merged on the\n * output Observable. Those output values resulting from the projection are also\n * given to the `project` function to produce new output values. This is how\n * *expand* behaves recursively.\n *\n * @example <caption>Start emitting the powers of two on every click, at most 10 of them</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var powersOfTwo = clicks\n *   .mapTo(1)\n *   .expand(x => Rx.Observable.of(2 * x).delay(1000))\n *   .take(10);\n * powersOfTwo.subscribe(x => console.log(x));\n *\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n *\n * @param {function(value: T, index: number) => Observable} project A function\n * that, when applied to an item emitted by the source or the output Observable,\n * returns an Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each projected inner Observable.\n * @return {Observable} An Observable that emits the source values and also\n * result of applying the projection function to each value emitted on the\n * output Observable and and merging the results of the Observables obtained\n * from this transformation.\n * @method expand\n * @owner Observable\n */\nfunction expand(project, concurrent, scheduler) {\n    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n    if (scheduler === void 0) { scheduler = undefined; }\n    concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n    return function (source) { return source.lift(new ExpandOperator(project, concurrent, scheduler)); };\n}\nexports.expand = expand;\nvar ExpandOperator = (function () {\n    function ExpandOperator(project, concurrent, scheduler) {\n        this.project = project;\n        this.concurrent = concurrent;\n        this.scheduler = scheduler;\n    }\n    ExpandOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));\n    };\n    return ExpandOperator;\n}());\nexports.ExpandOperator = ExpandOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ExpandSubscriber = (function (_super) {\n    __extends(ExpandSubscriber, _super);\n    function ExpandSubscriber(destination, project, concurrent, scheduler) {\n        _super.call(this, destination);\n        this.project = project;\n        this.concurrent = concurrent;\n        this.scheduler = scheduler;\n        this.index = 0;\n        this.active = 0;\n        this.hasCompleted = false;\n        if (concurrent < Number.POSITIVE_INFINITY) {\n            this.buffer = [];\n        }\n    }\n    ExpandSubscriber.dispatch = function (arg) {\n        var subscriber = arg.subscriber, result = arg.result, value = arg.value, index = arg.index;\n        subscriber.subscribeToProjection(result, value, index);\n    };\n    ExpandSubscriber.prototype._next = function (value) {\n        var destination = this.destination;\n        if (destination.closed) {\n            this._complete();\n            return;\n        }\n        var index = this.index++;\n        if (this.active < this.concurrent) {\n            destination.next(value);\n            var result = tryCatch_1.tryCatch(this.project)(value, index);\n            if (result === errorObject_1.errorObject) {\n                destination.error(errorObject_1.errorObject.e);\n            }\n            else if (!this.scheduler) {\n                this.subscribeToProjection(result, value, index);\n            }\n            else {\n                var state = { subscriber: this, result: result, value: value, index: index };\n                this.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));\n            }\n        }\n        else {\n            this.buffer.push(value);\n        }\n    };\n    ExpandSubscriber.prototype.subscribeToProjection = function (result, value, index) {\n        this.active++;\n        this.add(subscribeToResult_1.subscribeToResult(this, result, value, index));\n    };\n    ExpandSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (this.hasCompleted && this.active === 0) {\n            this.destination.complete();\n        }\n    };\n    ExpandSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this._next(innerValue);\n    };\n    ExpandSubscriber.prototype.notifyComplete = function (innerSub) {\n        var buffer = this.buffer;\n        this.remove(innerSub);\n        this.active--;\n        if (buffer && buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        if (this.hasCompleted && this.active === 0) {\n            this.destination.complete();\n        }\n    };\n    return ExpandSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\nexports.ExpandSubscriber = ExpandSubscriber;\n//# sourceMappingURL=expand.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable only if the previous projected Observable has completed.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link exhaust}.</span>\n *\n * <img src=\"./img/exhaustMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. When it projects a source value to\n * an Observable, the output Observable begins emitting the items emitted by\n * that projected Observable. However, `exhaustMap` ignores every new projected\n * Observable if the previous projected Observable has not yet completed. Once\n * that one completes, it will accept and flatten the next projected Observable\n * and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.exhaustMap((ev) => Rx.Observable.interval(1000).take(5));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaust}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable containing projected Observables\n * of each item of the source, ignoring projected Observables that start before\n * their preceding Observable has completed.\n * @method exhaustMap\n * @owner Observable\n */\nfunction exhaustMap(project, resultSelector) {\n    return function (source) { return source.lift(new SwitchFirstMapOperator(project, resultSelector)); };\n}\nexports.exhaustMap = exhaustMap;\nvar SwitchFirstMapOperator = (function () {\n    function SwitchFirstMapOperator(project, resultSelector) {\n        this.project = project;\n        this.resultSelector = resultSelector;\n    }\n    SwitchFirstMapOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SwitchFirstMapSubscriber(subscriber, this.project, this.resultSelector));\n    };\n    return SwitchFirstMapOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SwitchFirstMapSubscriber = (function (_super) {\n    __extends(SwitchFirstMapSubscriber, _super);\n    function SwitchFirstMapSubscriber(destination, project, resultSelector) {\n        _super.call(this, destination);\n        this.project = project;\n        this.resultSelector = resultSelector;\n        this.hasSubscription = false;\n        this.hasCompleted = false;\n        this.index = 0;\n    }\n    SwitchFirstMapSubscriber.prototype._next = function (value) {\n        if (!this.hasSubscription) {\n            this.tryNext(value);\n        }\n    };\n    SwitchFirstMapSubscriber.prototype.tryNext = function (value) {\n        var index = this.index++;\n        var destination = this.destination;\n        try {\n            var result = this.project(value, index);\n            this.hasSubscription = true;\n            this.add(subscribeToResult_1.subscribeToResult(this, result, value, index));\n        }\n        catch (err) {\n            destination.error(err);\n        }\n    };\n    SwitchFirstMapSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (!this.hasSubscription) {\n            this.destination.complete();\n        }\n    };\n    SwitchFirstMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;\n        if (resultSelector) {\n            this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        else {\n            destination.next(innerValue);\n        }\n    };\n    SwitchFirstMapSubscriber.prototype.trySelectResult = function (outerValue, innerValue, outerIndex, innerIndex) {\n        var _a = this, resultSelector = _a.resultSelector, destination = _a.destination;\n        try {\n            var result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n            destination.next(result);\n        }\n        catch (err) {\n            destination.error(err);\n        }\n    };\n    SwitchFirstMapSubscriber.prototype.notifyError = function (err) {\n        this.destination.error(err);\n    };\n    SwitchFirstMapSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.remove(innerSub);\n        this.hasSubscription = false;\n        if (this.hasCompleted) {\n            this.destination.complete();\n        }\n    };\n    return SwitchFirstMapSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=exhaustMap.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Converts a higher-order Observable into a first-order Observable by dropping\n * inner Observables while the previous inner Observable has not yet completed.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * next inner Observables while the current inner is still executing.</span>\n *\n * <img src=\"./img/exhaust.png\" width=\"100%\">\n *\n * `exhaust` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable begins emitting the items emitted by that\n * inner Observable. So far, it behaves like {@link mergeAll}. However,\n * `exhaust` ignores every new inner Observable if the previous Observable has\n * not yet completed. Once that one completes, it will accept and flatten the\n * next inner Observable and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(5));\n * var result = higherOrder.exhaust();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link switch}\n * @see {@link mergeAll}\n * @see {@link exhaustMap}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable that takes a source of Observables and propagates the first observable\n * exclusively until it completes before subscribing to the next.\n * @method exhaust\n * @owner Observable\n */\nfunction exhaust() {\n    return function (source) { return source.lift(new SwitchFirstOperator()); };\n}\nexports.exhaust = exhaust;\nvar SwitchFirstOperator = (function () {\n    function SwitchFirstOperator() {\n    }\n    SwitchFirstOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SwitchFirstSubscriber(subscriber));\n    };\n    return SwitchFirstOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SwitchFirstSubscriber = (function (_super) {\n    __extends(SwitchFirstSubscriber, _super);\n    function SwitchFirstSubscriber(destination) {\n        _super.call(this, destination);\n        this.hasCompleted = false;\n        this.hasSubscription = false;\n    }\n    SwitchFirstSubscriber.prototype._next = function (value) {\n        if (!this.hasSubscription) {\n            this.hasSubscription = true;\n            this.add(subscribeToResult_1.subscribeToResult(this, value));\n        }\n    };\n    SwitchFirstSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (!this.hasSubscription) {\n            this.destination.complete();\n        }\n    };\n    SwitchFirstSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.remove(innerSub);\n        this.hasSubscription = false;\n        if (this.hasCompleted) {\n            this.destination.complete();\n        }\n    };\n    return SwitchFirstSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=exhaust.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/* tslint:enable:max-line-length */\n/**\n * Perform a side effect for every emission on the source Observable, but return\n * an Observable that is identical to the source.\n *\n * <span class=\"informal\">Intercepts each emission on the source and runs a\n * function, but returns an output which is identical to the source as long as errors don't occur.</span>\n *\n * <img src=\"./img/do.png\" width=\"100%\">\n *\n * Returns a mirrored Observable of the source Observable, but modified so that\n * the provided Observer is called to perform a side effect for every value,\n * error, and completion emitted by the source. Any errors that are thrown in\n * the aforementioned Observer or handlers are safely sent down the error path\n * of the output Observable.\n *\n * This operator is useful for debugging your Observables for the correct values\n * or performing other side effects.\n *\n * Note: this is different to a `subscribe` on the Observable. If the Observable\n * returned by `do` is not subscribed, the side effects specified by the\n * Observer will never happen. `do` therefore simply spies on existing\n * execution, it does not trigger an execution to happen like `subscribe` does.\n *\n * @example <caption>Map every click to the clientX position of that click, while also logging the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks\n *   .do(ev => console.log(ev))\n *   .map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link map}\n * @see {@link subscribe}\n *\n * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n * callback for `next`.\n * @param {function} [error] Callback for errors in the source.\n * @param {function} [complete] Callback for the completion of the source.\n * @return {Observable} An Observable identical to the source, but runs the\n * specified Observer or callback(s) for each item.\n * @name tap\n */\nfunction tap(nextOrObserver, error, complete) {\n    return function tapOperatorFunction(source) {\n        return source.lift(new DoOperator(nextOrObserver, error, complete));\n    };\n}\nexports.tap = tap;\nvar DoOperator = (function () {\n    function DoOperator(nextOrObserver, error, complete) {\n        this.nextOrObserver = nextOrObserver;\n        this.error = error;\n        this.complete = complete;\n    }\n    DoOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DoSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));\n    };\n    return DoOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DoSubscriber = (function (_super) {\n    __extends(DoSubscriber, _super);\n    function DoSubscriber(destination, nextOrObserver, error, complete) {\n        _super.call(this, destination);\n        var safeSubscriber = new Subscriber_1.Subscriber(nextOrObserver, error, complete);\n        safeSubscriber.syncErrorThrowable = true;\n        this.add(safeSubscriber);\n        this.safeSubscriber = safeSubscriber;\n    }\n    DoSubscriber.prototype._next = function (value) {\n        var safeSubscriber = this.safeSubscriber;\n        safeSubscriber.next(value);\n        if (safeSubscriber.syncErrorThrown) {\n            this.destination.error(safeSubscriber.syncErrorValue);\n        }\n        else {\n            this.destination.next(value);\n        }\n    };\n    DoSubscriber.prototype._error = function (err) {\n        var safeSubscriber = this.safeSubscriber;\n        safeSubscriber.error(err);\n        if (safeSubscriber.syncErrorThrown) {\n            this.destination.error(safeSubscriber.syncErrorValue);\n        }\n        else {\n            this.destination.error(err);\n        }\n    };\n    DoSubscriber.prototype._complete = function () {\n        var safeSubscriber = this.safeSubscriber;\n        safeSubscriber.complete();\n        if (safeSubscriber.syncErrorThrown) {\n            this.destination.error(safeSubscriber.syncErrorValue);\n        }\n        else {\n            this.destination.complete();\n        }\n    };\n    return DoSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=tap.js.map","\"use strict\";\nvar distinctUntilChanged_1 = require('./distinctUntilChanged');\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item,\n * using a property accessed by using the key provided to check if the two items are distinct.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>An example comparing the name of persons</caption>\n *\n *  interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'},\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilKeyChanged('name')\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @example <caption>An example comparing the first letters of the name</caption>\n *\n * interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo1'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo2'},\n *     { age: 6, name: 'Foo3'})\n *     .distinctUntilKeyChanged('name', (x: string, y: string) => x.substring(0, 3) === y.substring(0, 3))\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo1' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo2' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n *\n * @param {string} key String key for object property lookup on each item.\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values based on the key specified.\n * @method distinctUntilKeyChanged\n * @owner Observable\n */\nfunction distinctUntilKeyChanged(key, compare) {\n    return distinctUntilChanged_1.distinctUntilChanged(function (x, y) { return compare ? compare(x[key], y[key]) : x[key] === y[key]; });\n}\nexports.distinctUntilKeyChanged = distinctUntilKeyChanged;\n//# sourceMappingURL=distinctUntilKeyChanged.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nvar Set_1 = require('../util/Set');\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.\n *\n * If a keySelector function is provided, then it will project each value from the source observable into a new value that it will\n * check for equality with previously projected values. If a keySelector function is not provided, it will use each value from the\n * source observable directly with an equality check against previous values.\n *\n * In JavaScript runtimes that support `Set`, this operator will use a `Set` to improve performance of the distinct value checking.\n *\n * In other runtimes, this operator will use a minimal implementation of `Set` that relies on an `Array` and `indexOf` under the\n * hood, so performance will degrade as more values are checked for distinction. Even in newer browsers, a long-running `distinct`\n * use might result in memory leaks. To help alleviate this in some scenarios, an optional `flushes` parameter is also provided so\n * that the internal `Set` can be \"flushed\", basically clearing it of values.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 2, 3, 4, 3, 2, 1)\n *   .distinct()\n *   .subscribe(x => console.log(x)); // 1, 2, 3, 4\n *\n * @example <caption>An example using a keySelector function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     .distinct((p: Person) => p.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n *\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [keySelector] Optional function to select which value you want to check as distinct.\n * @param {Observable} [flushes] Optional Observable for flushing the internal HashSet of the operator.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinct\n * @owner Observable\n */\nfunction distinct(keySelector, flushes) {\n    return function (source) { return source.lift(new DistinctOperator(keySelector, flushes)); };\n}\nexports.distinct = distinct;\nvar DistinctOperator = (function () {\n    function DistinctOperator(keySelector, flushes) {\n        this.keySelector = keySelector;\n        this.flushes = flushes;\n    }\n    DistinctOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DistinctSubscriber(subscriber, this.keySelector, this.flushes));\n    };\n    return DistinctOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DistinctSubscriber = (function (_super) {\n    __extends(DistinctSubscriber, _super);\n    function DistinctSubscriber(destination, keySelector, flushes) {\n        _super.call(this, destination);\n        this.keySelector = keySelector;\n        this.values = new Set_1.Set();\n        if (flushes) {\n            this.add(subscribeToResult_1.subscribeToResult(this, flushes));\n        }\n    }\n    DistinctSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.values.clear();\n    };\n    DistinctSubscriber.prototype.notifyError = function (error, innerSub) {\n        this._error(error);\n    };\n    DistinctSubscriber.prototype._next = function (value) {\n        if (this.keySelector) {\n            this._useKeySelector(value);\n        }\n        else {\n            this._finalizeNext(value, value);\n        }\n    };\n    DistinctSubscriber.prototype._useKeySelector = function (value) {\n        var key;\n        var destination = this.destination;\n        try {\n            key = this.keySelector(value);\n        }\n        catch (err) {\n            destination.error(err);\n            return;\n        }\n        this._finalizeNext(key, value);\n    };\n    DistinctSubscriber.prototype._finalizeNext = function (key, value) {\n        var values = this.values;\n        if (!values.has(key)) {\n            values.add(key);\n            this.destination.next(value);\n        }\n    };\n    return DistinctSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\nexports.DistinctSubscriber = DistinctSubscriber;\n//# sourceMappingURL=distinct.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar Observable_1 = require('../Observable');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Delays the emission of items from the source Observable by a given time span\n * determined by the emissions of another Observable.\n *\n * <span class=\"informal\">It's like {@link delay}, but the time span of the\n * delay duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/delayWhen.png\" width=\"100%\">\n *\n * `delayWhen` time shifts each emitted value from the source Observable by a\n * time span determined by another Observable. When the source emits a value,\n * the `delayDurationSelector` function is called with the source value as\n * argument, and should return an Observable, called the \"duration\" Observable.\n * The source value is emitted on the output Observable only when the duration\n * Observable emits a value or completes.\n *\n * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\n * is an Observable. When `subscriptionDelay` emits its first value or\n * completes, the source Observable is subscribed to and starts behaving like\n * described in the previous paragraph. If `subscriptionDelay` is not provided,\n * `delayWhen` will subscribe to the source Observable as soon as the output\n * Observable is subscribed.\n *\n * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delayWhen(event =>\n *   Rx.Observable.interval(Math.random() * 5000)\n * );\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounce}\n * @see {@link delay}\n *\n * @param {function(value: T): Observable} delayDurationSelector A function that\n * returns an Observable for each value emitted by the source Observable, which\n * is then used to delay the emission of that item on the output Observable\n * until the Observable returned from this function emits a value.\n * @param {Observable} subscriptionDelay An Observable that triggers the\n * subscription to the source Observable once it emits any value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by an amount of time specified by the Observable returned by\n * `delayDurationSelector`.\n * @method delayWhen\n * @owner Observable\n */\nfunction delayWhen(delayDurationSelector, subscriptionDelay) {\n    if (subscriptionDelay) {\n        return function (source) {\n            return new SubscriptionDelayObservable(source, subscriptionDelay)\n                .lift(new DelayWhenOperator(delayDurationSelector));\n        };\n    }\n    return function (source) { return source.lift(new DelayWhenOperator(delayDurationSelector)); };\n}\nexports.delayWhen = delayWhen;\nvar DelayWhenOperator = (function () {\n    function DelayWhenOperator(delayDurationSelector) {\n        this.delayDurationSelector = delayDurationSelector;\n    }\n    DelayWhenOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));\n    };\n    return DelayWhenOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DelayWhenSubscriber = (function (_super) {\n    __extends(DelayWhenSubscriber, _super);\n    function DelayWhenSubscriber(destination, delayDurationSelector) {\n        _super.call(this, destination);\n        this.delayDurationSelector = delayDurationSelector;\n        this.completed = false;\n        this.delayNotifierSubscriptions = [];\n        this.values = [];\n    }\n    DelayWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.destination.next(outerValue);\n        this.removeSubscription(innerSub);\n        this.tryComplete();\n    };\n    DelayWhenSubscriber.prototype.notifyError = function (error, innerSub) {\n        this._error(error);\n    };\n    DelayWhenSubscriber.prototype.notifyComplete = function (innerSub) {\n        var value = this.removeSubscription(innerSub);\n        if (value) {\n            this.destination.next(value);\n        }\n        this.tryComplete();\n    };\n    DelayWhenSubscriber.prototype._next = function (value) {\n        try {\n            var delayNotifier = this.delayDurationSelector(value);\n            if (delayNotifier) {\n                this.tryDelay(delayNotifier, value);\n            }\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    };\n    DelayWhenSubscriber.prototype._complete = function () {\n        this.completed = true;\n        this.tryComplete();\n    };\n    DelayWhenSubscriber.prototype.removeSubscription = function (subscription) {\n        subscription.unsubscribe();\n        var subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);\n        var value = null;\n        if (subscriptionIdx !== -1) {\n            value = this.values[subscriptionIdx];\n            this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);\n            this.values.splice(subscriptionIdx, 1);\n        }\n        return value;\n    };\n    DelayWhenSubscriber.prototype.tryDelay = function (delayNotifier, value) {\n        var notifierSubscription = subscribeToResult_1.subscribeToResult(this, delayNotifier, value);\n        if (notifierSubscription && !notifierSubscription.closed) {\n            this.add(notifierSubscription);\n            this.delayNotifierSubscriptions.push(notifierSubscription);\n        }\n        this.values.push(value);\n    };\n    DelayWhenSubscriber.prototype.tryComplete = function () {\n        if (this.completed && this.delayNotifierSubscriptions.length === 0) {\n            this.destination.complete();\n        }\n    };\n    return DelayWhenSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SubscriptionDelayObservable = (function (_super) {\n    __extends(SubscriptionDelayObservable, _super);\n    function SubscriptionDelayObservable(source, subscriptionDelay) {\n        _super.call(this);\n        this.source = source;\n        this.subscriptionDelay = subscriptionDelay;\n    }\n    SubscriptionDelayObservable.prototype._subscribe = function (subscriber) {\n        this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));\n    };\n    return SubscriptionDelayObservable;\n}(Observable_1.Observable));\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SubscriptionDelaySubscriber = (function (_super) {\n    __extends(SubscriptionDelaySubscriber, _super);\n    function SubscriptionDelaySubscriber(parent, source) {\n        _super.call(this);\n        this.parent = parent;\n        this.source = source;\n        this.sourceSubscribed = false;\n    }\n    SubscriptionDelaySubscriber.prototype._next = function (unused) {\n        this.subscribeToSource();\n    };\n    SubscriptionDelaySubscriber.prototype._error = function (err) {\n        this.unsubscribe();\n        this.parent.error(err);\n    };\n    SubscriptionDelaySubscriber.prototype._complete = function () {\n        this.subscribeToSource();\n    };\n    SubscriptionDelaySubscriber.prototype.subscribeToSource = function () {\n        if (!this.sourceSubscribed) {\n            this.sourceSubscribed = true;\n            this.unsubscribe();\n            this.source.subscribe(this.parent);\n        }\n    };\n    return SubscriptionDelaySubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=delayWhen.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar async_1 = require('../scheduler/async');\nvar isDate_1 = require('../util/isDate');\nvar Subscriber_1 = require('../Subscriber');\nvar Notification_1 = require('../Notification');\n/**\n * Delays the emission of items from the source Observable by a given timeout or\n * until a given Date.\n *\n * <span class=\"informal\">Time shifts each item by some specified amount of\n * milliseconds.</span>\n *\n * <img src=\"./img/delay.png\" width=\"100%\">\n *\n * If the delay argument is a Number, this operator time shifts the source\n * Observable by that amount of time expressed in milliseconds. The relative\n * time intervals between the values are preserved.\n *\n * If the delay argument is a Date, this operator time shifts the start of the\n * Observable execution until the given date occurs.\n *\n * @example <caption>Delay each click by one second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delay(1000); // each click emitted after 1 second\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @example <caption>Delay all clicks until a future date happens</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var date = new Date('March 15, 2050 12:00:00'); // in the future\n * var delayedClicks = clicks.delay(date); // click emitted only after that date\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n *\n * @param {number|Date} delay The delay duration in milliseconds (a `number`) or\n * a `Date` until which the emission of the source items is delayed.\n * @param {Scheduler} [scheduler=async] The IScheduler to use for\n * managing the timers that handle the time-shift for each item.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified timeout or Date.\n * @method delay\n * @owner Observable\n */\nfunction delay(delay, scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    var absoluteDelay = isDate_1.isDate(delay);\n    var delayFor = absoluteDelay ? (+delay - scheduler.now()) : Math.abs(delay);\n    return function (source) { return source.lift(new DelayOperator(delayFor, scheduler)); };\n}\nexports.delay = delay;\nvar DelayOperator = (function () {\n    function DelayOperator(delay, scheduler) {\n        this.delay = delay;\n        this.scheduler = scheduler;\n    }\n    DelayOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));\n    };\n    return DelayOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DelaySubscriber = (function (_super) {\n    __extends(DelaySubscriber, _super);\n    function DelaySubscriber(destination, delay, scheduler) {\n        _super.call(this, destination);\n        this.delay = delay;\n        this.scheduler = scheduler;\n        this.queue = [];\n        this.active = false;\n        this.errored = false;\n    }\n    DelaySubscriber.dispatch = function (state) {\n        var source = state.source;\n        var queue = source.queue;\n        var scheduler = state.scheduler;\n        var destination = state.destination;\n        while (queue.length > 0 && (queue[0].time - scheduler.now()) <= 0) {\n            queue.shift().notification.observe(destination);\n        }\n        if (queue.length > 0) {\n            var delay_1 = Math.max(0, queue[0].time - scheduler.now());\n            this.schedule(state, delay_1);\n        }\n        else {\n            source.active = false;\n        }\n    };\n    DelaySubscriber.prototype._schedule = function (scheduler) {\n        this.active = true;\n        this.add(scheduler.schedule(DelaySubscriber.dispatch, this.delay, {\n            source: this, destination: this.destination, scheduler: scheduler\n        }));\n    };\n    DelaySubscriber.prototype.scheduleNotification = function (notification) {\n        if (this.errored === true) {\n            return;\n        }\n        var scheduler = this.scheduler;\n        var message = new DelayMessage(scheduler.now() + this.delay, notification);\n        this.queue.push(message);\n        if (this.active === false) {\n            this._schedule(scheduler);\n        }\n    };\n    DelaySubscriber.prototype._next = function (value) {\n        this.scheduleNotification(Notification_1.Notification.createNext(value));\n    };\n    DelaySubscriber.prototype._error = function (err) {\n        this.errored = true;\n        this.queue = [];\n        this.destination.error(err);\n    };\n    DelaySubscriber.prototype._complete = function () {\n        this.scheduleNotification(Notification_1.Notification.createComplete());\n    };\n    return DelaySubscriber;\n}(Subscriber_1.Subscriber));\nvar DelayMessage = (function () {\n    function DelayMessage(time, notification) {\n        this.time = time;\n        this.notification = notification;\n    }\n    return DelayMessage;\n}());\n//# sourceMappingURL=delay.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar async_1 = require('../scheduler/async');\n/**\n * Emits a value from the source Observable only after a particular time span\n * has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link delay}, but passes only the most\n * recent value from each burst of emissions.</span>\n *\n * <img src=\"./img/debounceTime.png\" width=\"100%\">\n *\n * `debounceTime` delays values emitted by the source Observable, but drops\n * previous pending delayed emissions if a new value arrives on the source\n * Observable. This operator keeps track of the most recent value from the\n * source Observable, and emits that only when `dueTime` enough time has passed\n * without any other value appearing on the source Observable. If a new value\n * appears before `dueTime` silence occurs, the previous value will be dropped\n * and will not be emitted on the output Observable.\n *\n * This is a rate-limiting operator, because it is impossible for more than one\n * value to be emitted in any time window of duration `dueTime`, but it is also\n * a delay-like operator since output emissions do not occur at the same time as\n * they did on the source Observable. Optionally takes a {@link IScheduler} for\n * managing timers.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounceTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} dueTime The timeout duration in milliseconds (or the time\n * unit determined internally by the optional `scheduler`) for the window of\n * time required to wait for emission silence before emitting the most recent\n * source value.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the timeout for each value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified `dueTime`, and may drop some values if they occur\n * too frequently.\n * @method debounceTime\n * @owner Observable\n */\nfunction debounceTime(dueTime, scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return function (source) { return source.lift(new DebounceTimeOperator(dueTime, scheduler)); };\n}\nexports.debounceTime = debounceTime;\nvar DebounceTimeOperator = (function () {\n    function DebounceTimeOperator(dueTime, scheduler) {\n        this.dueTime = dueTime;\n        this.scheduler = scheduler;\n    }\n    DebounceTimeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));\n    };\n    return DebounceTimeOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DebounceTimeSubscriber = (function (_super) {\n    __extends(DebounceTimeSubscriber, _super);\n    function DebounceTimeSubscriber(destination, dueTime, scheduler) {\n        _super.call(this, destination);\n        this.dueTime = dueTime;\n        this.scheduler = scheduler;\n        this.debouncedSubscription = null;\n        this.lastValue = null;\n        this.hasValue = false;\n    }\n    DebounceTimeSubscriber.prototype._next = function (value) {\n        this.clearDebounce();\n        this.lastValue = value;\n        this.hasValue = true;\n        this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));\n    };\n    DebounceTimeSubscriber.prototype._complete = function () {\n        this.debouncedNext();\n        this.destination.complete();\n    };\n    DebounceTimeSubscriber.prototype.debouncedNext = function () {\n        this.clearDebounce();\n        if (this.hasValue) {\n            this.destination.next(this.lastValue);\n            this.lastValue = null;\n            this.hasValue = false;\n        }\n    };\n    DebounceTimeSubscriber.prototype.clearDebounce = function () {\n        var debouncedSubscription = this.debouncedSubscription;\n        if (debouncedSubscription !== null) {\n            this.remove(debouncedSubscription);\n            debouncedSubscription.unsubscribe();\n            this.debouncedSubscription = null;\n        }\n    };\n    return DebounceTimeSubscriber;\n}(Subscriber_1.Subscriber));\nfunction dispatchNext(subscriber) {\n    subscriber.debouncedNext();\n}\n//# sourceMappingURL=debounceTime.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Emits a value from the source Observable only after a particular time span\n * determined by another Observable has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link debounceTime}, but the time span of\n * emission silence is determined by a second Observable.</span>\n *\n * <img src=\"./img/debounce.png\" width=\"100%\">\n *\n * `debounce` delays values emitted by the source Observable, but drops previous\n * pending delayed emissions if a new value arrives on the source Observable.\n * This operator keeps track of the most recent value from the source\n * Observable, and spawns a duration Observable by calling the\n * `durationSelector` function. The value is emitted only when the duration\n * Observable emits a value or completes, and if no other value was emitted on\n * the source Observable since the duration Observable was spawned. If a new\n * value appears before the duration Observable emits, the previous value will\n * be dropped and will not be emitted on the output Observable.\n *\n * Like {@link debounceTime}, this is a rate-limiting operator, and also a\n * delay-like operator since output emissions do not necessarily occur at the\n * same time as they did on the source Observable.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounce(() => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the timeout\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified duration Observable returned by\n * `durationSelector`, and may drop some values if they occur too frequently.\n * @method debounce\n * @owner Observable\n */\nfunction debounce(durationSelector) {\n    return function (source) { return source.lift(new DebounceOperator(durationSelector)); };\n}\nexports.debounce = debounce;\nvar DebounceOperator = (function () {\n    function DebounceOperator(durationSelector) {\n        this.durationSelector = durationSelector;\n    }\n    DebounceOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DebounceSubscriber(subscriber, this.durationSelector));\n    };\n    return DebounceOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DebounceSubscriber = (function (_super) {\n    __extends(DebounceSubscriber, _super);\n    function DebounceSubscriber(destination, durationSelector) {\n        _super.call(this, destination);\n        this.durationSelector = durationSelector;\n        this.hasValue = false;\n        this.durationSubscription = null;\n    }\n    DebounceSubscriber.prototype._next = function (value) {\n        try {\n            var result = this.durationSelector.call(this, value);\n            if (result) {\n                this._tryNext(value, result);\n            }\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    };\n    DebounceSubscriber.prototype._complete = function () {\n        this.emitValue();\n        this.destination.complete();\n    };\n    DebounceSubscriber.prototype._tryNext = function (value, duration) {\n        var subscription = this.durationSubscription;\n        this.value = value;\n        this.hasValue = true;\n        if (subscription) {\n            subscription.unsubscribe();\n            this.remove(subscription);\n        }\n        subscription = subscribeToResult_1.subscribeToResult(this, duration);\n        if (!subscription.closed) {\n            this.add(this.durationSubscription = subscription);\n        }\n    };\n    DebounceSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.emitValue();\n    };\n    DebounceSubscriber.prototype.notifyComplete = function () {\n        this.emitValue();\n    };\n    DebounceSubscriber.prototype.emitValue = function () {\n        if (this.hasValue) {\n            var value = this.value;\n            var subscription = this.durationSubscription;\n            if (subscription) {\n                this.durationSubscription = null;\n                subscription.unsubscribe();\n                this.remove(subscription);\n            }\n            this.value = null;\n            this.hasValue = false;\n            _super.prototype._next.call(this, value);\n        }\n    };\n    return DebounceSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=debounce.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Converts an Observable of {@link Notification} objects into the emissions\n * that they represent.\n *\n * <span class=\"informal\">Unwraps {@link Notification} objects as actual `next`,\n * `error` and `complete` emissions. The opposite of {@link materialize}.</span>\n *\n * <img src=\"./img/dematerialize.png\" width=\"100%\">\n *\n * `dematerialize` is assumed to operate an Observable that only emits\n * {@link Notification} objects as `next` emissions, and does not emit any\n * `error`. Such Observable is the output of a `materialize` operation. Those\n * notifications are then unwrapped using the metadata they contain, and emitted\n * as `next`, `error`, and `complete` on the output Observable.\n *\n * Use this operator in conjunction with {@link materialize}.\n *\n * @example <caption>Convert an Observable of Notifications to an actual Observable</caption>\n * var notifA = new Rx.Notification('N', 'A');\n * var notifB = new Rx.Notification('N', 'B');\n * var notifE = new Rx.Notification('E', void 0,\n *   new TypeError('x.toUpperCase is not a function')\n * );\n * var materialized = Rx.Observable.of(notifA, notifB, notifE);\n * var upperCase = materialized.dematerialize();\n * upperCase.subscribe(x => console.log(x), e => console.error(e));\n *\n * // Results in:\n * // A\n * // B\n * // TypeError: x.toUpperCase is not a function\n *\n * @see {@link Notification}\n * @see {@link materialize}\n *\n * @return {Observable} An Observable that emits items and notifications\n * embedded in Notification objects emitted by the source Observable.\n * @method dematerialize\n * @owner Observable\n */\nfunction dematerialize() {\n    return function dematerializeOperatorFunction(source) {\n        return source.lift(new DeMaterializeOperator());\n    };\n}\nexports.dematerialize = dematerialize;\nvar DeMaterializeOperator = (function () {\n    function DeMaterializeOperator() {\n    }\n    DeMaterializeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DeMaterializeSubscriber(subscriber));\n    };\n    return DeMaterializeOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DeMaterializeSubscriber = (function (_super) {\n    __extends(DeMaterializeSubscriber, _super);\n    function DeMaterializeSubscriber(destination) {\n        _super.call(this, destination);\n    }\n    DeMaterializeSubscriber.prototype._next = function (value) {\n        value.observe(this.destination);\n    };\n    return DeMaterializeSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=dematerialize.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Counts the number of emissions on the source and emits that number when the\n * source completes.\n *\n * <span class=\"informal\">Tells how many values were emitted, when the source\n * completes.</span>\n *\n * <img src=\"./img/count.png\" width=\"100%\">\n *\n * `count` transforms an Observable that emits values into an Observable that\n * emits a single value that represents the number of values emitted by the\n * source Observable. If the source Observable terminates with an error, `count`\n * will pass this error notification along without emitting a value first. If\n * the source Observable does not terminate at all, `count` will neither emit\n * a value nor terminate. This operator takes an optional `predicate` function\n * as argument, in which case the output emission will represent the number of\n * source values that matched `true` with the `predicate`.\n *\n * @example <caption>Counts how many seconds have passed before the first click happened</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var secondsBeforeClick = seconds.takeUntil(clicks);\n * var result = secondsBeforeClick.count();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Counts how many odd numbers are there between 1 and 7</caption>\n * var numbers = Rx.Observable.range(1, 7);\n * var result = numbers.count(i => i % 2 === 1);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 4\n *\n * @see {@link max}\n * @see {@link min}\n * @see {@link reduce}\n *\n * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A\n * boolean function to select what values are to be counted. It is provided with\n * arguments of:\n * - `value`: the value from the source Observable.\n * - `index`: the (zero-based) \"index\" of the value from the source Observable.\n * - `source`: the source Observable instance itself.\n * @return {Observable} An Observable of one number that represents the count as\n * described above.\n * @method count\n * @owner Observable\n */\nfunction count(predicate) {\n    return function (source) { return source.lift(new CountOperator(predicate, source)); };\n}\nexports.count = count;\nvar CountOperator = (function () {\n    function CountOperator(predicate, source) {\n        this.predicate = predicate;\n        this.source = source;\n    }\n    CountOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new CountSubscriber(subscriber, this.predicate, this.source));\n    };\n    return CountOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar CountSubscriber = (function (_super) {\n    __extends(CountSubscriber, _super);\n    function CountSubscriber(destination, predicate, source) {\n        _super.call(this, destination);\n        this.predicate = predicate;\n        this.source = source;\n        this.count = 0;\n        this.index = 0;\n    }\n    CountSubscriber.prototype._next = function (value) {\n        if (this.predicate) {\n            this._tryPredicate(value);\n        }\n        else {\n            this.count++;\n        }\n    };\n    CountSubscriber.prototype._tryPredicate = function (value) {\n        var result;\n        try {\n            result = this.predicate(value, this.index++, this.source);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        if (result) {\n            this.count++;\n        }\n    };\n    CountSubscriber.prototype._complete = function () {\n        this.destination.next(this.count);\n        this.destination.complete();\n    };\n    return CountSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=count.js.map","\"use strict\";\nvar concatMap_1 = require('./concatMap');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in a serialized fashion on the output Observable.\n *\n * <span class=\"informal\">It's like {@link concatMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/concatMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. Each new `innerObservable`\n * instance emitted on the output Observable is concatenated with the previous\n * `innerObservable` instance.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMapTo` is equivalent to `mergeMapTo` with concurrency parameter\n * set to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMapTo(Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link mergeMapTo}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An observable of values merged together by joining the\n * passed observable with itself, one after the other, for each value emitted\n * from the source.\n * @method concatMapTo\n * @owner Observable\n */\nfunction concatMapTo(innerObservable, resultSelector) {\n    return concatMap_1.concatMap(function () { return innerObservable; }, resultSelector);\n}\nexports.concatMapTo = concatMapTo;\n//# sourceMappingURL=concatMapTo.js.map","\"use strict\";\nvar concat_1 = require('../observable/concat');\nvar concat_2 = require('../observable/concat');\nexports.concatStatic = concat_2.concat;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins this Observable with multiple other Observables by subscribing to them\n * one at a time, starting with the source, and merging their results into the\n * output Observable. Will wait for each Observable to complete before moving\n * on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = timer.concat(sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = timer1.concat(timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} other An input Observable to concatenate after the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @method concat\n * @owner Observable\n */\nfunction concat() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    return function (source) { return source.lift.call(concat_1.concat.apply(void 0, [source].concat(observables))); };\n}\nexports.concat = concat;\n//# sourceMappingURL=concat.js.map","\"use strict\";\nvar combineLatest_1 = require('../operators/combineLatest');\nfunction combineAll(project) {\n    return function (source) { return source.lift(new combineLatest_1.CombineLatestOperator(project)); };\n}\nexports.combineAll = combineAll;\n//# sourceMappingURL=combineAll.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Catches errors on the observable to be handled by returning a new observable or throwing an error.\n *\n * <img src=\"./img/catch.png\" width=\"100%\">\n *\n * @example <caption>Continues with a different Observable when there's an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n == 4) {\n * \t     throw 'four!';\n *     }\n *\t   return n;\n *   })\n *   .catch(err => Observable.of('I', 'II', 'III', 'IV', 'V'))\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, I, II, III, IV, V\n *\n * @example <caption>Retries the caught source Observable again in case of error, similar to retry() operator</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n === 4) {\n * \t     throw 'four!';\n *     }\n * \t   return n;\n *   })\n *   .catch((err, caught) => caught)\n *   .take(30)\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, 1, 2, 3, ...\n *\n * @example <caption>Throws a new error when the source Observable throws an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n *     if (n == 4) {\n *       throw 'four!';\n *     }\n *     return n;\n *   })\n *   .catch(err => {\n *     throw 'error in source. Details: ' + err;\n *   })\n *   .subscribe(\n *     x => console.log(x),\n *     err => console.log(err)\n *   );\n *   // 1, 2, 3, error in source. Details: four!\n *\n * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\n *  is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\n *  is returned by the `selector` will be used to continue the observable chain.\n * @return {Observable} An observable that originates from either the source or the observable returned by the\n *  catch `selector` function.\n * @name catchError\n */\nfunction catchError(selector) {\n    return function catchErrorOperatorFunction(source) {\n        var operator = new CatchOperator(selector);\n        var caught = source.lift(operator);\n        return (operator.caught = caught);\n    };\n}\nexports.catchError = catchError;\nvar CatchOperator = (function () {\n    function CatchOperator(selector) {\n        this.selector = selector;\n    }\n    CatchOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));\n    };\n    return CatchOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar CatchSubscriber = (function (_super) {\n    __extends(CatchSubscriber, _super);\n    function CatchSubscriber(destination, selector, caught) {\n        _super.call(this, destination);\n        this.selector = selector;\n        this.caught = caught;\n    }\n    // NOTE: overriding `error` instead of `_error` because we don't want\n    // to have this flag this subscriber as `isStopped`. We can mimic the\n    // behavior of the RetrySubscriber (from the `retry` operator), where\n    // we unsubscribe from our source chain, reset our Subscriber flags,\n    // then subscribe to the selector result.\n    CatchSubscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            var result = void 0;\n            try {\n                result = this.selector(err, this.caught);\n            }\n            catch (err2) {\n                _super.prototype.error.call(this, err2);\n                return;\n            }\n            this._unsubscribeAndRecycle();\n            this.add(subscribeToResult_1.subscribeToResult(this, result));\n        }\n    };\n    return CatchSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=catchError.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscription_1 = require('../Subscription');\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Buffers the source Observable values, using a factory function of closing\n * Observables to determine when to close, emit, and reset the buffer.\n *\n * <span class=\"informal\">Collects values from the past as an array. When it\n * starts collecting values, it calls a function that returns an Observable that\n * tells when to close the buffer and restart collecting.</span>\n *\n * <img src=\"./img/bufferWhen.png\" width=\"100%\">\n *\n * Opens a buffer immediately, then closes the buffer when the observable\n * returned by calling `closingSelector` function emits a value. When it closes\n * the buffer, it immediately opens a new buffer and repeats the process.\n *\n * @example <caption>Emit an array of the last clicks every [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferWhen(() =>\n *   Rx.Observable.interval(1000 + Math.random() * 4000)\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link windowWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals buffer closure.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferWhen\n * @owner Observable\n */\nfunction bufferWhen(closingSelector) {\n    return function (source) {\n        return source.lift(new BufferWhenOperator(closingSelector));\n    };\n}\nexports.bufferWhen = bufferWhen;\nvar BufferWhenOperator = (function () {\n    function BufferWhenOperator(closingSelector) {\n        this.closingSelector = closingSelector;\n    }\n    BufferWhenOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));\n    };\n    return BufferWhenOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar BufferWhenSubscriber = (function (_super) {\n    __extends(BufferWhenSubscriber, _super);\n    function BufferWhenSubscriber(destination, closingSelector) {\n        _super.call(this, destination);\n        this.closingSelector = closingSelector;\n        this.subscribing = false;\n        this.openBuffer();\n    }\n    BufferWhenSubscriber.prototype._next = function (value) {\n        this.buffer.push(value);\n    };\n    BufferWhenSubscriber.prototype._complete = function () {\n        var buffer = this.buffer;\n        if (buffer) {\n            this.destination.next(buffer);\n        }\n        _super.prototype._complete.call(this);\n    };\n    BufferWhenSubscriber.prototype._unsubscribe = function () {\n        this.buffer = null;\n        this.subscribing = false;\n    };\n    BufferWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.openBuffer();\n    };\n    BufferWhenSubscriber.prototype.notifyComplete = function () {\n        if (this.subscribing) {\n            this.complete();\n        }\n        else {\n            this.openBuffer();\n        }\n    };\n    BufferWhenSubscriber.prototype.openBuffer = function () {\n        var closingSubscription = this.closingSubscription;\n        if (closingSubscription) {\n            this.remove(closingSubscription);\n            closingSubscription.unsubscribe();\n        }\n        var buffer = this.buffer;\n        if (this.buffer) {\n            this.destination.next(buffer);\n        }\n        this.buffer = [];\n        var closingNotifier = tryCatch_1.tryCatch(this.closingSelector)();\n        if (closingNotifier === errorObject_1.errorObject) {\n            this.error(errorObject_1.errorObject.e);\n        }\n        else {\n            closingSubscription = new Subscription_1.Subscription();\n            this.closingSubscription = closingSubscription;\n            this.add(closingSubscription);\n            this.subscribing = true;\n            closingSubscription.add(subscribeToResult_1.subscribeToResult(this, closingNotifier));\n            this.subscribing = false;\n        }\n    };\n    return BufferWhenSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=bufferWhen.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscription_1 = require('../Subscription');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\n/**\n * Buffers the source Observable values starting from an emission from\n * `openings` and ending when the output of `closingSelector` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array. Starts\n * collecting only when `opening` emits, and calls the `closingSelector`\n * function to get an Observable that tells when to close the buffer.</span>\n *\n * <img src=\"./img/bufferToggle.png\" width=\"100%\">\n *\n * Buffers values from the source by opening the buffer via signals from an\n * Observable provided to `openings`, and closing and sending the buffers when\n * a Subscribable or Promise returned by the `closingSelector` function emits.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var buffered = clicks.bufferToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferWhen}\n * @see {@link windowToggle}\n *\n * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new\n * buffers.\n * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns a Subscribable or Promise,\n * which, when it emits, signals that the associated buffer should be emitted\n * and cleared.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferToggle\n * @owner Observable\n */\nfunction bufferToggle(openings, closingSelector) {\n    return function bufferToggleOperatorFunction(source) {\n        return source.lift(new BufferToggleOperator(openings, closingSelector));\n    };\n}\nexports.bufferToggle = bufferToggle;\nvar BufferToggleOperator = (function () {\n    function BufferToggleOperator(openings, closingSelector) {\n        this.openings = openings;\n        this.closingSelector = closingSelector;\n    }\n    BufferToggleOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));\n    };\n    return BufferToggleOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar BufferToggleSubscriber = (function (_super) {\n    __extends(BufferToggleSubscriber, _super);\n    function BufferToggleSubscriber(destination, openings, closingSelector) {\n        _super.call(this, destination);\n        this.openings = openings;\n        this.closingSelector = closingSelector;\n        this.contexts = [];\n        this.add(subscribeToResult_1.subscribeToResult(this, openings));\n    }\n    BufferToggleSubscriber.prototype._next = function (value) {\n        var contexts = this.contexts;\n        var len = contexts.length;\n        for (var i = 0; i < len; i++) {\n            contexts[i].buffer.push(value);\n        }\n    };\n    BufferToggleSubscriber.prototype._error = function (err) {\n        var contexts = this.contexts;\n        while (contexts.length > 0) {\n            var context = contexts.shift();\n            context.subscription.unsubscribe();\n            context.buffer = null;\n            context.subscription = null;\n        }\n        this.contexts = null;\n        _super.prototype._error.call(this, err);\n    };\n    BufferToggleSubscriber.prototype._complete = function () {\n        var contexts = this.contexts;\n        while (contexts.length > 0) {\n            var context = contexts.shift();\n            this.destination.next(context.buffer);\n            context.subscription.unsubscribe();\n            context.buffer = null;\n            context.subscription = null;\n        }\n        this.contexts = null;\n        _super.prototype._complete.call(this);\n    };\n    BufferToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);\n    };\n    BufferToggleSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.closeBuffer(innerSub.context);\n    };\n    BufferToggleSubscriber.prototype.openBuffer = function (value) {\n        try {\n            var closingSelector = this.closingSelector;\n            var closingNotifier = closingSelector.call(this, value);\n            if (closingNotifier) {\n                this.trySubscribe(closingNotifier);\n            }\n        }\n        catch (err) {\n            this._error(err);\n        }\n    };\n    BufferToggleSubscriber.prototype.closeBuffer = function (context) {\n        var contexts = this.contexts;\n        if (contexts && context) {\n            var buffer = context.buffer, subscription = context.subscription;\n            this.destination.next(buffer);\n            contexts.splice(contexts.indexOf(context), 1);\n            this.remove(subscription);\n            subscription.unsubscribe();\n        }\n    };\n    BufferToggleSubscriber.prototype.trySubscribe = function (closingNotifier) {\n        var contexts = this.contexts;\n        var buffer = [];\n        var subscription = new Subscription_1.Subscription();\n        var context = { buffer: buffer, subscription: subscription };\n        contexts.push(context);\n        var innerSubscription = subscribeToResult_1.subscribeToResult(this, closingNotifier, context);\n        if (!innerSubscription || innerSubscription.closed) {\n            this.closeBuffer(context);\n        }\n        else {\n            innerSubscription.context = context;\n            this.add(innerSubscription);\n            subscription.add(innerSubscription);\n        }\n    };\n    return BufferToggleSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=bufferToggle.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar async_1 = require('../scheduler/async');\nvar Subscriber_1 = require('../Subscriber');\nvar isScheduler_1 = require('../util/isScheduler');\n/* tslint:enable:max-line-length */\n/**\n * Buffers the source Observable values for a specific time period.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * those arrays periodically in time.</span>\n *\n * <img src=\"./img/bufferTime.png\" width=\"100%\">\n *\n * Buffers values from the source for a specific time duration `bufferTimeSpan`.\n * Unless the optional argument `bufferCreationInterval` is given, it emits and\n * resets the buffer every `bufferTimeSpan` milliseconds. If\n * `bufferCreationInterval` is given, this operator opens the buffer every\n * `bufferCreationInterval` milliseconds and closes (emits and resets) the\n * buffer every `bufferTimeSpan` milliseconds. When the optional argument\n * `maxBufferSize` is specified, the buffer will be closed either after\n * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.\n *\n * @example <caption>Every second, emit an array of the recent click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(1000);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds, emit the click events from the next 2 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(2000, 5000);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link windowTime}\n *\n * @param {number} bufferTimeSpan The amount of time to fill each buffer array.\n * @param {number} [bufferCreationInterval] The interval at which to start new\n * buffers.\n * @param {number} [maxBufferSize] The maximum buffer size.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine buffer boundaries.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferTime\n * @owner Observable\n */\nfunction bufferTime(bufferTimeSpan) {\n    var length = arguments.length;\n    var scheduler = async_1.async;\n    if (isScheduler_1.isScheduler(arguments[arguments.length - 1])) {\n        scheduler = arguments[arguments.length - 1];\n        length--;\n    }\n    var bufferCreationInterval = null;\n    if (length >= 2) {\n        bufferCreationInterval = arguments[1];\n    }\n    var maxBufferSize = Number.POSITIVE_INFINITY;\n    if (length >= 3) {\n        maxBufferSize = arguments[2];\n    }\n    return function bufferTimeOperatorFunction(source) {\n        return source.lift(new BufferTimeOperator(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler));\n    };\n}\nexports.bufferTime = bufferTime;\nvar BufferTimeOperator = (function () {\n    function BufferTimeOperator(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {\n        this.bufferTimeSpan = bufferTimeSpan;\n        this.bufferCreationInterval = bufferCreationInterval;\n        this.maxBufferSize = maxBufferSize;\n        this.scheduler = scheduler;\n    }\n    BufferTimeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new BufferTimeSubscriber(subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.maxBufferSize, this.scheduler));\n    };\n    return BufferTimeOperator;\n}());\nvar Context = (function () {\n    function Context() {\n        this.buffer = [];\n    }\n    return Context;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar BufferTimeSubscriber = (function (_super) {\n    __extends(BufferTimeSubscriber, _super);\n    function BufferTimeSubscriber(destination, bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {\n        _super.call(this, destination);\n        this.bufferTimeSpan = bufferTimeSpan;\n        this.bufferCreationInterval = bufferCreationInterval;\n        this.maxBufferSize = maxBufferSize;\n        this.scheduler = scheduler;\n        this.contexts = [];\n        var context = this.openContext();\n        this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;\n        if (this.timespanOnly) {\n            var timeSpanOnlyState = { subscriber: this, context: context, bufferTimeSpan: bufferTimeSpan };\n            this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n        }\n        else {\n            var closeState = { subscriber: this, context: context };\n            var creationState = { bufferTimeSpan: bufferTimeSpan, bufferCreationInterval: bufferCreationInterval, subscriber: this, scheduler: scheduler };\n            this.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, closeState));\n            this.add(scheduler.schedule(dispatchBufferCreation, bufferCreationInterval, creationState));\n        }\n    }\n    BufferTimeSubscriber.prototype._next = function (value) {\n        var contexts = this.contexts;\n        var len = contexts.length;\n        var filledBufferContext;\n        for (var i = 0; i < len; i++) {\n            var context = contexts[i];\n            var buffer = context.buffer;\n            buffer.push(value);\n            if (buffer.length == this.maxBufferSize) {\n                filledBufferContext = context;\n            }\n        }\n        if (filledBufferContext) {\n            this.onBufferFull(filledBufferContext);\n        }\n    };\n    BufferTimeSubscriber.prototype._error = function (err) {\n        this.contexts.length = 0;\n        _super.prototype._error.call(this, err);\n    };\n    BufferTimeSubscriber.prototype._complete = function () {\n        var _a = this, contexts = _a.contexts, destination = _a.destination;\n        while (contexts.length > 0) {\n            var context = contexts.shift();\n            destination.next(context.buffer);\n        }\n        _super.prototype._complete.call(this);\n    };\n    BufferTimeSubscriber.prototype._unsubscribe = function () {\n        this.contexts = null;\n    };\n    BufferTimeSubscriber.prototype.onBufferFull = function (context) {\n        this.closeContext(context);\n        var closeAction = context.closeAction;\n        closeAction.unsubscribe();\n        this.remove(closeAction);\n        if (!this.closed && this.timespanOnly) {\n            context = this.openContext();\n            var bufferTimeSpan = this.bufferTimeSpan;\n            var timeSpanOnlyState = { subscriber: this, context: context, bufferTimeSpan: bufferTimeSpan };\n            this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n        }\n    };\n    BufferTimeSubscriber.prototype.openContext = function () {\n        var context = new Context();\n        this.contexts.push(context);\n        return context;\n    };\n    BufferTimeSubscriber.prototype.closeContext = function (context) {\n        this.destination.next(context.buffer);\n        var contexts = this.contexts;\n        var spliceIndex = contexts ? contexts.indexOf(context) : -1;\n        if (spliceIndex >= 0) {\n            contexts.splice(contexts.indexOf(context), 1);\n        }\n    };\n    return BufferTimeSubscriber;\n}(Subscriber_1.Subscriber));\nfunction dispatchBufferTimeSpanOnly(state) {\n    var subscriber = state.subscriber;\n    var prevContext = state.context;\n    if (prevContext) {\n        subscriber.closeContext(prevContext);\n    }\n    if (!subscriber.closed) {\n        state.context = subscriber.openContext();\n        state.context.closeAction = this.schedule(state, state.bufferTimeSpan);\n    }\n}\nfunction dispatchBufferCreation(state) {\n    var bufferCreationInterval = state.bufferCreationInterval, bufferTimeSpan = state.bufferTimeSpan, subscriber = state.subscriber, scheduler = state.scheduler;\n    var context = subscriber.openContext();\n    var action = this;\n    if (!subscriber.closed) {\n        subscriber.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, { subscriber: subscriber, context: context }));\n        action.schedule(state, bufferCreationInterval);\n    }\n}\nfunction dispatchBufferClose(arg) {\n    var subscriber = arg.subscriber, context = arg.context;\n    subscriber.closeContext(context);\n}\n//# sourceMappingURL=bufferTime.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/**\n * Buffers the source Observable values until the size hits the maximum\n * `bufferSize` given.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when its size reaches `bufferSize`.</span>\n *\n * <img src=\"./img/bufferCount.png\" width=\"100%\">\n *\n * Buffers a number of values from the source Observable by `bufferSize` then\n * emits the buffer and clears it, and starts a new buffer each\n * `startBufferEvery` values. If `startBufferEvery` is not provided or is\n * `null`, then new buffers are started immediately at the start of the source\n * and when each buffer closes and is emitted.\n *\n * @example <caption>Emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>On every click, emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2, 1);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link pairwise}\n * @see {@link windowCount}\n *\n * @param {number} bufferSize The maximum size of the buffer emitted.\n * @param {number} [startBufferEvery] Interval at which to start a new buffer.\n * For example if `startBufferEvery` is `2`, then a new buffer will be started\n * on every other value from the source. A new buffer is started at the\n * beginning of the source by default.\n * @return {Observable<T[]>} An Observable of arrays of buffered values.\n * @method bufferCount\n * @owner Observable\n */\nfunction bufferCount(bufferSize, startBufferEvery) {\n    if (startBufferEvery === void 0) { startBufferEvery = null; }\n    return function bufferCountOperatorFunction(source) {\n        return source.lift(new BufferCountOperator(bufferSize, startBufferEvery));\n    };\n}\nexports.bufferCount = bufferCount;\nvar BufferCountOperator = (function () {\n    function BufferCountOperator(bufferSize, startBufferEvery) {\n        this.bufferSize = bufferSize;\n        this.startBufferEvery = startBufferEvery;\n        if (!startBufferEvery || bufferSize === startBufferEvery) {\n            this.subscriberClass = BufferCountSubscriber;\n        }\n        else {\n            this.subscriberClass = BufferSkipCountSubscriber;\n        }\n    }\n    BufferCountOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new this.subscriberClass(subscriber, this.bufferSize, this.startBufferEvery));\n    };\n    return BufferCountOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar BufferCountSubscriber = (function (_super) {\n    __extends(BufferCountSubscriber, _super);\n    function BufferCountSubscriber(destination, bufferSize) {\n        _super.call(this, destination);\n        this.bufferSize = bufferSize;\n        this.buffer = [];\n    }\n    BufferCountSubscriber.prototype._next = function (value) {\n        var buffer = this.buffer;\n        buffer.push(value);\n        if (buffer.length == this.bufferSize) {\n            this.destination.next(buffer);\n            this.buffer = [];\n        }\n    };\n    BufferCountSubscriber.prototype._complete = function () {\n        var buffer = this.buffer;\n        if (buffer.length > 0) {\n            this.destination.next(buffer);\n        }\n        _super.prototype._complete.call(this);\n    };\n    return BufferCountSubscriber;\n}(Subscriber_1.Subscriber));\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar BufferSkipCountSubscriber = (function (_super) {\n    __extends(BufferSkipCountSubscriber, _super);\n    function BufferSkipCountSubscriber(destination, bufferSize, startBufferEvery) {\n        _super.call(this, destination);\n        this.bufferSize = bufferSize;\n        this.startBufferEvery = startBufferEvery;\n        this.buffers = [];\n        this.count = 0;\n    }\n    BufferSkipCountSubscriber.prototype._next = function (value) {\n        var _a = this, bufferSize = _a.bufferSize, startBufferEvery = _a.startBufferEvery, buffers = _a.buffers, count = _a.count;\n        this.count++;\n        if (count % startBufferEvery === 0) {\n            buffers.push([]);\n        }\n        for (var i = buffers.length; i--;) {\n            var buffer = buffers[i];\n            buffer.push(value);\n            if (buffer.length === bufferSize) {\n                buffers.splice(i, 1);\n                this.destination.next(buffer);\n            }\n        }\n    };\n    BufferSkipCountSubscriber.prototype._complete = function () {\n        var _a = this, buffers = _a.buffers, destination = _a.destination;\n        while (buffers.length > 0) {\n            var buffer = buffers.shift();\n            if (buffer.length > 0) {\n                destination.next(buffer);\n            }\n        }\n        _super.prototype._complete.call(this);\n    };\n    return BufferSkipCountSubscriber;\n}(Subscriber_1.Subscriber));\n//# sourceMappingURL=bufferCount.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Buffers the source Observable values until `closingNotifier` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when another Observable emits.</span>\n *\n * <img src=\"./img/buffer.png\" width=\"100%\">\n *\n * Buffers the incoming Observable values until the given `closingNotifier`\n * Observable emits a value, at which point it emits the buffer on the output\n * Observable and starts a new buffer internally, awaiting the next time\n * `closingNotifier` emits.\n *\n * @example <caption>On every click, emit array of most recent interval events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var buffered = interval.buffer(clicks);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link window}\n *\n * @param {Observable<any>} closingNotifier An Observable that signals the\n * buffer to be emitted on the output Observable.\n * @return {Observable<T[]>} An Observable of buffers, which are arrays of\n * values.\n * @method buffer\n * @owner Observable\n */\nfunction buffer(closingNotifier) {\n    return function bufferOperatorFunction(source) {\n        return source.lift(new BufferOperator(closingNotifier));\n    };\n}\nexports.buffer = buffer;\nvar BufferOperator = (function () {\n    function BufferOperator(closingNotifier) {\n        this.closingNotifier = closingNotifier;\n    }\n    BufferOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new BufferSubscriber(subscriber, this.closingNotifier));\n    };\n    return BufferOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar BufferSubscriber = (function (_super) {\n    __extends(BufferSubscriber, _super);\n    function BufferSubscriber(destination, closingNotifier) {\n        _super.call(this, destination);\n        this.buffer = [];\n        this.add(subscribeToResult_1.subscribeToResult(this, closingNotifier));\n    }\n    BufferSubscriber.prototype._next = function (value) {\n        this.buffer.push(value);\n    };\n    BufferSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var buffer = this.buffer;\n        this.buffer = [];\n        this.destination.next(buffer);\n    };\n    return BufferSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=buffer.js.map","\"use strict\";\nvar QueueAction_1 = require('./QueueAction');\nvar QueueScheduler_1 = require('./QueueScheduler');\n/**\n *\n * Queue Scheduler\n *\n * <span class=\"informal\">Put every next task on a queue, instead of executing it immediately</span>\n *\n * `queue` scheduler, when used with delay, behaves the same as {@link async} scheduler.\n *\n * When used without delay, it schedules given task synchronously - executes it right when\n * it is scheduled. However when called recursively, that is when inside the scheduled task,\n * another task is scheduled with queue scheduler, instead of executing immediately as well,\n * that task will be put on a queue and wait for current one to finish.\n *\n * This means that when you execute task with `queue` scheduler, you are sure it will end\n * before any other task scheduled with that scheduler will start.\n *\n * @examples <caption>Schedule recursively first, then do something</caption>\n *\n * Rx.Scheduler.queue.schedule(() => {\n *   Rx.Scheduler.queue.schedule(() => console.log('second')); // will not happen now, but will be put on a queue\n *\n *   console.log('first');\n * });\n *\n * // Logs:\n * // \"first\"\n * // \"second\"\n *\n *\n * @example <caption>Reschedule itself recursively</caption>\n *\n * Rx.Scheduler.queue.schedule(function(state) {\n *   if (state !== 0) {\n *     console.log('before', state);\n *     this.schedule(state - 1); // `this` references currently executing Action,\n *                               // which we reschedule with new state\n *     console.log('after', state);\n *   }\n * }, 0, 3);\n *\n * // In scheduler that runs recursively, you would expect:\n * // \"before\", 3\n * // \"before\", 2\n * // \"before\", 1\n * // \"after\", 1\n * // \"after\", 2\n * // \"after\", 3\n *\n * // But with queue it logs:\n * // \"before\", 3\n * // \"after\", 3\n * // \"before\", 2\n * // \"after\", 2\n * // \"before\", 1\n * // \"after\", 1\n *\n *\n * @static true\n * @name queue\n * @owner Scheduler\n */\nexports.queue = new QueueScheduler_1.QueueScheduler(QueueAction_1.QueueAction);\n//# sourceMappingURL=queue.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar root_1 = require('../../util/root');\nvar tryCatch_1 = require('../../util/tryCatch');\nvar errorObject_1 = require('../../util/errorObject');\nvar Observable_1 = require('../../Observable');\nvar Subscriber_1 = require('../../Subscriber');\nvar map_1 = require('../../operators/map');\nfunction getCORSRequest() {\n    if (root_1.root.XMLHttpRequest) {\n        return new root_1.root.XMLHttpRequest();\n    }\n    else if (!!root_1.root.XDomainRequest) {\n        return new root_1.root.XDomainRequest();\n    }\n    else {\n        throw new Error('CORS is not supported by your browser');\n    }\n}\nfunction getXMLHttpRequest() {\n    if (root_1.root.XMLHttpRequest) {\n        return new root_1.root.XMLHttpRequest();\n    }\n    else {\n        var progId = void 0;\n        try {\n            var progIds = ['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'];\n            for (var i = 0; i < 3; i++) {\n                try {\n                    progId = progIds[i];\n                    if (new root_1.root.ActiveXObject(progId)) {\n                        break;\n                    }\n                }\n                catch (e) {\n                }\n            }\n            return new root_1.root.ActiveXObject(progId);\n        }\n        catch (e) {\n            throw new Error('XMLHttpRequest is not supported by your browser');\n        }\n    }\n}\nfunction ajaxGet(url, headers) {\n    if (headers === void 0) { headers = null; }\n    return new AjaxObservable({ method: 'GET', url: url, headers: headers });\n}\nexports.ajaxGet = ajaxGet;\n;\nfunction ajaxPost(url, body, headers) {\n    return new AjaxObservable({ method: 'POST', url: url, body: body, headers: headers });\n}\nexports.ajaxPost = ajaxPost;\n;\nfunction ajaxDelete(url, headers) {\n    return new AjaxObservable({ method: 'DELETE', url: url, headers: headers });\n}\nexports.ajaxDelete = ajaxDelete;\n;\nfunction ajaxPut(url, body, headers) {\n    return new AjaxObservable({ method: 'PUT', url: url, body: body, headers: headers });\n}\nexports.ajaxPut = ajaxPut;\n;\nfunction ajaxPatch(url, body, headers) {\n    return new AjaxObservable({ method: 'PATCH', url: url, body: body, headers: headers });\n}\nexports.ajaxPatch = ajaxPatch;\n;\nvar mapResponse = map_1.map(function (x, index) { return x.response; });\nfunction ajaxGetJSON(url, headers) {\n    return mapResponse(new AjaxObservable({\n        method: 'GET',\n        url: url,\n        responseType: 'json',\n        headers: headers\n    }));\n}\nexports.ajaxGetJSON = ajaxGetJSON;\n;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar AjaxObservable = (function (_super) {\n    __extends(AjaxObservable, _super);\n    function AjaxObservable(urlOrRequest) {\n        _super.call(this);\n        var request = {\n            async: true,\n            createXHR: function () {\n                return this.crossDomain ? getCORSRequest.call(this) : getXMLHttpRequest();\n            },\n            crossDomain: false,\n            withCredentials: false,\n            headers: {},\n            method: 'GET',\n            responseType: 'json',\n            timeout: 0\n        };\n        if (typeof urlOrRequest === 'string') {\n            request.url = urlOrRequest;\n        }\n        else {\n            for (var prop in urlOrRequest) {\n                if (urlOrRequest.hasOwnProperty(prop)) {\n                    request[prop] = urlOrRequest[prop];\n                }\n            }\n        }\n        this.request = request;\n    }\n    AjaxObservable.prototype._subscribe = function (subscriber) {\n        return new AjaxSubscriber(subscriber, this.request);\n    };\n    /**\n     * Creates an observable for an Ajax request with either a request object with\n     * url, headers, etc or a string for a URL.\n     *\n     * @example\n     * source = Rx.Observable.ajax('/products');\n     * source = Rx.Observable.ajax({ url: 'products', method: 'GET' });\n     *\n     * @param {string|Object} request Can be one of the following:\n     *   A string of the URL to make the Ajax call.\n     *   An object with the following properties\n     *   - url: URL of the request\n     *   - body: The body of the request\n     *   - method: Method of the request, such as GET, POST, PUT, PATCH, DELETE\n     *   - async: Whether the request is async\n     *   - headers: Optional headers\n     *   - crossDomain: true if a cross domain request, else false\n     *   - createXHR: a function to override if you need to use an alternate\n     *   XMLHttpRequest implementation.\n     *   - resultSelector: a function to use to alter the output value type of\n     *   the Observable. Gets {@link AjaxResponse} as an argument.\n     * @return {Observable} An observable sequence containing the XMLHttpRequest.\n     * @static true\n     * @name ajax\n     * @owner Observable\n    */\n    AjaxObservable.create = (function () {\n        var create = function (urlOrRequest) {\n            return new AjaxObservable(urlOrRequest);\n        };\n        create.get = ajaxGet;\n        create.post = ajaxPost;\n        create.delete = ajaxDelete;\n        create.put = ajaxPut;\n        create.patch = ajaxPatch;\n        create.getJSON = ajaxGetJSON;\n        return create;\n    })();\n    return AjaxObservable;\n}(Observable_1.Observable));\nexports.AjaxObservable = AjaxObservable;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar AjaxSubscriber = (function (_super) {\n    __extends(AjaxSubscriber, _super);\n    function AjaxSubscriber(destination, request) {\n        _super.call(this, destination);\n        this.request = request;\n        this.done = false;\n        var headers = request.headers = request.headers || {};\n        // force CORS if requested\n        if (!request.crossDomain && !headers['X-Requested-With']) {\n            headers['X-Requested-With'] = 'XMLHttpRequest';\n        }\n        // ensure content type is set\n        if (!('Content-Type' in headers) && !(root_1.root.FormData && request.body instanceof root_1.root.FormData) && typeof request.body !== 'undefined') {\n            headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';\n        }\n        // properly serialize body\n        request.body = this.serializeBody(request.body, request.headers['Content-Type']);\n        this.send();\n    }\n    AjaxSubscriber.prototype.next = function (e) {\n        this.done = true;\n        var _a = this, xhr = _a.xhr, request = _a.request, destination = _a.destination;\n        var response = new AjaxResponse(e, xhr, request);\n        destination.next(response);\n    };\n    AjaxSubscriber.prototype.send = function () {\n        var _a = this, request = _a.request, _b = _a.request, user = _b.user, method = _b.method, url = _b.url, async = _b.async, password = _b.password, headers = _b.headers, body = _b.body;\n        var createXHR = request.createXHR;\n        var xhr = tryCatch_1.tryCatch(createXHR).call(request);\n        if (xhr === errorObject_1.errorObject) {\n            this.error(errorObject_1.errorObject.e);\n        }\n        else {\n            this.xhr = xhr;\n            // set up the events before open XHR\n            // https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest\n            // You need to add the event listeners before calling open() on the request.\n            // Otherwise the progress events will not fire.\n            this.setupEvents(xhr, request);\n            // open XHR\n            var result = void 0;\n            if (user) {\n                result = tryCatch_1.tryCatch(xhr.open).call(xhr, method, url, async, user, password);\n            }\n            else {\n                result = tryCatch_1.tryCatch(xhr.open).call(xhr, method, url, async);\n            }\n            if (result === errorObject_1.errorObject) {\n                this.error(errorObject_1.errorObject.e);\n                return null;\n            }\n            // timeout, responseType and withCredentials can be set once the XHR is open\n            if (async) {\n                xhr.timeout = request.timeout;\n                xhr.responseType = request.responseType;\n            }\n            if ('withCredentials' in xhr) {\n                xhr.withCredentials = !!request.withCredentials;\n            }\n            // set headers\n            this.setHeaders(xhr, headers);\n            // finally send the request\n            result = body ? tryCatch_1.tryCatch(xhr.send).call(xhr, body) : tryCatch_1.tryCatch(xhr.send).call(xhr);\n            if (result === errorObject_1.errorObject) {\n                this.error(errorObject_1.errorObject.e);\n                return null;\n            }\n        }\n        return xhr;\n    };\n    AjaxSubscriber.prototype.serializeBody = function (body, contentType) {\n        if (!body || typeof body === 'string') {\n            return body;\n        }\n        else if (root_1.root.FormData && body instanceof root_1.root.FormData) {\n            return body;\n        }\n        if (contentType) {\n            var splitIndex = contentType.indexOf(';');\n            if (splitIndex !== -1) {\n                contentType = contentType.substring(0, splitIndex);\n            }\n        }\n        switch (contentType) {\n            case 'application/x-www-form-urlencoded':\n                return Object.keys(body).map(function (key) { return (encodeURI(key) + \"=\" + encodeURI(body[key])); }).join('&');\n            case 'application/json':\n                return JSON.stringify(body);\n            default:\n                return body;\n        }\n    };\n    AjaxSubscriber.prototype.setHeaders = function (xhr, headers) {\n        for (var key in headers) {\n            if (headers.hasOwnProperty(key)) {\n                xhr.setRequestHeader(key, headers[key]);\n            }\n        }\n    };\n    AjaxSubscriber.prototype.setupEvents = function (xhr, request) {\n        var progressSubscriber = request.progressSubscriber;\n        function xhrTimeout(e) {\n            var _a = xhrTimeout, subscriber = _a.subscriber, progressSubscriber = _a.progressSubscriber, request = _a.request;\n            if (progressSubscriber) {\n                progressSubscriber.error(e);\n            }\n            subscriber.error(new AjaxTimeoutError(this, request)); //TODO: Make betterer.\n        }\n        ;\n        xhr.ontimeout = xhrTimeout;\n        xhrTimeout.request = request;\n        xhrTimeout.subscriber = this;\n        xhrTimeout.progressSubscriber = progressSubscriber;\n        if (xhr.upload && 'withCredentials' in xhr) {\n            if (progressSubscriber) {\n                var xhrProgress_1;\n                xhrProgress_1 = function (e) {\n                    var progressSubscriber = xhrProgress_1.progressSubscriber;\n                    progressSubscriber.next(e);\n                };\n                if (root_1.root.XDomainRequest) {\n                    xhr.onprogress = xhrProgress_1;\n                }\n                else {\n                    xhr.upload.onprogress = xhrProgress_1;\n                }\n                xhrProgress_1.progressSubscriber = progressSubscriber;\n            }\n            var xhrError_1;\n            xhrError_1 = function (e) {\n                var _a = xhrError_1, progressSubscriber = _a.progressSubscriber, subscriber = _a.subscriber, request = _a.request;\n                if (progressSubscriber) {\n                    progressSubscriber.error(e);\n                }\n                subscriber.error(new AjaxError('ajax error', this, request));\n            };\n            xhr.onerror = xhrError_1;\n            xhrError_1.request = request;\n            xhrError_1.subscriber = this;\n            xhrError_1.progressSubscriber = progressSubscriber;\n        }\n        function xhrReadyStateChange(e) {\n            var _a = xhrReadyStateChange, subscriber = _a.subscriber, progressSubscriber = _a.progressSubscriber, request = _a.request;\n            if (this.readyState === 4) {\n                // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n                var status_1 = this.status === 1223 ? 204 : this.status;\n                var response = (this.responseType === 'text' ? (this.response || this.responseText) : this.response);\n                // fix status code when it is 0 (0 status is undocumented).\n                // Occurs when accessing file resources or on Android 4.1 stock browser\n                // while retrieving files from application cache.\n                if (status_1 === 0) {\n                    status_1 = response ? 200 : 0;\n                }\n                if (200 <= status_1 && status_1 < 300) {\n                    if (progressSubscriber) {\n                        progressSubscriber.complete();\n                    }\n                    subscriber.next(e);\n                    subscriber.complete();\n                }\n                else {\n                    if (progressSubscriber) {\n                        progressSubscriber.error(e);\n                    }\n                    subscriber.error(new AjaxError('ajax error ' + status_1, this, request));\n                }\n            }\n        }\n        ;\n        xhr.onreadystatechange = xhrReadyStateChange;\n        xhrReadyStateChange.subscriber = this;\n        xhrReadyStateChange.progressSubscriber = progressSubscriber;\n        xhrReadyStateChange.request = request;\n    };\n    AjaxSubscriber.prototype.unsubscribe = function () {\n        var _a = this, done = _a.done, xhr = _a.xhr;\n        if (!done && xhr && xhr.readyState !== 4 && typeof xhr.abort === 'function') {\n            xhr.abort();\n        }\n        _super.prototype.unsubscribe.call(this);\n    };\n    return AjaxSubscriber;\n}(Subscriber_1.Subscriber));\nexports.AjaxSubscriber = AjaxSubscriber;\n/**\n * A normalized AJAX response.\n *\n * @see {@link ajax}\n *\n * @class AjaxResponse\n */\nvar AjaxResponse = (function () {\n    function AjaxResponse(originalEvent, xhr, request) {\n        this.originalEvent = originalEvent;\n        this.xhr = xhr;\n        this.request = request;\n        this.status = xhr.status;\n        this.responseType = xhr.responseType || request.responseType;\n        this.response = parseXhrResponse(this.responseType, xhr);\n    }\n    return AjaxResponse;\n}());\nexports.AjaxResponse = AjaxResponse;\n/**\n * A normalized AJAX error.\n *\n * @see {@link ajax}\n *\n * @class AjaxError\n */\nvar AjaxError = (function (_super) {\n    __extends(AjaxError, _super);\n    function AjaxError(message, xhr, request) {\n        _super.call(this, message);\n        this.message = message;\n        this.xhr = xhr;\n        this.request = request;\n        this.status = xhr.status;\n        this.responseType = xhr.responseType || request.responseType;\n        this.response = parseXhrResponse(this.responseType, xhr);\n    }\n    return AjaxError;\n}(Error));\nexports.AjaxError = AjaxError;\nfunction parseXhrResponse(responseType, xhr) {\n    switch (responseType) {\n        case 'json':\n            if ('response' in xhr) {\n                //IE does not support json as responseType, parse it internally\n                return xhr.responseType ? xhr.response : JSON.parse(xhr.response || xhr.responseText || 'null');\n            }\n            else {\n                // HACK(benlesh): TypeScript shennanigans\n                // tslint:disable-next-line:no-any latest TS seems to think xhr is \"never\" here.\n                return JSON.parse(xhr.responseText || 'null');\n            }\n        case 'xml':\n            return xhr.responseXML;\n        case 'text':\n        default:\n            // HACK(benlesh): TypeScript shennanigans\n            // tslint:disable-next-line:no-any latest TS seems to think xhr is \"never\" here.\n            return ('response' in xhr) ? xhr.response : xhr.responseText;\n    }\n}\n/**\n * @see {@link ajax}\n *\n * @class AjaxTimeoutError\n */\nvar AjaxTimeoutError = (function (_super) {\n    __extends(AjaxTimeoutError, _super);\n    function AjaxTimeoutError(xhr, request) {\n        _super.call(this, 'ajax timeout', xhr, request);\n    }\n    return AjaxTimeoutError;\n}(AjaxError));\nexports.AjaxTimeoutError = AjaxTimeoutError;\n//# sourceMappingURL=AjaxObservable.js.map","\"use strict\";\nvar TimerObservable_1 = require('./TimerObservable');\nexports.timer = TimerObservable_1.TimerObservable.create;\n//# sourceMappingURL=timer.js.map","\"use strict\";\nfunction identity(x) {\n    return x;\n}\nexports.identity = identity;\n//# sourceMappingURL=identity.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar root_1 = require('../util/root');\nvar Observable_1 = require('../Observable');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar PromiseObservable = (function (_super) {\n    __extends(PromiseObservable, _super);\n    function PromiseObservable(promise, scheduler) {\n        _super.call(this);\n        this.promise = promise;\n        this.scheduler = scheduler;\n    }\n    /**\n     * Converts a Promise to an Observable.\n     *\n     * <span class=\"informal\">Returns an Observable that just emits the Promise's\n     * resolved value, then completes.</span>\n     *\n     * Converts an ES2015 Promise or a Promises/A+ spec compliant Promise to an\n     * Observable. If the Promise resolves with a value, the output Observable\n     * emits that resolved value as a `next`, and then completes. If the Promise\n     * is rejected, then the output Observable emits the corresponding Error.\n     *\n     * @example <caption>Convert the Promise returned by Fetch to an Observable</caption>\n     * var result = Rx.Observable.fromPromise(fetch('http://myserver.com/'));\n     * result.subscribe(x => console.log(x), e => console.error(e));\n     *\n     * @see {@link bindCallback}\n     * @see {@link from}\n     *\n     * @param {PromiseLike<T>} promise The promise to be converted.\n     * @param {Scheduler} [scheduler] An optional IScheduler to use for scheduling\n     * the delivery of the resolved value (or the rejection).\n     * @return {Observable<T>} An Observable which wraps the Promise.\n     * @static true\n     * @name fromPromise\n     * @owner Observable\n     */\n    PromiseObservable.create = function (promise, scheduler) {\n        return new PromiseObservable(promise, scheduler);\n    };\n    PromiseObservable.prototype._subscribe = function (subscriber) {\n        var _this = this;\n        var promise = this.promise;\n        var scheduler = this.scheduler;\n        if (scheduler == null) {\n            if (this._isScalar) {\n                if (!subscriber.closed) {\n                    subscriber.next(this.value);\n                    subscriber.complete();\n                }\n            }\n            else {\n                promise.then(function (value) {\n                    _this.value = value;\n                    _this._isScalar = true;\n                    if (!subscriber.closed) {\n                        subscriber.next(value);\n                        subscriber.complete();\n                    }\n                }, function (err) {\n                    if (!subscriber.closed) {\n                        subscriber.error(err);\n                    }\n                })\n                    .then(null, function (err) {\n                    // escape the promise trap, throw unhandled errors\n                    root_1.root.setTimeout(function () { throw err; });\n                });\n            }\n        }\n        else {\n            if (this._isScalar) {\n                if (!subscriber.closed) {\n                    return scheduler.schedule(dispatchNext, 0, { value: this.value, subscriber: subscriber });\n                }\n            }\n            else {\n                promise.then(function (value) {\n                    _this.value = value;\n                    _this._isScalar = true;\n                    if (!subscriber.closed) {\n                        subscriber.add(scheduler.schedule(dispatchNext, 0, { value: value, subscriber: subscriber }));\n                    }\n                }, function (err) {\n                    if (!subscriber.closed) {\n                        subscriber.add(scheduler.schedule(dispatchError, 0, { err: err, subscriber: subscriber }));\n                    }\n                })\n                    .then(null, function (err) {\n                    // escape the promise trap, throw unhandled errors\n                    root_1.root.setTimeout(function () { throw err; });\n                });\n            }\n        }\n    };\n    return PromiseObservable;\n}(Observable_1.Observable));\nexports.PromiseObservable = PromiseObservable;\nfunction dispatchNext(arg) {\n    var value = arg.value, subscriber = arg.subscriber;\n    if (!subscriber.closed) {\n        subscriber.next(value);\n        subscriber.complete();\n    }\n}\nfunction dispatchError(arg) {\n    var err = arg.err, subscriber = arg.subscriber;\n    if (!subscriber.closed) {\n        subscriber.error(err);\n    }\n}\n//# sourceMappingURL=PromiseObservable.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar isArray_1 = require('../util/isArray');\nvar isArrayLike_1 = require('../util/isArrayLike');\nvar isPromise_1 = require('../util/isPromise');\nvar PromiseObservable_1 = require('./PromiseObservable');\nvar IteratorObservable_1 = require('./IteratorObservable');\nvar ArrayObservable_1 = require('./ArrayObservable');\nvar ArrayLikeObservable_1 = require('./ArrayLikeObservable');\nvar iterator_1 = require('../symbol/iterator');\nvar Observable_1 = require('../Observable');\nvar observeOn_1 = require('../operators/observeOn');\nvar observable_1 = require('../symbol/observable');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar FromObservable = (function (_super) {\n    __extends(FromObservable, _super);\n    function FromObservable(ish, scheduler) {\n        _super.call(this, null);\n        this.ish = ish;\n        this.scheduler = scheduler;\n    }\n    /**\n     * Creates an Observable from an Array, an array-like object, a Promise, an\n     * iterable object, or an Observable-like object.\n     *\n     * <span class=\"informal\">Converts almost anything to an Observable.</span>\n     *\n     * <img src=\"./img/from.png\" width=\"100%\">\n     *\n     * Convert various other objects and data types into Observables. `from`\n     * converts a Promise or an array-like or an\n     * [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)\n     * object into an Observable that emits the items in that promise or array or\n     * iterable. A String, in this context, is treated as an array of characters.\n     * Observable-like objects (contains a function named with the ES2015 Symbol\n     * for Observable) can also be converted through this operator.\n     *\n     * @example <caption>Converts an array to an Observable</caption>\n     * var array = [10, 20, 30];\n     * var result = Rx.Observable.from(array);\n     * result.subscribe(x => console.log(x));\n     *\n     * // Results in the following:\n     * // 10 20 30\n     *\n     * @example <caption>Convert an infinite iterable (from a generator) to an Observable</caption>\n     * function* generateDoubles(seed) {\n     *   var i = seed;\n     *   while (true) {\n     *     yield i;\n     *     i = 2 * i; // double it\n     *   }\n     * }\n     *\n     * var iterator = generateDoubles(3);\n     * var result = Rx.Observable.from(iterator).take(10);\n     * result.subscribe(x => console.log(x));\n     *\n     * // Results in the following:\n     * // 3 6 12 24 48 96 192 384 768 1536\n     *\n     * @see {@link create}\n     * @see {@link fromEvent}\n     * @see {@link fromEventPattern}\n     * @see {@link fromPromise}\n     *\n     * @param {ObservableInput<T>} ish A subscribable object, a Promise, an\n     * Observable-like, an Array, an iterable or an array-like object to be\n     * converted.\n     * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n     * emissions of values.\n     * @return {Observable<T>} The Observable whose values are originally from the\n     * input object that was converted.\n     * @static true\n     * @name from\n     * @owner Observable\n     */\n    FromObservable.create = function (ish, scheduler) {\n        if (ish != null) {\n            if (typeof ish[observable_1.observable] === 'function') {\n                if (ish instanceof Observable_1.Observable && !scheduler) {\n                    return ish;\n                }\n                return new FromObservable(ish, scheduler);\n            }\n            else if (isArray_1.isArray(ish)) {\n                return new ArrayObservable_1.ArrayObservable(ish, scheduler);\n            }\n            else if (isPromise_1.isPromise(ish)) {\n                return new PromiseObservable_1.PromiseObservable(ish, scheduler);\n            }\n            else if (typeof ish[iterator_1.iterator] === 'function' || typeof ish === 'string') {\n                return new IteratorObservable_1.IteratorObservable(ish, scheduler);\n            }\n            else if (isArrayLike_1.isArrayLike(ish)) {\n                return new ArrayLikeObservable_1.ArrayLikeObservable(ish, scheduler);\n            }\n        }\n        throw new TypeError((ish !== null && typeof ish || ish) + ' is not observable');\n    };\n    FromObservable.prototype._subscribe = function (subscriber) {\n        var ish = this.ish;\n        var scheduler = this.scheduler;\n        if (scheduler == null) {\n            return ish[observable_1.observable]().subscribe(subscriber);\n        }\n        else {\n            return ish[observable_1.observable]().subscribe(new observeOn_1.ObserveOnSubscriber(subscriber, scheduler, 0));\n        }\n    };\n    return FromObservable;\n}(Observable_1.Observable));\nexports.FromObservable = FromObservable;\n//# sourceMappingURL=FromObservable.js.map","\"use strict\";\nvar FromObservable_1 = require('./FromObservable');\nexports.from = FromObservable_1.FromObservable.create;\n//# sourceMappingURL=from.js.map","\"use strict\";\nvar ArrayObservable_1 = require('./ArrayObservable');\nexports.of = ArrayObservable_1.ArrayObservable.of;\n//# sourceMappingURL=of.js.map","\"use strict\";\nfunction isPromise(value) {\n    return value && typeof value.subscribe !== 'function' && typeof value.then === 'function';\n}\nexports.isPromise = isPromise;\n//# sourceMappingURL=isPromise.js.map","\"use strict\";\nexports.isArrayLike = (function (x) { return x && typeof x.length === 'number'; });\n//# sourceMappingURL=isArrayLike.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscription_1 = require('./Subscription');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SubjectSubscription = (function (_super) {\n    __extends(SubjectSubscription, _super);\n    function SubjectSubscription(subject, subscriber) {\n        _super.call(this);\n        this.subject = subject;\n        this.subscriber = subscriber;\n        this.closed = false;\n    }\n    SubjectSubscription.prototype.unsubscribe = function () {\n        if (this.closed) {\n            return;\n        }\n        this.closed = true;\n        var subject = this.subject;\n        var observers = subject.observers;\n        this.subject = null;\n        if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n            return;\n        }\n        var subscriberIndex = observers.indexOf(this.subscriber);\n        if (subscriberIndex !== -1) {\n            observers.splice(subscriberIndex, 1);\n        }\n    };\n    return SubjectSubscription;\n}(Subscription_1.Subscription));\nexports.SubjectSubscription = SubjectSubscription;\n//# sourceMappingURL=SubjectSubscription.js.map","\"use strict\";\nexports.empty = {\n    closed: true,\n    next: function (value) { },\n    error: function (err) { throw err; },\n    complete: function () { }\n};\n//# sourceMappingURL=Observer.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nvar UnsubscriptionError = (function (_super) {\n    __extends(UnsubscriptionError, _super);\n    function UnsubscriptionError(errors) {\n        _super.call(this);\n        this.errors = errors;\n        var err = Error.call(this, errors ?\n            errors.length + \" errors occurred during unsubscription:\\n  \" + errors.map(function (err, i) { return ((i + 1) + \") \" + err.toString()); }).join('\\n  ') : '');\n        this.name = err.name = 'UnsubscriptionError';\n        this.stack = err.stack;\n        this.message = err.message;\n    }\n    return UnsubscriptionError;\n}(Error));\nexports.UnsubscriptionError = UnsubscriptionError;\n//# sourceMappingURL=UnsubscriptionError.js.map","\"use strict\";\nfunction isObject(x) {\n    return x != null && typeof x === 'object';\n}\nexports.isObject = isObject;\n//# sourceMappingURL=isObject.js.map","\"use strict\";\n/* tslint:disable:no-unused-variable */\n// Subject imported before Observable to bypass circular dependency issue since\n// Subject extends Observable and Observable references Subject in it's\n// definition\nvar Subject_1 = require('./Subject');\nexports.Subject = Subject_1.Subject;\nexports.AnonymousSubject = Subject_1.AnonymousSubject;\n/* tslint:enable:no-unused-variable */\nvar Observable_1 = require('./Observable');\nexports.Observable = Observable_1.Observable;\n// statics\n/* tslint:disable:no-use-before-declare */\nrequire('./add/observable/bindCallback');\nrequire('./add/observable/bindNodeCallback');\nrequire('./add/observable/combineLatest');\nrequire('./add/observable/concat');\nrequire('./add/observable/defer');\nrequire('./add/observable/empty');\nrequire('./add/observable/forkJoin');\nrequire('./add/observable/from');\nrequire('./add/observable/fromEvent');\nrequire('./add/observable/fromEventPattern');\nrequire('./add/observable/fromPromise');\nrequire('./add/observable/generate');\nrequire('./add/observable/if');\nrequire('./add/observable/interval');\nrequire('./add/observable/merge');\nrequire('./add/observable/race');\nrequire('./add/observable/never');\nrequire('./add/observable/of');\nrequire('./add/observable/onErrorResumeNext');\nrequire('./add/observable/pairs');\nrequire('./add/observable/range');\nrequire('./add/observable/using');\nrequire('./add/observable/throw');\nrequire('./add/observable/timer');\nrequire('./add/observable/zip');\n//dom\nrequire('./add/observable/dom/ajax');\nrequire('./add/observable/dom/webSocket');\n//operators\nrequire('./add/operator/buffer');\nrequire('./add/operator/bufferCount');\nrequire('./add/operator/bufferTime');\nrequire('./add/operator/bufferToggle');\nrequire('./add/operator/bufferWhen');\nrequire('./add/operator/catch');\nrequire('./add/operator/combineAll');\nrequire('./add/operator/combineLatest');\nrequire('./add/operator/concat');\nrequire('./add/operator/concatAll');\nrequire('./add/operator/concatMap');\nrequire('./add/operator/concatMapTo');\nrequire('./add/operator/count');\nrequire('./add/operator/dematerialize');\nrequire('./add/operator/debounce');\nrequire('./add/operator/debounceTime');\nrequire('./add/operator/defaultIfEmpty');\nrequire('./add/operator/delay');\nrequire('./add/operator/delayWhen');\nrequire('./add/operator/distinct');\nrequire('./add/operator/distinctUntilChanged');\nrequire('./add/operator/distinctUntilKeyChanged');\nrequire('./add/operator/do');\nrequire('./add/operator/exhaust');\nrequire('./add/operator/exhaustMap');\nrequire('./add/operator/expand');\nrequire('./add/operator/elementAt');\nrequire('./add/operator/filter');\nrequire('./add/operator/finally');\nrequire('./add/operator/find');\nrequire('./add/operator/findIndex');\nrequire('./add/operator/first');\nrequire('./add/operator/groupBy');\nrequire('./add/operator/ignoreElements');\nrequire('./add/operator/isEmpty');\nrequire('./add/operator/audit');\nrequire('./add/operator/auditTime');\nrequire('./add/operator/last');\nrequire('./add/operator/let');\nrequire('./add/operator/every');\nrequire('./add/operator/map');\nrequire('./add/operator/mapTo');\nrequire('./add/operator/materialize');\nrequire('./add/operator/max');\nrequire('./add/operator/merge');\nrequire('./add/operator/mergeAll');\nrequire('./add/operator/mergeMap');\nrequire('./add/operator/mergeMapTo');\nrequire('./add/operator/mergeScan');\nrequire('./add/operator/min');\nrequire('./add/operator/multicast');\nrequire('./add/operator/observeOn');\nrequire('./add/operator/onErrorResumeNext');\nrequire('./add/operator/pairwise');\nrequire('./add/operator/partition');\nrequire('./add/operator/pluck');\nrequire('./add/operator/publish');\nrequire('./add/operator/publishBehavior');\nrequire('./add/operator/publishReplay');\nrequire('./add/operator/publishLast');\nrequire('./add/operator/race');\nrequire('./add/operator/reduce');\nrequire('./add/operator/repeat');\nrequire('./add/operator/repeatWhen');\nrequire('./add/operator/retry');\nrequire('./add/operator/retryWhen');\nrequire('./add/operator/sample');\nrequire('./add/operator/sampleTime');\nrequire('./add/operator/scan');\nrequire('./add/operator/sequenceEqual');\nrequire('./add/operator/share');\nrequire('./add/operator/shareReplay');\nrequire('./add/operator/single');\nrequire('./add/operator/skip');\nrequire('./add/operator/skipLast');\nrequire('./add/operator/skipUntil');\nrequire('./add/operator/skipWhile');\nrequire('./add/operator/startWith');\nrequire('./add/operator/subscribeOn');\nrequire('./add/operator/switch');\nrequire('./add/operator/switchMap');\nrequire('./add/operator/switchMapTo');\nrequire('./add/operator/take');\nrequire('./add/operator/takeLast');\nrequire('./add/operator/takeUntil');\nrequire('./add/operator/takeWhile');\nrequire('./add/operator/throttle');\nrequire('./add/operator/throttleTime');\nrequire('./add/operator/timeInterval');\nrequire('./add/operator/timeout');\nrequire('./add/operator/timeoutWith');\nrequire('./add/operator/timestamp');\nrequire('./add/operator/toArray');\nrequire('./add/operator/toPromise');\nrequire('./add/operator/window');\nrequire('./add/operator/windowCount');\nrequire('./add/operator/windowTime');\nrequire('./add/operator/windowToggle');\nrequire('./add/operator/windowWhen');\nrequire('./add/operator/withLatestFrom');\nrequire('./add/operator/zip');\nrequire('./add/operator/zipAll');\n/* tslint:disable:no-unused-variable */\nvar Subscription_1 = require('./Subscription');\nexports.Subscription = Subscription_1.Subscription;\nvar Subscriber_1 = require('./Subscriber');\nexports.Subscriber = Subscriber_1.Subscriber;\nvar AsyncSubject_1 = require('./AsyncSubject');\nexports.AsyncSubject = AsyncSubject_1.AsyncSubject;\nvar ReplaySubject_1 = require('./ReplaySubject');\nexports.ReplaySubject = ReplaySubject_1.ReplaySubject;\nvar BehaviorSubject_1 = require('./BehaviorSubject');\nexports.BehaviorSubject = BehaviorSubject_1.BehaviorSubject;\nvar ConnectableObservable_1 = require('./observable/ConnectableObservable');\nexports.ConnectableObservable = ConnectableObservable_1.ConnectableObservable;\nvar Notification_1 = require('./Notification');\nexports.Notification = Notification_1.Notification;\nvar EmptyError_1 = require('./util/EmptyError');\nexports.EmptyError = EmptyError_1.EmptyError;\nvar ArgumentOutOfRangeError_1 = require('./util/ArgumentOutOfRangeError');\nexports.ArgumentOutOfRangeError = ArgumentOutOfRangeError_1.ArgumentOutOfRangeError;\nvar ObjectUnsubscribedError_1 = require('./util/ObjectUnsubscribedError');\nexports.ObjectUnsubscribedError = ObjectUnsubscribedError_1.ObjectUnsubscribedError;\nvar TimeoutError_1 = require('./util/TimeoutError');\nexports.TimeoutError = TimeoutError_1.TimeoutError;\nvar UnsubscriptionError_1 = require('./util/UnsubscriptionError');\nexports.UnsubscriptionError = UnsubscriptionError_1.UnsubscriptionError;\nvar timeInterval_1 = require('./operator/timeInterval');\nexports.TimeInterval = timeInterval_1.TimeInterval;\nvar timestamp_1 = require('./operators/timestamp');\nexports.Timestamp = timestamp_1.Timestamp;\nvar TestScheduler_1 = require('./testing/TestScheduler');\nexports.TestScheduler = TestScheduler_1.TestScheduler;\nvar VirtualTimeScheduler_1 = require('./scheduler/VirtualTimeScheduler');\nexports.VirtualTimeScheduler = VirtualTimeScheduler_1.VirtualTimeScheduler;\nvar AjaxObservable_1 = require('./observable/dom/AjaxObservable');\nexports.AjaxResponse = AjaxObservable_1.AjaxResponse;\nexports.AjaxError = AjaxObservable_1.AjaxError;\nexports.AjaxTimeoutError = AjaxObservable_1.AjaxTimeoutError;\nvar pipe_1 = require('./util/pipe');\nexports.pipe = pipe_1.pipe;\nvar asap_1 = require('./scheduler/asap');\nvar async_1 = require('./scheduler/async');\nvar queue_1 = require('./scheduler/queue');\nvar animationFrame_1 = require('./scheduler/animationFrame');\nvar rxSubscriber_1 = require('./symbol/rxSubscriber');\nvar iterator_1 = require('./symbol/iterator');\nvar observable_1 = require('./symbol/observable');\nvar _operators = require('./operators');\nexports.operators = _operators;\n/* tslint:enable:no-unused-variable */\n/**\n * @typedef {Object} Rx.Scheduler\n * @property {Scheduler} queue Schedules on a queue in the current event frame\n * (trampoline scheduler). Use this for iteration operations.\n * @property {Scheduler} asap Schedules on the micro task queue, which uses the\n * fastest transport mechanism available, either Node.js' `process.nextTick()`\n * or Web Worker MessageChannel or setTimeout or others. Use this for\n * asynchronous conversions.\n * @property {Scheduler} async Schedules work with `setInterval`. Use this for\n * time-based operations.\n * @property {Scheduler} animationFrame Schedules work with `requestAnimationFrame`.\n * Use this for synchronizing with the platform's painting\n */\nvar Scheduler = {\n    asap: asap_1.asap,\n    queue: queue_1.queue,\n    animationFrame: animationFrame_1.animationFrame,\n    async: async_1.async\n};\nexports.Scheduler = Scheduler;\n/**\n * @typedef {Object} Rx.Symbol\n * @property {Symbol|string} rxSubscriber A symbol to use as a property name to\n * retrieve an \"Rx safe\" Observer from an object. \"Rx safety\" can be defined as\n * an object that has all of the traits of an Rx Subscriber, including the\n * ability to add and remove subscriptions to the subscription chain and\n * guarantees involving event triggering (can't \"next\" after unsubscription,\n * etc).\n * @property {Symbol|string} observable A symbol to use as a property name to\n * retrieve an Observable as defined by the [ECMAScript \"Observable\" spec](https://github.com/zenparsing/es-observable).\n * @property {Symbol|string} iterator The ES6 symbol to use as a property name\n * to retrieve an iterator from an object.\n */\nvar Symbol = {\n    rxSubscriber: rxSubscriber_1.rxSubscriber,\n    observable: observable_1.observable,\n    iterator: iterator_1.iterator\n};\nexports.Symbol = Symbol;\n//# sourceMappingURL=Rx.js.map","export class NastavnikService {\r\n\r\n    static get() {\r\n        return fetch(\"http://localhost:3000/nastavnici/\")\r\n            .then(response => response.json());\r\n\r\n    }\r\n}","export class KursService {\r\n\r\n    static get() {\r\n        return fetch(\"http://localhost:3000/kursevi/\")\r\n            .then(response => response.json());\r\n\r\n    }\r\n}","import { Nastavnik } from './nastavnik';\r\nimport { Kurs } from './kurs';\r\nimport { RandomService } from './random.service';\r\nimport { NastavnikService } from './nastavnik.service';\r\nimport { KursService } from './kursevi.service';\r\nimport * as Rx from 'rxjs';\r\n\r\n\r\n\r\nexport class DrawService {\r\n\r\n    static ShowSchoolRating(rating) {\r\n\r\n        const x = document.getElementById(\"rat\");\r\n        const el = document.createElement(\"p\");\r\n        el.className = \"rejting\";\r\n        el.innerHTML = `<h3> <span class=\"rejt\">Rating: ${rating}</span></h3>`;\r\n\r\n        x.appendChild(el);\r\n\r\n    }\r\n\r\n    static ShowTeacherRating(rating) {\r\n\r\n        const x = document.getElementById(\"ratNast\");\r\n        const el = document.createElement(\"p\");\r\n        el.className = \"rejting\";\r\n        el.innerHTML = `<h3><span class=\"rejt\">Rating: ${rating}</span></h3>`;\r\n\r\n        x.appendChild(el);\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    static showTeacher(teacher) {\r\n\r\n        const par = document.getElementById(\"nastavnici\");\r\n\r\n        const el = document.createElement(\"div\");\r\n        el.className = \"nastavnik\";\r\n        const { licno_ime, rating } = teacher;\r\n        el.innerHTML = `<h3>${teacher.licno_ime}</h3> <br/>Ocena: ${teacher.rating}`;\r\n        par.appendChild(el);\r\n\r\n\r\n        const par2 = document.getElementById(\"btns\");\r\n        const button = document.createElement(\"button\");\r\n        button.innerHTML = \"reward teacher\";\r\n        button.className = \"rwdbtn\";\r\n        button.dataset.bid = teacher.id;\r\n\r\n        const glasDiv = document.getElementById(\"glasanje\");\r\n        ////////////////////////////\r\n        Rx.Observable.fromEvent(button, \"click\")\r\n            .scan(rejt => rejt + 0.01, teacher.rating)\r\n            .subscribe(rejt => glasDiv.innerHTML = `Hvala za glas!<br/>Podigli ste rejting profesora: ${teacher.licno_ime} <br/>na ${rejt.toFixed(2)}`)\r\n\r\n\r\n        par2.appendChild(button);\r\n\r\n    };\r\n\r\n\r\n\r\n    static showTeacherDay(teach) {\r\n        const parent = document.getElementById(\"day\");\r\n\r\n        const elem = document.createElement(\"div\");\r\n        elem.className = \"nastavnikDana\";\r\n        const { licno_ime, rating, kursevi } = teach;\r\n        elem.innerHTML = `<h3>${teach.licno_ime}</h3> <br/>Ocena: ${teach.rating}<br/><br/> ${teach.kursevi}`;\r\n\r\n        parent.appendChild(elem);\r\n    }\r\n\r\n\r\n\r\n    static ShowScience(course) {\r\n\r\n        const p = document.getElementById(\"levi\");\r\n\r\n        const ell = document.createElement(\"div\");\r\n        ell.className = \"kurs\";\r\n        ell.style.backgroundColor = \"#89DA59\";\r\n        const { ime, rating } = course;\r\n        ell.innerHTML = `<h3>${course.ime}</h3> <br/>Ocena: ${course.rating}`;\r\n        p.appendChild(ell);\r\n    }\r\n\r\n\r\n    static ShowLang(course) {\r\n\r\n        const p = document.getElementById(\"desni\");\r\n\r\n        const ell = document.createElement(\"div\");\r\n        ell.className = \"kurs\";\r\n        ell.style.backgroundColor = \"#F99866\";\r\n\r\n        const { ime, rating } = course;\r\n        ell.innerHTML = `<h3>${course.ime}</h3> <br/>Ocena: ${course.rating}`;\r\n        p.appendChild(ell);\r\n    }\r\n\r\n\r\n\r\n    static ShowScienceRating(rating) {\r\n\r\n        const x = document.getElementById(\"ratSc\");\r\n        const el = document.createElement(\"p\");\r\n        el.className = \"rejting\";\r\n        el.innerHTML = `<h3><span class=\"rejt\">Rating: ${rating}</span></h3>`;\r\n\r\n        x.appendChild(el);\r\n\r\n    }\r\n\r\n    static ShowLangRating(rating) {\r\n\r\n        const x1 = document.getElementById(\"ratLang\");\r\n        const el1 = document.createElement(\"p\");\r\n        el1.className = \"rejting\";\r\n        el1.innerHTML = `<h3><span class=\"rejt\">Rating: ${rating}</span></h3>`;\r\n\r\n        x1.appendChild(el1);\r\n\r\n    }\r\n\r\n\r\n\r\n    static ShowCourse(course) {\r\n\r\n        const p = document.getElementById(\"available\");\r\n\r\n        const ell = document.createElement(\"div\");\r\n        ell.className = \"kurs\";\r\n        ell.style.backgroundColor = \"#80BD9E\";\r\n        const { ime } = course;\r\n        ell.innerHTML = `<h2>${course.ime}</h2>`;\r\n        p.appendChild(ell);\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n}","export class PrijavljeniService {\r\n\r\n    static get() {\r\n        return fetch(\"http://localhost:3000/prijavljeni/\")\r\n            .then(response => response.json());\r\n\r\n    }\r\n}","import { Nastavnik } from './nastavnik';\r\nimport { Kurs } from './kurs';\r\nimport { RandomService } from './random.service';\r\nimport { NastavnikService } from './nastavnik.service';\r\nimport { KursService } from './kursevi.service';\r\nimport { DrawService } from './draw.service';\r\nimport { PrijavljeniService } from './prijavljeni.service';\r\n\r\n\r\n\r\n\r\nfunction nadji(dan, vreme) {\r\n\r\n\r\n    const niz = KursService.get()\r\n        .then(niz => niz.forEach(kurs => {\r\n            let tmp1 = kurs.dani.find(d => d === dan);\r\n            let tmp2 = kurs.sati.find(s => s === vreme);\r\n            if (tmp1 !== undefined && tmp2 !== undefined)\r\n                DrawService.ShowCourse(kurs);\r\n        }));\r\n\r\n\r\n}\r\n\r\nconst btn = document.getElementById(\"btn\");\r\n\r\nbtn.onclick = function() {\r\n\r\n    const div = document.getElementById(\"available\");\r\n    div.innerHTML = \" \";\r\n\r\n    const sel = document.querySelector(\".selDan\");\r\n    const selValueDan = sel.options[sel.selectedIndex].value;\r\n    const sell = document.querySelector(\".selVreme\");\r\n    const selValueVreme = sell.options[sell.selectedIndex].value;\r\n    nadji(selValueDan, selValueVreme);\r\n\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst btnUpis = document.getElementById(\"btnUpis\");\r\nbtnUpis.onclick = function() {\r\n\r\n    const divz = document.getElementById(\"inputi\");\r\n\r\n    let lab1 = document.createElement(\"label\");\r\n    lab1.innerHTML = \"Ime: \";\r\n    divz.appendChild(lab1);\r\n\r\n    let input1 = document.createElement(\"input\");\r\n    input1.type = \"text\";\r\n    input1.className = \"inp1\";\r\n    lab1.appendChild(input1);\r\n    divz.appendChild(document.createElement(\"br\"));\r\n    divz.appendChild(document.createElement(\"br\"));\r\n\r\n    let lab2 = document.createElement(\"label\");\r\n    lab2.innerHTML = \"Prezime: \";\r\n    divz.appendChild(lab2);\r\n\r\n    let input2 = document.createElement(\"input\");\r\n    input2.type = \"text\";\r\n    input2.className = \"inp2\";\r\n    lab2.appendChild(input2);\r\n    divz.appendChild(document.createElement(\"br\"));\r\n    divz.appendChild(document.createElement(\"br\"));\r\n\r\n    let btnProsledi = document.createElement(\"button\");\r\n    btnProsledi.innerHTML = \"Prosledi\";\r\n    btnProsledi.className = \"btn btn-secondary\";\r\n    divz.appendChild(btnProsledi);\r\n\r\n    btnProsledi.onclick = function() {\r\n        const div = document.getElementById(\"ispis\");\r\n        div.innerHTML = \" \";\r\n\r\n\r\n        const selk = document.querySelector(\".selKurs\");\r\n        const selValueKurs = selk.options[selk.selectedIndex].value;\r\n\r\n        const inp1 = document.querySelector(\".inp1\");\r\n        const ime1 = inp1.value;\r\n        const ime = ime1.charAt(0).toUpperCase() + ime1.slice(1);\r\n\r\n        const inp2 = document.querySelector(\".inp2\");\r\n        const prezime1 = inp2.value;\r\n        const prezime = prezime1.charAt(0).toUpperCase() + prezime1.slice(1);\r\n\r\n\r\n        dodajPrijavu(selValueKurs, ime, prezime);\r\n\r\n    }\r\n};\r\n\r\n\r\n\r\n\r\n\r\nfunction dodajPrijavu(selValueKurs, ime, prezime) {\r\n\r\n\r\n    /*KursService.get()\r\n        .then(kursevi => kursevi.filter(kurs => kurs.ime === selValueKurs))\r\n        .then(kurs => {\r\n            fetch(`http://localhost:3000/kursevi/ime=${selValueKurs}`, {\r\n                method: 'put',\r\n                headers: {\r\n                    'Accept': 'application/json,text/plain',\r\n                    'Content-Type': 'application/json'\r\n                },\r\n\r\n                body: JSON.stringify({ id: `${kurs.id}`, ime: `${kurs.ime}`, rating: `${kurs.rating}`, mesta_na_kursu: `${kurs.mesta_na_kursu-1}`, science: `${kurs.science}`, zabrana_rez: `${kurs.zabrana_rez}`, dani: `${kurs.dani}`, sati: `${kurs.sati}` })\r\n            }).then(res => res.json());\r\n        });*/\r\n\r\n\r\n    PrijavljeniService.get()\r\n        .then(niz => niz.length)\r\n        .then(duz => {\r\n            fetch('http://localhost:3000/prijavljeni/', {\r\n                method: 'post',\r\n                headers: {\r\n                    'Accept': 'application/json,text/plain',\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify({ id: `${duz+1}`, ime: `${ime}`, prezime: `${prezime}`, kurs: `${selValueKurs}` })\r\n            }).then(res => res.json());\r\n        });\r\n\r\n\r\n    let divv = document.getElementById(\"ispis\");\r\n    divv.innerHTML = `<em>${ime} ${prezime}, uspešno Ste se prijavili za kurs ${selValueKurs}!<br/>Za novu prijavu, molim osvežite stranicu.</em>`;\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\nfunction dodajKurs() {\r\n\r\n    return fetch('http://localhost:3000/kursevi', {\r\n        method: 'post',\r\n        headers: {\r\n            'Accept': 'application/json,text/plain',\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({ id: 10, ime: 'Japanski', rating: 5.0, mesta_na_kursu: 15, science: false, zabrana_rez: false, dani: ['pon', 'sre', 'pet'], sati: ['10', '12', '13', '17'] })\r\n    }).then(res => res.json());\r\n\r\n\r\n\r\n}\r\n\r\nvar bt = document.getElementById(\"btnDodajKurs\");\r\n\r\nbt.onclick = function() {\r\n\r\n    let divv = document.getElementById(\"ispis\");\r\n    divv.innerHTML = `Japanski jezik nije standardni kurs naše škole.<br/>Vaša rezervacija je \r\n    zapamćena u našoj bazi i profesor Vam je sada na raspolaganju u datim terminima. <hr/>Molim osvežite stranicu.`;\r\n\r\n    dodajKurs();\r\n\r\n    const btDel = document.getElementById(\"btnObrisiJap\");\r\n    btDel.style.visibility = \"visible\";\r\n\r\n}\r\n\r\nconst btnDelete = document.getElementById(\"btnObrisiJap\");\r\nbtnDelete.onclick = function() {\r\n\r\n    let dd = document.getElementById(\"ispis\");\r\n    dd.innerHTML = \"Specijalna rezervacija Japanskog jezika uspešno otkazana.\";\r\n\r\n    return fetch('http://localhost:3000/kursevi/10?force=true', {\r\n        method: 'DELETE'\r\n    }).then(res => res.json());\r\n\r\n\r\n}\r\n\r\n\r\n\r\n/*const url = \"http://localhost:3000/kursevi\";\r\nconst kursObservable = Rx.Observable.fromPromise(\r\n    fetch(url)\r\n    .then(response => response.json()));\r\n*/\r\n\r\n\r\n/*Rx.Observable.fromEvent(select, \"onchange\")\r\n    .debounceTime(1000)\r\n    .map(ev => ev.target.value)\r\n    .filter(dan => nadji(dan))\r\n    .switchMap(sel => kursObservable)\r\n    .subscribe(kurs => div.innerHTML = kurs.ime);*/","import { Nastavnik } from './nastavnik';\r\nimport { Kurs } from './kurs';\r\nimport { RandomService } from './random.service';\r\nimport { NastavnikService } from './nastavnik.service';\r\nimport { KursService } from './kursevi.service';\r\nimport { DrawService } from './draw.service';\r\nimport {} from './reservation.service';\r\n\r\nconst randserv = new RandomService();\r\n\r\n\r\n\r\n//rating skole\r\nPromise.all([\r\n        KursService.get(), NastavnikService.get()\r\n    ])\r\n    .then(([kursevi, nastavnici]) => {\r\n\r\n        let k = kursevi.reduce((acc, curr) => acc + curr.rating, 0);\r\n        let n = nastavnici.reduce((acc, curr) => acc + curr.rating, 0);\r\n\r\n        let r = ((k + n) / (kursevi.length + nastavnici.length)).toFixed(2);\r\n\r\n        DrawService.ShowSchoolRating(r);\r\n    });\r\n\r\n\r\n//rating svih nastavnika ukupno\r\nconst teachs = NastavnikService.get()\r\n    .then(teachs => {\r\n        const r = Math.round(teachs.reduce((acc, curr) => acc + curr.rating, 0), 2);\r\n        const r1 = r / teachs.length;\r\n        DrawService.ShowTeacherRating(r1);\r\n    });\r\n\r\n\r\n\r\nconst teachs2 = NastavnikService.get()\r\n    .then(teachs2 => teachs2.forEach(teach => DrawService.showTeacher(teach)));\r\n\r\n\r\n\r\n//nastavnik dana\r\nPromise.all([\r\n        randserv.getRandomNumb(), NastavnikService.get()\r\n    ])\r\n    .then(([num, arr_nast]) => {\r\n        DrawService.showTeacherDay(arr_nast[num % arr_nast.length]);\r\n    });\r\n\r\n\r\n\r\n\r\nconst cs1 = KursService.get()\r\n    .then(cs1 => cs1.filter(kurs => kurs.science))\r\n    .then(cs1 => cs1.forEach(kurs => DrawService.ShowScience(kurs)));\r\n\r\nconst cs2 = KursService.get()\r\n    .then(cs2 => cs2.filter(kurs => !kurs.science))\r\n    .then(cs2 => cs2.forEach(kurs => DrawService.ShowLang(kurs)));\r\n\r\n\r\n\r\n\r\n//rating za kurseve\r\n\r\nconst nauke = KursService.get()\r\n    .then(nauke => nauke.filter(item => item.science))\r\n    .then(nauke => {\r\n        const ratsc = nauke.reduce((acc, curr) => acc + curr.rating, 0);\r\n        const ratsc1 = (ratsc / nauke.length).toFixed(2);\r\n        DrawService.ShowScienceRating(ratsc1);\r\n    });\r\n\r\n\r\nconst langs = KursService.get()\r\n    .then(langs => langs.filter(item => !item.science))\r\n    .then(langs => {\r\n        const ratl = langs.reduce((acc, curr) => acc + curr.rating, 0);\r\n        const ratlg = (ratl / langs.length).toFixed(2);\r\n        DrawService.ShowLangRating(ratlg);\r\n    });","export class RandomService {\r\n\r\n    getRandomNumb() {\r\n        return new Promise((resolve, reject) => {\r\n            setTimeout(() => resolve(parseInt(Math.random() * 10), 2000));\r\n        });\r\n    }\r\n\r\n\r\n}","\"use strict\";\nvar audit_1 = require('./operators/audit');\nexports.audit = audit_1.audit;\nvar auditTime_1 = require('./operators/auditTime');\nexports.auditTime = auditTime_1.auditTime;\nvar buffer_1 = require('./operators/buffer');\nexports.buffer = buffer_1.buffer;\nvar bufferCount_1 = require('./operators/bufferCount');\nexports.bufferCount = bufferCount_1.bufferCount;\nvar bufferTime_1 = require('./operators/bufferTime');\nexports.bufferTime = bufferTime_1.bufferTime;\nvar bufferToggle_1 = require('./operators/bufferToggle');\nexports.bufferToggle = bufferToggle_1.bufferToggle;\nvar bufferWhen_1 = require('./operators/bufferWhen');\nexports.bufferWhen = bufferWhen_1.bufferWhen;\nvar catchError_1 = require('./operators/catchError');\nexports.catchError = catchError_1.catchError;\nvar combineAll_1 = require('./operators/combineAll');\nexports.combineAll = combineAll_1.combineAll;\nvar combineLatest_1 = require('./operators/combineLatest');\nexports.combineLatest = combineLatest_1.combineLatest;\nvar concat_1 = require('./operators/concat');\nexports.concat = concat_1.concat;\nvar concatAll_1 = require('./operators/concatAll');\nexports.concatAll = concatAll_1.concatAll;\nvar concatMap_1 = require('./operators/concatMap');\nexports.concatMap = concatMap_1.concatMap;\nvar concatMapTo_1 = require('./operators/concatMapTo');\nexports.concatMapTo = concatMapTo_1.concatMapTo;\nvar count_1 = require('./operators/count');\nexports.count = count_1.count;\nvar debounce_1 = require('./operators/debounce');\nexports.debounce = debounce_1.debounce;\nvar debounceTime_1 = require('./operators/debounceTime');\nexports.debounceTime = debounceTime_1.debounceTime;\nvar defaultIfEmpty_1 = require('./operators/defaultIfEmpty');\nexports.defaultIfEmpty = defaultIfEmpty_1.defaultIfEmpty;\nvar delay_1 = require('./operators/delay');\nexports.delay = delay_1.delay;\nvar delayWhen_1 = require('./operators/delayWhen');\nexports.delayWhen = delayWhen_1.delayWhen;\nvar dematerialize_1 = require('./operators/dematerialize');\nexports.dematerialize = dematerialize_1.dematerialize;\nvar distinct_1 = require('./operators/distinct');\nexports.distinct = distinct_1.distinct;\nvar distinctUntilChanged_1 = require('./operators/distinctUntilChanged');\nexports.distinctUntilChanged = distinctUntilChanged_1.distinctUntilChanged;\nvar distinctUntilKeyChanged_1 = require('./operators/distinctUntilKeyChanged');\nexports.distinctUntilKeyChanged = distinctUntilKeyChanged_1.distinctUntilKeyChanged;\nvar elementAt_1 = require('./operators/elementAt');\nexports.elementAt = elementAt_1.elementAt;\nvar every_1 = require('./operators/every');\nexports.every = every_1.every;\nvar exhaust_1 = require('./operators/exhaust');\nexports.exhaust = exhaust_1.exhaust;\nvar exhaustMap_1 = require('./operators/exhaustMap');\nexports.exhaustMap = exhaustMap_1.exhaustMap;\nvar expand_1 = require('./operators/expand');\nexports.expand = expand_1.expand;\nvar filter_1 = require('./operators/filter');\nexports.filter = filter_1.filter;\nvar finalize_1 = require('./operators/finalize');\nexports.finalize = finalize_1.finalize;\nvar find_1 = require('./operators/find');\nexports.find = find_1.find;\nvar findIndex_1 = require('./operators/findIndex');\nexports.findIndex = findIndex_1.findIndex;\nvar first_1 = require('./operators/first');\nexports.first = first_1.first;\nvar groupBy_1 = require('./operators/groupBy');\nexports.groupBy = groupBy_1.groupBy;\nvar ignoreElements_1 = require('./operators/ignoreElements');\nexports.ignoreElements = ignoreElements_1.ignoreElements;\nvar isEmpty_1 = require('./operators/isEmpty');\nexports.isEmpty = isEmpty_1.isEmpty;\nvar last_1 = require('./operators/last');\nexports.last = last_1.last;\nvar map_1 = require('./operators/map');\nexports.map = map_1.map;\nvar mapTo_1 = require('./operators/mapTo');\nexports.mapTo = mapTo_1.mapTo;\nvar materialize_1 = require('./operators/materialize');\nexports.materialize = materialize_1.materialize;\nvar max_1 = require('./operators/max');\nexports.max = max_1.max;\nvar merge_1 = require('./operators/merge');\nexports.merge = merge_1.merge;\nvar mergeAll_1 = require('./operators/mergeAll');\nexports.mergeAll = mergeAll_1.mergeAll;\nvar mergeMap_1 = require('./operators/mergeMap');\nexports.mergeMap = mergeMap_1.mergeMap;\nvar mergeMap_2 = require('./operators/mergeMap');\nexports.flatMap = mergeMap_2.mergeMap;\nvar mergeMapTo_1 = require('./operators/mergeMapTo');\nexports.mergeMapTo = mergeMapTo_1.mergeMapTo;\nvar mergeScan_1 = require('./operators/mergeScan');\nexports.mergeScan = mergeScan_1.mergeScan;\nvar min_1 = require('./operators/min');\nexports.min = min_1.min;\nvar multicast_1 = require('./operators/multicast');\nexports.multicast = multicast_1.multicast;\nvar observeOn_1 = require('./operators/observeOn');\nexports.observeOn = observeOn_1.observeOn;\nvar onErrorResumeNext_1 = require('./operators/onErrorResumeNext');\nexports.onErrorResumeNext = onErrorResumeNext_1.onErrorResumeNext;\nvar pairwise_1 = require('./operators/pairwise');\nexports.pairwise = pairwise_1.pairwise;\nvar partition_1 = require('./operators/partition');\nexports.partition = partition_1.partition;\nvar pluck_1 = require('./operators/pluck');\nexports.pluck = pluck_1.pluck;\nvar publish_1 = require('./operators/publish');\nexports.publish = publish_1.publish;\nvar publishBehavior_1 = require('./operators/publishBehavior');\nexports.publishBehavior = publishBehavior_1.publishBehavior;\nvar publishLast_1 = require('./operators/publishLast');\nexports.publishLast = publishLast_1.publishLast;\nvar publishReplay_1 = require('./operators/publishReplay');\nexports.publishReplay = publishReplay_1.publishReplay;\nvar race_1 = require('./operators/race');\nexports.race = race_1.race;\nvar reduce_1 = require('./operators/reduce');\nexports.reduce = reduce_1.reduce;\nvar repeat_1 = require('./operators/repeat');\nexports.repeat = repeat_1.repeat;\nvar repeatWhen_1 = require('./operators/repeatWhen');\nexports.repeatWhen = repeatWhen_1.repeatWhen;\nvar retry_1 = require('./operators/retry');\nexports.retry = retry_1.retry;\nvar retryWhen_1 = require('./operators/retryWhen');\nexports.retryWhen = retryWhen_1.retryWhen;\nvar refCount_1 = require('./operators/refCount');\nexports.refCount = refCount_1.refCount;\nvar sample_1 = require('./operators/sample');\nexports.sample = sample_1.sample;\nvar sampleTime_1 = require('./operators/sampleTime');\nexports.sampleTime = sampleTime_1.sampleTime;\nvar scan_1 = require('./operators/scan');\nexports.scan = scan_1.scan;\nvar sequenceEqual_1 = require('./operators/sequenceEqual');\nexports.sequenceEqual = sequenceEqual_1.sequenceEqual;\nvar share_1 = require('./operators/share');\nexports.share = share_1.share;\nvar shareReplay_1 = require('./operators/shareReplay');\nexports.shareReplay = shareReplay_1.shareReplay;\nvar single_1 = require('./operators/single');\nexports.single = single_1.single;\nvar skip_1 = require('./operators/skip');\nexports.skip = skip_1.skip;\nvar skipLast_1 = require('./operators/skipLast');\nexports.skipLast = skipLast_1.skipLast;\nvar skipUntil_1 = require('./operators/skipUntil');\nexports.skipUntil = skipUntil_1.skipUntil;\nvar skipWhile_1 = require('./operators/skipWhile');\nexports.skipWhile = skipWhile_1.skipWhile;\nvar startWith_1 = require('./operators/startWith');\nexports.startWith = startWith_1.startWith;\n/**\n * TODO(https://github.com/ReactiveX/rxjs/issues/2900): Add back subscribeOn once it can be\n * treeshaken. Currently if this export is added back, it\n * forces apps to bring in asap scheduler along with\n * Immediate, root, and other supporting code.\n */\n// export { subscribeOn } from './operators/subscribeOn';\nvar switchAll_1 = require('./operators/switchAll');\nexports.switchAll = switchAll_1.switchAll;\nvar switchMap_1 = require('./operators/switchMap');\nexports.switchMap = switchMap_1.switchMap;\nvar switchMapTo_1 = require('./operators/switchMapTo');\nexports.switchMapTo = switchMapTo_1.switchMapTo;\nvar take_1 = require('./operators/take');\nexports.take = take_1.take;\nvar takeLast_1 = require('./operators/takeLast');\nexports.takeLast = takeLast_1.takeLast;\nvar takeUntil_1 = require('./operators/takeUntil');\nexports.takeUntil = takeUntil_1.takeUntil;\nvar takeWhile_1 = require('./operators/takeWhile');\nexports.takeWhile = takeWhile_1.takeWhile;\nvar tap_1 = require('./operators/tap');\nexports.tap = tap_1.tap;\nvar throttle_1 = require('./operators/throttle');\nexports.throttle = throttle_1.throttle;\nvar throttleTime_1 = require('./operators/throttleTime');\nexports.throttleTime = throttleTime_1.throttleTime;\nvar timeInterval_1 = require('./operators/timeInterval');\nexports.timeInterval = timeInterval_1.timeInterval;\nvar timeout_1 = require('./operators/timeout');\nexports.timeout = timeout_1.timeout;\nvar timeoutWith_1 = require('./operators/timeoutWith');\nexports.timeoutWith = timeoutWith_1.timeoutWith;\nvar timestamp_1 = require('./operators/timestamp');\nexports.timestamp = timestamp_1.timestamp;\nvar toArray_1 = require('./operators/toArray');\nexports.toArray = toArray_1.toArray;\nvar window_1 = require('./operators/window');\nexports.window = window_1.window;\nvar windowCount_1 = require('./operators/windowCount');\nexports.windowCount = windowCount_1.windowCount;\nvar windowTime_1 = require('./operators/windowTime');\nexports.windowTime = windowTime_1.windowTime;\nvar windowToggle_1 = require('./operators/windowToggle');\nexports.windowToggle = windowToggle_1.windowToggle;\nvar windowWhen_1 = require('./operators/windowWhen');\nexports.windowWhen = windowWhen_1.windowWhen;\nvar withLatestFrom_1 = require('./operators/withLatestFrom');\nexports.withLatestFrom = withLatestFrom_1.withLatestFrom;\nvar zip_1 = require('./operators/zip');\nexports.zip = zip_1.zip;\nvar zipAll_1 = require('./operators/zipAll');\nexports.zipAll = zipAll_1.zipAll;\n//# sourceMappingURL=operators.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar AsyncScheduler_1 = require('./AsyncScheduler');\nvar AnimationFrameScheduler = (function (_super) {\n    __extends(AnimationFrameScheduler, _super);\n    function AnimationFrameScheduler() {\n        _super.apply(this, arguments);\n    }\n    AnimationFrameScheduler.prototype.flush = function (action) {\n        this.active = true;\n        this.scheduled = undefined;\n        var actions = this.actions;\n        var error;\n        var index = -1;\n        var count = actions.length;\n        action = action || actions.shift();\n        do {\n            if (error = action.execute(action.state, action.delay)) {\n                break;\n            }\n        } while (++index < count && (action = actions.shift()));\n        this.active = false;\n        if (error) {\n            while (++index < count && (action = actions.shift())) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    };\n    return AnimationFrameScheduler;\n}(AsyncScheduler_1.AsyncScheduler));\nexports.AnimationFrameScheduler = AnimationFrameScheduler;\n//# sourceMappingURL=AnimationFrameScheduler.js.map","\"use strict\";\nvar root_1 = require('./root');\nvar RequestAnimationFrameDefinition = (function () {\n    function RequestAnimationFrameDefinition(root) {\n        if (root.requestAnimationFrame) {\n            this.cancelAnimationFrame = root.cancelAnimationFrame.bind(root);\n            this.requestAnimationFrame = root.requestAnimationFrame.bind(root);\n        }\n        else if (root.mozRequestAnimationFrame) {\n            this.cancelAnimationFrame = root.mozCancelAnimationFrame.bind(root);\n            this.requestAnimationFrame = root.mozRequestAnimationFrame.bind(root);\n        }\n        else if (root.webkitRequestAnimationFrame) {\n            this.cancelAnimationFrame = root.webkitCancelAnimationFrame.bind(root);\n            this.requestAnimationFrame = root.webkitRequestAnimationFrame.bind(root);\n        }\n        else if (root.msRequestAnimationFrame) {\n            this.cancelAnimationFrame = root.msCancelAnimationFrame.bind(root);\n            this.requestAnimationFrame = root.msRequestAnimationFrame.bind(root);\n        }\n        else if (root.oRequestAnimationFrame) {\n            this.cancelAnimationFrame = root.oCancelAnimationFrame.bind(root);\n            this.requestAnimationFrame = root.oRequestAnimationFrame.bind(root);\n        }\n        else {\n            this.cancelAnimationFrame = root.clearTimeout.bind(root);\n            this.requestAnimationFrame = function (cb) { return root.setTimeout(cb, 1000 / 60); };\n        }\n    }\n    return RequestAnimationFrameDefinition;\n}());\nexports.RequestAnimationFrameDefinition = RequestAnimationFrameDefinition;\nexports.AnimationFrame = new RequestAnimationFrameDefinition(root_1.root);\n//# sourceMappingURL=AnimationFrame.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar AsyncAction_1 = require('./AsyncAction');\nvar AnimationFrame_1 = require('../util/AnimationFrame');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar AnimationFrameAction = (function (_super) {\n    __extends(AnimationFrameAction, _super);\n    function AnimationFrameAction(scheduler, work) {\n        _super.call(this, scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n    }\n    AnimationFrameAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        // If delay is greater than 0, request as an async action.\n        if (delay !== null && delay > 0) {\n            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);\n        }\n        // Push the action to the end of the scheduler queue.\n        scheduler.actions.push(this);\n        // If an animation frame has already been requested, don't request another\n        // one. If an animation frame hasn't been requested yet, request one. Return\n        // the current animation frame request id.\n        return scheduler.scheduled || (scheduler.scheduled = AnimationFrame_1.AnimationFrame.requestAnimationFrame(scheduler.flush.bind(scheduler, null)));\n    };\n    AnimationFrameAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        // If delay exists and is greater than 0, or if the delay is null (the\n        // action wasn't rescheduled) but was originally scheduled as an async\n        // action, then recycle as an async action.\n        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n            return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);\n        }\n        // If the scheduler queue is empty, cancel the requested animation frame and\n        // set the scheduled flag to undefined so the next AnimationFrameAction will\n        // request its own.\n        if (scheduler.actions.length === 0) {\n            AnimationFrame_1.AnimationFrame.cancelAnimationFrame(id);\n            scheduler.scheduled = undefined;\n        }\n        // Return undefined so the action knows to request a new async id if it's rescheduled.\n        return undefined;\n    };\n    return AnimationFrameAction;\n}(AsyncAction_1.AsyncAction));\nexports.AnimationFrameAction = AnimationFrameAction;\n//# sourceMappingURL=AnimationFrameAction.js.map","\"use strict\";\nvar AnimationFrameAction_1 = require('./AnimationFrameAction');\nvar AnimationFrameScheduler_1 = require('./AnimationFrameScheduler');\n/**\n *\n * Animation Frame Scheduler\n *\n * <span class=\"informal\">Perform task when `window.requestAnimationFrame` would fire</span>\n *\n * When `animationFrame` scheduler is used with delay, it will fall back to {@link async} scheduler\n * behaviour.\n *\n * Without delay, `animationFrame` scheduler can be used to create smooth browser animations.\n * It makes sure scheduled task will happen just before next browser content repaint,\n * thus performing animations as efficiently as possible.\n *\n * @example <caption>Schedule div height animation</caption>\n * const div = document.querySelector('.some-div');\n *\n * Rx.Scheduler.schedule(function(height) {\n *   div.style.height = height + \"px\";\n *\n *   this.schedule(height + 1);  // `this` references currently executing Action,\n *                               // which we reschedule with new state\n * }, 0, 0);\n *\n * // You will see .some-div element growing in height\n *\n *\n * @static true\n * @name animationFrame\n * @owner Scheduler\n */\nexports.animationFrame = new AnimationFrameScheduler_1.AnimationFrameScheduler(AnimationFrameAction_1.AnimationFrameAction);\n//# sourceMappingURL=animationFrame.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subject_1 = require('../Subject');\nvar Subscription_1 = require('../Subscription');\nvar SubscriptionLoggable_1 = require('./SubscriptionLoggable');\nvar applyMixins_1 = require('../util/applyMixins');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar HotObservable = (function (_super) {\n    __extends(HotObservable, _super);\n    function HotObservable(messages, scheduler) {\n        _super.call(this);\n        this.messages = messages;\n        this.subscriptions = [];\n        this.scheduler = scheduler;\n    }\n    HotObservable.prototype._subscribe = function (subscriber) {\n        var subject = this;\n        var index = subject.logSubscribedFrame();\n        subscriber.add(new Subscription_1.Subscription(function () {\n            subject.logUnsubscribedFrame(index);\n        }));\n        return _super.prototype._subscribe.call(this, subscriber);\n    };\n    HotObservable.prototype.setup = function () {\n        var subject = this;\n        var messagesLength = subject.messages.length;\n        /* tslint:disable:no-var-keyword */\n        for (var i = 0; i < messagesLength; i++) {\n            (function () {\n                var message = subject.messages[i];\n                /* tslint:enable */\n                subject.scheduler.schedule(function () { message.notification.observe(subject); }, message.frame);\n            })();\n        }\n    };\n    return HotObservable;\n}(Subject_1.Subject));\nexports.HotObservable = HotObservable;\napplyMixins_1.applyMixins(HotObservable, [SubscriptionLoggable_1.SubscriptionLoggable]);\n//# sourceMappingURL=HotObservable.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar Subscription_1 = require('../Subscription');\nvar SubscriptionLoggable_1 = require('./SubscriptionLoggable');\nvar applyMixins_1 = require('../util/applyMixins');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ColdObservable = (function (_super) {\n    __extends(ColdObservable, _super);\n    function ColdObservable(messages, scheduler) {\n        _super.call(this, function (subscriber) {\n            var observable = this;\n            var index = observable.logSubscribedFrame();\n            subscriber.add(new Subscription_1.Subscription(function () {\n                observable.logUnsubscribedFrame(index);\n            }));\n            observable.scheduleMessages(subscriber);\n            return subscriber;\n        });\n        this.messages = messages;\n        this.subscriptions = [];\n        this.scheduler = scheduler;\n    }\n    ColdObservable.prototype.scheduleMessages = function (subscriber) {\n        var messagesLength = this.messages.length;\n        for (var i = 0; i < messagesLength; i++) {\n            var message = this.messages[i];\n            subscriber.add(this.scheduler.schedule(function (_a) {\n                var message = _a.message, subscriber = _a.subscriber;\n                message.notification.observe(subscriber);\n            }, message.frame, { message: message, subscriber: subscriber }));\n        }\n    };\n    return ColdObservable;\n}(Observable_1.Observable));\nexports.ColdObservable = ColdObservable;\napplyMixins_1.applyMixins(ColdObservable, [SubscriptionLoggable_1.SubscriptionLoggable]);\n//# sourceMappingURL=ColdObservable.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar Notification_1 = require('../Notification');\nvar ColdObservable_1 = require('./ColdObservable');\nvar HotObservable_1 = require('./HotObservable');\nvar SubscriptionLog_1 = require('./SubscriptionLog');\nvar VirtualTimeScheduler_1 = require('../scheduler/VirtualTimeScheduler');\nvar defaultMaxFrame = 750;\nvar TestScheduler = (function (_super) {\n    __extends(TestScheduler, _super);\n    function TestScheduler(assertDeepEqual) {\n        _super.call(this, VirtualTimeScheduler_1.VirtualAction, defaultMaxFrame);\n        this.assertDeepEqual = assertDeepEqual;\n        this.hotObservables = [];\n        this.coldObservables = [];\n        this.flushTests = [];\n    }\n    TestScheduler.prototype.createTime = function (marbles) {\n        var indexOf = marbles.indexOf('|');\n        if (indexOf === -1) {\n            throw new Error('marble diagram for time should have a completion marker \"|\"');\n        }\n        return indexOf * TestScheduler.frameTimeFactor;\n    };\n    TestScheduler.prototype.createColdObservable = function (marbles, values, error) {\n        if (marbles.indexOf('^') !== -1) {\n            throw new Error('cold observable cannot have subscription offset \"^\"');\n        }\n        if (marbles.indexOf('!') !== -1) {\n            throw new Error('cold observable cannot have unsubscription marker \"!\"');\n        }\n        var messages = TestScheduler.parseMarbles(marbles, values, error);\n        var cold = new ColdObservable_1.ColdObservable(messages, this);\n        this.coldObservables.push(cold);\n        return cold;\n    };\n    TestScheduler.prototype.createHotObservable = function (marbles, values, error) {\n        if (marbles.indexOf('!') !== -1) {\n            throw new Error('hot observable cannot have unsubscription marker \"!\"');\n        }\n        var messages = TestScheduler.parseMarbles(marbles, values, error);\n        var subject = new HotObservable_1.HotObservable(messages, this);\n        this.hotObservables.push(subject);\n        return subject;\n    };\n    TestScheduler.prototype.materializeInnerObservable = function (observable, outerFrame) {\n        var _this = this;\n        var messages = [];\n        observable.subscribe(function (value) {\n            messages.push({ frame: _this.frame - outerFrame, notification: Notification_1.Notification.createNext(value) });\n        }, function (err) {\n            messages.push({ frame: _this.frame - outerFrame, notification: Notification_1.Notification.createError(err) });\n        }, function () {\n            messages.push({ frame: _this.frame - outerFrame, notification: Notification_1.Notification.createComplete() });\n        });\n        return messages;\n    };\n    TestScheduler.prototype.expectObservable = function (observable, unsubscriptionMarbles) {\n        var _this = this;\n        if (unsubscriptionMarbles === void 0) { unsubscriptionMarbles = null; }\n        var actual = [];\n        var flushTest = { actual: actual, ready: false };\n        var unsubscriptionFrame = TestScheduler\n            .parseMarblesAsSubscriptions(unsubscriptionMarbles).unsubscribedFrame;\n        var subscription;\n        this.schedule(function () {\n            subscription = observable.subscribe(function (x) {\n                var value = x;\n                // Support Observable-of-Observables\n                if (x instanceof Observable_1.Observable) {\n                    value = _this.materializeInnerObservable(value, _this.frame);\n                }\n                actual.push({ frame: _this.frame, notification: Notification_1.Notification.createNext(value) });\n            }, function (err) {\n                actual.push({ frame: _this.frame, notification: Notification_1.Notification.createError(err) });\n            }, function () {\n                actual.push({ frame: _this.frame, notification: Notification_1.Notification.createComplete() });\n            });\n        }, 0);\n        if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n            this.schedule(function () { return subscription.unsubscribe(); }, unsubscriptionFrame);\n        }\n        this.flushTests.push(flushTest);\n        return {\n            toBe: function (marbles, values, errorValue) {\n                flushTest.ready = true;\n                flushTest.expected = TestScheduler.parseMarbles(marbles, values, errorValue, true);\n            }\n        };\n    };\n    TestScheduler.prototype.expectSubscriptions = function (actualSubscriptionLogs) {\n        var flushTest = { actual: actualSubscriptionLogs, ready: false };\n        this.flushTests.push(flushTest);\n        return {\n            toBe: function (marbles) {\n                var marblesArray = (typeof marbles === 'string') ? [marbles] : marbles;\n                flushTest.ready = true;\n                flushTest.expected = marblesArray.map(function (marbles) {\n                    return TestScheduler.parseMarblesAsSubscriptions(marbles);\n                });\n            }\n        };\n    };\n    TestScheduler.prototype.flush = function () {\n        var hotObservables = this.hotObservables;\n        while (hotObservables.length > 0) {\n            hotObservables.shift().setup();\n        }\n        _super.prototype.flush.call(this);\n        var readyFlushTests = this.flushTests.filter(function (test) { return test.ready; });\n        while (readyFlushTests.length > 0) {\n            var test = readyFlushTests.shift();\n            this.assertDeepEqual(test.actual, test.expected);\n        }\n    };\n    TestScheduler.parseMarblesAsSubscriptions = function (marbles) {\n        if (typeof marbles !== 'string') {\n            return new SubscriptionLog_1.SubscriptionLog(Number.POSITIVE_INFINITY);\n        }\n        var len = marbles.length;\n        var groupStart = -1;\n        var subscriptionFrame = Number.POSITIVE_INFINITY;\n        var unsubscriptionFrame = Number.POSITIVE_INFINITY;\n        for (var i = 0; i < len; i++) {\n            var frame = i * this.frameTimeFactor;\n            var c = marbles[i];\n            switch (c) {\n                case '-':\n                case ' ':\n                    break;\n                case '(':\n                    groupStart = frame;\n                    break;\n                case ')':\n                    groupStart = -1;\n                    break;\n                case '^':\n                    if (subscriptionFrame !== Number.POSITIVE_INFINITY) {\n                        throw new Error('found a second subscription point \\'^\\' in a ' +\n                            'subscription marble diagram. There can only be one.');\n                    }\n                    subscriptionFrame = groupStart > -1 ? groupStart : frame;\n                    break;\n                case '!':\n                    if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n                        throw new Error('found a second subscription point \\'^\\' in a ' +\n                            'subscription marble diagram. There can only be one.');\n                    }\n                    unsubscriptionFrame = groupStart > -1 ? groupStart : frame;\n                    break;\n                default:\n                    throw new Error('there can only be \\'^\\' and \\'!\\' markers in a ' +\n                        'subscription marble diagram. Found instead \\'' + c + '\\'.');\n            }\n        }\n        if (unsubscriptionFrame < 0) {\n            return new SubscriptionLog_1.SubscriptionLog(subscriptionFrame);\n        }\n        else {\n            return new SubscriptionLog_1.SubscriptionLog(subscriptionFrame, unsubscriptionFrame);\n        }\n    };\n    TestScheduler.parseMarbles = function (marbles, values, errorValue, materializeInnerObservables) {\n        if (materializeInnerObservables === void 0) { materializeInnerObservables = false; }\n        if (marbles.indexOf('!') !== -1) {\n            throw new Error('conventional marble diagrams cannot have the ' +\n                'unsubscription marker \"!\"');\n        }\n        var len = marbles.length;\n        var testMessages = [];\n        var subIndex = marbles.indexOf('^');\n        var frameOffset = subIndex === -1 ? 0 : (subIndex * -this.frameTimeFactor);\n        var getValue = typeof values !== 'object' ?\n            function (x) { return x; } :\n            function (x) {\n                // Support Observable-of-Observables\n                if (materializeInnerObservables && values[x] instanceof ColdObservable_1.ColdObservable) {\n                    return values[x].messages;\n                }\n                return values[x];\n            };\n        var groupStart = -1;\n        for (var i = 0; i < len; i++) {\n            var frame = i * this.frameTimeFactor + frameOffset;\n            var notification = void 0;\n            var c = marbles[i];\n            switch (c) {\n                case '-':\n                case ' ':\n                    break;\n                case '(':\n                    groupStart = frame;\n                    break;\n                case ')':\n                    groupStart = -1;\n                    break;\n                case '|':\n                    notification = Notification_1.Notification.createComplete();\n                    break;\n                case '^':\n                    break;\n                case '#':\n                    notification = Notification_1.Notification.createError(errorValue || 'error');\n                    break;\n                default:\n                    notification = Notification_1.Notification.createNext(getValue(c));\n                    break;\n            }\n            if (notification) {\n                testMessages.push({ frame: groupStart > -1 ? groupStart : frame, notification: notification });\n            }\n        }\n        return testMessages;\n    };\n    return TestScheduler;\n}(VirtualTimeScheduler_1.VirtualTimeScheduler));\nexports.TestScheduler = TestScheduler;\n//# sourceMappingURL=TestScheduler.js.map","\"use strict\";\nvar zipAll_1 = require('../operators/zipAll');\n/**\n * @param project\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method zipAll\n * @owner Observable\n */\nfunction zipAll(project) {\n    return zipAll_1.zipAll(project)(this);\n}\nexports.zipAll = zipAll;\n//# sourceMappingURL=zipAll.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar zipAll_1 = require('../../operator/zipAll');\nObservable_1.Observable.prototype.zipAll = zipAll_1.zipAll;\n//# sourceMappingURL=zipAll.js.map","\"use strict\";\nvar zip_1 = require('../operators/zip');\n/* tslint:enable:max-line-length */\n/**\n * @param observables\n * @return {Observable<R>}\n * @method zip\n * @owner Observable\n */\nfunction zipProto() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    return zip_1.zip.apply(void 0, observables)(this);\n}\nexports.zipProto = zipProto;\n//# sourceMappingURL=zip.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar zip_1 = require('../../operator/zip');\nObservable_1.Observable.prototype.zip = zip_1.zipProto;\n//# sourceMappingURL=zip.js.map","\"use strict\";\nvar withLatestFrom_1 = require('../operators/withLatestFrom');\n/* tslint:enable:max-line-length */\n/**\n * Combines the source Observable with other Observables to create an Observable\n * whose values are calculated from the latest values of each, only when the\n * source emits.\n *\n * <span class=\"informal\">Whenever the source Observable emits a value, it\n * computes a formula using that value plus the latest values from other input\n * Observables, then emits the output of that formula.</span>\n *\n * <img src=\"./img/withLatestFrom.png\" width=\"100%\">\n *\n * `withLatestFrom` combines each value from the source Observable (the\n * instance) with the latest values from the other input Observables only when\n * the source emits a value, optionally using a `project` function to determine\n * the value to be emitted on the output Observable. All input Observables must\n * emit at least one value before the output Observable will emit a value.\n *\n * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var result = clicks.withLatestFrom(timer);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Function} [project] Projection function for combining values\n * together. Receives all values in order of the Observables passed, where the\n * first parameter is a value from the source Observable. (e.g.\n * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not\n * passed, arrays will be emitted on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method withLatestFrom\n * @owner Observable\n */\nfunction withLatestFrom() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i - 0] = arguments[_i];\n    }\n    return withLatestFrom_1.withLatestFrom.apply(void 0, args)(this);\n}\nexports.withLatestFrom = withLatestFrom;\n//# sourceMappingURL=withLatestFrom.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar withLatestFrom_1 = require('../../operator/withLatestFrom');\nObservable_1.Observable.prototype.withLatestFrom = withLatestFrom_1.withLatestFrom;\n//# sourceMappingURL=withLatestFrom.js.map","\"use strict\";\nvar windowWhen_1 = require('../operators/windowWhen');\n/**\n * Branch out the source Observable values as a nested Observable using a\n * factory function of closing Observables to determine when to start a new\n * window.\n *\n * <span class=\"informal\">It's like {@link bufferWhen}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowWhen.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping windows.\n * It emits the current window and opens a new one whenever the Observable\n * produced by the specified `closingSelector` function emits an item. The first\n * window is opened immediately when subscribing to the output Observable.\n *\n * @example <caption>Emit only the first two clicks events in every window of [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks\n *   .windowWhen(() => Rx.Observable.interval(1000 + Math.random() * 4000))\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link bufferWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals (on either `next` or\n * `complete`) when to close the previous window and start a new one.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowWhen\n * @owner Observable\n */\nfunction windowWhen(closingSelector) {\n    return windowWhen_1.windowWhen(closingSelector)(this);\n}\nexports.windowWhen = windowWhen;\n//# sourceMappingURL=windowWhen.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar windowWhen_1 = require('../../operator/windowWhen');\nObservable_1.Observable.prototype.windowWhen = windowWhen_1.windowWhen;\n//# sourceMappingURL=windowWhen.js.map","\"use strict\";\nvar windowToggle_1 = require('../operators/windowToggle');\n/**\n * Branch out the source Observable values as a nested Observable starting from\n * an emission from `openings` and ending when the output of `closingSelector`\n * emits.\n *\n * <span class=\"informal\">It's like {@link bufferToggle}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowToggle.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows that contain those items\n * emitted by the source Observable between the time when the `openings`\n * Observable emits an item and when the Observable returned by\n * `closingSelector` emits an item.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var result = clicks.windowToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * ).mergeAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowWhen}\n * @see {@link bufferToggle}\n *\n * @param {Observable<O>} openings An observable of notifications to start new\n * windows.\n * @param {function(value: O): Observable} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns an Observable,\n * which, when it emits (either `next` or `complete`), signals that the\n * associated window should complete.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowToggle\n * @owner Observable\n */\nfunction windowToggle(openings, closingSelector) {\n    return windowToggle_1.windowToggle(openings, closingSelector)(this);\n}\nexports.windowToggle = windowToggle;\n//# sourceMappingURL=windowToggle.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar windowToggle_1 = require('../../operator/windowToggle');\nObservable_1.Observable.prototype.windowToggle = windowToggle_1.windowToggle;\n//# sourceMappingURL=windowToggle.js.map","\"use strict\";\nvar async_1 = require('../scheduler/async');\nvar isNumeric_1 = require('../util/isNumeric');\nvar isScheduler_1 = require('../util/isScheduler');\nvar windowTime_1 = require('../operators/windowTime');\nfunction windowTime(windowTimeSpan) {\n    var scheduler = async_1.async;\n    var windowCreationInterval = null;\n    var maxWindowSize = Number.POSITIVE_INFINITY;\n    if (isScheduler_1.isScheduler(arguments[3])) {\n        scheduler = arguments[3];\n    }\n    if (isScheduler_1.isScheduler(arguments[2])) {\n        scheduler = arguments[2];\n    }\n    else if (isNumeric_1.isNumeric(arguments[2])) {\n        maxWindowSize = arguments[2];\n    }\n    if (isScheduler_1.isScheduler(arguments[1])) {\n        scheduler = arguments[1];\n    }\n    else if (isNumeric_1.isNumeric(arguments[1])) {\n        windowCreationInterval = arguments[1];\n    }\n    return windowTime_1.windowTime(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler)(this);\n}\nexports.windowTime = windowTime;\n//# sourceMappingURL=windowTime.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar windowTime_1 = require('../../operator/windowTime');\nObservable_1.Observable.prototype.windowTime = windowTime_1.windowTime;\n//# sourceMappingURL=windowTime.js.map","\"use strict\";\nvar windowCount_1 = require('../operators/windowCount');\n/**\n * Branch out the source Observable values as a nested Observable with each\n * nested Observable emitting at most `windowSize` values.\n *\n * <span class=\"informal\">It's like {@link bufferCount}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowCount.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows every `startWindowEvery`\n * items, each containing no more than `windowSize` items. When the source\n * Observable completes or encounters an error, the output Observable emits\n * the current window and propagates the notification from the source\n * Observable. If `startWindowEvery` is not provided, then new windows are\n * started immediately at the start of the source and when each window completes\n * with size `windowSize`.\n *\n * @example <caption>Ignore every 3rd click event, starting from the first one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(3)\n *   .map(win => win.skip(1)) // skip first of every 3 clicks\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Ignore every 3rd click event, starting from the third one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(2, 3)\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferCount}\n *\n * @param {number} windowSize The maximum number of values emitted by each\n * window.\n * @param {number} [startWindowEvery] Interval at which to start a new window.\n * For example if `startWindowEvery` is `2`, then a new window will be started\n * on every other value from the source. A new window is started at the\n * beginning of the source by default.\n * @return {Observable<Observable<T>>} An Observable of windows, which in turn\n * are Observable of values.\n * @method windowCount\n * @owner Observable\n */\nfunction windowCount(windowSize, startWindowEvery) {\n    if (startWindowEvery === void 0) { startWindowEvery = 0; }\n    return windowCount_1.windowCount(windowSize, startWindowEvery)(this);\n}\nexports.windowCount = windowCount;\n//# sourceMappingURL=windowCount.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar windowCount_1 = require('../../operator/windowCount');\nObservable_1.Observable.prototype.windowCount = windowCount_1.windowCount;\n//# sourceMappingURL=windowCount.js.map","\"use strict\";\nvar window_1 = require('../operators/window');\n/**\n * Branch out the source Observable values as a nested Observable whenever\n * `windowBoundaries` emits.\n *\n * <span class=\"informal\">It's like {@link buffer}, but emits a nested Observable\n * instead of an array.</span>\n *\n * <img src=\"./img/window.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping\n * windows. It emits the current window and opens a new one whenever the\n * Observable `windowBoundaries` emits an item. Because each window is an\n * Observable, the output is a higher-order Observable.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var result = clicks.window(interval)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link buffer}\n *\n * @param {Observable<any>} windowBoundaries An Observable that completes the\n * previous window and starts a new window.\n * @return {Observable<Observable<T>>} An Observable of windows, which are\n * Observables emitting values of the source Observable.\n * @method window\n * @owner Observable\n */\nfunction window(windowBoundaries) {\n    return window_1.window(windowBoundaries)(this);\n}\nexports.window = window;\n//# sourceMappingURL=window.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar window_1 = require('../../operator/window');\nObservable_1.Observable.prototype.window = window_1.window;\n//# sourceMappingURL=window.js.map","\"use strict\";\nvar toArray_1 = require('../operators/toArray');\n/**\n * Collects all source emissions and emits them as an array when the source completes.\n *\n * <span class=\"informal\">Get all values inside an array when the source completes</span>\n *\n * <img src=\"./img/toArray.png\" width=\"100%\">\n *\n * `toArray` will wait until the source Observable completes\n * before emitting the array containing all emissions.\n * When the source Observable errors no array will be emitted.\n *\n * @example <caption>Create array from input</caption>\n * const input = Rx.Observable.interval(100).take(4);\n *\n * input.toArray()\n *   .subscribe(arr => console.log(arr)); // [0,1,2,3]\n *\n * @see {@link buffer}\n *\n * @return {Observable<any[]>|WebSocketSubject<T>|Observable<T>}\n * @method toArray\n * @owner Observable\n */\nfunction toArray() {\n    return toArray_1.toArray()(this);\n}\nexports.toArray = toArray;\n//# sourceMappingURL=toArray.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar toArray_1 = require('../../operator/toArray');\nObservable_1.Observable.prototype.toArray = toArray_1.toArray;\n//# sourceMappingURL=toArray.js.map","\"use strict\";\nvar async_1 = require('../scheduler/async');\nvar timestamp_1 = require('../operators/timestamp');\n/**\n * @param scheduler\n * @return {Observable<Timestamp<any>>|WebSocketSubject<T>|Observable<T>}\n * @method timestamp\n * @owner Observable\n */\nfunction timestamp(scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return timestamp_1.timestamp(scheduler)(this);\n}\nexports.timestamp = timestamp;\n//# sourceMappingURL=timestamp.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar timestamp_1 = require('../../operator/timestamp');\nObservable_1.Observable.prototype.timestamp = timestamp_1.timestamp;\n//# sourceMappingURL=timestamp.js.map","\"use strict\";\nvar async_1 = require('../scheduler/async');\nvar timeoutWith_1 = require('../operators/timeoutWith');\n/* tslint:enable:max-line-length */\n/**\n *\n * Errors if Observable does not emit a value in given time span, in case of which\n * subscribes to the second Observable.\n *\n * <span class=\"informal\">It's a version of `timeout` operator that let's you specify fallback Observable.</span>\n *\n * <img src=\"./img/timeoutWith.png\" width=\"100%\">\n *\n * `timeoutWith` is a variation of `timeout` operator. It behaves exactly the same,\n * still accepting as a first argument either a number or a Date, which control - respectively -\n * when values of source Observable should be emitted or when it should complete.\n *\n * The only difference is that it accepts a second, required parameter. This parameter\n * should be an Observable which will be subscribed when source Observable fails any timeout check.\n * So whenever regular `timeout` would emit an error, `timeoutWith` will instead start re-emitting\n * values from second Observable. Note that this fallback Observable is not checked for timeouts\n * itself, so it can emit values and complete at arbitrary points in time. From the moment of a second\n * subscription, Observable returned from `timeoutWith` simply mirrors fallback stream. When that\n * stream completes, it completes as well.\n *\n * Scheduler, which in case of `timeout` is provided as as second argument, can be still provided\n * here - as a third, optional parameter. It still is used to schedule timeout checks and -\n * as a consequence - when second Observable will be subscribed, since subscription happens\n * immediately after failing check.\n *\n * @example <caption>Add fallback observable</caption>\n * const seconds = Rx.Observable.interval(1000);\n * const minutes = Rx.Observable.interval(60 * 1000);\n *\n * seconds.timeoutWith(900, minutes)\n *     .subscribe(\n *         value => console.log(value), // After 900ms, will start emitting `minutes`,\n *                                      // since first value of `seconds` will not arrive fast enough.\n *         err => console.log(err) // Would be called after 900ms in case of `timeout`,\n *                                 // but here will never be called.\n *     );\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Observable<T>} withObservable Observable which will be subscribed if source fails timeout check.\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source or, when timeout check fails, of an Observable\n *                          passed as a second parameter.\n * @method timeoutWith\n * @owner Observable\n */\nfunction timeoutWith(due, withObservable, scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return timeoutWith_1.timeoutWith(due, withObservable, scheduler)(this);\n}\nexports.timeoutWith = timeoutWith;\n//# sourceMappingURL=timeoutWith.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar timeoutWith_1 = require('../../operator/timeoutWith');\nObservable_1.Observable.prototype.timeoutWith = timeoutWith_1.timeoutWith;\n//# sourceMappingURL=timeoutWith.js.map","\"use strict\";\nvar async_1 = require('../scheduler/async');\nvar timeout_1 = require('../operators/timeout');\n/**\n *\n * Errors if Observable does not emit a value in given time span.\n *\n * <span class=\"informal\">Timeouts on Observable that doesn't emit values fast enough.</span>\n *\n * <img src=\"./img/timeout.png\" width=\"100%\">\n *\n * `timeout` operator accepts as an argument either a number or a Date.\n *\n * If number was provided, it returns an Observable that behaves like a source\n * Observable, unless there is a period of time where there is no value emitted.\n * So if you provide `100` as argument and first value comes after 50ms from\n * the moment of subscription, this value will be simply re-emitted by the resulting\n * Observable. If however after that 100ms passes without a second value being emitted,\n * stream will end with an error and source Observable will be unsubscribed.\n * These checks are performed throughout whole lifecycle of Observable - from the moment\n * it was subscribed to, until it completes or errors itself. Thus every value must be\n * emitted within specified period since previous value.\n *\n * If provided argument was Date, returned Observable behaves differently. It throws\n * if Observable did not complete before provided Date. This means that periods between\n * emission of particular values do not matter in this case. If Observable did not complete\n * before provided Date, source Observable will be unsubscribed. Other than that, resulting\n * stream behaves just as source Observable.\n *\n * `timeout` accepts also a Scheduler as a second parameter. It is used to schedule moment (or moments)\n * when returned Observable will check if source stream emitted value or completed.\n *\n * @example <caption>Check if ticks are emitted within certain timespan</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(1100) // Let's use bigger timespan to be safe,\n *                       // since `interval` might fire a bit later then scheduled.\n * .subscribe(\n *     value => console.log(value), // Will emit numbers just as regular `interval` would.\n *     err => console.log(err) // Will never be called.\n * );\n *\n * seconds.timeout(900).subscribe(\n *     value => console.log(value), // Will never be called.\n *     err => console.log(err) // Will emit error before even first value is emitted,\n *                             // since it did not arrive within 900ms period.\n * );\n *\n * @example <caption>Use Date to check if Observable completed</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds.timeout(new Date(\"December 17, 2020 03:24:00\"))\n * .subscribe(\n *     value => console.log(value), // Will emit values as regular `interval` would\n *                                  // until December 17, 2020 at 03:24:00.\n *     err => console.log(err) // On December 17, 2020 at 03:24:00 it will emit an error,\n *                             // since Observable did not complete by then.\n * );\n *\n * @see {@link timeoutWith}\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source, unless timeout checks fail.\n * @method timeout\n * @owner Observable\n */\nfunction timeout(due, scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return timeout_1.timeout(due, scheduler)(this);\n}\nexports.timeout = timeout;\n//# sourceMappingURL=timeout.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar timeout_1 = require('../../operator/timeout');\nObservable_1.Observable.prototype.timeout = timeout_1.timeout;\n//# sourceMappingURL=timeout.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar timeInterval_1 = require('../../operator/timeInterval');\nObservable_1.Observable.prototype.timeInterval = timeInterval_1.timeInterval;\n//# sourceMappingURL=timeInterval.js.map","\"use strict\";\nvar async_1 = require('../scheduler/async');\nvar throttle_1 = require('../operators/throttle');\nvar throttleTime_1 = require('../operators/throttleTime');\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for `duration` milliseconds, then repeats this process.\n *\n * <span class=\"informal\">Lets a value pass, then ignores source values for the\n * next `duration` milliseconds.</span>\n *\n * <img src=\"./img/throttleTime.png\" width=\"100%\">\n *\n * `throttleTime` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled. After `duration` milliseconds (or the time unit determined\n * internally by the optional `scheduler`) has passed, the timer is disabled,\n * and this process repeats for the next source value. Optionally takes a\n * {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {number} duration Time to wait before emitting another value after\n * emitting the last value, measured in milliseconds or the time unit determined\n * internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the throttling.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttleTime\n * @owner Observable\n */\nfunction throttleTime(duration, scheduler, config) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    if (config === void 0) { config = throttle_1.defaultThrottleConfig; }\n    return throttleTime_1.throttleTime(duration, scheduler, config)(this);\n}\nexports.throttleTime = throttleTime;\n//# sourceMappingURL=throttleTime.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar throttleTime_1 = require('../../operator/throttleTime');\nObservable_1.Observable.prototype.throttleTime = throttleTime_1.throttleTime;\n//# sourceMappingURL=throttleTime.js.map","\"use strict\";\nvar throttle_1 = require('../operators/throttle');\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for a duration determined by another Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link throttleTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/throttle.png\" width=\"100%\">\n *\n * `throttle` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled by calling the `durationSelector` function with the source value,\n * which returns the \"duration\" Observable. When the duration Observable emits a\n * value or completes, the timer is disabled, and this process repeats for the\n * next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttle(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration for each source value, returned as an Observable or a Promise.\n * @param {Object} config a configuration object to define `leading` and `trailing` behavior. Defaults\n * to `{ leading: true, trailing: false }`.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttle\n * @owner Observable\n */\nfunction throttle(durationSelector, config) {\n    if (config === void 0) { config = throttle_1.defaultThrottleConfig; }\n    return throttle_1.throttle(durationSelector, config)(this);\n}\nexports.throttle = throttle;\n//# sourceMappingURL=throttle.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar throttle_1 = require('../../operator/throttle');\nObservable_1.Observable.prototype.throttle = throttle_1.throttle;\n//# sourceMappingURL=throttle.js.map","\"use strict\";\nvar takeWhile_1 = require('../operators/takeWhile');\n/**\n * Emits values emitted by the source Observable so long as each value satisfies\n * the given `predicate`, and then completes as soon as this `predicate` is not\n * satisfied.\n *\n * <span class=\"informal\">Takes values from the source only while they pass the\n * condition given. When the first value does not satisfy, it completes.</span>\n *\n * <img src=\"./img/takeWhile.png\" width=\"100%\">\n *\n * `takeWhile` subscribes and begins mirroring the source Observable. Each value\n * emitted on the source is given to the `predicate` function which returns a\n * boolean, representing a condition to be satisfied by the source values. The\n * output Observable emits the source values until such time as the `predicate`\n * returns false, at which point `takeWhile` stops mirroring the source\n * Observable and completes the output Observable.\n *\n * @example <caption>Emit click events only while the clientX property is greater than 200</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.takeWhile(ev => ev.clientX > 200);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates a value emitted by the source Observable and returns a boolean.\n * Also takes the (zero-based) index as the second argument.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable so long as each value satisfies the condition defined by the\n * `predicate`, then completes.\n * @method takeWhile\n * @owner Observable\n */\nfunction takeWhile(predicate) {\n    return takeWhile_1.takeWhile(predicate)(this);\n}\nexports.takeWhile = takeWhile;\n//# sourceMappingURL=takeWhile.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar takeWhile_1 = require('../../operator/takeWhile');\nObservable_1.Observable.prototype.takeWhile = takeWhile_1.takeWhile;\n//# sourceMappingURL=takeWhile.js.map","\"use strict\";\nvar takeUntil_1 = require('../operators/takeUntil');\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits something. Then, it completes.</span>\n *\n * <img src=\"./img/takeUntil.png\" width=\"100%\">\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value, the output Observable stops mirroring the source Observable\n * and completes.\n *\n * @example <caption>Tick every second until the first click happens</caption>\n * var interval = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = interval.takeUntil(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable until such time as `notifier` emits its first value.\n * @method takeUntil\n * @owner Observable\n */\nfunction takeUntil(notifier) {\n    return takeUntil_1.takeUntil(notifier)(this);\n}\nexports.takeUntil = takeUntil;\n//# sourceMappingURL=takeUntil.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar takeUntil_1 = require('../../operator/takeUntil');\nObservable_1.Observable.prototype.takeUntil = takeUntil_1.takeUntil;\n//# sourceMappingURL=takeUntil.js.map","\"use strict\";\nvar takeLast_1 = require('../operators/takeLast');\n/**\n * Emits only the last `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Remembers the latest `count` values, then emits those\n * only when the source completes.</span>\n *\n * <img src=\"./img/takeLast.png\" width=\"100%\">\n *\n * `takeLast` returns an Observable that emits at most the last `count` values\n * emitted by the source Observable. If the source emits fewer than `count`\n * values then all of its values are emitted. This operator must wait until the\n * `complete` notification emission from the source in order to emit the `next`\n * values on the output Observable, because otherwise it is impossible to know\n * whether or not more values will be emitted on the source. For this reason,\n * all values are emitted synchronously, followed by the complete notification.\n *\n * @example <caption>Take the last 3 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 100);\n * var lastThree = many.takeLast(3);\n * lastThree.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of values to emit from the end of\n * the sequence of values emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits at most the last count\n * values emitted by the source Observable.\n * @method takeLast\n * @owner Observable\n */\nfunction takeLast(count) {\n    return takeLast_1.takeLast(count)(this);\n}\nexports.takeLast = takeLast;\n//# sourceMappingURL=takeLast.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar takeLast_1 = require('../../operator/takeLast');\nObservable_1.Observable.prototype.takeLast = takeLast_1.takeLast;\n//# sourceMappingURL=takeLast.js.map","\"use strict\";\nvar take_1 = require('../operators/take');\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * <img src=\"./img/take.png\" width=\"100%\">\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>\n * var interval = Rx.Observable.interval(1000);\n * var five = interval.take(5);\n * five.subscribe(x => console.log(x));\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of `next` values to emit.\n * @return {Observable<T>} An Observable that emits only the first `count`\n * values emitted by the source Observable, or all of the values from the source\n * if the source emits fewer than `count` values.\n * @method take\n * @owner Observable\n */\nfunction take(count) {\n    return take_1.take(count)(this);\n}\nexports.take = take;\n//# sourceMappingURL=take.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar take_1 = require('../../operator/take');\nObservable_1.Observable.prototype.take = take_1.take;\n//# sourceMappingURL=take.js.map","\"use strict\";\nvar switchMapTo_1 = require('../operators/switchMapTo');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to the same Observable which is flattened multiple\n * times with {@link switch} in the output Observable.\n *\n * <span class=\"informal\">It's like {@link switchMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/switchMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. The output Observables\n * emits values only from the most recently emitted instance of\n * `innerObservable`.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link switch}\n * @see {@link switchMap}\n * @see {@link mergeMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable, and taking only the values\n * from the most recently projected inner Observable.\n * @method switchMapTo\n * @owner Observable\n */\nfunction switchMapTo(innerObservable, resultSelector) {\n    return switchMapTo_1.switchMapTo(innerObservable, resultSelector)(this);\n}\nexports.switchMapTo = switchMapTo;\n//# sourceMappingURL=switchMapTo.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar switchMapTo_1 = require('../../operator/switchMapTo');\nObservable_1.Observable.prototype.switchMapTo = switchMapTo_1.switchMapTo;\n//# sourceMappingURL=switchMapTo.js.map","\"use strict\";\nvar switchMap_1 = require('../operators/switchMap');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link switch}.</span>\n *\n * <img src=\"./img/switchMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switch}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking only the values from the most recently\n * projected inner Observable.\n * @method switchMap\n * @owner Observable\n */\nfunction switchMap(project, resultSelector) {\n    return switchMap_1.switchMap(project, resultSelector)(this);\n}\nexports.switchMap = switchMap;\n//# sourceMappingURL=switchMap.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar switchMap_1 = require('../../operator/switchMap');\nObservable_1.Observable.prototype.switchMap = switchMap_1.switchMap;\n//# sourceMappingURL=switchMap.js.map","\"use strict\";\nvar switchAll_1 = require('../operators/switchAll');\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * subscribing to only the most recently emitted of those inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * previous inner Observable once a new one appears.</span>\n *\n * <img src=\"./img/switch.png\" width=\"100%\">\n *\n * `switch` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable subscribes to the inner Observable and\n * begins emitting the items emitted by that. So far, it behaves\n * like {@link mergeAll}. However, when a new inner Observable is emitted,\n * `switch` unsubscribes from the earlier-emitted inner Observable and\n * subscribes to the new inner Observable and begins emitting items from it. It\n * continues to behave like this for subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * // Each click event is mapped to an Observable that ticks every second\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var switched = higherOrder.switch();\n * // The outcome is that `switched` is essentially a timer that restarts\n * // on every click. The interval Observables from older clicks do not merge\n * // with the current interval Observable.\n * switched.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switchMap}\n * @see {@link switchMapTo}\n * @see {@link zipAll}\n *\n * @return {Observable<T>} An Observable that emits the items emitted by the\n * Observable most recently emitted by the source Observable.\n * @method switch\n * @name switch\n * @owner Observable\n */\nfunction _switch() {\n    return switchAll_1.switchAll()(this);\n}\nexports._switch = _switch;\n//# sourceMappingURL=switch.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar switch_1 = require('../../operator/switch');\nObservable_1.Observable.prototype.switch = switch_1._switch;\nObservable_1.Observable.prototype._switch = switch_1._switch;\n//# sourceMappingURL=switch.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar AsyncScheduler_1 = require('./AsyncScheduler');\nvar AsapScheduler = (function (_super) {\n    __extends(AsapScheduler, _super);\n    function AsapScheduler() {\n        _super.apply(this, arguments);\n    }\n    AsapScheduler.prototype.flush = function (action) {\n        this.active = true;\n        this.scheduled = undefined;\n        var actions = this.actions;\n        var error;\n        var index = -1;\n        var count = actions.length;\n        action = action || actions.shift();\n        do {\n            if (error = action.execute(action.state, action.delay)) {\n                break;\n            }\n        } while (++index < count && (action = actions.shift()));\n        this.active = false;\n        if (error) {\n            while (++index < count && (action = actions.shift())) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    };\n    return AsapScheduler;\n}(AsyncScheduler_1.AsyncScheduler));\nexports.AsapScheduler = AsapScheduler;\n//# sourceMappingURL=AsapScheduler.js.map","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","(function (global, undefined) {\n    \"use strict\";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== \"function\") {\n        callback = new Function(\"\" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // \"too much recursion\" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage(\"\", \"*\");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === \"string\" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener(\"message\", onGlobalMessage, false);\n        } else {\n            global.attachEvent(\"onmessage\", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, \"*\");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement(\"script\");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don't get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === \"[object process]\") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n","/**\nSome credit for this helper goes to http://github.com/YuzuJS/setImmediate\n*/\n\"use strict\";\nvar root_1 = require('./root');\nvar ImmediateDefinition = (function () {\n    function ImmediateDefinition(root) {\n        this.root = root;\n        if (root.setImmediate && typeof root.setImmediate === 'function') {\n            this.setImmediate = root.setImmediate.bind(root);\n            this.clearImmediate = root.clearImmediate.bind(root);\n        }\n        else {\n            this.nextHandle = 1;\n            this.tasksByHandle = {};\n            this.currentlyRunningATask = false;\n            // Don't get fooled by e.g. browserify environments.\n            if (this.canUseProcessNextTick()) {\n                // For Node.js before 0.9\n                this.setImmediate = this.createProcessNextTickSetImmediate();\n            }\n            else if (this.canUsePostMessage()) {\n                // For non-IE10 modern browsers\n                this.setImmediate = this.createPostMessageSetImmediate();\n            }\n            else if (this.canUseMessageChannel()) {\n                // For web workers, where supported\n                this.setImmediate = this.createMessageChannelSetImmediate();\n            }\n            else if (this.canUseReadyStateChange()) {\n                // For IE 6–8\n                this.setImmediate = this.createReadyStateChangeSetImmediate();\n            }\n            else {\n                // For older browsers\n                this.setImmediate = this.createSetTimeoutSetImmediate();\n            }\n            var ci = function clearImmediate(handle) {\n                delete clearImmediate.instance.tasksByHandle[handle];\n            };\n            ci.instance = this;\n            this.clearImmediate = ci;\n        }\n    }\n    ImmediateDefinition.prototype.identify = function (o) {\n        return this.root.Object.prototype.toString.call(o);\n    };\n    ImmediateDefinition.prototype.canUseProcessNextTick = function () {\n        return this.identify(this.root.process) === '[object process]';\n    };\n    ImmediateDefinition.prototype.canUseMessageChannel = function () {\n        return Boolean(this.root.MessageChannel);\n    };\n    ImmediateDefinition.prototype.canUseReadyStateChange = function () {\n        var document = this.root.document;\n        return Boolean(document && 'onreadystatechange' in document.createElement('script'));\n    };\n    ImmediateDefinition.prototype.canUsePostMessage = function () {\n        var root = this.root;\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `root.postMessage` means something completely different and can't be used for this purpose.\n        if (root.postMessage && !root.importScripts) {\n            var postMessageIsAsynchronous_1 = true;\n            var oldOnMessage = root.onmessage;\n            root.onmessage = function () {\n                postMessageIsAsynchronous_1 = false;\n            };\n            root.postMessage('', '*');\n            root.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous_1;\n        }\n        return false;\n    };\n    // This function accepts the same arguments as setImmediate, but\n    // returns a function that requires no arguments.\n    ImmediateDefinition.prototype.partiallyApplied = function (handler) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        var fn = function result() {\n            var _a = result, handler = _a.handler, args = _a.args;\n            if (typeof handler === 'function') {\n                handler.apply(undefined, args);\n            }\n            else {\n                (new Function('' + handler))();\n            }\n        };\n        fn.handler = handler;\n        fn.args = args;\n        return fn;\n    };\n    ImmediateDefinition.prototype.addFromSetImmediateArguments = function (args) {\n        this.tasksByHandle[this.nextHandle] = this.partiallyApplied.apply(undefined, args);\n        return this.nextHandle++;\n    };\n    ImmediateDefinition.prototype.createProcessNextTickSetImmediate = function () {\n        var fn = function setImmediate() {\n            var instance = setImmediate.instance;\n            var handle = instance.addFromSetImmediateArguments(arguments);\n            instance.root.process.nextTick(instance.partiallyApplied(instance.runIfPresent, handle));\n            return handle;\n        };\n        fn.instance = this;\n        return fn;\n    };\n    ImmediateDefinition.prototype.createPostMessageSetImmediate = function () {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n        var root = this.root;\n        var messagePrefix = 'setImmediate$' + root.Math.random() + '$';\n        var onGlobalMessage = function globalMessageHandler(event) {\n            var instance = globalMessageHandler.instance;\n            if (event.source === root &&\n                typeof event.data === 'string' &&\n                event.data.indexOf(messagePrefix) === 0) {\n                instance.runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n        onGlobalMessage.instance = this;\n        root.addEventListener('message', onGlobalMessage, false);\n        var fn = function setImmediate() {\n            var _a = setImmediate, messagePrefix = _a.messagePrefix, instance = _a.instance;\n            var handle = instance.addFromSetImmediateArguments(arguments);\n            instance.root.postMessage(messagePrefix + handle, '*');\n            return handle;\n        };\n        fn.instance = this;\n        fn.messagePrefix = messagePrefix;\n        return fn;\n    };\n    ImmediateDefinition.prototype.runIfPresent = function (handle) {\n        // From the spec: 'Wait until any invocations of this algorithm started before this one have completed.'\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (this.currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // 'too much recursion' error.\n            this.root.setTimeout(this.partiallyApplied(this.runIfPresent, handle), 0);\n        }\n        else {\n            var task = this.tasksByHandle[handle];\n            if (task) {\n                this.currentlyRunningATask = true;\n                try {\n                    task();\n                }\n                finally {\n                    this.clearImmediate(handle);\n                    this.currentlyRunningATask = false;\n                }\n            }\n        }\n    };\n    ImmediateDefinition.prototype.createMessageChannelSetImmediate = function () {\n        var _this = this;\n        var channel = new this.root.MessageChannel();\n        channel.port1.onmessage = function (event) {\n            var handle = event.data;\n            _this.runIfPresent(handle);\n        };\n        var fn = function setImmediate() {\n            var _a = setImmediate, channel = _a.channel, instance = _a.instance;\n            var handle = instance.addFromSetImmediateArguments(arguments);\n            channel.port2.postMessage(handle);\n            return handle;\n        };\n        fn.channel = channel;\n        fn.instance = this;\n        return fn;\n    };\n    ImmediateDefinition.prototype.createReadyStateChangeSetImmediate = function () {\n        var fn = function setImmediate() {\n            var instance = setImmediate.instance;\n            var root = instance.root;\n            var doc = root.document;\n            var html = doc.documentElement;\n            var handle = instance.addFromSetImmediateArguments(arguments);\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement('script');\n            script.onreadystatechange = function () {\n                instance.runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n            return handle;\n        };\n        fn.instance = this;\n        return fn;\n    };\n    ImmediateDefinition.prototype.createSetTimeoutSetImmediate = function () {\n        var fn = function setImmediate() {\n            var instance = setImmediate.instance;\n            var handle = instance.addFromSetImmediateArguments(arguments);\n            instance.root.setTimeout(instance.partiallyApplied(instance.runIfPresent, handle), 0);\n            return handle;\n        };\n        fn.instance = this;\n        return fn;\n    };\n    return ImmediateDefinition;\n}());\nexports.ImmediateDefinition = ImmediateDefinition;\nexports.Immediate = new ImmediateDefinition(root_1.root);\n//# sourceMappingURL=Immediate.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Immediate_1 = require('../util/Immediate');\nvar AsyncAction_1 = require('./AsyncAction');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar AsapAction = (function (_super) {\n    __extends(AsapAction, _super);\n    function AsapAction(scheduler, work) {\n        _super.call(this, scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n    }\n    AsapAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        // If delay is greater than 0, request as an async action.\n        if (delay !== null && delay > 0) {\n            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);\n        }\n        // Push the action to the end of the scheduler queue.\n        scheduler.actions.push(this);\n        // If a microtask has already been scheduled, don't schedule another\n        // one. If a microtask hasn't been scheduled yet, schedule one now. Return\n        // the current scheduled microtask id.\n        return scheduler.scheduled || (scheduler.scheduled = Immediate_1.Immediate.setImmediate(scheduler.flush.bind(scheduler, null)));\n    };\n    AsapAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        // If delay exists and is greater than 0, or if the delay is null (the\n        // action wasn't rescheduled) but was originally scheduled as an async\n        // action, then recycle as an async action.\n        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n            return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);\n        }\n        // If the scheduler queue is empty, cancel the requested microtask and\n        // set the scheduled flag to undefined so the next AsapAction will schedule\n        // its own.\n        if (scheduler.actions.length === 0) {\n            Immediate_1.Immediate.clearImmediate(id);\n            scheduler.scheduled = undefined;\n        }\n        // Return undefined so the action knows to request a new async id if it's rescheduled.\n        return undefined;\n    };\n    return AsapAction;\n}(AsyncAction_1.AsyncAction));\nexports.AsapAction = AsapAction;\n//# sourceMappingURL=AsapAction.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar asap_1 = require('../scheduler/asap');\nvar isNumeric_1 = require('../util/isNumeric');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar SubscribeOnObservable = (function (_super) {\n    __extends(SubscribeOnObservable, _super);\n    function SubscribeOnObservable(source, delayTime, scheduler) {\n        if (delayTime === void 0) { delayTime = 0; }\n        if (scheduler === void 0) { scheduler = asap_1.asap; }\n        _super.call(this);\n        this.source = source;\n        this.delayTime = delayTime;\n        this.scheduler = scheduler;\n        if (!isNumeric_1.isNumeric(delayTime) || delayTime < 0) {\n            this.delayTime = 0;\n        }\n        if (!scheduler || typeof scheduler.schedule !== 'function') {\n            this.scheduler = asap_1.asap;\n        }\n    }\n    SubscribeOnObservable.create = function (source, delay, scheduler) {\n        if (delay === void 0) { delay = 0; }\n        if (scheduler === void 0) { scheduler = asap_1.asap; }\n        return new SubscribeOnObservable(source, delay, scheduler);\n    };\n    SubscribeOnObservable.dispatch = function (arg) {\n        var source = arg.source, subscriber = arg.subscriber;\n        return this.add(source.subscribe(subscriber));\n    };\n    SubscribeOnObservable.prototype._subscribe = function (subscriber) {\n        var delay = this.delayTime;\n        var source = this.source;\n        var scheduler = this.scheduler;\n        return scheduler.schedule(SubscribeOnObservable.dispatch, delay, {\n            source: source, subscriber: subscriber\n        });\n    };\n    return SubscribeOnObservable;\n}(Observable_1.Observable));\nexports.SubscribeOnObservable = SubscribeOnObservable;\n//# sourceMappingURL=SubscribeOnObservable.js.map","\"use strict\";\nvar SubscribeOnObservable_1 = require('../observable/SubscribeOnObservable');\n/**\n * Asynchronously subscribes Observers to this Observable on the specified IScheduler.\n *\n * <img src=\"./img/subscribeOn.png\" width=\"100%\">\n *\n * @param {Scheduler} scheduler - The IScheduler to perform subscription actions on.\n * @return {Observable<T>} The source Observable modified so that its subscriptions happen on the specified IScheduler.\n .\n * @method subscribeOn\n * @owner Observable\n */\nfunction subscribeOn(scheduler, delay) {\n    if (delay === void 0) { delay = 0; }\n    return function subscribeOnOperatorFunction(source) {\n        return source.lift(new SubscribeOnOperator(scheduler, delay));\n    };\n}\nexports.subscribeOn = subscribeOn;\nvar SubscribeOnOperator = (function () {\n    function SubscribeOnOperator(scheduler, delay) {\n        this.scheduler = scheduler;\n        this.delay = delay;\n    }\n    SubscribeOnOperator.prototype.call = function (subscriber, source) {\n        return new SubscribeOnObservable_1.SubscribeOnObservable(source, this.delay, this.scheduler).subscribe(subscriber);\n    };\n    return SubscribeOnOperator;\n}());\n//# sourceMappingURL=subscribeOn.js.map","\"use strict\";\nvar subscribeOn_1 = require('../operators/subscribeOn');\n/**\n * Asynchronously subscribes Observers to this Observable on the specified IScheduler.\n *\n * <img src=\"./img/subscribeOn.png\" width=\"100%\">\n *\n * @param {Scheduler} scheduler - The IScheduler to perform subscription actions on.\n * @return {Observable<T>} The source Observable modified so that its subscriptions happen on the specified IScheduler.\n .\n * @method subscribeOn\n * @owner Observable\n */\nfunction subscribeOn(scheduler, delay) {\n    if (delay === void 0) { delay = 0; }\n    return subscribeOn_1.subscribeOn(scheduler, delay)(this);\n}\nexports.subscribeOn = subscribeOn;\n//# sourceMappingURL=subscribeOn.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar subscribeOn_1 = require('../../operator/subscribeOn');\nObservable_1.Observable.prototype.subscribeOn = subscribeOn_1.subscribeOn;\n//# sourceMappingURL=subscribeOn.js.map","\"use strict\";\nvar startWith_1 = require('../operators/startWith');\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits the items you specify as arguments before it begins to emit\n * items emitted by the source Observable.\n *\n * <img src=\"./img/startWith.png\" width=\"100%\">\n *\n * @param {...T} values - Items you want the modified Observable to emit first.\n * @param {Scheduler} [scheduler] - A {@link IScheduler} to use for scheduling\n * the emissions of the `next` notifications.\n * @return {Observable} An Observable that emits the items in the specified Iterable and then emits the items\n * emitted by the source Observable.\n * @method startWith\n * @owner Observable\n */\nfunction startWith() {\n    var array = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        array[_i - 0] = arguments[_i];\n    }\n    return startWith_1.startWith.apply(void 0, array)(this);\n}\nexports.startWith = startWith;\n//# sourceMappingURL=startWith.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar startWith_1 = require('../../operator/startWith');\nObservable_1.Observable.prototype.startWith = startWith_1.startWith;\n//# sourceMappingURL=startWith.js.map","\"use strict\";\nvar skipWhile_1 = require('../operators/skipWhile');\n/**\n * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\n * true, but emits all further source items as soon as the condition becomes false.\n *\n * <img src=\"./img/skipWhile.png\" width=\"100%\">\n *\n * @param {Function} predicate - A function to test each item emitted from the source Observable.\n * @return {Observable<T>} An Observable that begins emitting items emitted by the source Observable when the\n * specified predicate becomes false.\n * @method skipWhile\n * @owner Observable\n */\nfunction skipWhile(predicate) {\n    return skipWhile_1.skipWhile(predicate)(this);\n}\nexports.skipWhile = skipWhile;\n//# sourceMappingURL=skipWhile.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar skipWhile_1 = require('../../operator/skipWhile');\nObservable_1.Observable.prototype.skipWhile = skipWhile_1.skipWhile;\n//# sourceMappingURL=skipWhile.js.map","\"use strict\";\nvar skipUntil_1 = require('../operators/skipUntil');\n/**\n * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n *\n * <img src=\"./img/skipUntil.png\" width=\"100%\">\n *\n * @param {Observable} notifier - The second Observable that has to emit an item before the source Observable's elements begin to\n * be mirrored by the resulting Observable.\n * @return {Observable<T>} An Observable that skips items from the source Observable until the second Observable emits\n * an item, then emits the remaining items.\n * @method skipUntil\n * @owner Observable\n */\nfunction skipUntil(notifier) {\n    return skipUntil_1.skipUntil(notifier)(this);\n}\nexports.skipUntil = skipUntil;\n//# sourceMappingURL=skipUntil.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar skipUntil_1 = require('../../operator/skipUntil');\nObservable_1.Observable.prototype.skipUntil = skipUntil_1.skipUntil;\n//# sourceMappingURL=skipUntil.js.map","\"use strict\";\nvar skipLast_1 = require('../operators/skipLast');\n/**\n * Skip the last `count` values emitted by the source Observable.\n *\n * <img src=\"./img/skipLast.png\" width=\"100%\">\n *\n * `skipLast` returns an Observable that accumulates a queue with a length\n * enough to store the first `count` values. As more values are received,\n * values are taken from the front of the queue and produced on the result\n * sequence. This causes values to be delayed.\n *\n * @example <caption>Skip the last 2 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 5);\n * var skipLastTwo = many.skipLast(2);\n * skipLastTwo.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 1 2 3\n *\n * @see {@link skip}\n * @see {@link skipUntil}\n * @see {@link skipWhile}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `skipLast(i)`, it throws\n * ArgumentOutOrRangeError if `i < 0`.\n *\n * @param {number} count Number of elements to skip from the end of the source Observable.\n * @returns {Observable<T>} An Observable that skips the last count values\n * emitted by the source Observable.\n * @method skipLast\n * @owner Observable\n */\nfunction skipLast(count) {\n    return skipLast_1.skipLast(count)(this);\n}\nexports.skipLast = skipLast;\n//# sourceMappingURL=skipLast.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar skipLast_1 = require('../../operator/skipLast');\nObservable_1.Observable.prototype.skipLast = skipLast_1.skipLast;\n//# sourceMappingURL=skipLast.js.map","\"use strict\";\nvar skip_1 = require('../operators/skip');\n/**\n * Returns an Observable that skips the first `count` items emitted by the source Observable.\n *\n * <img src=\"./img/skip.png\" width=\"100%\">\n *\n * @param {Number} count - The number of times, items emitted by source Observable should be skipped.\n * @return {Observable} An Observable that skips values emitted by the source Observable.\n *\n * @method skip\n * @owner Observable\n */\nfunction skip(count) {\n    return skip_1.skip(count)(this);\n}\nexports.skip = skip;\n//# sourceMappingURL=skip.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar skip_1 = require('../../operator/skip');\nObservable_1.Observable.prototype.skip = skip_1.skip;\n//# sourceMappingURL=skip.js.map","\"use strict\";\nvar single_1 = require('../operators/single');\n/**\n * Returns an Observable that emits the single item emitted by the source Observable that matches a specified\n * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no\n * such items, notify of an IllegalArgumentException or NoSuchElementException respectively.\n *\n * <img src=\"./img/single.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {Function} predicate - A predicate function to evaluate items emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits the single item emitted by the source Observable that matches\n * the predicate.\n .\n * @method single\n * @owner Observable\n */\nfunction single(predicate) {\n    return single_1.single(predicate)(this);\n}\nexports.single = single;\n//# sourceMappingURL=single.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar single_1 = require('../../operator/single');\nObservable_1.Observable.prototype.single = single_1.single;\n//# sourceMappingURL=single.js.map","\"use strict\";\nvar shareReplay_1 = require('../operators/shareReplay');\n/**\n * @method shareReplay\n * @owner Observable\n */\nfunction shareReplay(bufferSize, windowTime, scheduler) {\n    return shareReplay_1.shareReplay(bufferSize, windowTime, scheduler)(this);\n}\nexports.shareReplay = shareReplay;\n;\n//# sourceMappingURL=shareReplay.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar shareReplay_1 = require('../../operator/shareReplay');\nObservable_1.Observable.prototype.shareReplay = shareReplay_1.shareReplay;\n//# sourceMappingURL=shareReplay.js.map","\"use strict\";\nvar share_1 = require('../operators/share');\n/**\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n *\n * This behaves similarly to .publish().refCount(), with a behavior difference when the source observable emits complete.\n * .publish().refCount() will not resubscribe to the original source, however .share() will resubscribe to the original source.\n * Observable.of(\"test\").publish().refCount() will not re-emit \"test\" on new subscriptions, Observable.of(\"test\").share() will\n * re-emit \"test\" to new subscriptions.\n *\n * <img src=\"./img/share.png\" width=\"100%\">\n *\n * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.\n * @method share\n * @owner Observable\n */\nfunction share() {\n    return share_1.share()(this);\n}\nexports.share = share;\n;\n//# sourceMappingURL=share.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar share_1 = require('../../operator/share');\nObservable_1.Observable.prototype.share = share_1.share;\n//# sourceMappingURL=share.js.map","\"use strict\";\nvar sequenceEqual_1 = require('../operators/sequenceEqual');\n/**\n * Compares all values of two observables in sequence using an optional comparor function\n * and returns an observable of a single boolean value representing whether or not the two sequences\n * are equal.\n *\n * <span class=\"informal\">Checks to see of all values emitted by both observables are equal, in order.</span>\n *\n * <img src=\"./img/sequenceEqual.png\" width=\"100%\">\n *\n * `sequenceEqual` subscribes to two observables and buffers incoming values from each observable. Whenever either\n * observable emits a value, the value is buffered and the buffers are shifted and compared from the bottom\n * up; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the\n * observables completes, the operator will wait for the other observable to complete; If the other\n * observable emits before completing, the returned observable will emit `false` and complete. If one observable never\n * completes or emits after the other complets, the returned observable will never complete.\n *\n * @example <caption>figure out if the Konami code matches</caption>\n * var code = Rx.Observable.from([\n *  \"ArrowUp\",\n *  \"ArrowUp\",\n *  \"ArrowDown\",\n *  \"ArrowDown\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"KeyB\",\n *  \"KeyA\",\n *  \"Enter\" // no start key, clearly.\n * ]);\n *\n * var keys = Rx.Observable.fromEvent(document, 'keyup')\n *  .map(e => e.code);\n * var matches = keys.bufferCount(11, 1)\n *  .mergeMap(\n *    last11 =>\n *      Rx.Observable.from(last11)\n *        .sequenceEqual(code)\n *   );\n * matches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} compareTo The observable sequence to compare the source sequence to.\n * @param {function} [comparor] An optional function to compare each value pair\n * @return {Observable} An Observable of a single boolean value representing whether or not\n * the values emitted by both observables were equal in sequence.\n * @method sequenceEqual\n * @owner Observable\n */\nfunction sequenceEqual(compareTo, comparor) {\n    return sequenceEqual_1.sequenceEqual(compareTo, comparor)(this);\n}\nexports.sequenceEqual = sequenceEqual;\n//# sourceMappingURL=sequenceEqual.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar sequenceEqual_1 = require('../../operator/sequenceEqual');\nObservable_1.Observable.prototype.sequenceEqual = sequenceEqual_1.sequenceEqual;\n//# sourceMappingURL=sequenceEqual.js.map","\"use strict\";\nvar scan_1 = require('../operators/scan');\n/* tslint:enable:max-line-length */\n/**\n * Applies an accumulator function over the source Observable, and returns each\n * intermediate result, with an optional seed value.\n *\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\n * accumulation whenever the source emits a value.</span>\n *\n * <img src=\"./img/scan.png\" width=\"100%\">\n *\n * Combines together all values emitted on the source, using an accumulator\n * function that knows how to join a new source value into the accumulation from\n * the past. Is similar to {@link reduce}, but emits the intermediate\n * accumulations.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var ones = clicks.mapTo(1);\n * var seed = 0;\n * var count = ones.scan((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link reduce}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator\n * The accumulator function called on each source value.\n * @param {T|R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method scan\n * @owner Observable\n */\nfunction scan(accumulator, seed) {\n    if (arguments.length >= 2) {\n        return scan_1.scan(accumulator, seed)(this);\n    }\n    return scan_1.scan(accumulator)(this);\n}\nexports.scan = scan;\n//# sourceMappingURL=scan.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar scan_1 = require('../../operator/scan');\nObservable_1.Observable.prototype.scan = scan_1.scan;\n//# sourceMappingURL=scan.js.map","\"use strict\";\nvar async_1 = require('../scheduler/async');\nvar sampleTime_1 = require('../operators/sampleTime');\n/**\n * Emits the most recently emitted value from the source Observable within\n * periodic time intervals.\n *\n * <span class=\"informal\">Samples the source Observable at periodic time\n * intervals, emitting what it samples.</span>\n *\n * <img src=\"./img/sampleTime.png\" width=\"100%\">\n *\n * `sampleTime` periodically looks at the source Observable and emits whichever\n * value it has most recently emitted since the previous sampling, unless the\n * source has not emitted anything since the previous sampling. The sampling\n * happens periodically in time every `period` milliseconds (or the time unit\n * defined by the optional `scheduler` argument). The sampling starts as soon as\n * the output Observable is subscribed.\n *\n * @example <caption>Every second, emit the most recent click at most once</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.sampleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {number} period The sampling period expressed in milliseconds or the\n * time unit determined internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the sampling.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable at the specified time interval.\n * @method sampleTime\n * @owner Observable\n */\nfunction sampleTime(period, scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return sampleTime_1.sampleTime(period, scheduler)(this);\n}\nexports.sampleTime = sampleTime;\n//# sourceMappingURL=sampleTime.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar sampleTime_1 = require('../../operator/sampleTime');\nObservable_1.Observable.prototype.sampleTime = sampleTime_1.sampleTime;\n//# sourceMappingURL=sampleTime.js.map","\"use strict\";\nvar sample_1 = require('../operators/sample');\n/**\n * Emits the most recently emitted value from the source Observable whenever\n * another Observable, the `notifier`, emits.\n *\n * <span class=\"informal\">It's like {@link sampleTime}, but samples whenever\n * the `notifier` Observable emits something.</span>\n *\n * <img src=\"./img/sample.png\" width=\"100%\">\n *\n * Whenever the `notifier` Observable emits a value or completes, `sample`\n * looks at the source Observable and emits whichever value it has most recently\n * emitted since the previous sampling, unless the source has not emitted\n * anything since the previous sampling. The `notifier` is subscribed to as soon\n * as the output Observable is subscribed.\n *\n * @example <caption>On every click, sample the most recent \"seconds\" timer</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = seconds.sample(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {Observable<any>} notifier The Observable to use for sampling the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable whenever the notifier Observable\n * emits value or completes.\n * @method sample\n * @owner Observable\n */\nfunction sample(notifier) {\n    return sample_1.sample(notifier)(this);\n}\nexports.sample = sample;\n//# sourceMappingURL=sample.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar sample_1 = require('../../operator/sample');\nObservable_1.Observable.prototype.sample = sample_1.sample;\n//# sourceMappingURL=sample.js.map","\"use strict\";\nvar retryWhen_1 = require('../operators/retryWhen');\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will emit the Throwable that caused the error to the Observable returned from `notifier`.\n * If that Observable calls `complete` or `error` then this method will call `complete` or `error` on the child\n * subscription. Otherwise this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/retryWhen.png\" width=\"100%\">\n *\n * @param {function(errors: Observable): Observable} notifier - Receives an Observable of notifications with which a\n * user can `complete` or `error`, aborting the retry.\n * @return {Observable} The source Observable modified with retry logic.\n * @method retryWhen\n * @owner Observable\n */\nfunction retryWhen(notifier) {\n    return retryWhen_1.retryWhen(notifier)(this);\n}\nexports.retryWhen = retryWhen;\n//# sourceMappingURL=retryWhen.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar retryWhen_1 = require('../../operator/retryWhen');\nObservable_1.Observable.prototype.retryWhen = retryWhen_1.retryWhen;\n//# sourceMappingURL=retryWhen.js.map","\"use strict\";\nvar retry_1 = require('../operators/retry');\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will resubscribe to the source Observable for a maximum of `count` resubscriptions (given\n * as a number parameter) rather than propagating the `error` call.\n *\n * <img src=\"./img/retry.png\" width=\"100%\">\n *\n * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted\n * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second\n * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications\n * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].\n * @param {number} count - Number of retry attempts before failing.\n * @return {Observable} The source Observable modified with the retry logic.\n * @method retry\n * @owner Observable\n */\nfunction retry(count) {\n    if (count === void 0) { count = -1; }\n    return retry_1.retry(count)(this);\n}\nexports.retry = retry;\n//# sourceMappingURL=retry.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar retry_1 = require('../../operator/retry');\nObservable_1.Observable.prototype.retry = retry_1.retry;\n//# sourceMappingURL=retry.js.map","\"use strict\";\nvar repeatWhen_1 = require('../operators/repeatWhen');\n/**\n * Returns an Observable that mirrors the source Observable with the exception of a `complete`. If the source\n * Observable calls `complete`, this method will emit to the Observable returned from `notifier`. If that Observable\n * calls `complete` or `error`, then this method will call `complete` or `error` on the child subscription. Otherwise\n * this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/repeatWhen.png\" width=\"100%\">\n *\n * @param {function(notifications: Observable): Observable} notifier - Receives an Observable of notifications with\n * which a user can `complete` or `error`, aborting the repetition.\n * @return {Observable} The source Observable modified with repeat logic.\n * @method repeatWhen\n * @owner Observable\n */\nfunction repeatWhen(notifier) {\n    return repeatWhen_1.repeatWhen(notifier)(this);\n}\nexports.repeatWhen = repeatWhen;\n//# sourceMappingURL=repeatWhen.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar repeatWhen_1 = require('../../operator/repeatWhen');\nObservable_1.Observable.prototype.repeatWhen = repeatWhen_1.repeatWhen;\n//# sourceMappingURL=repeatWhen.js.map","\"use strict\";\nvar repeat_1 = require('../operators/repeat');\n/**\n * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times.\n *\n * <img src=\"./img/repeat.png\" width=\"100%\">\n *\n * @param {number} [count] The number of times the source Observable items are repeated, a count of 0 will yield\n * an empty Observable.\n * @return {Observable} An Observable that repeats the stream of items emitted by the source Observable at most\n * count times.\n * @method repeat\n * @owner Observable\n */\nfunction repeat(count) {\n    if (count === void 0) { count = -1; }\n    return repeat_1.repeat(count)(this);\n}\nexports.repeat = repeat;\n//# sourceMappingURL=repeat.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar repeat_1 = require('../../operator/repeat');\nObservable_1.Observable.prototype.repeat = repeat_1.repeat;\n//# sourceMappingURL=repeat.js.map","\"use strict\";\nvar reduce_1 = require('../operators/reduce');\n/* tslint:enable:max-line-length */\n/**\n * Applies an accumulator function over the source Observable, and returns the\n * accumulated result when the source completes, given an optional seed value.\n *\n * <span class=\"informal\">Combines together all values emitted on the source,\n * using an accumulator function that knows how to join a new source value into\n * the accumulation from the past.</span>\n *\n * <img src=\"./img/reduce.png\" width=\"100%\">\n *\n * Like\n * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),\n * `reduce` applies an `accumulator` function against an accumulation and each\n * value of the source Observable (from the past) to reduce it to a single\n * value, emitted on the output Observable. Note that `reduce` will only emit\n * one value, only when the source Observable completes. It is equivalent to\n * applying operator {@link scan} followed by operator {@link last}.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events that happened in 5 seconds</caption>\n * var clicksInFiveSeconds = Rx.Observable.fromEvent(document, 'click')\n *   .takeUntil(Rx.Observable.interval(5000));\n * var ones = clicksInFiveSeconds.mapTo(1);\n * var seed = 0;\n * var count = ones.reduce((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link count}\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link scan}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator The accumulator function\n * called on each source value.\n * @param {R} [seed] The initial accumulation value.\n * @return {Observable<R>} An Observable that emits a single value that is the\n * result of accumulating the values emitted by the source Observable.\n * @method reduce\n * @owner Observable\n */\nfunction reduce(accumulator, seed) {\n    // providing a seed of `undefined` *should* be valid and trigger\n    // hasSeed! so don't use `seed !== undefined` checks!\n    // For this reason, we have to check it here at the original call site\n    // otherwise inside Operator/Subscriber we won't know if `undefined`\n    // means they didn't provide anything or if they literally provided `undefined`\n    if (arguments.length >= 2) {\n        return reduce_1.reduce(accumulator, seed)(this);\n    }\n    return reduce_1.reduce(accumulator)(this);\n}\nexports.reduce = reduce;\n//# sourceMappingURL=reduce.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar reduce_1 = require('../../operator/reduce');\nObservable_1.Observable.prototype.reduce = reduce_1.reduce;\n//# sourceMappingURL=reduce.js.map","\"use strict\";\nvar race_1 = require('../operators/race');\n// NOTE: to support backwards compatability with 5.4.* and lower\nvar race_2 = require('../observable/race');\nexports.raceStatic = race_2.race;\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item\n * from the combination of this Observable and supplied Observables.\n * @param {...Observables} ...observables Sources used to race for which Observable emits first.\n * @return {Observable} An Observable that mirrors the output of the first Observable to emit an item.\n * @method race\n * @owner Observable\n */\nfunction race() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    return race_1.race.apply(void 0, observables)(this);\n}\nexports.race = race;\n//# sourceMappingURL=race.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar race_1 = require('../../operator/race');\nObservable_1.Observable.prototype.race = race_1.race;\n//# sourceMappingURL=race.js.map","\"use strict\";\nvar publishLast_1 = require('../operators/publishLast');\n/**\n * @return {ConnectableObservable<T>}\n * @method publishLast\n * @owner Observable\n */\nfunction publishLast() {\n    //TODO(benlesh): correct type-flow through here.\n    return publishLast_1.publishLast()(this);\n}\nexports.publishLast = publishLast;\n//# sourceMappingURL=publishLast.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar publishLast_1 = require('../../operator/publishLast');\nObservable_1.Observable.prototype.publishLast = publishLast_1.publishLast;\n//# sourceMappingURL=publishLast.js.map","\"use strict\";\nvar publishReplay_1 = require('../operators/publishReplay');\n/* tslint:enable:max-line-length */\n/**\n * @param bufferSize\n * @param windowTime\n * @param selectorOrScheduler\n * @param scheduler\n * @return {Observable<T> | ConnectableObservable<T>}\n * @method publishReplay\n * @owner Observable\n */\nfunction publishReplay(bufferSize, windowTime, selectorOrScheduler, scheduler) {\n    return publishReplay_1.publishReplay(bufferSize, windowTime, selectorOrScheduler, scheduler)(this);\n}\nexports.publishReplay = publishReplay;\n//# sourceMappingURL=publishReplay.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar publishReplay_1 = require('../../operator/publishReplay');\nObservable_1.Observable.prototype.publishReplay = publishReplay_1.publishReplay;\n//# sourceMappingURL=publishReplay.js.map","\"use strict\";\nvar publishBehavior_1 = require('../operators/publishBehavior');\n/**\n * @param value\n * @return {ConnectableObservable<T>}\n * @method publishBehavior\n * @owner Observable\n */\nfunction publishBehavior(value) {\n    return publishBehavior_1.publishBehavior(value)(this);\n}\nexports.publishBehavior = publishBehavior;\n//# sourceMappingURL=publishBehavior.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar publishBehavior_1 = require('../../operator/publishBehavior');\nObservable_1.Observable.prototype.publishBehavior = publishBehavior_1.publishBehavior;\n//# sourceMappingURL=publishBehavior.js.map","\"use strict\";\nvar publish_1 = require('../operators/publish');\n/* tslint:enable:max-line-length */\n/**\n * Returns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called\n * before it begins emitting items to those Observers that have subscribed to it.\n *\n * <img src=\"./img/publish.png\" width=\"100%\">\n *\n * @param {Function} [selector] - Optional selector function which can use the multicasted source sequence as many times\n * as needed, without causing multiple subscriptions to the source sequence.\n * Subscribers to the given source will receive all notifications of the source from the time of the subscription on.\n * @return A ConnectableObservable that upon connection causes the source Observable to emit items to its Observers.\n * @method publish\n * @owner Observable\n */\nfunction publish(selector) {\n    return publish_1.publish(selector)(this);\n}\nexports.publish = publish;\n//# sourceMappingURL=publish.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar publish_1 = require('../../operator/publish');\nObservable_1.Observable.prototype.publish = publish_1.publish;\n//# sourceMappingURL=publish.js.map","\"use strict\";\nvar pluck_1 = require('../operators/pluck');\n/**\n * Maps each source value (an object) to its specified nested property.\n *\n * <span class=\"informal\">Like {@link map}, but meant only for picking one of\n * the nested properties of every emitted object.</span>\n *\n * <img src=\"./img/pluck.png\" width=\"100%\">\n *\n * Given a list of strings describing a path to an object property, retrieves\n * the value of a specified nested property from all values in the source\n * Observable. If a property can't be resolved, it will return `undefined` for\n * that value.\n *\n * @example <caption>Map every click to the tagName of the clicked target element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var tagNames = clicks.pluck('target', 'tagName');\n * tagNames.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {...string} properties The nested properties to pluck from each source\n * value (an object).\n * @return {Observable} A new Observable of property values from the source values.\n * @method pluck\n * @owner Observable\n */\nfunction pluck() {\n    var properties = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        properties[_i - 0] = arguments[_i];\n    }\n    return pluck_1.pluck.apply(void 0, properties)(this);\n}\nexports.pluck = pluck;\n//# sourceMappingURL=pluck.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar pluck_1 = require('../../operator/pluck');\nObservable_1.Observable.prototype.pluck = pluck_1.pluck;\n//# sourceMappingURL=pluck.js.map","\"use strict\";\nfunction not(pred, thisArg) {\n    function notPred() {\n        return !(notPred.pred.apply(notPred.thisArg, arguments));\n    }\n    notPred.pred = pred;\n    notPred.thisArg = thisArg;\n    return notPred;\n}\nexports.not = not;\n//# sourceMappingURL=not.js.map","\"use strict\";\nvar partition_1 = require('../operators/partition');\n/**\n * Splits the source Observable into two, one with values that satisfy a\n * predicate, and another with values that don't satisfy the predicate.\n *\n * <span class=\"informal\">It's like {@link filter}, but returns two Observables:\n * one like the output of {@link filter}, and the other with values that did not\n * pass the condition.</span>\n *\n * <img src=\"./img/partition.png\" width=\"100%\">\n *\n * `partition` outputs an array with two Observables that partition the values\n * from the source Observable through the given `predicate` function. The first\n * Observable in that array emits source values for which the predicate argument\n * returns true. The second Observable emits source values for which the\n * predicate returns false. The first behaves like {@link filter} and the second\n * behaves like {@link filter} with the predicate negated.\n *\n * @example <caption>Partition click events into those on DIV elements and those elsewhere</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var parts = clicks.partition(ev => ev.target.tagName === 'DIV');\n * var clicksOnDivs = parts[0];\n * var clicksElsewhere = parts[1];\n * clicksOnDivs.subscribe(x => console.log('DIV clicked: ', x));\n * clicksElsewhere.subscribe(x => console.log('Other clicked: ', x));\n *\n * @see {@link filter}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted on the first Observable in the returned array, if\n * `false` the value is emitted on the second Observable in the array. The\n * `index` parameter is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {[Observable<T>, Observable<T>]} An array with two Observables: one\n * with values that passed the predicate, and another with values that did not\n * pass the predicate.\n * @method partition\n * @owner Observable\n */\nfunction partition(predicate, thisArg) {\n    return partition_1.partition(predicate, thisArg)(this);\n}\nexports.partition = partition;\n//# sourceMappingURL=partition.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar partition_1 = require('../../operator/partition');\nObservable_1.Observable.prototype.partition = partition_1.partition;\n//# sourceMappingURL=partition.js.map","\"use strict\";\nvar pairwise_1 = require('../operators/pairwise');\n/**\n * Groups pairs of consecutive emissions together and emits them as an array of\n * two values.\n *\n * <span class=\"informal\">Puts the current value and previous value together as\n * an array, and emits that.</span>\n *\n * <img src=\"./img/pairwise.png\" width=\"100%\">\n *\n * The Nth emission from the source Observable will cause the output Observable\n * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\n * pair. For this reason, `pairwise` emits on the second and subsequent\n * emissions from the source Observable, but not on the first emission, because\n * there is no previous value in that case.\n *\n * @example <caption>On every click (starting from the second), emit the relative distance to the previous click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var pairs = clicks.pairwise();\n * var distance = pairs.map(pair => {\n *   var x0 = pair[0].clientX;\n *   var y0 = pair[0].clientY;\n *   var x1 = pair[1].clientX;\n *   var y1 = pair[1].clientY;\n *   return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n * });\n * distance.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n *\n * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of\n * consecutive values from the source Observable.\n * @method pairwise\n * @owner Observable\n */\nfunction pairwise() {\n    return pairwise_1.pairwise()(this);\n}\nexports.pairwise = pairwise;\n//# sourceMappingURL=pairwise.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar pairwise_1 = require('../../operator/pairwise');\nObservable_1.Observable.prototype.pairwise = pairwise_1.pairwise;\n//# sourceMappingURL=pairwise.js.map","\"use strict\";\nvar onErrorResumeNext_1 = require('../operators/onErrorResumeNext');\n/* tslint:enable:max-line-length */\n/**\n * When any of the provided Observable emits an complete or error notification, it immediately subscribes to the next one\n * that was passed.\n *\n * <span class=\"informal\">Execute series of Observables no matter what, even if it means swallowing errors.</span>\n *\n * <img src=\"./img/onErrorResumeNext.png\" width=\"100%\">\n *\n * `onErrorResumeNext` is an operator that accepts a series of Observables, provided either directly as\n * arguments or as an array. If no single Observable is provided, returned Observable will simply behave the same\n * as the source.\n *\n * `onErrorResumeNext` returns an Observable that starts by subscribing and re-emitting values from the source Observable.\n * When its stream of values ends - no matter if Observable completed or emitted an error - `onErrorResumeNext`\n * will subscribe to the first Observable that was passed as an argument to the method. It will start re-emitting\n * its values as well and - again - when that stream ends, `onErrorResumeNext` will proceed to subscribing yet another\n * Observable in provided series, no matter if previous Observable completed or ended with an error. This will\n * be happening until there is no more Observables left in the series, at which point returned Observable will\n * complete - even if the last subscribed stream ended with an error.\n *\n * `onErrorResumeNext` can be therefore thought of as version of {@link concat} operator, which is more permissive\n * when it comes to the errors emitted by its input Observables. While `concat` subscribes to the next Observable\n * in series only if previous one successfully completed, `onErrorResumeNext` subscribes even if it ended with\n * an error.\n *\n * Note that you do not get any access to errors emitted by the Observables. In particular do not\n * expect these errors to appear in error callback passed to {@link subscribe}. If you want to take\n * specific actions based on what error was emitted by an Observable, you should try out {@link catch} instead.\n *\n *\n * @example <caption>Subscribe to the next Observable after map fails</caption>\n * Rx.Observable.of(1, 2, 3, 0)\n *   .map(x => {\n *       if (x === 0) { throw Error(); }\n         return 10 / x;\n *   })\n *   .onErrorResumeNext(Rx.Observable.of(1, 2, 3))\n *   .subscribe(\n *     val => console.log(val),\n *     err => console.log(err),          // Will never be called.\n *     () => console.log('that\\'s it!')\n *   );\n *\n * // Logs:\n * // 10\n * // 5\n * // 3.3333333333333335\n * // 1\n * // 2\n * // 3\n * // \"that's it!\"\n *\n * @see {@link concat}\n * @see {@link catch}\n *\n * @param {...ObservableInput} observables Observables passed either directly or as an array.\n * @return {Observable} An Observable that emits values from source Observable, but - if it errors - subscribes\n * to the next passed Observable and so on, until it completes or runs out of Observables.\n * @method onErrorResumeNext\n * @owner Observable\n */\nfunction onErrorResumeNext() {\n    var nextSources = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        nextSources[_i - 0] = arguments[_i];\n    }\n    return onErrorResumeNext_1.onErrorResumeNext.apply(void 0, nextSources)(this);\n}\nexports.onErrorResumeNext = onErrorResumeNext;\n//# sourceMappingURL=onErrorResumeNext.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar onErrorResumeNext_1 = require('../../operator/onErrorResumeNext');\nObservable_1.Observable.prototype.onErrorResumeNext = onErrorResumeNext_1.onErrorResumeNext;\n//# sourceMappingURL=onErrorResumeNext.js.map","\"use strict\";\nvar observeOn_1 = require('../operators/observeOn');\n/**\n *\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>\n * const intervals = Rx.Observable.interval(10); // Intervals are scheduled\n *                                               // with async scheduler by default...\n *\n * intervals\n * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame\n * .subscribe(val => {                           // scheduler to ensure smooth animation.\n *   someDiv.style.height = val + 'px';\n * });\n *\n * @see {@link delay}\n *\n * @param {IScheduler} scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return {Observable<T>} Observable that emits the same notifications as the source Observable,\n * but with provided scheduler.\n *\n * @method observeOn\n * @owner Observable\n */\nfunction observeOn(scheduler, delay) {\n    if (delay === void 0) { delay = 0; }\n    return observeOn_1.observeOn(scheduler, delay)(this);\n}\nexports.observeOn = observeOn;\n//# sourceMappingURL=observeOn.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar observeOn_1 = require('../../operator/observeOn');\nObservable_1.Observable.prototype.observeOn = observeOn_1.observeOn;\n//# sourceMappingURL=observeOn.js.map","\"use strict\";\nvar multicast_1 = require('../operators/multicast');\n/* tslint:enable:max-line-length */\n/**\n * Allows source Observable to be subscribed only once with a Subject of choice,\n * while still sharing its values between multiple subscribers.\n *\n * <span class=\"informal\">Subscribe to Observable once, but send its values to multiple subscribers.</span>\n *\n * <img src=\"./img/multicast.png\" width=\"100%\">\n *\n * `multicast` is an operator that works in two modes.\n *\n * In the first mode you provide a single argument to it, which can be either an initialized Subject or a Subject\n * factory. As a result you will get a special kind of an Observable - a {@link ConnectableObservable}. It can be\n * subscribed multiple times, just as regular Observable, but it won't subscribe to the source Observable at that\n * moment. It will do it only if you call its `connect` method. This means you can essentially control by hand, when\n * source Observable will be actually subscribed. What is more, ConnectableObservable will share this one subscription\n * between all of its subscribers. This means that, for example, `ajax` Observable will only send a request once,\n * even though usually it would send a request per every subscriber. Since it sends a request at the moment of\n * subscription, here request would be sent when the `connect` method of a ConnectableObservable is called.\n *\n * The most common pattern of using ConnectableObservable is calling `connect` when the first consumer subscribes,\n * keeping the subscription alive while several consumers come and go and finally unsubscribing from the source\n * Observable, when the last consumer unsubscribes. To not implement that logic over and over again,\n * ConnectableObservable has a special operator, `refCount`. When called, it returns an Observable, which will count\n * the number of consumers subscribed to it and keep ConnectableObservable connected as long as there is at least\n * one consumer. So if you don't actually need to decide yourself when to connect and disconnect a\n * ConnectableObservable, use `refCount`.\n *\n * The second mode is invoked by calling `multicast` with an additional, second argument - selector function.\n * This function accepts an Observable - which basically mirrors the source Observable - and returns Observable\n * as well, which should be the input stream modified by any operators you want. Note that in this\n * mode you cannot provide initialized Subject as a first argument - it has to be a Subject factory. If\n * you provide selector function, `multicast` returns just a regular Observable, instead of ConnectableObservable.\n * Thus, as usual, each subscription to this stream triggers subscription to the source Observable. However,\n * if inside the selector function you subscribe to the input Observable multiple times, actual source stream\n * will be subscribed only once. So if you have a chain of operators that use some Observable many times,\n * but you want to subscribe to that Observable only once, this is the mode you would use.\n *\n * Subject provided as a first parameter of `multicast` is used as a proxy for the single subscription to the\n * source Observable. It means that all values from the source stream go through that Subject. Thus, if a Subject\n * has some special properties, Observable returned by `multicast` will have them as well. If you want to use\n * `multicast` with a Subject that is one of the ones included in RxJS by default - {@link Subject},\n * {@link AsyncSubject}, {@link BehaviorSubject}, or {@link ReplaySubject} - simply use {@link publish},\n * {@link publishLast}, {@link publishBehavior} or {@link publishReplay} respectively. These are actually\n * just wrappers around `multicast`, with a specific Subject hardcoded inside.\n *\n * Also, if you use {@link publish} or {@link publishReplay} with a ConnectableObservables `refCount` operator,\n * you can simply use {@link share} and {@link shareReplay} respectively, which chain these two.\n *\n * @example <caption>Use ConnectableObservable</caption>\n * const seconds = Rx.Observable.interval(1000);\n * const connectableSeconds = seconds.multicast(new Subject());\n *\n * connectableSeconds.subscribe(value => console.log('first: ' + value));\n * connectableSeconds.subscribe(value => console.log('second: ' + value));\n *\n * // At this point still nothing happens, even though we subscribed twice.\n *\n * connectableSeconds.connect();\n *\n * // From now on `seconds` are being logged to the console,\n * // twice per every second. `seconds` Observable was however only subscribed once,\n * // so under the hood Observable.interval had only one clock started.\n *\n * @example <caption>Use selector</caption>\n * const seconds = Rx.Observable.interval(1000);\n *\n * seconds\n *     .multicast(\n *         () => new Subject(),\n *         seconds => seconds.zip(seconds) // Usually zip would subscribe to `seconds` twice.\n *                                         // Because we are inside selector, `seconds` is subscribed once,\n *     )                                   // thus starting only one clock used internally by Observable.interval.\n *     .subscribe();\n *\n * @see {@link publish}\n * @see {@link publishLast}\n * @see {@link publishBehavior}\n * @see {@link publishReplay}\n * @see {@link share}\n * @see {@link shareReplay}\n *\n * @param {Function|Subject} subjectOrSubjectFactory - Factory function to create an intermediate Subject through\n * which the source sequence's elements will be multicast to the selector function input Observable or\n * ConnectableObservable returned by the operator.\n * @param {Function} [selector] - Optional selector function that can use the input stream\n * as many times as needed, without causing multiple subscriptions to the source stream.\n * Subscribers to the input source will receive all notifications of the source from the\n * time of the subscription forward.\n * @return {Observable<T>|ConnectableObservable<T>} An Observable that emits the results of invoking the selector\n * on the source stream or a special {@link ConnectableObservable}, if selector was not provided.\n *\n * @method multicast\n * @owner Observable\n */\nfunction multicast(subjectOrSubjectFactory, selector) {\n    return multicast_1.multicast(subjectOrSubjectFactory, selector)(this);\n}\nexports.multicast = multicast;\n//# sourceMappingURL=multicast.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar multicast_1 = require('../../operator/multicast');\nObservable_1.Observable.prototype.multicast = multicast_1.multicast;\n//# sourceMappingURL=multicast.js.map","\"use strict\";\nvar min_1 = require('../operators/min');\n/**\n * The Min operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the smallest value.\n *\n * <img src=\"./img/min.png\" width=\"100%\">\n *\n * @example <caption>Get the minimal value of a series of numbers</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .min()\n *   .subscribe(x => console.log(x)); // -> 2\n *\n * @example <caption>Use a comparer function to get the minimal item</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .min<Person>( (a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Bar'\n * }\n *\n * @see {@link max}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return {Observable<R>} An Observable that emits item with the smallest value.\n * @method min\n * @owner Observable\n */\nfunction min(comparer) {\n    return min_1.min(comparer)(this);\n}\nexports.min = min;\n//# sourceMappingURL=min.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar min_1 = require('../../operator/min');\nObservable_1.Observable.prototype.min = min_1.min;\n//# sourceMappingURL=min.js.map","\"use strict\";\nvar mergeScan_1 = require('../operators/mergeScan');\n/**\n * Applies an accumulator function over the source Observable where the\n * accumulator function itself returns an Observable, then each intermediate\n * Observable returned is merged into the output Observable.\n *\n * <span class=\"informal\">It's like {@link scan}, but the Observables returned\n * by the accumulator are merged into the outer Observable.</span>\n *\n * @example <caption>Count the number of click events</caption>\n * const click$ = Rx.Observable.fromEvent(document, 'click');\n * const one$ = click$.mapTo(1);\n * const seed = 0;\n * const count$ = one$.mergeScan((acc, one) => Rx.Observable.of(acc + one), seed);\n * count$.subscribe(x => console.log(x));\n *\n * // Results:\n * 1\n * 2\n * 3\n * 4\n * // ...and so on for each click\n *\n * @param {function(acc: R, value: T): Observable<R>} accumulator\n * The accumulator function called on each source value.\n * @param seed The initial accumulation value.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of\n * input Observables being subscribed to concurrently.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method mergeScan\n * @owner Observable\n */\nfunction mergeScan(accumulator, seed, concurrent) {\n    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n    return mergeScan_1.mergeScan(accumulator, seed, concurrent)(this);\n}\nexports.mergeScan = mergeScan;\n//# sourceMappingURL=mergeScan.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar mergeScan_1 = require('../../operator/mergeScan');\nObservable_1.Observable.prototype.mergeScan = mergeScan_1.mergeScan;\n//# sourceMappingURL=mergeScan.js.map","\"use strict\";\nvar mergeMapTo_1 = require('../operators/mergeMapTo');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in the output Observable.\n *\n * <span class=\"informal\">It's like {@link mergeMap}, but maps each value always\n * to the same inner Observable.</span>\n *\n * <img src=\"./img/mergeMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then merges those resulting Observables into one\n * single Observable, which is the output Observable.\n *\n * @example <caption>For each click event, start an interval Observable ticking every 1 second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.mergeMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable.\n * @method mergeMapTo\n * @owner Observable\n */\nfunction mergeMapTo(innerObservable, resultSelector, concurrent) {\n    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n    return mergeMapTo_1.mergeMapTo(innerObservable, resultSelector, concurrent)(this);\n}\nexports.mergeMapTo = mergeMapTo;\n//# sourceMappingURL=mergeMapTo.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar mergeMapTo_1 = require('../../operator/mergeMapTo');\nObservable_1.Observable.prototype.flatMapTo = mergeMapTo_1.mergeMapTo;\nObservable_1.Observable.prototype.mergeMapTo = mergeMapTo_1.mergeMapTo;\n//# sourceMappingURL=mergeMapTo.js.map","\"use strict\";\nvar mergeMap_1 = require('../operators/mergeMap');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nfunction mergeMap(project, resultSelector, concurrent) {\n    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n    return mergeMap_1.mergeMap(project, resultSelector, concurrent)(this);\n}\nexports.mergeMap = mergeMap;\n//# sourceMappingURL=mergeMap.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar mergeMap_1 = require('../../operator/mergeMap');\nObservable_1.Observable.prototype.mergeMap = mergeMap_1.mergeMap;\nObservable_1.Observable.prototype.flatMap = mergeMap_1.mergeMap;\n//# sourceMappingURL=mergeMap.js.map","\"use strict\";\nvar mergeAll_1 = require('../operators/mergeAll');\n/**\n * Converts a higher-order Observable into a first-order Observable which\n * concurrently delivers all values that are emitted on the inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n *\n * <img src=\"./img/mergeAll.png\" width=\"100%\">\n *\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\n * a higher-order Observable. Each time it observes one of these emitted inner\n * Observables, it subscribes to that and delivers all the values from the\n * inner Observable on the output Observable. The output Observable only\n * completes once all inner Observables have completed. Any error delivered by\n * a inner Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var firstOrder = higherOrder.mergeAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));\n * var firstOrder = higherOrder.mergeAll(2);\n * firstOrder.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link merge}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits values coming from all the\n * inner Observables emitted by the source Observable.\n * @method mergeAll\n * @owner Observable\n */\nfunction mergeAll(concurrent) {\n    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n    return mergeAll_1.mergeAll(concurrent)(this);\n}\nexports.mergeAll = mergeAll;\n//# sourceMappingURL=mergeAll.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar mergeAll_1 = require('../../operator/mergeAll');\nObservable_1.Observable.prototype.mergeAll = mergeAll_1.mergeAll;\n//# sourceMappingURL=mergeAll.js.map","\"use strict\";\nvar merge_1 = require('../operators/merge');\nvar merge_2 = require('../observable/merge');\nexports.mergeStatic = merge_2.merge;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (either the source or an\n * Observable given as argument), and simply forwards (without doing any\n * transformation) all the values from all the input Observables to the output\n * Observable. The output Observable only completes once all input Observables\n * have completed. Any error delivered by an input Observable will be immediately\n * emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = clicks.merge(timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = timer1.merge(timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {ObservableInput} other An input Observable to merge with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} An Observable that emits items that are the result of\n * every input Observable.\n * @method merge\n * @owner Observable\n */\nfunction merge() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    return merge_1.merge.apply(void 0, observables)(this);\n}\nexports.merge = merge;\n//# sourceMappingURL=merge.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar merge_1 = require('../../operator/merge');\nObservable_1.Observable.prototype.merge = merge_1.merge;\n//# sourceMappingURL=merge.js.map","\"use strict\";\nvar max_1 = require('../operators/max');\n/**\n * The Max operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the largest value.\n *\n * <img src=\"./img/max.png\" width=\"100%\">\n *\n * @example <caption>Get the maximal value of a series of numbers</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .max()\n *   .subscribe(x => console.log(x)); // -> 8\n *\n * @example <caption>Use a comparer function to get the maximal item</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .max<Person>((a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Beer'\n * }\n *\n * @see {@link min}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return {Observable} An Observable that emits item with the largest value.\n * @method max\n * @owner Observable\n */\nfunction max(comparer) {\n    return max_1.max(comparer)(this);\n}\nexports.max = max;\n//# sourceMappingURL=max.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar max_1 = require('../../operator/max');\nObservable_1.Observable.prototype.max = max_1.max;\n//# sourceMappingURL=max.js.map","\"use strict\";\nvar materialize_1 = require('../operators/materialize');\n/**\n * Represents all of the notifications from the source Observable as `next`\n * emissions marked with their original types within {@link Notification}\n * objects.\n *\n * <span class=\"informal\">Wraps `next`, `error` and `complete` emissions in\n * {@link Notification} objects, emitted as `next` on the output Observable.\n * </span>\n *\n * <img src=\"./img/materialize.png\" width=\"100%\">\n *\n * `materialize` returns an Observable that emits a `next` notification for each\n * `next`, `error`, or `complete` emission of the source Observable. When the\n * source Observable emits `complete`, the output Observable will emit `next` as\n * a Notification of type \"complete\", and then it will emit `complete` as well.\n * When the source Observable emits `error`, the output will emit `next` as a\n * Notification of type \"error\", and then `complete`.\n *\n * This operator is useful for producing metadata of the source Observable, to\n * be consumed as `next` emissions. Use it in conjunction with\n * {@link dematerialize}.\n *\n * @example <caption>Convert a faulty Observable to an Observable of Notifications</caption>\n * var letters = Rx.Observable.of('a', 'b', 13, 'd');\n * var upperCase = letters.map(x => x.toUpperCase());\n * var materialized = upperCase.materialize();\n * materialized.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - Notification {kind: \"N\", value: \"A\", error: undefined, hasValue: true}\n * // - Notification {kind: \"N\", value: \"B\", error: undefined, hasValue: true}\n * // - Notification {kind: \"E\", value: undefined, error: TypeError:\n * //   x.toUpperCase is not a function at MapSubscriber.letters.map.x\n * //   [as project] (http://1…, hasValue: false}\n *\n * @see {@link Notification}\n * @see {@link dematerialize}\n *\n * @return {Observable<Notification<T>>} An Observable that emits\n * {@link Notification} objects that wrap the original emissions from the source\n * Observable with metadata.\n * @method materialize\n * @owner Observable\n */\nfunction materialize() {\n    return materialize_1.materialize()(this);\n}\nexports.materialize = materialize;\n//# sourceMappingURL=materialize.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar materialize_1 = require('../../operator/materialize');\nObservable_1.Observable.prototype.materialize = materialize_1.materialize;\n//# sourceMappingURL=materialize.js.map","\"use strict\";\nvar mapTo_1 = require('../operators/mapTo');\n/**\n * Emits the given constant value on the output Observable every time the source\n * Observable emits a value.\n *\n * <span class=\"informal\">Like {@link map}, but it maps every source value to\n * the same output value every time.</span>\n *\n * <img src=\"./img/mapTo.png\" width=\"100%\">\n *\n * Takes a constant `value` as argument, and emits that whenever the source\n * Observable emits a value. In other words, ignores the actual source value,\n * and simply uses the emission moment to know when to emit the given `value`.\n *\n * @example <caption>Map every click to the string 'Hi'</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var greetings = clicks.mapTo('Hi');\n * greetings.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {any} value The value to map each source value to.\n * @return {Observable} An Observable that emits the given `value` every time\n * the source Observable emits something.\n * @method mapTo\n * @owner Observable\n */\nfunction mapTo(value) {\n    return mapTo_1.mapTo(value)(this);\n}\nexports.mapTo = mapTo;\n//# sourceMappingURL=mapTo.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar mapTo_1 = require('../../operator/mapTo');\nObservable_1.Observable.prototype.mapTo = mapTo_1.mapTo;\n//# sourceMappingURL=mapTo.js.map","\"use strict\";\nvar map_1 = require('../operators/map');\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nfunction map(project, thisArg) {\n    return map_1.map(project, thisArg)(this);\n}\nexports.map = map;\n//# sourceMappingURL=map.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar map_1 = require('../../operator/map');\nObservable_1.Observable.prototype.map = map_1.map;\n//# sourceMappingURL=map.js.map","\"use strict\";\nvar every_1 = require('../operators/every');\n/**\n * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.\n *\n * @example <caption>A simple example emitting true if all elements are less than 5, false otherwise</caption>\n *  Observable.of(1, 2, 3, 4, 5, 6)\n *     .every(x => x < 5)\n *     .subscribe(x => console.log(x)); // -> false\n *\n * @param {function} predicate A function for determining if an item meets a specified condition.\n * @param {any} [thisArg] Optional object to use for `this` in the callback.\n * @return {Observable} An Observable of booleans that determines if all items of the source Observable meet the condition specified.\n * @method every\n * @owner Observable\n */\nfunction every(predicate, thisArg) {\n    return every_1.every(predicate, thisArg)(this);\n}\nexports.every = every;\n//# sourceMappingURL=every.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar every_1 = require('../../operator/every');\nObservable_1.Observable.prototype.every = every_1.every;\n//# sourceMappingURL=every.js.map","\"use strict\";\n/**\n * @param func\n * @return {Observable<R>}\n * @method let\n * @owner Observable\n */\nfunction letProto(func) {\n    return func(this);\n}\nexports.letProto = letProto;\n//# sourceMappingURL=let.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar let_1 = require('../../operator/let');\nObservable_1.Observable.prototype.let = let_1.letProto;\nObservable_1.Observable.prototype.letBind = let_1.letProto;\n//# sourceMappingURL=let.js.map","\"use strict\";\nvar last_1 = require('../operators/last');\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits only the last item emitted by the source Observable.\n * It optionally takes a predicate function as a parameter, in which case, rather than emitting\n * the last item from the source Observable, the resulting Observable will emit the last item\n * from the source Observable that satisfies the predicate.\n *\n * <img src=\"./img/last.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {function} predicate - The condition any source emitted item has to satisfy.\n * @return {Observable} An Observable that emits only the last item satisfying the given condition\n * from the source, or an NoSuchElementException if no such items are emitted.\n * @throws - Throws if no items that match the predicate are emitted by the source Observable.\n * @method last\n * @owner Observable\n */\nfunction last(predicate, resultSelector, defaultValue) {\n    return last_1.last(predicate, resultSelector, defaultValue)(this);\n}\nexports.last = last;\n//# sourceMappingURL=last.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar last_1 = require('../../operator/last');\nObservable_1.Observable.prototype.last = last_1.last;\n//# sourceMappingURL=last.js.map","\"use strict\";\nvar async_1 = require('../scheduler/async');\nvar auditTime_1 = require('../operators/auditTime');\n/**\n * Ignores source values for `duration` milliseconds, then emits the most recent\n * value from the source Observable, then repeats this process.\n *\n * <span class=\"informal\">When it sees a source values, it ignores that plus\n * the next ones for `duration` milliseconds, and then it emits the most recent\n * value from the source.</span>\n *\n * <img src=\"./img/auditTime.png\" width=\"100%\">\n *\n * `auditTime` is similar to `throttleTime`, but emits the last value from the\n * silenced time window, instead of the first value. `auditTime` emits the most\n * recent value from the source Observable on the output Observable as soon as\n * its internal timer becomes disabled, and ignores source values while the\n * timer is enabled. Initially, the timer is disabled. As soon as the first\n * source value arrives, the timer is enabled. After `duration` milliseconds (or\n * the time unit determined internally by the optional `scheduler`) has passed,\n * the timer is disabled, then the most recent source value is emitted on the\n * output Observable, and this process repeats for the next source value.\n * Optionally takes a {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.auditTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} duration Time to wait before emitting the most recent source\n * value, measured in milliseconds or the time unit determined internally\n * by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the rate-limiting behavior.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method auditTime\n * @owner Observable\n */\nfunction auditTime(duration, scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return auditTime_1.auditTime(duration, scheduler)(this);\n}\nexports.auditTime = auditTime;\n//# sourceMappingURL=auditTime.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar auditTime_1 = require('../../operator/auditTime');\nObservable_1.Observable.prototype.auditTime = auditTime_1.auditTime;\n//# sourceMappingURL=auditTime.js.map","\"use strict\";\nvar audit_1 = require('../operators/audit');\n/**\n * Ignores source values for a duration determined by another Observable, then\n * emits the most recent value from the source Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link auditTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/audit.png\" width=\"100%\">\n *\n * `audit` is similar to `throttle`, but emits the last value from the silenced\n * time window, instead of the first value. `audit` emits the most recent value\n * from the source Observable on the output Observable as soon as its internal\n * timer becomes disabled, and ignores source values while the timer is enabled.\n * Initially, the timer is disabled. As soon as the first source value arrives,\n * the timer is enabled by calling the `durationSelector` function with the\n * source value, which returns the \"duration\" Observable. When the duration\n * Observable emits a value or completes, the timer is disabled, then the most\n * recent source value is emitted on the output Observable, and this process\n * repeats for the next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.audit(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method audit\n * @owner Observable\n */\nfunction audit(durationSelector) {\n    return audit_1.audit(durationSelector)(this);\n}\nexports.audit = audit;\n//# sourceMappingURL=audit.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar audit_1 = require('../../operator/audit');\nObservable_1.Observable.prototype.audit = audit_1.audit;\n//# sourceMappingURL=audit.js.map","\"use strict\";\nvar isEmpty_1 = require('../operators/isEmpty');\n/**\n * If the source Observable is empty it returns an Observable that emits true, otherwise it emits false.\n *\n * <img src=\"./img/isEmpty.png\" width=\"100%\">\n *\n * @return {Observable} An Observable that emits a Boolean.\n * @method isEmpty\n * @owner Observable\n */\nfunction isEmpty() {\n    return isEmpty_1.isEmpty()(this);\n}\nexports.isEmpty = isEmpty;\n//# sourceMappingURL=isEmpty.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar isEmpty_1 = require('../../operator/isEmpty');\nObservable_1.Observable.prototype.isEmpty = isEmpty_1.isEmpty;\n//# sourceMappingURL=isEmpty.js.map","\"use strict\";\nvar ignoreElements_1 = require('../operators/ignoreElements');\n/**\n * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\n *\n * <img src=\"./img/ignoreElements.png\" width=\"100%\">\n *\n * @return {Observable} An empty Observable that only calls `complete`\n * or `error`, based on which one is called by the source Observable.\n * @method ignoreElements\n * @owner Observable\n */\nfunction ignoreElements() {\n    return ignoreElements_1.ignoreElements()(this);\n}\nexports.ignoreElements = ignoreElements;\n;\n//# sourceMappingURL=ignoreElements.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar ignoreElements_1 = require('../../operator/ignoreElements');\nObservable_1.Observable.prototype.ignoreElements = ignoreElements_1.ignoreElements;\n//# sourceMappingURL=ignoreElements.js.map","\"use strict\";\nvar FastMap = (function () {\n    function FastMap() {\n        this.values = {};\n    }\n    FastMap.prototype.delete = function (key) {\n        this.values[key] = null;\n        return true;\n    };\n    FastMap.prototype.set = function (key, value) {\n        this.values[key] = value;\n        return this;\n    };\n    FastMap.prototype.get = function (key) {\n        return this.values[key];\n    };\n    FastMap.prototype.forEach = function (cb, thisArg) {\n        var values = this.values;\n        for (var key in values) {\n            if (values.hasOwnProperty(key) && values[key] !== null) {\n                cb.call(thisArg, values[key], key);\n            }\n        }\n    };\n    FastMap.prototype.clear = function () {\n        this.values = {};\n    };\n    return FastMap;\n}());\nexports.FastMap = FastMap;\n//# sourceMappingURL=FastMap.js.map","\"use strict\";\nvar MapPolyfill = (function () {\n    function MapPolyfill() {\n        this.size = 0;\n        this._values = [];\n        this._keys = [];\n    }\n    MapPolyfill.prototype.get = function (key) {\n        var i = this._keys.indexOf(key);\n        return i === -1 ? undefined : this._values[i];\n    };\n    MapPolyfill.prototype.set = function (key, value) {\n        var i = this._keys.indexOf(key);\n        if (i === -1) {\n            this._keys.push(key);\n            this._values.push(value);\n            this.size++;\n        }\n        else {\n            this._values[i] = value;\n        }\n        return this;\n    };\n    MapPolyfill.prototype.delete = function (key) {\n        var i = this._keys.indexOf(key);\n        if (i === -1) {\n            return false;\n        }\n        this._values.splice(i, 1);\n        this._keys.splice(i, 1);\n        this.size--;\n        return true;\n    };\n    MapPolyfill.prototype.clear = function () {\n        this._keys.length = 0;\n        this._values.length = 0;\n        this.size = 0;\n    };\n    MapPolyfill.prototype.forEach = function (cb, thisArg) {\n        for (var i = 0; i < this.size; i++) {\n            cb.call(thisArg, this._values[i], this._keys[i]);\n        }\n    };\n    return MapPolyfill;\n}());\nexports.MapPolyfill = MapPolyfill;\n//# sourceMappingURL=MapPolyfill.js.map","\"use strict\";\nvar root_1 = require('./root');\nvar MapPolyfill_1 = require('./MapPolyfill');\nexports.Map = root_1.root.Map || (function () { return MapPolyfill_1.MapPolyfill; })();\n//# sourceMappingURL=Map.js.map","\"use strict\";\nvar groupBy_1 = require('../operators/groupBy');\nexports.GroupedObservable = groupBy_1.GroupedObservable;\n/* tslint:enable:max-line-length */\n/**\n * Groups the items emitted by an Observable according to a specified criterion,\n * and emits these grouped items as `GroupedObservables`, one\n * {@link GroupedObservable} per group.\n *\n * <img src=\"./img/groupBy.png\" width=\"100%\">\n *\n * @example <caption>Group objects by id and return as array</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs3'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *     )\n *     .groupBy(p => p.id)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], []))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // [ { id: 1, name: 'aze1' },\n * //   { id: 1, name: 'erg1' },\n * //   { id: 1, name: 'df1' } ]\n * //\n * // [ { id: 2, name: 'sf2' },\n * //   { id: 2, name: 'dg2' },\n * //   { id: 2, name: 'sfqfb2' },\n * //   { id: 2, name: 'qsgqsfg2' } ]\n * //\n * // [ { id: 3, name: 'qfs3' } ]\n *\n * @example <caption>Pivot data on the id field</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs1'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *                   )\n *     .groupBy(p => p.id, p => p.name)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], [\"\" + group$.key]))\n *     .map(arr => ({'id': parseInt(arr[0]), 'values': arr.slice(1)}))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // { id: 1, values: [ 'aze1', 'erg1', 'df1' ] }\n * // { id: 2, values: [ 'sf2', 'dg2', 'sfqfb2', 'qsgqsfg2' ] }\n * // { id: 3, values: [ 'qfs1' ] }\n *\n * @param {function(value: T): K} keySelector A function that extracts the key\n * for each item.\n * @param {function(value: T): R} [elementSelector] A function that extracts the\n * return element for each item.\n * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]\n * A function that returns an Observable to determine how long each group should\n * exist.\n * @return {Observable<GroupedObservable<K,R>>} An Observable that emits\n * GroupedObservables, each of which corresponds to a unique key value and each\n * of which emits those items from the source Observable that share that key\n * value.\n * @method groupBy\n * @owner Observable\n */\nfunction groupBy(keySelector, elementSelector, durationSelector, subjectSelector) {\n    return groupBy_1.groupBy(keySelector, elementSelector, durationSelector, subjectSelector)(this);\n}\nexports.groupBy = groupBy;\n//# sourceMappingURL=groupBy.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar groupBy_1 = require('../../operator/groupBy');\nObservable_1.Observable.prototype.groupBy = groupBy_1.groupBy;\n//# sourceMappingURL=groupBy.js.map","\"use strict\";\nvar first_1 = require('../operators/first');\n/**\n * Emits only the first value (or the first value that meets some condition)\n * emitted by the source Observable.\n *\n * <span class=\"informal\">Emits only the first value. Or emits only the first\n * value that passes some test.</span>\n *\n * <img src=\"./img/first.png\" width=\"100%\">\n *\n * If called with no arguments, `first` emits the first value of the source\n * Observable, then completes. If called with a `predicate` function, `first`\n * emits the first value of the source that matches the specified condition. It\n * may also take a `resultSelector` function to produce the output value from\n * the input value, and a `defaultValue` to emit in case the source completes\n * before it is able to emit a valid value. Throws an error if `defaultValue`\n * was not provided and a matching element is not found.\n *\n * @example <caption>Emit only the first click that happens on the DOM</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Emits the first click that happens on a DIV</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link take}\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]\n * An optional function called with each item to test for condition matching.\n * @param {function(value: T, index: number): R} [resultSelector] A function to\n * produce the value on the output Observable based on the values\n * and the indices of the source Observable. The arguments passed to this\n * function are:\n * - `value`: the value that was emitted on the source.\n * - `index`: the \"index\" of the value from the source.\n * @param {R} [defaultValue] The default value emitted in case no valid value\n * was found on the source.\n * @return {Observable<T|R>} An Observable of the first item that matches the\n * condition.\n * @method first\n * @owner Observable\n */\nfunction first(predicate, resultSelector, defaultValue) {\n    return first_1.first(predicate, resultSelector, defaultValue)(this);\n}\nexports.first = first;\n//# sourceMappingURL=first.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar first_1 = require('../../operator/first');\nObservable_1.Observable.prototype.first = first_1.first;\n//# sourceMappingURL=first.js.map","\"use strict\";\nvar findIndex_1 = require('../operators/findIndex');\n/**\n * Emits only the index of the first value emitted by the source Observable that\n * meets some condition.\n *\n * <span class=\"informal\">It's like {@link find}, but emits the index of the\n * found value, not the value itself.</span>\n *\n * <img src=\"./img/findIndex.png\" width=\"100%\">\n *\n * `findIndex` searches for the first item in the source Observable that matches\n * the specified condition embodied by the `predicate`, and returns the\n * (zero-based) index of the first occurrence in the source. Unlike\n * {@link first}, the `predicate` is required in `findIndex`, and does not emit\n * an error if a valid value is not found.\n *\n * @example <caption>Emit the index of first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.findIndex(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link first}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of the index of the first item that\n * matches the condition.\n * @method find\n * @owner Observable\n */\nfunction findIndex(predicate, thisArg) {\n    return findIndex_1.findIndex(predicate, thisArg)(this);\n}\nexports.findIndex = findIndex;\n//# sourceMappingURL=findIndex.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar findIndex_1 = require('../../operator/findIndex');\nObservable_1.Observable.prototype.findIndex = findIndex_1.findIndex;\n//# sourceMappingURL=findIndex.js.map","\"use strict\";\nvar find_1 = require('../operators/find');\n/* tslint:enable:max-line-length */\n/**\n * Emits only the first value emitted by the source Observable that meets some\n * condition.\n *\n * <span class=\"informal\">Finds the first value that passes some test and emits\n * that.</span>\n *\n * <img src=\"./img/find.png\" width=\"100%\">\n *\n * `find` searches for the first item in the source Observable that matches the\n * specified condition embodied by the `predicate`, and returns the first\n * occurrence in the source. Unlike {@link first}, the `predicate` is required\n * in `find`, and does not emit an error if a valid value is not found.\n *\n * @example <caption>Find and emit the first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.find(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link first}\n * @see {@link findIndex}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable<T>} An Observable of the first item that matches the\n * condition.\n * @method find\n * @owner Observable\n */\nfunction find(predicate, thisArg) {\n    return find_1.find(predicate, thisArg)(this);\n}\nexports.find = find;\n//# sourceMappingURL=find.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar find_1 = require('../../operator/find');\nObservable_1.Observable.prototype.find = find_1.find;\n//# sourceMappingURL=find.js.map","\"use strict\";\nvar finalize_1 = require('../operators/finalize');\n/**\n * Returns an Observable that mirrors the source Observable, but will call a specified function when\n * the source terminates on complete or error.\n * @param {function} callback Function to be called when source terminates.\n * @return {Observable} An Observable that mirrors the source, but will call the specified function on termination.\n * @method finally\n * @owner Observable\n */\nfunction _finally(callback) {\n    return finalize_1.finalize(callback)(this);\n}\nexports._finally = _finally;\n//# sourceMappingURL=finally.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar finally_1 = require('../../operator/finally');\nObservable_1.Observable.prototype.finally = finally_1._finally;\nObservable_1.Observable.prototype._finally = finally_1._finally;\n//# sourceMappingURL=finally.js.map","\"use strict\";\nvar filter_1 = require('../operators/filter');\n/* tslint:enable:max-line-length */\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * <img src=\"./img/filter.png\" width=\"100%\">\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * @example <caption>Emit only click events whose target was a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');\n * clicksOnDivs.subscribe(x => console.log(x));\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of values from the source that were\n * allowed by the `predicate` function.\n * @method filter\n * @owner Observable\n */\nfunction filter(predicate, thisArg) {\n    return filter_1.filter(predicate, thisArg)(this);\n}\nexports.filter = filter;\n//# sourceMappingURL=filter.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar filter_1 = require('../../operator/filter');\nObservable_1.Observable.prototype.filter = filter_1.filter;\n//# sourceMappingURL=filter.js.map","\"use strict\";\nvar elementAt_1 = require('../operators/elementAt');\n/**\n * Emits the single value at the specified `index` in a sequence of emissions\n * from the source Observable.\n *\n * <span class=\"informal\">Emits only the i-th value, then completes.</span>\n *\n * <img src=\"./img/elementAt.png\" width=\"100%\">\n *\n * `elementAt` returns an Observable that emits the item at the specified\n * `index` in the source Observable, or a default value if that `index` is out\n * of range and the `default` argument is provided. If the `default` argument is\n * not given and the `index` is out of range, the output Observable will emit an\n * `ArgumentOutOfRangeError` error.\n *\n * @example <caption>Emit only the third click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.elementAt(2);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // click 1 = nothing\n * // click 2 = nothing\n * // click 3 = MouseEvent object logged to console\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link skip}\n * @see {@link single}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `elementAt(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0` or the\n * Observable has completed before emitting the i-th `next` notification.\n *\n * @param {number} index Is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {T} [defaultValue] The default value returned for missing indices.\n * @return {Observable} An Observable that emits a single item, if it is found.\n * Otherwise, will emit the default value if given. If not, then emits an error.\n * @method elementAt\n * @owner Observable\n */\nfunction elementAt(index, defaultValue) {\n    return elementAt_1.elementAt(index, defaultValue)(this);\n}\nexports.elementAt = elementAt;\n//# sourceMappingURL=elementAt.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar elementAt_1 = require('../../operator/elementAt');\nObservable_1.Observable.prototype.elementAt = elementAt_1.elementAt;\n//# sourceMappingURL=elementAt.js.map","\"use strict\";\nvar expand_1 = require('../operators/expand');\n/* tslint:enable:max-line-length */\n/**\n * Recursively projects each source value to an Observable which is merged in\n * the output Observable.\n *\n * <span class=\"informal\">It's similar to {@link mergeMap}, but applies the\n * projection function to every source value as well as every output value.\n * It's recursive.</span>\n *\n * <img src=\"./img/expand.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger. *Expand* will re-emit on the output\n * Observable every source value. Then, each output value is given to the\n * `project` function which returns an inner Observable to be merged on the\n * output Observable. Those output values resulting from the projection are also\n * given to the `project` function to produce new output values. This is how\n * *expand* behaves recursively.\n *\n * @example <caption>Start emitting the powers of two on every click, at most 10 of them</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var powersOfTwo = clicks\n *   .mapTo(1)\n *   .expand(x => Rx.Observable.of(2 * x).delay(1000))\n *   .take(10);\n * powersOfTwo.subscribe(x => console.log(x));\n *\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n *\n * @param {function(value: T, index: number) => Observable} project A function\n * that, when applied to an item emitted by the source or the output Observable,\n * returns an Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each projected inner Observable.\n * @return {Observable} An Observable that emits the source values and also\n * result of applying the projection function to each value emitted on the\n * output Observable and and merging the results of the Observables obtained\n * from this transformation.\n * @method expand\n * @owner Observable\n */\nfunction expand(project, concurrent, scheduler) {\n    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }\n    if (scheduler === void 0) { scheduler = undefined; }\n    concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n    return expand_1.expand(project, concurrent, scheduler)(this);\n}\nexports.expand = expand;\n//# sourceMappingURL=expand.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar expand_1 = require('../../operator/expand');\nObservable_1.Observable.prototype.expand = expand_1.expand;\n//# sourceMappingURL=expand.js.map","\"use strict\";\nvar exhaustMap_1 = require('../operators/exhaustMap');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable only if the previous projected Observable has completed.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link exhaust}.</span>\n *\n * <img src=\"./img/exhaustMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. When it projects a source value to\n * an Observable, the output Observable begins emitting the items emitted by\n * that projected Observable. However, `exhaustMap` ignores every new projected\n * Observable if the previous projected Observable has not yet completed. Once\n * that one completes, it will accept and flatten the next projected Observable\n * and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.exhaustMap((ev) => Rx.Observable.interval(1000).take(5));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaust}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable containing projected Observables\n * of each item of the source, ignoring projected Observables that start before\n * their preceding Observable has completed.\n * @method exhaustMap\n * @owner Observable\n */\nfunction exhaustMap(project, resultSelector) {\n    return exhaustMap_1.exhaustMap(project, resultSelector)(this);\n}\nexports.exhaustMap = exhaustMap;\n//# sourceMappingURL=exhaustMap.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar exhaustMap_1 = require('../../operator/exhaustMap');\nObservable_1.Observable.prototype.exhaustMap = exhaustMap_1.exhaustMap;\n//# sourceMappingURL=exhaustMap.js.map","\"use strict\";\nvar exhaust_1 = require('../operators/exhaust');\n/**\n * Converts a higher-order Observable into a first-order Observable by dropping\n * inner Observables while the previous inner Observable has not yet completed.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * next inner Observables while the current inner is still executing.</span>\n *\n * <img src=\"./img/exhaust.png\" width=\"100%\">\n *\n * `exhaust` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable begins emitting the items emitted by that\n * inner Observable. So far, it behaves like {@link mergeAll}. However,\n * `exhaust` ignores every new inner Observable if the previous Observable has\n * not yet completed. Once that one completes, it will accept and flatten the\n * next inner Observable and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(5));\n * var result = higherOrder.exhaust();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link switch}\n * @see {@link mergeAll}\n * @see {@link exhaustMap}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable that takes a source of Observables and propagates the first observable\n * exclusively until it completes before subscribing to the next.\n * @method exhaust\n * @owner Observable\n */\nfunction exhaust() {\n    return exhaust_1.exhaust()(this);\n}\nexports.exhaust = exhaust;\n//# sourceMappingURL=exhaust.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar exhaust_1 = require('../../operator/exhaust');\nObservable_1.Observable.prototype.exhaust = exhaust_1.exhaust;\n//# sourceMappingURL=exhaust.js.map","\"use strict\";\nvar tap_1 = require('../operators/tap');\n/* tslint:enable:max-line-length */\n/**\n * Perform a side effect for every emission on the source Observable, but return\n * an Observable that is identical to the source.\n *\n * <span class=\"informal\">Intercepts each emission on the source and runs a\n * function, but returns an output which is identical to the source as long as errors don't occur.</span>\n *\n * <img src=\"./img/do.png\" width=\"100%\">\n *\n * Returns a mirrored Observable of the source Observable, but modified so that\n * the provided Observer is called to perform a side effect for every value,\n * error, and completion emitted by the source. Any errors that are thrown in\n * the aforementioned Observer or handlers are safely sent down the error path\n * of the output Observable.\n *\n * This operator is useful for debugging your Observables for the correct values\n * or performing other side effects.\n *\n * Note: this is different to a `subscribe` on the Observable. If the Observable\n * returned by `do` is not subscribed, the side effects specified by the\n * Observer will never happen. `do` therefore simply spies on existing\n * execution, it does not trigger an execution to happen like `subscribe` does.\n *\n * @example <caption>Map every click to the clientX position of that click, while also logging the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks\n *   .do(ev => console.log(ev))\n *   .map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link map}\n * @see {@link subscribe}\n *\n * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n * callback for `next`.\n * @param {function} [error] Callback for errors in the source.\n * @param {function} [complete] Callback for the completion of the source.\n * @return {Observable} An Observable identical to the source, but runs the\n * specified Observer or callback(s) for each item.\n * @method do\n * @name do\n * @owner Observable\n */\nfunction _do(nextOrObserver, error, complete) {\n    return tap_1.tap(nextOrObserver, error, complete)(this);\n}\nexports._do = _do;\n//# sourceMappingURL=do.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar do_1 = require('../../operator/do');\nObservable_1.Observable.prototype.do = do_1._do;\nObservable_1.Observable.prototype._do = do_1._do;\n//# sourceMappingURL=do.js.map","\"use strict\";\nvar distinctUntilKeyChanged_1 = require('../operators/distinctUntilKeyChanged');\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item,\n * using a property accessed by using the key provided to check if the two items are distinct.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>An example comparing the name of persons</caption>\n *\n *  interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'},\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilKeyChanged('name')\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @example <caption>An example comparing the first letters of the name</caption>\n *\n * interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo1'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo2'},\n *     { age: 6, name: 'Foo3'})\n *     .distinctUntilKeyChanged('name', (x: string, y: string) => x.substring(0, 3) === y.substring(0, 3))\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo1' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo2' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n *\n * @param {string} key String key for object property lookup on each item.\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values based on the key specified.\n * @method distinctUntilKeyChanged\n * @owner Observable\n */\nfunction distinctUntilKeyChanged(key, compare) {\n    return distinctUntilKeyChanged_1.distinctUntilKeyChanged(key, compare)(this);\n}\nexports.distinctUntilKeyChanged = distinctUntilKeyChanged;\n//# sourceMappingURL=distinctUntilKeyChanged.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar distinctUntilKeyChanged_1 = require('../../operator/distinctUntilKeyChanged');\nObservable_1.Observable.prototype.distinctUntilKeyChanged = distinctUntilKeyChanged_1.distinctUntilKeyChanged;\n//# sourceMappingURL=distinctUntilKeyChanged.js.map","\"use strict\";\nvar distinctUntilChanged_1 = require('../operators/distinctUntilChanged');\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 1, 2, 3, 3, 4)\n *   .distinctUntilChanged()\n *   .subscribe(x => console.log(x)); // 1, 2, 1, 2, 3, 4\n *\n * @example <caption>An example using a compare function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilChanged((p: Person, q: Person) => p.name === q.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinctUntilChanged\n * @owner Observable\n */\nfunction distinctUntilChanged(compare, keySelector) {\n    return distinctUntilChanged_1.distinctUntilChanged(compare, keySelector)(this);\n}\nexports.distinctUntilChanged = distinctUntilChanged;\n//# sourceMappingURL=distinctUntilChanged.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar distinctUntilChanged_1 = require('../../operator/distinctUntilChanged');\nObservable_1.Observable.prototype.distinctUntilChanged = distinctUntilChanged_1.distinctUntilChanged;\n//# sourceMappingURL=distinctUntilChanged.js.map","\"use strict\";\nvar root_1 = require('./root');\nfunction minimalSetImpl() {\n    // THIS IS NOT a full impl of Set, this is just the minimum\n    // bits of functionality we need for this library.\n    return (function () {\n        function MinimalSet() {\n            this._values = [];\n        }\n        MinimalSet.prototype.add = function (value) {\n            if (!this.has(value)) {\n                this._values.push(value);\n            }\n        };\n        MinimalSet.prototype.has = function (value) {\n            return this._values.indexOf(value) !== -1;\n        };\n        Object.defineProperty(MinimalSet.prototype, \"size\", {\n            get: function () {\n                return this._values.length;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        MinimalSet.prototype.clear = function () {\n            this._values.length = 0;\n        };\n        return MinimalSet;\n    }());\n}\nexports.minimalSetImpl = minimalSetImpl;\nexports.Set = root_1.root.Set || minimalSetImpl();\n//# sourceMappingURL=Set.js.map","\"use strict\";\nvar distinct_1 = require('../operators/distinct');\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.\n *\n * If a keySelector function is provided, then it will project each value from the source observable into a new value that it will\n * check for equality with previously projected values. If a keySelector function is not provided, it will use each value from the\n * source observable directly with an equality check against previous values.\n *\n * In JavaScript runtimes that support `Set`, this operator will use a `Set` to improve performance of the distinct value checking.\n *\n * In other runtimes, this operator will use a minimal implementation of `Set` that relies on an `Array` and `indexOf` under the\n * hood, so performance will degrade as more values are checked for distinction. Even in newer browsers, a long-running `distinct`\n * use might result in memory leaks. To help alleviate this in some scenarios, an optional `flushes` parameter is also provided so\n * that the internal `Set` can be \"flushed\", basically clearing it of values.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 2, 3, 4, 3, 2, 1)\n *   .distinct()\n *   .subscribe(x => console.log(x)); // 1, 2, 3, 4\n *\n * @example <caption>An example using a keySelector function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     .distinct((p: Person) => p.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n *\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [keySelector] Optional function to select which value you want to check as distinct.\n * @param {Observable} [flushes] Optional Observable for flushing the internal HashSet of the operator.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinct\n * @owner Observable\n */\nfunction distinct(keySelector, flushes) {\n    return distinct_1.distinct(keySelector, flushes)(this);\n}\nexports.distinct = distinct;\n//# sourceMappingURL=distinct.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar distinct_1 = require('../../operator/distinct');\nObservable_1.Observable.prototype.distinct = distinct_1.distinct;\n//# sourceMappingURL=distinct.js.map","\"use strict\";\nvar delayWhen_1 = require('../operators/delayWhen');\n/**\n * Delays the emission of items from the source Observable by a given time span\n * determined by the emissions of another Observable.\n *\n * <span class=\"informal\">It's like {@link delay}, but the time span of the\n * delay duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/delayWhen.png\" width=\"100%\">\n *\n * `delayWhen` time shifts each emitted value from the source Observable by a\n * time span determined by another Observable. When the source emits a value,\n * the `delayDurationSelector` function is called with the source value as\n * argument, and should return an Observable, called the \"duration\" Observable.\n * The source value is emitted on the output Observable only when the duration\n * Observable emits a value or completes.\n *\n * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\n * is an Observable. When `subscriptionDelay` emits its first value or\n * completes, the source Observable is subscribed to and starts behaving like\n * described in the previous paragraph. If `subscriptionDelay` is not provided,\n * `delayWhen` will subscribe to the source Observable as soon as the output\n * Observable is subscribed.\n *\n * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delayWhen(event =>\n *   Rx.Observable.interval(Math.random() * 5000)\n * );\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounce}\n * @see {@link delay}\n *\n * @param {function(value: T): Observable} delayDurationSelector A function that\n * returns an Observable for each value emitted by the source Observable, which\n * is then used to delay the emission of that item on the output Observable\n * until the Observable returned from this function emits a value.\n * @param {Observable} subscriptionDelay An Observable that triggers the\n * subscription to the source Observable once it emits any value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by an amount of time specified by the Observable returned by\n * `delayDurationSelector`.\n * @method delayWhen\n * @owner Observable\n */\nfunction delayWhen(delayDurationSelector, subscriptionDelay) {\n    return delayWhen_1.delayWhen(delayDurationSelector, subscriptionDelay)(this);\n}\nexports.delayWhen = delayWhen;\n//# sourceMappingURL=delayWhen.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar delayWhen_1 = require('../../operator/delayWhen');\nObservable_1.Observable.prototype.delayWhen = delayWhen_1.delayWhen;\n//# sourceMappingURL=delayWhen.js.map","\"use strict\";\nvar async_1 = require('../scheduler/async');\nvar delay_1 = require('../operators/delay');\n/**\n * Delays the emission of items from the source Observable by a given timeout or\n * until a given Date.\n *\n * <span class=\"informal\">Time shifts each item by some specified amount of\n * milliseconds.</span>\n *\n * <img src=\"./img/delay.png\" width=\"100%\">\n *\n * If the delay argument is a Number, this operator time shifts the source\n * Observable by that amount of time expressed in milliseconds. The relative\n * time intervals between the values are preserved.\n *\n * If the delay argument is a Date, this operator time shifts the start of the\n * Observable execution until the given date occurs.\n *\n * @example <caption>Delay each click by one second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delay(1000); // each click emitted after 1 second\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @example <caption>Delay all clicks until a future date happens</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var date = new Date('March 15, 2050 12:00:00'); // in the future\n * var delayedClicks = clicks.delay(date); // click emitted only after that date\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n *\n * @param {number|Date} delay The delay duration in milliseconds (a `number`) or\n * a `Date` until which the emission of the source items is delayed.\n * @param {Scheduler} [scheduler=async] The IScheduler to use for\n * managing the timers that handle the time-shift for each item.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified timeout or Date.\n * @method delay\n * @owner Observable\n */\nfunction delay(delay, scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return delay_1.delay(delay, scheduler)(this);\n}\nexports.delay = delay;\n//# sourceMappingURL=delay.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar delay_1 = require('../../operator/delay');\nObservable_1.Observable.prototype.delay = delay_1.delay;\n//# sourceMappingURL=delay.js.map","\"use strict\";\nvar defaultIfEmpty_1 = require('../operators/defaultIfEmpty');\n/* tslint:enable:max-line-length */\n/**\n * Emits a given value if the source Observable completes without emitting any\n * `next` value, otherwise mirrors the source Observable.\n *\n * <span class=\"informal\">If the source Observable turns out to be empty, then\n * this operator will emit a default value.</span>\n *\n * <img src=\"./img/defaultIfEmpty.png\" width=\"100%\">\n *\n * `defaultIfEmpty` emits the values emitted by the source Observable or a\n * specified default value if the source Observable is empty (completes without\n * having emitted any `next` value).\n *\n * @example <caption>If no clicks happen in 5 seconds, then emit \"no clicks\"</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksBeforeFive = clicks.takeUntil(Rx.Observable.interval(5000));\n * var result = clicksBeforeFive.defaultIfEmpty('no clicks');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link empty}\n * @see {@link last}\n *\n * @param {any} [defaultValue=null] The default value used if the source\n * Observable is empty.\n * @return {Observable} An Observable that emits either the specified\n * `defaultValue` if the source Observable emits no items, or the values emitted\n * by the source Observable.\n * @method defaultIfEmpty\n * @owner Observable\n */\nfunction defaultIfEmpty(defaultValue) {\n    if (defaultValue === void 0) { defaultValue = null; }\n    return defaultIfEmpty_1.defaultIfEmpty(defaultValue)(this);\n}\nexports.defaultIfEmpty = defaultIfEmpty;\n//# sourceMappingURL=defaultIfEmpty.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar defaultIfEmpty_1 = require('../../operator/defaultIfEmpty');\nObservable_1.Observable.prototype.defaultIfEmpty = defaultIfEmpty_1.defaultIfEmpty;\n//# sourceMappingURL=defaultIfEmpty.js.map","\"use strict\";\nvar async_1 = require('../scheduler/async');\nvar debounceTime_1 = require('../operators/debounceTime');\n/**\n * Emits a value from the source Observable only after a particular time span\n * has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link delay}, but passes only the most\n * recent value from each burst of emissions.</span>\n *\n * <img src=\"./img/debounceTime.png\" width=\"100%\">\n *\n * `debounceTime` delays values emitted by the source Observable, but drops\n * previous pending delayed emissions if a new value arrives on the source\n * Observable. This operator keeps track of the most recent value from the\n * source Observable, and emits that only when `dueTime` enough time has passed\n * without any other value appearing on the source Observable. If a new value\n * appears before `dueTime` silence occurs, the previous value will be dropped\n * and will not be emitted on the output Observable.\n *\n * This is a rate-limiting operator, because it is impossible for more than one\n * value to be emitted in any time window of duration `dueTime`, but it is also\n * a delay-like operator since output emissions do not occur at the same time as\n * they did on the source Observable. Optionally takes a {@link IScheduler} for\n * managing timers.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounceTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} dueTime The timeout duration in milliseconds (or the time\n * unit determined internally by the optional `scheduler`) for the window of\n * time required to wait for emission silence before emitting the most recent\n * source value.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the timeout for each value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified `dueTime`, and may drop some values if they occur\n * too frequently.\n * @method debounceTime\n * @owner Observable\n */\nfunction debounceTime(dueTime, scheduler) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    return debounceTime_1.debounceTime(dueTime, scheduler)(this);\n}\nexports.debounceTime = debounceTime;\n//# sourceMappingURL=debounceTime.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar debounceTime_1 = require('../../operator/debounceTime');\nObservable_1.Observable.prototype.debounceTime = debounceTime_1.debounceTime;\n//# sourceMappingURL=debounceTime.js.map","\"use strict\";\nvar debounce_1 = require('../operators/debounce');\n/**\n * Emits a value from the source Observable only after a particular time span\n * determined by another Observable has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link debounceTime}, but the time span of\n * emission silence is determined by a second Observable.</span>\n *\n * <img src=\"./img/debounce.png\" width=\"100%\">\n *\n * `debounce` delays values emitted by the source Observable, but drops previous\n * pending delayed emissions if a new value arrives on the source Observable.\n * This operator keeps track of the most recent value from the source\n * Observable, and spawns a duration Observable by calling the\n * `durationSelector` function. The value is emitted only when the duration\n * Observable emits a value or completes, and if no other value was emitted on\n * the source Observable since the duration Observable was spawned. If a new\n * value appears before the duration Observable emits, the previous value will\n * be dropped and will not be emitted on the output Observable.\n *\n * Like {@link debounceTime}, this is a rate-limiting operator, and also a\n * delay-like operator since output emissions do not necessarily occur at the\n * same time as they did on the source Observable.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounce(() => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the timeout\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified duration Observable returned by\n * `durationSelector`, and may drop some values if they occur too frequently.\n * @method debounce\n * @owner Observable\n */\nfunction debounce(durationSelector) {\n    return debounce_1.debounce(durationSelector)(this);\n}\nexports.debounce = debounce;\n//# sourceMappingURL=debounce.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar debounce_1 = require('../../operator/debounce');\nObservable_1.Observable.prototype.debounce = debounce_1.debounce;\n//# sourceMappingURL=debounce.js.map","\"use strict\";\nvar dematerialize_1 = require('../operators/dematerialize');\n/**\n * Converts an Observable of {@link Notification} objects into the emissions\n * that they represent.\n *\n * <span class=\"informal\">Unwraps {@link Notification} objects as actual `next`,\n * `error` and `complete` emissions. The opposite of {@link materialize}.</span>\n *\n * <img src=\"./img/dematerialize.png\" width=\"100%\">\n *\n * `dematerialize` is assumed to operate an Observable that only emits\n * {@link Notification} objects as `next` emissions, and does not emit any\n * `error`. Such Observable is the output of a `materialize` operation. Those\n * notifications are then unwrapped using the metadata they contain, and emitted\n * as `next`, `error`, and `complete` on the output Observable.\n *\n * Use this operator in conjunction with {@link materialize}.\n *\n * @example <caption>Convert an Observable of Notifications to an actual Observable</caption>\n * var notifA = new Rx.Notification('N', 'A');\n * var notifB = new Rx.Notification('N', 'B');\n * var notifE = new Rx.Notification('E', void 0,\n *   new TypeError('x.toUpperCase is not a function')\n * );\n * var materialized = Rx.Observable.of(notifA, notifB, notifE);\n * var upperCase = materialized.dematerialize();\n * upperCase.subscribe(x => console.log(x), e => console.error(e));\n *\n * // Results in:\n * // A\n * // B\n * // TypeError: x.toUpperCase is not a function\n *\n * @see {@link Notification}\n * @see {@link materialize}\n *\n * @return {Observable} An Observable that emits items and notifications\n * embedded in Notification objects emitted by the source Observable.\n * @method dematerialize\n * @owner Observable\n */\nfunction dematerialize() {\n    return dematerialize_1.dematerialize()(this);\n}\nexports.dematerialize = dematerialize;\n//# sourceMappingURL=dematerialize.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar dematerialize_1 = require('../../operator/dematerialize');\nObservable_1.Observable.prototype.dematerialize = dematerialize_1.dematerialize;\n//# sourceMappingURL=dematerialize.js.map","\"use strict\";\nvar count_1 = require('../operators/count');\n/**\n * Counts the number of emissions on the source and emits that number when the\n * source completes.\n *\n * <span class=\"informal\">Tells how many values were emitted, when the source\n * completes.</span>\n *\n * <img src=\"./img/count.png\" width=\"100%\">\n *\n * `count` transforms an Observable that emits values into an Observable that\n * emits a single value that represents the number of values emitted by the\n * source Observable. If the source Observable terminates with an error, `count`\n * will pass this error notification along without emitting a value first. If\n * the source Observable does not terminate at all, `count` will neither emit\n * a value nor terminate. This operator takes an optional `predicate` function\n * as argument, in which case the output emission will represent the number of\n * source values that matched `true` with the `predicate`.\n *\n * @example <caption>Counts how many seconds have passed before the first click happened</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var secondsBeforeClick = seconds.takeUntil(clicks);\n * var result = secondsBeforeClick.count();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Counts how many odd numbers are there between 1 and 7</caption>\n * var numbers = Rx.Observable.range(1, 7);\n * var result = numbers.count(i => i % 2 === 1);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 4\n *\n * @see {@link max}\n * @see {@link min}\n * @see {@link reduce}\n *\n * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A\n * boolean function to select what values are to be counted. It is provided with\n * arguments of:\n * - `value`: the value from the source Observable.\n * - `index`: the (zero-based) \"index\" of the value from the source Observable.\n * - `source`: the source Observable instance itself.\n * @return {Observable} An Observable of one number that represents the count as\n * described above.\n * @method count\n * @owner Observable\n */\nfunction count(predicate) {\n    return count_1.count(predicate)(this);\n}\nexports.count = count;\n//# sourceMappingURL=count.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar count_1 = require('../../operator/count');\nObservable_1.Observable.prototype.count = count_1.count;\n//# sourceMappingURL=count.js.map","\"use strict\";\nvar concatMapTo_1 = require('../operators/concatMapTo');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in a serialized fashion on the output Observable.\n *\n * <span class=\"informal\">It's like {@link concatMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/concatMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. Each new `innerObservable`\n * instance emitted on the output Observable is concatenated with the previous\n * `innerObservable` instance.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMapTo` is equivalent to `mergeMapTo` with concurrency parameter\n * set to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMapTo(Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link mergeMapTo}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An observable of values merged together by joining the\n * passed observable with itself, one after the other, for each value emitted\n * from the source.\n * @method concatMapTo\n * @owner Observable\n */\nfunction concatMapTo(innerObservable, resultSelector) {\n    return concatMapTo_1.concatMapTo(innerObservable, resultSelector)(this);\n}\nexports.concatMapTo = concatMapTo;\n//# sourceMappingURL=concatMapTo.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar concatMapTo_1 = require('../../operator/concatMapTo');\nObservable_1.Observable.prototype.concatMapTo = concatMapTo_1.concatMapTo;\n//# sourceMappingURL=concatMapTo.js.map","\"use strict\";\nvar concatMap_1 = require('../operators/concatMap');\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, in a serialized fashion waiting for each one to complete before\n * merging the next.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link concatAll}.</span>\n *\n * <img src=\"./img/concatMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each new inner Observable is\n * concatenated with the previous inner Observable.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMap(ev => Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMapTo}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking values from each projected inner\n * Observable sequentially.\n * @method concatMap\n * @owner Observable\n */\nfunction concatMap(project, resultSelector) {\n    return concatMap_1.concatMap(project, resultSelector)(this);\n}\nexports.concatMap = concatMap;\n//# sourceMappingURL=concatMap.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar concatMap_1 = require('../../operator/concatMap');\nObservable_1.Observable.prototype.concatMap = concatMap_1.concatMap;\n//# sourceMappingURL=concatMap.js.map","\"use strict\";\nvar concatAll_1 = require('../operators/concatAll');\n/* tslint:enable:max-line-length */\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * concatenating the inner Observables in order.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by putting one\n * inner Observable after the other.</span>\n *\n * <img src=\"./img/concatAll.png\" width=\"100%\">\n *\n * Joins every Observable emitted by the source (a higher-order Observable), in\n * a serial fashion. It subscribes to each inner Observable only after the\n * previous inner Observable has completed, and merges all of their values into\n * the returned observable.\n *\n * __Warning:__ If the source Observable emits Observables quickly and\n * endlessly, and the inner Observables it emits generally complete slower than\n * the source emits, you can run into memory issues as the incoming Observables\n * collect in an unbounded buffer.\n *\n * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));\n * var firstOrder = higherOrder.concatAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link combineAll}\n * @see {@link concat}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable emitting values from all the inner\n * Observables concatenated.\n * @method concatAll\n * @owner Observable\n */\nfunction concatAll() {\n    return concatAll_1.concatAll()(this);\n}\nexports.concatAll = concatAll;\n//# sourceMappingURL=concatAll.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar concatAll_1 = require('../../operator/concatAll');\nObservable_1.Observable.prototype.concatAll = concatAll_1.concatAll;\n//# sourceMappingURL=concatAll.js.map","\"use strict\";\nvar concat_1 = require('../operators/concat');\nvar concat_2 = require('../observable/concat');\nexports.concatStatic = concat_2.concat;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins this Observable with multiple other Observables by subscribing to them\n * one at a time, starting with the source, and merging their results into the\n * output Observable. Will wait for each Observable to complete before moving\n * on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = timer.concat(sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = timer1.concat(timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} other An input Observable to concatenate after the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @method concat\n * @owner Observable\n */\nfunction concat() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    return concat_1.concat.apply(void 0, observables)(this);\n}\nexports.concat = concat;\n//# sourceMappingURL=concat.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar concat_1 = require('../../operator/concat');\nObservable_1.Observable.prototype.concat = concat_1.concat;\n//# sourceMappingURL=concat.js.map","\"use strict\";\nvar combineLatest_1 = require('../operators/combineLatest');\n/* tslint:enable:max-line-length */\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from this Observable with values from\n * Observables passed as arguments. This is done by subscribing to each\n * Observable, in order, and collecting an array of each of the most recent\n * values any time any of the input Observables emits, then either taking that\n * array and passing it as arguments to an optional `project` function and\n * emitting the return value of that, or just emitting the array of recent\n * values directly if there is no `project` function.\n *\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = weight.combineLatest(height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method combineLatest\n * @owner Observable\n */\nfunction combineLatest() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    return combineLatest_1.combineLatest.apply(void 0, observables)(this);\n}\nexports.combineLatest = combineLatest;\n//# sourceMappingURL=combineLatest.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar combineLatest_1 = require('../../operator/combineLatest');\nObservable_1.Observable.prototype.combineLatest = combineLatest_1.combineLatest;\n//# sourceMappingURL=combineLatest.js.map","\"use strict\";\nvar combineAll_1 = require('../operators/combineAll');\n/**\n * Converts a higher-order Observable into a first-order Observable by waiting\n * for the outer Observable to complete, then applying {@link combineLatest}.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by applying\n * {@link combineLatest} when the Observable-of-Observables completes.</span>\n *\n * <img src=\"./img/combineAll.png\" width=\"100%\">\n *\n * Takes an Observable of Observables, and collects all Observables from it.\n * Once the outer Observable completes, it subscribes to all collected\n * Observables and combines their values using the {@link combineLatest}\n * strategy, such that:\n * - Every time an inner Observable emits, the output Observable emits.\n * - When the returned observable emits, it emits all of the latest values by:\n *   - If a `project` function is provided, it is called with each recent value\n *     from each inner Observable in whatever order they arrived, and the result\n *     of the `project` function is what is emitted by the output Observable.\n *   - If there is no `project` function, an array of all of the most recent\n *     values is emitted by the output Observable.\n *\n * @example <caption>Map two click events to a finite interval Observable, then apply combineAll</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev =>\n *   Rx.Observable.interval(Math.random()*2000).take(3)\n * ).take(2);\n * var result = higherOrder.combineAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n * @see {@link mergeAll}\n *\n * @param {function} [project] An optional function to map the most recent\n * values from each inner Observable into a new result. Takes each of the most\n * recent values from each collected inner Observable as arguments, in order.\n * @return {Observable} An Observable of projected results or arrays of recent\n * values.\n * @method combineAll\n * @owner Observable\n */\nfunction combineAll(project) {\n    return combineAll_1.combineAll(project)(this);\n}\nexports.combineAll = combineAll;\n//# sourceMappingURL=combineAll.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar combineAll_1 = require('../../operator/combineAll');\nObservable_1.Observable.prototype.combineAll = combineAll_1.combineAll;\n//# sourceMappingURL=combineAll.js.map","\"use strict\";\nvar catchError_1 = require('../operators/catchError');\n/**\n * Catches errors on the observable to be handled by returning a new observable or throwing an error.\n *\n * <img src=\"./img/catch.png\" width=\"100%\">\n *\n * @example <caption>Continues with a different Observable when there's an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n == 4) {\n * \t     throw 'four!';\n *     }\n *\t   return n;\n *   })\n *   .catch(err => Observable.of('I', 'II', 'III', 'IV', 'V'))\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, I, II, III, IV, V\n *\n * @example <caption>Retries the caught source Observable again in case of error, similar to retry() operator</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n === 4) {\n * \t     throw 'four!';\n *     }\n * \t   return n;\n *   })\n *   .catch((err, caught) => caught)\n *   .take(30)\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, 1, 2, 3, ...\n *\n * @example <caption>Throws a new error when the source Observable throws an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n *     if (n == 4) {\n *       throw 'four!';\n *     }\n *     return n;\n *   })\n *   .catch(err => {\n *     throw 'error in source. Details: ' + err;\n *   })\n *   .subscribe(\n *     x => console.log(x),\n *     err => console.log(err)\n *   );\n *   // 1, 2, 3, error in source. Details: four!\n *\n * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\n *  is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\n *  is returned by the `selector` will be used to continue the observable chain.\n * @return {Observable} An observable that originates from either the source or the observable returned by the\n *  catch `selector` function.\n * @method catch\n * @name catch\n * @owner Observable\n */\nfunction _catch(selector) {\n    return catchError_1.catchError(selector)(this);\n}\nexports._catch = _catch;\n//# sourceMappingURL=catch.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar catch_1 = require('../../operator/catch');\nObservable_1.Observable.prototype.catch = catch_1._catch;\nObservable_1.Observable.prototype._catch = catch_1._catch;\n//# sourceMappingURL=catch.js.map","\"use strict\";\nvar bufferWhen_1 = require('../operators/bufferWhen');\n/**\n * Buffers the source Observable values, using a factory function of closing\n * Observables to determine when to close, emit, and reset the buffer.\n *\n * <span class=\"informal\">Collects values from the past as an array. When it\n * starts collecting values, it calls a function that returns an Observable that\n * tells when to close the buffer and restart collecting.</span>\n *\n * <img src=\"./img/bufferWhen.png\" width=\"100%\">\n *\n * Opens a buffer immediately, then closes the buffer when the observable\n * returned by calling `closingSelector` function emits a value. When it closes\n * the buffer, it immediately opens a new buffer and repeats the process.\n *\n * @example <caption>Emit an array of the last clicks every [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferWhen(() =>\n *   Rx.Observable.interval(1000 + Math.random() * 4000)\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link windowWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals buffer closure.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferWhen\n * @owner Observable\n */\nfunction bufferWhen(closingSelector) {\n    return bufferWhen_1.bufferWhen(closingSelector)(this);\n}\nexports.bufferWhen = bufferWhen;\n//# sourceMappingURL=bufferWhen.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar bufferWhen_1 = require('../../operator/bufferWhen');\nObservable_1.Observable.prototype.bufferWhen = bufferWhen_1.bufferWhen;\n//# sourceMappingURL=bufferWhen.js.map","\"use strict\";\nvar bufferToggle_1 = require('../operators/bufferToggle');\n/**\n * Buffers the source Observable values starting from an emission from\n * `openings` and ending when the output of `closingSelector` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array. Starts\n * collecting only when `opening` emits, and calls the `closingSelector`\n * function to get an Observable that tells when to close the buffer.</span>\n *\n * <img src=\"./img/bufferToggle.png\" width=\"100%\">\n *\n * Buffers values from the source by opening the buffer via signals from an\n * Observable provided to `openings`, and closing and sending the buffers when\n * a Subscribable or Promise returned by the `closingSelector` function emits.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var buffered = clicks.bufferToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferWhen}\n * @see {@link windowToggle}\n *\n * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new\n * buffers.\n * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns a Subscribable or Promise,\n * which, when it emits, signals that the associated buffer should be emitted\n * and cleared.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferToggle\n * @owner Observable\n */\nfunction bufferToggle(openings, closingSelector) {\n    return bufferToggle_1.bufferToggle(openings, closingSelector)(this);\n}\nexports.bufferToggle = bufferToggle;\n//# sourceMappingURL=bufferToggle.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar bufferToggle_1 = require('../../operator/bufferToggle');\nObservable_1.Observable.prototype.bufferToggle = bufferToggle_1.bufferToggle;\n//# sourceMappingURL=bufferToggle.js.map","\"use strict\";\nvar async_1 = require('../scheduler/async');\nvar isScheduler_1 = require('../util/isScheduler');\nvar bufferTime_1 = require('../operators/bufferTime');\n/* tslint:enable:max-line-length */\n/**\n * Buffers the source Observable values for a specific time period.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * those arrays periodically in time.</span>\n *\n * <img src=\"./img/bufferTime.png\" width=\"100%\">\n *\n * Buffers values from the source for a specific time duration `bufferTimeSpan`.\n * Unless the optional argument `bufferCreationInterval` is given, it emits and\n * resets the buffer every `bufferTimeSpan` milliseconds. If\n * `bufferCreationInterval` is given, this operator opens the buffer every\n * `bufferCreationInterval` milliseconds and closes (emits and resets) the\n * buffer every `bufferTimeSpan` milliseconds. When the optional argument\n * `maxBufferSize` is specified, the buffer will be closed either after\n * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.\n *\n * @example <caption>Every second, emit an array of the recent click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(1000);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds, emit the click events from the next 2 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(2000, 5000);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link windowTime}\n *\n * @param {number} bufferTimeSpan The amount of time to fill each buffer array.\n * @param {number} [bufferCreationInterval] The interval at which to start new\n * buffers.\n * @param {number} [maxBufferSize] The maximum buffer size.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine buffer boundaries.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferTime\n * @owner Observable\n */\nfunction bufferTime(bufferTimeSpan) {\n    var length = arguments.length;\n    var scheduler = async_1.async;\n    if (isScheduler_1.isScheduler(arguments[arguments.length - 1])) {\n        scheduler = arguments[arguments.length - 1];\n        length--;\n    }\n    var bufferCreationInterval = null;\n    if (length >= 2) {\n        bufferCreationInterval = arguments[1];\n    }\n    var maxBufferSize = Number.POSITIVE_INFINITY;\n    if (length >= 3) {\n        maxBufferSize = arguments[2];\n    }\n    return bufferTime_1.bufferTime(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler)(this);\n}\nexports.bufferTime = bufferTime;\n//# sourceMappingURL=bufferTime.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar bufferTime_1 = require('../../operator/bufferTime');\nObservable_1.Observable.prototype.bufferTime = bufferTime_1.bufferTime;\n//# sourceMappingURL=bufferTime.js.map","\"use strict\";\nvar bufferCount_1 = require('../operators/bufferCount');\n/**\n * Buffers the source Observable values until the size hits the maximum\n * `bufferSize` given.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when its size reaches `bufferSize`.</span>\n *\n * <img src=\"./img/bufferCount.png\" width=\"100%\">\n *\n * Buffers a number of values from the source Observable by `bufferSize` then\n * emits the buffer and clears it, and starts a new buffer each\n * `startBufferEvery` values. If `startBufferEvery` is not provided or is\n * `null`, then new buffers are started immediately at the start of the source\n * and when each buffer closes and is emitted.\n *\n * @example <caption>Emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>On every click, emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2, 1);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link pairwise}\n * @see {@link windowCount}\n *\n * @param {number} bufferSize The maximum size of the buffer emitted.\n * @param {number} [startBufferEvery] Interval at which to start a new buffer.\n * For example if `startBufferEvery` is `2`, then a new buffer will be started\n * on every other value from the source. A new buffer is started at the\n * beginning of the source by default.\n * @return {Observable<T[]>} An Observable of arrays of buffered values.\n * @method bufferCount\n * @owner Observable\n */\nfunction bufferCount(bufferSize, startBufferEvery) {\n    if (startBufferEvery === void 0) { startBufferEvery = null; }\n    return bufferCount_1.bufferCount(bufferSize, startBufferEvery)(this);\n}\nexports.bufferCount = bufferCount;\n//# sourceMappingURL=bufferCount.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar bufferCount_1 = require('../../operator/bufferCount');\nObservable_1.Observable.prototype.bufferCount = bufferCount_1.bufferCount;\n//# sourceMappingURL=bufferCount.js.map","\"use strict\";\nvar buffer_1 = require('../operators/buffer');\n/**\n * Buffers the source Observable values until `closingNotifier` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when another Observable emits.</span>\n *\n * <img src=\"./img/buffer.png\" width=\"100%\">\n *\n * Buffers the incoming Observable values until the given `closingNotifier`\n * Observable emits a value, at which point it emits the buffer on the output\n * Observable and starts a new buffer internally, awaiting the next time\n * `closingNotifier` emits.\n *\n * @example <caption>On every click, emit array of most recent interval events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var buffered = interval.buffer(clicks);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link window}\n *\n * @param {Observable<any>} closingNotifier An Observable that signals the\n * buffer to be emitted on the output Observable.\n * @return {Observable<T[]>} An Observable of buffers, which are arrays of\n * values.\n * @method buffer\n * @owner Observable\n */\nfunction buffer(closingNotifier) {\n    return buffer_1.buffer(closingNotifier)(this);\n}\nexports.buffer = buffer;\n//# sourceMappingURL=buffer.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar buffer_1 = require('../../operator/buffer');\nObservable_1.Observable.prototype.buffer = buffer_1.buffer;\n//# sourceMappingURL=buffer.js.map","\"use strict\";\nvar root_1 = require('./root');\nfunction assignImpl(target) {\n    var sources = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        sources[_i - 1] = arguments[_i];\n    }\n    var len = sources.length;\n    for (var i = 0; i < len; i++) {\n        var source = sources[i];\n        for (var k in source) {\n            if (source.hasOwnProperty(k)) {\n                target[k] = source[k];\n            }\n        }\n    }\n    return target;\n}\nexports.assignImpl = assignImpl;\n;\nfunction getAssign(root) {\n    return root.Object.assign || assignImpl;\n}\nexports.getAssign = getAssign;\nexports.assign = getAssign(root_1.root);\n//# sourceMappingURL=assign.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar AsyncScheduler_1 = require('./AsyncScheduler');\nvar QueueScheduler = (function (_super) {\n    __extends(QueueScheduler, _super);\n    function QueueScheduler() {\n        _super.apply(this, arguments);\n    }\n    return QueueScheduler;\n}(AsyncScheduler_1.AsyncScheduler));\nexports.QueueScheduler = QueueScheduler;\n//# sourceMappingURL=QueueScheduler.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar AsyncAction_1 = require('./AsyncAction');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar QueueAction = (function (_super) {\n    __extends(QueueAction, _super);\n    function QueueAction(scheduler, work) {\n        _super.call(this, scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n    }\n    QueueAction.prototype.schedule = function (state, delay) {\n        if (delay === void 0) { delay = 0; }\n        if (delay > 0) {\n            return _super.prototype.schedule.call(this, state, delay);\n        }\n        this.delay = delay;\n        this.state = state;\n        this.scheduler.flush(this);\n        return this;\n    };\n    QueueAction.prototype.execute = function (state, delay) {\n        return (delay > 0 || this.closed) ?\n            _super.prototype.execute.call(this, state, delay) :\n            this._execute(state, delay);\n    };\n    QueueAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        // If delay exists and is greater than 0, or if the delay is null (the\n        // action wasn't rescheduled) but was originally scheduled as an async\n        // action, then recycle as an async action.\n        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);\n        }\n        // Otherwise flush the scheduler starting with this action.\n        return scheduler.flush(this);\n    };\n    return QueueAction;\n}(AsyncAction_1.AsyncAction));\nexports.QueueAction = QueueAction;\n//# sourceMappingURL=QueueAction.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subject_1 = require('../../Subject');\nvar Subscriber_1 = require('../../Subscriber');\nvar Observable_1 = require('../../Observable');\nvar Subscription_1 = require('../../Subscription');\nvar root_1 = require('../../util/root');\nvar ReplaySubject_1 = require('../../ReplaySubject');\nvar tryCatch_1 = require('../../util/tryCatch');\nvar errorObject_1 = require('../../util/errorObject');\nvar assign_1 = require('../../util/assign');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar WebSocketSubject = (function (_super) {\n    __extends(WebSocketSubject, _super);\n    function WebSocketSubject(urlConfigOrSource, destination) {\n        if (urlConfigOrSource instanceof Observable_1.Observable) {\n            _super.call(this, destination, urlConfigOrSource);\n        }\n        else {\n            _super.call(this);\n            this.WebSocketCtor = root_1.root.WebSocket;\n            this._output = new Subject_1.Subject();\n            if (typeof urlConfigOrSource === 'string') {\n                this.url = urlConfigOrSource;\n            }\n            else {\n                // WARNING: config object could override important members here.\n                assign_1.assign(this, urlConfigOrSource);\n            }\n            if (!this.WebSocketCtor) {\n                throw new Error('no WebSocket constructor can be found');\n            }\n            this.destination = new ReplaySubject_1.ReplaySubject();\n        }\n    }\n    WebSocketSubject.prototype.resultSelector = function (e) {\n        return JSON.parse(e.data);\n    };\n    /**\n     * Wrapper around the w3c-compatible WebSocket object provided by the browser.\n     *\n     * @example <caption>Wraps browser WebSocket</caption>\n     *\n     * let socket$ = Observable.webSocket('ws://localhost:8081');\n     *\n     * socket$.subscribe(\n     *    (msg) => console.log('message received: ' + msg),\n     *    (err) => console.log(err),\n     *    () => console.log('complete')\n     *  );\n     *\n     * socket$.next(JSON.stringify({ op: 'hello' }));\n     *\n     * @example <caption>Wraps WebSocket from nodejs-websocket (using node.js)</caption>\n     *\n     * import { w3cwebsocket } from 'websocket';\n     *\n     * let socket$ = Observable.webSocket({\n     *   url: 'ws://localhost:8081',\n     *   WebSocketCtor: w3cwebsocket\n     * });\n     *\n     * socket$.subscribe(\n     *    (msg) => console.log('message received: ' + msg),\n     *    (err) => console.log(err),\n     *    () => console.log('complete')\n     *  );\n     *\n     * socket$.next(JSON.stringify({ op: 'hello' }));\n     *\n     * @param {string | WebSocketSubjectConfig} urlConfigOrSource the source of the websocket as an url or a structure defining the websocket object\n     * @return {WebSocketSubject}\n     * @static true\n     * @name webSocket\n     * @owner Observable\n     */\n    WebSocketSubject.create = function (urlConfigOrSource) {\n        return new WebSocketSubject(urlConfigOrSource);\n    };\n    WebSocketSubject.prototype.lift = function (operator) {\n        var sock = new WebSocketSubject(this, this.destination);\n        sock.operator = operator;\n        return sock;\n    };\n    WebSocketSubject.prototype._resetState = function () {\n        this.socket = null;\n        if (!this.source) {\n            this.destination = new ReplaySubject_1.ReplaySubject();\n        }\n        this._output = new Subject_1.Subject();\n    };\n    // TODO: factor this out to be a proper Operator/Subscriber implementation and eliminate closures\n    WebSocketSubject.prototype.multiplex = function (subMsg, unsubMsg, messageFilter) {\n        var self = this;\n        return new Observable_1.Observable(function (observer) {\n            var result = tryCatch_1.tryCatch(subMsg)();\n            if (result === errorObject_1.errorObject) {\n                observer.error(errorObject_1.errorObject.e);\n            }\n            else {\n                self.next(result);\n            }\n            var subscription = self.subscribe(function (x) {\n                var result = tryCatch_1.tryCatch(messageFilter)(x);\n                if (result === errorObject_1.errorObject) {\n                    observer.error(errorObject_1.errorObject.e);\n                }\n                else if (result) {\n                    observer.next(x);\n                }\n            }, function (err) { return observer.error(err); }, function () { return observer.complete(); });\n            return function () {\n                var result = tryCatch_1.tryCatch(unsubMsg)();\n                if (result === errorObject_1.errorObject) {\n                    observer.error(errorObject_1.errorObject.e);\n                }\n                else {\n                    self.next(result);\n                }\n                subscription.unsubscribe();\n            };\n        });\n    };\n    WebSocketSubject.prototype._connectSocket = function () {\n        var _this = this;\n        var WebSocketCtor = this.WebSocketCtor;\n        var observer = this._output;\n        var socket = null;\n        try {\n            socket = this.protocol ?\n                new WebSocketCtor(this.url, this.protocol) :\n                new WebSocketCtor(this.url);\n            this.socket = socket;\n            if (this.binaryType) {\n                this.socket.binaryType = this.binaryType;\n            }\n        }\n        catch (e) {\n            observer.error(e);\n            return;\n        }\n        var subscription = new Subscription_1.Subscription(function () {\n            _this.socket = null;\n            if (socket && socket.readyState === 1) {\n                socket.close();\n            }\n        });\n        socket.onopen = function (e) {\n            var openObserver = _this.openObserver;\n            if (openObserver) {\n                openObserver.next(e);\n            }\n            var queue = _this.destination;\n            _this.destination = Subscriber_1.Subscriber.create(function (x) { return socket.readyState === 1 && socket.send(x); }, function (e) {\n                var closingObserver = _this.closingObserver;\n                if (closingObserver) {\n                    closingObserver.next(undefined);\n                }\n                if (e && e.code) {\n                    socket.close(e.code, e.reason);\n                }\n                else {\n                    observer.error(new TypeError('WebSocketSubject.error must be called with an object with an error code, ' +\n                        'and an optional reason: { code: number, reason: string }'));\n                }\n                _this._resetState();\n            }, function () {\n                var closingObserver = _this.closingObserver;\n                if (closingObserver) {\n                    closingObserver.next(undefined);\n                }\n                socket.close();\n                _this._resetState();\n            });\n            if (queue && queue instanceof ReplaySubject_1.ReplaySubject) {\n                subscription.add(queue.subscribe(_this.destination));\n            }\n        };\n        socket.onerror = function (e) {\n            _this._resetState();\n            observer.error(e);\n        };\n        socket.onclose = function (e) {\n            _this._resetState();\n            var closeObserver = _this.closeObserver;\n            if (closeObserver) {\n                closeObserver.next(e);\n            }\n            if (e.wasClean) {\n                observer.complete();\n            }\n            else {\n                observer.error(e);\n            }\n        };\n        socket.onmessage = function (e) {\n            var result = tryCatch_1.tryCatch(_this.resultSelector)(e);\n            if (result === errorObject_1.errorObject) {\n                observer.error(errorObject_1.errorObject.e);\n            }\n            else {\n                observer.next(result);\n            }\n        };\n    };\n    WebSocketSubject.prototype._subscribe = function (subscriber) {\n        var _this = this;\n        var source = this.source;\n        if (source) {\n            return source.subscribe(subscriber);\n        }\n        if (!this.socket) {\n            this._connectSocket();\n        }\n        var subscription = new Subscription_1.Subscription();\n        subscription.add(this._output.subscribe(subscriber));\n        subscription.add(function () {\n            var socket = _this.socket;\n            if (_this._output.observers.length === 0) {\n                if (socket && socket.readyState === 1) {\n                    socket.close();\n                }\n                _this._resetState();\n            }\n        });\n        return subscription;\n    };\n    WebSocketSubject.prototype.unsubscribe = function () {\n        var _a = this, source = _a.source, socket = _a.socket;\n        if (socket && socket.readyState === 1) {\n            socket.close();\n            this._resetState();\n        }\n        _super.prototype.unsubscribe.call(this);\n        if (!source) {\n            this.destination = new ReplaySubject_1.ReplaySubject();\n        }\n    };\n    return WebSocketSubject;\n}(Subject_1.AnonymousSubject));\nexports.WebSocketSubject = WebSocketSubject;\n//# sourceMappingURL=WebSocketSubject.js.map","\"use strict\";\nvar WebSocketSubject_1 = require('./WebSocketSubject');\nexports.webSocket = WebSocketSubject_1.WebSocketSubject.create;\n//# sourceMappingURL=webSocket.js.map","\"use strict\";\nvar Observable_1 = require('../../../Observable');\nvar webSocket_1 = require('../../../observable/dom/webSocket');\nObservable_1.Observable.webSocket = webSocket_1.webSocket;\n//# sourceMappingURL=webSocket.js.map","\"use strict\";\nvar AjaxObservable_1 = require('./AjaxObservable');\nexports.ajax = AjaxObservable_1.AjaxObservable.create;\n//# sourceMappingURL=ajax.js.map","\"use strict\";\nvar Observable_1 = require('../../../Observable');\nvar ajax_1 = require('../../../observable/dom/ajax');\nObservable_1.Observable.ajax = ajax_1.ajax;\n//# sourceMappingURL=ajax.js.map","\"use strict\";\nvar zip_1 = require('../operators/zip');\nexports.zip = zip_1.zipStatic;\n//# sourceMappingURL=zip.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar zip_1 = require('../../observable/zip');\nObservable_1.Observable.zip = zip_1.zip;\n//# sourceMappingURL=zip.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar isNumeric_1 = require('../util/isNumeric');\nvar Observable_1 = require('../Observable');\nvar async_1 = require('../scheduler/async');\nvar isScheduler_1 = require('../util/isScheduler');\nvar isDate_1 = require('../util/isDate');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar TimerObservable = (function (_super) {\n    __extends(TimerObservable, _super);\n    function TimerObservable(dueTime, period, scheduler) {\n        if (dueTime === void 0) { dueTime = 0; }\n        _super.call(this);\n        this.period = -1;\n        this.dueTime = 0;\n        if (isNumeric_1.isNumeric(period)) {\n            this.period = Number(period) < 1 && 1 || Number(period);\n        }\n        else if (isScheduler_1.isScheduler(period)) {\n            scheduler = period;\n        }\n        if (!isScheduler_1.isScheduler(scheduler)) {\n            scheduler = async_1.async;\n        }\n        this.scheduler = scheduler;\n        this.dueTime = isDate_1.isDate(dueTime) ?\n            (+dueTime - this.scheduler.now()) :\n            dueTime;\n    }\n    /**\n     * Creates an Observable that starts emitting after an `initialDelay` and\n     * emits ever increasing numbers after each `period` of time thereafter.\n     *\n     * <span class=\"informal\">Its like {@link interval}, but you can specify when\n     * should the emissions start.</span>\n     *\n     * <img src=\"./img/timer.png\" width=\"100%\">\n     *\n     * `timer` returns an Observable that emits an infinite sequence of ascending\n     * integers, with a constant interval of time, `period` of your choosing\n     * between those emissions. The first emission happens after the specified\n     * `initialDelay`. The initial delay may be a {@link Date}. By default, this\n     * operator uses the `async` IScheduler to provide a notion of time, but you\n     * may pass any IScheduler to it. If `period` is not specified, the output\n     * Observable emits only one value, `0`. Otherwise, it emits an infinite\n     * sequence.\n     *\n     * @example <caption>Emits ascending numbers, one every second (1000ms), starting after 3 seconds</caption>\n     * var numbers = Rx.Observable.timer(3000, 1000);\n     * numbers.subscribe(x => console.log(x));\n     *\n     * @example <caption>Emits one number after five seconds</caption>\n     * var numbers = Rx.Observable.timer(5000);\n     * numbers.subscribe(x => console.log(x));\n     *\n     * @see {@link interval}\n     * @see {@link delay}\n     *\n     * @param {number|Date} initialDelay The initial delay time to wait before\n     * emitting the first value of `0`.\n     * @param {number} [period] The period of time between emissions of the\n     * subsequent numbers.\n     * @param {Scheduler} [scheduler=async] The IScheduler to use for scheduling\n     * the emission of values, and providing a notion of \"time\".\n     * @return {Observable} An Observable that emits a `0` after the\n     * `initialDelay` and ever increasing numbers after each `period` of time\n     * thereafter.\n     * @static true\n     * @name timer\n     * @owner Observable\n     */\n    TimerObservable.create = function (initialDelay, period, scheduler) {\n        if (initialDelay === void 0) { initialDelay = 0; }\n        return new TimerObservable(initialDelay, period, scheduler);\n    };\n    TimerObservable.dispatch = function (state) {\n        var index = state.index, period = state.period, subscriber = state.subscriber;\n        var action = this;\n        subscriber.next(index);\n        if (subscriber.closed) {\n            return;\n        }\n        else if (period === -1) {\n            return subscriber.complete();\n        }\n        state.index = index + 1;\n        action.schedule(state, period);\n    };\n    TimerObservable.prototype._subscribe = function (subscriber) {\n        var index = 0;\n        var _a = this, period = _a.period, dueTime = _a.dueTime, scheduler = _a.scheduler;\n        return scheduler.schedule(TimerObservable.dispatch, dueTime, {\n            index: index, period: period, subscriber: subscriber\n        });\n    };\n    return TimerObservable;\n}(Observable_1.Observable));\nexports.TimerObservable = TimerObservable;\n//# sourceMappingURL=TimerObservable.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar timer_1 = require('../../observable/timer');\nObservable_1.Observable.timer = timer_1.timer;\n//# sourceMappingURL=timer.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar ErrorObservable = (function (_super) {\n    __extends(ErrorObservable, _super);\n    function ErrorObservable(error, scheduler) {\n        _super.call(this);\n        this.error = error;\n        this.scheduler = scheduler;\n    }\n    /**\n     * Creates an Observable that emits no items to the Observer and immediately\n     * emits an error notification.\n     *\n     * <span class=\"informal\">Just emits 'error', and nothing else.\n     * </span>\n     *\n     * <img src=\"./img/throw.png\" width=\"100%\">\n     *\n     * This static operator is useful for creating a simple Observable that only\n     * emits the error notification. It can be used for composing with other\n     * Observables, such as in a {@link mergeMap}.\n     *\n     * @example <caption>Emit the number 7, then emit an error.</caption>\n     * var result = Rx.Observable.throw(new Error('oops!')).startWith(7);\n     * result.subscribe(x => console.log(x), e => console.error(e));\n     *\n     * @example <caption>Map and flatten numbers to the sequence 'a', 'b', 'c', but throw an error for 13</caption>\n     * var interval = Rx.Observable.interval(1000);\n     * var result = interval.mergeMap(x =>\n     *   x === 13 ?\n     *     Rx.Observable.throw('Thirteens are bad') :\n     *     Rx.Observable.of('a', 'b', 'c')\n     * );\n     * result.subscribe(x => console.log(x), e => console.error(e));\n     *\n     * @see {@link create}\n     * @see {@link empty}\n     * @see {@link never}\n     * @see {@link of}\n     *\n     * @param {any} error The particular Error to pass to the error notification.\n     * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n     * the emission of the error notification.\n     * @return {Observable} An error Observable: emits only the error notification\n     * using the given error argument.\n     * @static true\n     * @name throw\n     * @owner Observable\n     */\n    ErrorObservable.create = function (error, scheduler) {\n        return new ErrorObservable(error, scheduler);\n    };\n    ErrorObservable.dispatch = function (arg) {\n        var error = arg.error, subscriber = arg.subscriber;\n        subscriber.error(error);\n    };\n    ErrorObservable.prototype._subscribe = function (subscriber) {\n        var error = this.error;\n        var scheduler = this.scheduler;\n        subscriber.syncErrorThrowable = true;\n        if (scheduler) {\n            return scheduler.schedule(ErrorObservable.dispatch, 0, {\n                error: error, subscriber: subscriber\n            });\n        }\n        else {\n            subscriber.error(error);\n        }\n    };\n    return ErrorObservable;\n}(Observable_1.Observable));\nexports.ErrorObservable = ErrorObservable;\n//# sourceMappingURL=ErrorObservable.js.map","\"use strict\";\nvar ErrorObservable_1 = require('./ErrorObservable');\nexports._throw = ErrorObservable_1.ErrorObservable.create;\n//# sourceMappingURL=throw.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar throw_1 = require('../../observable/throw');\nObservable_1.Observable.throw = throw_1._throw;\n//# sourceMappingURL=throw.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar UsingObservable = (function (_super) {\n    __extends(UsingObservable, _super);\n    function UsingObservable(resourceFactory, observableFactory) {\n        _super.call(this);\n        this.resourceFactory = resourceFactory;\n        this.observableFactory = observableFactory;\n    }\n    UsingObservable.create = function (resourceFactory, observableFactory) {\n        return new UsingObservable(resourceFactory, observableFactory);\n    };\n    UsingObservable.prototype._subscribe = function (subscriber) {\n        var _a = this, resourceFactory = _a.resourceFactory, observableFactory = _a.observableFactory;\n        var resource;\n        try {\n            resource = resourceFactory();\n            return new UsingSubscriber(subscriber, resource, observableFactory);\n        }\n        catch (err) {\n            subscriber.error(err);\n        }\n    };\n    return UsingObservable;\n}(Observable_1.Observable));\nexports.UsingObservable = UsingObservable;\nvar UsingSubscriber = (function (_super) {\n    __extends(UsingSubscriber, _super);\n    function UsingSubscriber(destination, resource, observableFactory) {\n        _super.call(this, destination);\n        this.resource = resource;\n        this.observableFactory = observableFactory;\n        destination.add(resource);\n        this.tryUse();\n    }\n    UsingSubscriber.prototype.tryUse = function () {\n        try {\n            var source = this.observableFactory.call(this, this.resource);\n            if (source) {\n                this.add(subscribeToResult_1.subscribeToResult(this, source));\n            }\n        }\n        catch (err) {\n            this._error(err);\n        }\n    };\n    return UsingSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=UsingObservable.js.map","\"use strict\";\nvar UsingObservable_1 = require('./UsingObservable');\nexports.using = UsingObservable_1.UsingObservable.create;\n//# sourceMappingURL=using.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar using_1 = require('../../observable/using');\nObservable_1.Observable.using = using_1.using;\n//# sourceMappingURL=using.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar RangeObservable = (function (_super) {\n    __extends(RangeObservable, _super);\n    function RangeObservable(start, count, scheduler) {\n        _super.call(this);\n        this.start = start;\n        this._count = count;\n        this.scheduler = scheduler;\n    }\n    /**\n     * Creates an Observable that emits a sequence of numbers within a specified\n     * range.\n     *\n     * <span class=\"informal\">Emits a sequence of numbers in a range.</span>\n     *\n     * <img src=\"./img/range.png\" width=\"100%\">\n     *\n     * `range` operator emits a range of sequential integers, in order, where you\n     * select the `start` of the range and its `length`. By default, uses no\n     * IScheduler and just delivers the notifications synchronously, but may use\n     * an optional IScheduler to regulate those deliveries.\n     *\n     * @example <caption>Emits the numbers 1 to 10</caption>\n     * var numbers = Rx.Observable.range(1, 10);\n     * numbers.subscribe(x => console.log(x));\n     *\n     * @see {@link timer}\n     * @see {@link interval}\n     *\n     * @param {number} [start=0] The value of the first integer in the sequence.\n     * @param {number} [count=0] The number of sequential integers to generate.\n     * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n     * the emissions of the notifications.\n     * @return {Observable} An Observable of numbers that emits a finite range of\n     * sequential integers.\n     * @static true\n     * @name range\n     * @owner Observable\n     */\n    RangeObservable.create = function (start, count, scheduler) {\n        if (start === void 0) { start = 0; }\n        if (count === void 0) { count = 0; }\n        return new RangeObservable(start, count, scheduler);\n    };\n    RangeObservable.dispatch = function (state) {\n        var start = state.start, index = state.index, count = state.count, subscriber = state.subscriber;\n        if (index >= count) {\n            subscriber.complete();\n            return;\n        }\n        subscriber.next(start);\n        if (subscriber.closed) {\n            return;\n        }\n        state.index = index + 1;\n        state.start = start + 1;\n        this.schedule(state);\n    };\n    RangeObservable.prototype._subscribe = function (subscriber) {\n        var index = 0;\n        var start = this.start;\n        var count = this._count;\n        var scheduler = this.scheduler;\n        if (scheduler) {\n            return scheduler.schedule(RangeObservable.dispatch, 0, {\n                index: index, count: count, start: start, subscriber: subscriber\n            });\n        }\n        else {\n            do {\n                if (index++ >= count) {\n                    subscriber.complete();\n                    break;\n                }\n                subscriber.next(start++);\n                if (subscriber.closed) {\n                    break;\n                }\n            } while (true);\n        }\n    };\n    return RangeObservable;\n}(Observable_1.Observable));\nexports.RangeObservable = RangeObservable;\n//# sourceMappingURL=RangeObservable.js.map","\"use strict\";\nvar RangeObservable_1 = require('./RangeObservable');\nexports.range = RangeObservable_1.RangeObservable.create;\n//# sourceMappingURL=range.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar range_1 = require('../../observable/range');\nObservable_1.Observable.range = range_1.range;\n//# sourceMappingURL=range.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nfunction dispatch(state) {\n    var obj = state.obj, keys = state.keys, length = state.length, index = state.index, subscriber = state.subscriber;\n    if (index === length) {\n        subscriber.complete();\n        return;\n    }\n    var key = keys[index];\n    subscriber.next([key, obj[key]]);\n    state.index = index + 1;\n    this.schedule(state);\n}\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar PairsObservable = (function (_super) {\n    __extends(PairsObservable, _super);\n    function PairsObservable(obj, scheduler) {\n        _super.call(this);\n        this.obj = obj;\n        this.scheduler = scheduler;\n        this.keys = Object.keys(obj);\n    }\n    /**\n     * Convert an object into an observable sequence of [key, value] pairs\n     * using an optional IScheduler to enumerate the object.\n     *\n     * @example <caption>Converts a javascript object to an Observable</caption>\n     * var obj = {\n     *   foo: 42,\n     *   bar: 56,\n     *   baz: 78\n     * };\n     *\n     * var source = Rx.Observable.pairs(obj);\n     *\n     * var subscription = source.subscribe(\n     *   function (x) {\n     *     console.log('Next: %s', x);\n     *   },\n     *   function (err) {\n     *     console.log('Error: %s', err);\n     *   },\n     *   function () {\n     *     console.log('Completed');\n     *   });\n     *\n     * @param {Object} obj The object to inspect and turn into an\n     * Observable sequence.\n     * @param {Scheduler} [scheduler] An optional IScheduler to run the\n     * enumeration of the input sequence on.\n     * @returns {(Observable<Array<string | T>>)} An observable sequence of\n     * [key, value] pairs from the object.\n     */\n    PairsObservable.create = function (obj, scheduler) {\n        return new PairsObservable(obj, scheduler);\n    };\n    PairsObservable.prototype._subscribe = function (subscriber) {\n        var _a = this, keys = _a.keys, scheduler = _a.scheduler;\n        var length = keys.length;\n        if (scheduler) {\n            return scheduler.schedule(dispatch, 0, {\n                obj: this.obj, keys: keys, length: length, index: 0, subscriber: subscriber\n            });\n        }\n        else {\n            for (var idx = 0; idx < length; idx++) {\n                var key = keys[idx];\n                subscriber.next([key, this.obj[key]]);\n            }\n            subscriber.complete();\n        }\n    };\n    return PairsObservable;\n}(Observable_1.Observable));\nexports.PairsObservable = PairsObservable;\n//# sourceMappingURL=PairsObservable.js.map","\"use strict\";\nvar PairsObservable_1 = require('./PairsObservable');\nexports.pairs = PairsObservable_1.PairsObservable.create;\n//# sourceMappingURL=pairs.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar pairs_1 = require('../../observable/pairs');\nObservable_1.Observable.pairs = pairs_1.pairs;\n//# sourceMappingURL=pairs.js.map","\"use strict\";\nvar onErrorResumeNext_1 = require('../operators/onErrorResumeNext');\nexports.onErrorResumeNext = onErrorResumeNext_1.onErrorResumeNextStatic;\n//# sourceMappingURL=onErrorResumeNext.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar onErrorResumeNext_1 = require('../../observable/onErrorResumeNext');\nObservable_1.Observable.onErrorResumeNext = onErrorResumeNext_1.onErrorResumeNext;\n//# sourceMappingURL=onErrorResumeNext.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar of_1 = require('../../observable/of');\nObservable_1.Observable.of = of_1.of;\n//# sourceMappingURL=of.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar noop_1 = require('../util/noop');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar NeverObservable = (function (_super) {\n    __extends(NeverObservable, _super);\n    function NeverObservable() {\n        _super.call(this);\n    }\n    /**\n     * Creates an Observable that emits no items to the Observer.\n     *\n     * <span class=\"informal\">An Observable that never emits anything.</span>\n     *\n     * <img src=\"./img/never.png\" width=\"100%\">\n     *\n     * This static operator is useful for creating a simple Observable that emits\n     * neither values nor errors nor the completion notification. It can be used\n     * for testing purposes or for composing with other Observables. Please note\n     * that by never emitting a complete notification, this Observable keeps the\n     * subscription from being disposed automatically. Subscriptions need to be\n     * manually disposed.\n     *\n     * @example <caption>Emit the number 7, then never emit anything else (not even complete).</caption>\n     * function info() {\n     *   console.log('Will not be called');\n     * }\n     * var result = Rx.Observable.never().startWith(7);\n     * result.subscribe(x => console.log(x), info, info);\n     *\n     * @see {@link create}\n     * @see {@link empty}\n     * @see {@link of}\n     * @see {@link throw}\n     *\n     * @return {Observable} A \"never\" Observable: never emits anything.\n     * @static true\n     * @name never\n     * @owner Observable\n     */\n    NeverObservable.create = function () {\n        return new NeverObservable();\n    };\n    NeverObservable.prototype._subscribe = function (subscriber) {\n        noop_1.noop();\n    };\n    return NeverObservable;\n}(Observable_1.Observable));\nexports.NeverObservable = NeverObservable;\n//# sourceMappingURL=NeverObservable.js.map","\"use strict\";\nvar NeverObservable_1 = require('./NeverObservable');\nexports.never = NeverObservable_1.NeverObservable.create;\n//# sourceMappingURL=never.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar never_1 = require('../../observable/never');\nObservable_1.Observable.never = never_1.never;\n//# sourceMappingURL=never.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar race_1 = require('../../observable/race');\nObservable_1.Observable.race = race_1.race;\n//# sourceMappingURL=race.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar merge_1 = require('../../observable/merge');\nObservable_1.Observable.merge = merge_1.merge;\n//# sourceMappingURL=merge.js.map","\"use strict\";\n/**\n * An execution context and a data structure to order tasks and schedule their\n * execution. Provides a notion of (potentially virtual) time, through the\n * `now()` getter method.\n *\n * Each unit of work in a Scheduler is called an {@link Action}.\n *\n * ```ts\n * class Scheduler {\n *   now(): number;\n *   schedule(work, delay?, state?): Subscription;\n * }\n * ```\n *\n * @class Scheduler\n */\nvar Scheduler = (function () {\n    function Scheduler(SchedulerAction, now) {\n        if (now === void 0) { now = Scheduler.now; }\n        this.SchedulerAction = SchedulerAction;\n        this.now = now;\n    }\n    /**\n     * Schedules a function, `work`, for execution. May happen at some point in\n     * the future, according to the `delay` parameter, if specified. May be passed\n     * some context object, `state`, which will be passed to the `work` function.\n     *\n     * The given arguments will be processed an stored as an Action object in a\n     * queue of actions.\n     *\n     * @param {function(state: ?T): ?Subscription} work A function representing a\n     * task, or some unit of work to be executed by the Scheduler.\n     * @param {number} [delay] Time to wait before executing the work, where the\n     * time unit is implicit and defined by the Scheduler itself.\n     * @param {T} [state] Some contextual data that the `work` function uses when\n     * called by the Scheduler.\n     * @return {Subscription} A subscription in order to be able to unsubscribe\n     * the scheduled work.\n     */\n    Scheduler.prototype.schedule = function (work, delay, state) {\n        if (delay === void 0) { delay = 0; }\n        return new this.SchedulerAction(this, work).schedule(state, delay);\n    };\n    Scheduler.now = Date.now ? Date.now : function () { return +new Date(); };\n    return Scheduler;\n}());\nexports.Scheduler = Scheduler;\n//# sourceMappingURL=Scheduler.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscription_1 = require('../Subscription');\n/**\n * A unit of work to be executed in a {@link Scheduler}. An action is typically\n * created from within a Scheduler and an RxJS user does not need to concern\n * themselves about creating and manipulating an Action.\n *\n * ```ts\n * class Action<T> extends Subscription {\n *   new (scheduler: Scheduler, work: (state?: T) => void);\n *   schedule(state?: T, delay: number = 0): Subscription;\n * }\n * ```\n *\n * @class Action<T>\n */\nvar Action = (function (_super) {\n    __extends(Action, _super);\n    function Action(scheduler, work) {\n        _super.call(this);\n    }\n    /**\n     * Schedules this action on its parent Scheduler for execution. May be passed\n     * some context object, `state`. May happen at some point in the future,\n     * according to the `delay` parameter, if specified.\n     * @param {T} [state] Some contextual data that the `work` function uses when\n     * called by the Scheduler.\n     * @param {number} [delay] Time to wait before executing the work, where the\n     * time unit is implicit and defined by the Scheduler.\n     * @return {void}\n     */\n    Action.prototype.schedule = function (state, delay) {\n        if (delay === void 0) { delay = 0; }\n        return this;\n    };\n    return Action;\n}(Subscription_1.Subscription));\nexports.Action = Action;\n//# sourceMappingURL=Action.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar isNumeric_1 = require('../util/isNumeric');\nvar Observable_1 = require('../Observable');\nvar async_1 = require('../scheduler/async');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar IntervalObservable = (function (_super) {\n    __extends(IntervalObservable, _super);\n    function IntervalObservable(period, scheduler) {\n        if (period === void 0) { period = 0; }\n        if (scheduler === void 0) { scheduler = async_1.async; }\n        _super.call(this);\n        this.period = period;\n        this.scheduler = scheduler;\n        if (!isNumeric_1.isNumeric(period) || period < 0) {\n            this.period = 0;\n        }\n        if (!scheduler || typeof scheduler.schedule !== 'function') {\n            this.scheduler = async_1.async;\n        }\n    }\n    /**\n     * Creates an Observable that emits sequential numbers every specified\n     * interval of time, on a specified IScheduler.\n     *\n     * <span class=\"informal\">Emits incremental numbers periodically in time.\n     * </span>\n     *\n     * <img src=\"./img/interval.png\" width=\"100%\">\n     *\n     * `interval` returns an Observable that emits an infinite sequence of\n     * ascending integers, with a constant interval of time of your choosing\n     * between those emissions. The first emission is not sent immediately, but\n     * only after the first period has passed. By default, this operator uses the\n     * `async` IScheduler to provide a notion of time, but you may pass any\n     * IScheduler to it.\n     *\n     * @example <caption>Emits ascending numbers, one every second (1000ms)</caption>\n     * var numbers = Rx.Observable.interval(1000);\n     * numbers.subscribe(x => console.log(x));\n     *\n     * @see {@link timer}\n     * @see {@link delay}\n     *\n     * @param {number} [period=0] The interval size in milliseconds (by default)\n     * or the time unit determined by the scheduler's clock.\n     * @param {Scheduler} [scheduler=async] The IScheduler to use for scheduling\n     * the emission of values, and providing a notion of \"time\".\n     * @return {Observable} An Observable that emits a sequential number each time\n     * interval.\n     * @static true\n     * @name interval\n     * @owner Observable\n     */\n    IntervalObservable.create = function (period, scheduler) {\n        if (period === void 0) { period = 0; }\n        if (scheduler === void 0) { scheduler = async_1.async; }\n        return new IntervalObservable(period, scheduler);\n    };\n    IntervalObservable.dispatch = function (state) {\n        var index = state.index, subscriber = state.subscriber, period = state.period;\n        subscriber.next(index);\n        if (subscriber.closed) {\n            return;\n        }\n        state.index += 1;\n        this.schedule(state, period);\n    };\n    IntervalObservable.prototype._subscribe = function (subscriber) {\n        var index = 0;\n        var period = this.period;\n        var scheduler = this.scheduler;\n        subscriber.add(scheduler.schedule(IntervalObservable.dispatch, period, {\n            index: index, subscriber: subscriber, period: period\n        }));\n    };\n    return IntervalObservable;\n}(Observable_1.Observable));\nexports.IntervalObservable = IntervalObservable;\n//# sourceMappingURL=IntervalObservable.js.map","\"use strict\";\nvar IntervalObservable_1 = require('./IntervalObservable');\nexports.interval = IntervalObservable_1.IntervalObservable.create;\n//# sourceMappingURL=interval.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar interval_1 = require('../../observable/interval');\nObservable_1.Observable.interval = interval_1.interval;\n//# sourceMappingURL=interval.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar IfObservable = (function (_super) {\n    __extends(IfObservable, _super);\n    function IfObservable(condition, thenSource, elseSource) {\n        _super.call(this);\n        this.condition = condition;\n        this.thenSource = thenSource;\n        this.elseSource = elseSource;\n    }\n    IfObservable.create = function (condition, thenSource, elseSource) {\n        return new IfObservable(condition, thenSource, elseSource);\n    };\n    IfObservable.prototype._subscribe = function (subscriber) {\n        var _a = this, condition = _a.condition, thenSource = _a.thenSource, elseSource = _a.elseSource;\n        return new IfSubscriber(subscriber, condition, thenSource, elseSource);\n    };\n    return IfObservable;\n}(Observable_1.Observable));\nexports.IfObservable = IfObservable;\nvar IfSubscriber = (function (_super) {\n    __extends(IfSubscriber, _super);\n    function IfSubscriber(destination, condition, thenSource, elseSource) {\n        _super.call(this, destination);\n        this.condition = condition;\n        this.thenSource = thenSource;\n        this.elseSource = elseSource;\n        this.tryIf();\n    }\n    IfSubscriber.prototype.tryIf = function () {\n        var _a = this, condition = _a.condition, thenSource = _a.thenSource, elseSource = _a.elseSource;\n        var result;\n        try {\n            result = condition();\n            var source = result ? thenSource : elseSource;\n            if (source) {\n                this.add(subscribeToResult_1.subscribeToResult(this, source));\n            }\n            else {\n                this._complete();\n            }\n        }\n        catch (err) {\n            this._error(err);\n        }\n    };\n    return IfSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=IfObservable.js.map","\"use strict\";\nvar IfObservable_1 = require('./IfObservable');\nexports._if = IfObservable_1.IfObservable.create;\n//# sourceMappingURL=if.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar if_1 = require('../../observable/if');\nObservable_1.Observable.if = if_1._if;\n//# sourceMappingURL=if.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar isScheduler_1 = require('../util/isScheduler');\nvar selfSelector = function (value) { return value; };\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar GenerateObservable = (function (_super) {\n    __extends(GenerateObservable, _super);\n    function GenerateObservable(initialState, condition, iterate, resultSelector, scheduler) {\n        _super.call(this);\n        this.initialState = initialState;\n        this.condition = condition;\n        this.iterate = iterate;\n        this.resultSelector = resultSelector;\n        this.scheduler = scheduler;\n    }\n    GenerateObservable.create = function (initialStateOrOptions, condition, iterate, resultSelectorOrObservable, scheduler) {\n        if (arguments.length == 1) {\n            return new GenerateObservable(initialStateOrOptions.initialState, initialStateOrOptions.condition, initialStateOrOptions.iterate, initialStateOrOptions.resultSelector || selfSelector, initialStateOrOptions.scheduler);\n        }\n        if (resultSelectorOrObservable === undefined || isScheduler_1.isScheduler(resultSelectorOrObservable)) {\n            return new GenerateObservable(initialStateOrOptions, condition, iterate, selfSelector, resultSelectorOrObservable);\n        }\n        return new GenerateObservable(initialStateOrOptions, condition, iterate, resultSelectorOrObservable, scheduler);\n    };\n    GenerateObservable.prototype._subscribe = function (subscriber) {\n        var state = this.initialState;\n        if (this.scheduler) {\n            return this.scheduler.schedule(GenerateObservable.dispatch, 0, {\n                subscriber: subscriber,\n                iterate: this.iterate,\n                condition: this.condition,\n                resultSelector: this.resultSelector,\n                state: state });\n        }\n        var _a = this, condition = _a.condition, resultSelector = _a.resultSelector, iterate = _a.iterate;\n        do {\n            if (condition) {\n                var conditionResult = void 0;\n                try {\n                    conditionResult = condition(state);\n                }\n                catch (err) {\n                    subscriber.error(err);\n                    return;\n                }\n                if (!conditionResult) {\n                    subscriber.complete();\n                    break;\n                }\n            }\n            var value = void 0;\n            try {\n                value = resultSelector(state);\n            }\n            catch (err) {\n                subscriber.error(err);\n                return;\n            }\n            subscriber.next(value);\n            if (subscriber.closed) {\n                break;\n            }\n            try {\n                state = iterate(state);\n            }\n            catch (err) {\n                subscriber.error(err);\n                return;\n            }\n        } while (true);\n    };\n    GenerateObservable.dispatch = function (state) {\n        var subscriber = state.subscriber, condition = state.condition;\n        if (subscriber.closed) {\n            return;\n        }\n        if (state.needIterate) {\n            try {\n                state.state = state.iterate(state.state);\n            }\n            catch (err) {\n                subscriber.error(err);\n                return;\n            }\n        }\n        else {\n            state.needIterate = true;\n        }\n        if (condition) {\n            var conditionResult = void 0;\n            try {\n                conditionResult = condition(state.state);\n            }\n            catch (err) {\n                subscriber.error(err);\n                return;\n            }\n            if (!conditionResult) {\n                subscriber.complete();\n                return;\n            }\n            if (subscriber.closed) {\n                return;\n            }\n        }\n        var value;\n        try {\n            value = state.resultSelector(state.state);\n        }\n        catch (err) {\n            subscriber.error(err);\n            return;\n        }\n        if (subscriber.closed) {\n            return;\n        }\n        subscriber.next(value);\n        if (subscriber.closed) {\n            return;\n        }\n        return this.schedule(state);\n    };\n    return GenerateObservable;\n}(Observable_1.Observable));\nexports.GenerateObservable = GenerateObservable;\n//# sourceMappingURL=GenerateObservable.js.map","\"use strict\";\nvar GenerateObservable_1 = require('./GenerateObservable');\nexports.generate = GenerateObservable_1.GenerateObservable.create;\n//# sourceMappingURL=generate.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar generate_1 = require('../../observable/generate');\nObservable_1.Observable.generate = generate_1.generate;\n//# sourceMappingURL=generate.js.map","\"use strict\";\nvar PromiseObservable_1 = require('./PromiseObservable');\nexports.fromPromise = PromiseObservable_1.PromiseObservable.create;\n//# sourceMappingURL=fromPromise.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar fromPromise_1 = require('../../observable/fromPromise');\nObservable_1.Observable.fromPromise = fromPromise_1.fromPromise;\n//# sourceMappingURL=fromPromise.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar isFunction_1 = require('../util/isFunction');\nvar Observable_1 = require('../Observable');\nvar Subscription_1 = require('../Subscription');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar FromEventPatternObservable = (function (_super) {\n    __extends(FromEventPatternObservable, _super);\n    function FromEventPatternObservable(addHandler, removeHandler, selector) {\n        _super.call(this);\n        this.addHandler = addHandler;\n        this.removeHandler = removeHandler;\n        this.selector = selector;\n    }\n    /**\n     * Creates an Observable from an API based on addHandler/removeHandler\n     * functions.\n     *\n     * <span class=\"informal\">Converts any addHandler/removeHandler API to an\n     * Observable.</span>\n     *\n     * <img src=\"./img/fromEventPattern.png\" width=\"100%\">\n     *\n     * Creates an Observable by using the `addHandler` and `removeHandler`\n     * functions to add and remove the handlers, with an optional selector\n     * function to project the event arguments to a result. The `addHandler` is\n     * called when the output Observable is subscribed, and `removeHandler` is\n     * called when the Subscription is unsubscribed.\n     *\n     * @example <caption>Emits clicks happening on the DOM document</caption>\n     * function addClickHandler(handler) {\n     *   document.addEventListener('click', handler);\n     * }\n     *\n     * function removeClickHandler(handler) {\n     *   document.removeEventListener('click', handler);\n     * }\n     *\n     * var clicks = Rx.Observable.fromEventPattern(\n     *   addClickHandler,\n     *   removeClickHandler\n     * );\n     * clicks.subscribe(x => console.log(x));\n     *\n     * @see {@link from}\n     * @see {@link fromEvent}\n     *\n     * @param {function(handler: Function): any} addHandler A function that takes\n     * a `handler` function as argument and attaches it somehow to the actual\n     * source of events.\n     * @param {function(handler: Function, signal?: any): void} [removeHandler] An optional function that\n     * takes a `handler` function as argument and removes it in case it was\n     * previously attached using `addHandler`. if addHandler returns signal to teardown when remove,\n     * removeHandler function will forward it.\n     * @param {function(...args: any): T} [selector] An optional function to\n     * post-process results. It takes the arguments from the event handler and\n     * should return a single value.\n     * @return {Observable<T>}\n     * @static true\n     * @name fromEventPattern\n     * @owner Observable\n     */\n    FromEventPatternObservable.create = function (addHandler, removeHandler, selector) {\n        return new FromEventPatternObservable(addHandler, removeHandler, selector);\n    };\n    FromEventPatternObservable.prototype._subscribe = function (subscriber) {\n        var _this = this;\n        var removeHandler = this.removeHandler;\n        var handler = !!this.selector ? function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i - 0] = arguments[_i];\n            }\n            _this._callSelector(subscriber, args);\n        } : function (e) { subscriber.next(e); };\n        var retValue = this._callAddHandler(handler, subscriber);\n        if (!isFunction_1.isFunction(removeHandler)) {\n            return;\n        }\n        subscriber.add(new Subscription_1.Subscription(function () {\n            //TODO: determine whether or not to forward to error handler\n            removeHandler(handler, retValue);\n        }));\n    };\n    FromEventPatternObservable.prototype._callSelector = function (subscriber, args) {\n        try {\n            var result = this.selector.apply(this, args);\n            subscriber.next(result);\n        }\n        catch (e) {\n            subscriber.error(e);\n        }\n    };\n    FromEventPatternObservable.prototype._callAddHandler = function (handler, errorSubscriber) {\n        try {\n            return this.addHandler(handler) || null;\n        }\n        catch (e) {\n            errorSubscriber.error(e);\n        }\n    };\n    return FromEventPatternObservable;\n}(Observable_1.Observable));\nexports.FromEventPatternObservable = FromEventPatternObservable;\n//# sourceMappingURL=FromEventPatternObservable.js.map","\"use strict\";\nvar FromEventPatternObservable_1 = require('./FromEventPatternObservable');\nexports.fromEventPattern = FromEventPatternObservable_1.FromEventPatternObservable.create;\n//# sourceMappingURL=fromEventPattern.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar fromEventPattern_1 = require('../../observable/fromEventPattern');\nObservable_1.Observable.fromEventPattern = fromEventPattern_1.fromEventPattern;\n//# sourceMappingURL=fromEventPattern.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar tryCatch_1 = require('../util/tryCatch');\nvar isFunction_1 = require('../util/isFunction');\nvar errorObject_1 = require('../util/errorObject');\nvar Subscription_1 = require('../Subscription');\nvar toString = Object.prototype.toString;\nfunction isNodeStyleEventEmitter(sourceObj) {\n    return !!sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';\n}\nfunction isJQueryStyleEventEmitter(sourceObj) {\n    return !!sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';\n}\nfunction isNodeList(sourceObj) {\n    return !!sourceObj && toString.call(sourceObj) === '[object NodeList]';\n}\nfunction isHTMLCollection(sourceObj) {\n    return !!sourceObj && toString.call(sourceObj) === '[object HTMLCollection]';\n}\nfunction isEventTarget(sourceObj) {\n    return !!sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';\n}\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar FromEventObservable = (function (_super) {\n    __extends(FromEventObservable, _super);\n    function FromEventObservable(sourceObj, eventName, selector, options) {\n        _super.call(this);\n        this.sourceObj = sourceObj;\n        this.eventName = eventName;\n        this.selector = selector;\n        this.options = options;\n    }\n    /* tslint:enable:max-line-length */\n    /**\n     * Creates an Observable that emits events of a specific type coming from the\n     * given event target.\n     *\n     * <span class=\"informal\">Creates an Observable from DOM events, or Node.js\n     * EventEmitter events or others.</span>\n     *\n     * <img src=\"./img/fromEvent.png\" width=\"100%\">\n     *\n     * `fromEvent` accepts as a first argument event target, which is an object with methods\n     * for registering event handler functions. As a second argument it takes string that indicates\n     * type of event we want to listen for. `fromEvent` supports selected types of event targets,\n     * which are described in detail below. If your event target does not match any of the ones listed,\n     * you should use {@link fromEventPattern}, which can be used on arbitrary APIs.\n     * When it comes to APIs supported by `fromEvent`, their methods for adding and removing event\n     * handler functions have different names, but they all accept a string describing event type\n     * and function itself, which will be called whenever said event happens.\n     *\n     * Every time resulting Observable is subscribed, event handler function will be registered\n     * to event target on given event type. When that event fires, value\n     * passed as a first argument to registered function will be emitted by output Observable.\n     * When Observable is unsubscribed, function will be unregistered from event target.\n     *\n     * Note that if event target calls registered function with more than one argument, second\n     * and following arguments will not appear in resulting stream. In order to get access to them,\n     * you can pass to `fromEvent` optional project function, which will be called with all arguments\n     * passed to event handler. Output Observable will then emit value returned by project function,\n     * instead of the usual value.\n     *\n     * Remember that event targets listed below are checked via duck typing. It means that\n     * no matter what kind of object you have and no matter what environment you work in,\n     * you can safely use `fromEvent` on that object if it exposes described methods (provided\n     * of course they behave as was described above). So for example if Node.js library exposes\n     * event target which has the same method names as DOM EventTarget, `fromEvent` is still\n     * a good choice.\n     *\n     * If the API you use is more callback then event handler oriented (subscribed\n     * callback function fires only once and thus there is no need to manually\n     * unregister it), you should use {@link bindCallback} or {@link bindNodeCallback}\n     * instead.\n     *\n     * `fromEvent` supports following types of event targets:\n     *\n     * **DOM EventTarget**\n     *\n     * This is an object with `addEventListener` and `removeEventListener` methods.\n     *\n     * In the browser, `addEventListener` accepts - apart from event type string and event\n     * handler function arguments - optional third parameter, which is either an object or boolean,\n     * both used for additional configuration how and when passed function will be called. When\n     * `fromEvent` is used with event target of that type, you can provide this values\n     * as third parameter as well.\n     *\n     * **Node.js EventEmitter**\n     *\n     * An object with `addListener` and `removeListener` methods.\n     *\n     * **JQuery-style event target**\n     *\n     * An object with `on` and `off` methods\n     *\n     * **DOM NodeList**\n     *\n     * List of DOM Nodes, returned for example by `document.querySelectorAll` or `Node.childNodes`.\n     *\n     * Although this collection is not event target in itself, `fromEvent` will iterate over all Nodes\n     * it contains and install event handler function in every of them. When returned Observable\n     * is unsubscribed, function will be removed from all Nodes.\n     *\n     * **DOM HtmlCollection**\n     *\n     * Just as in case of NodeList it is a collection of DOM nodes. Here as well event handler function is\n     * installed and removed in each of elements.\n     *\n     *\n     * @example <caption>Emits clicks happening on the DOM document</caption>\n     * var clicks = Rx.Observable.fromEvent(document, 'click');\n     * clicks.subscribe(x => console.log(x));\n     *\n     * // Results in:\n     * // MouseEvent object logged to console every time a click\n     * // occurs on the document.\n     *\n     *\n     * @example <caption>Use addEventListener with capture option</caption>\n     * var clicksInDocument = Rx.Observable.fromEvent(document, 'click', true); // note optional configuration parameter\n     *                                                                          // which will be passed to addEventListener\n     * var clicksInDiv = Rx.Observable.fromEvent(someDivInDocument, 'click');\n     *\n     * clicksInDocument.subscribe(() => console.log('document'));\n     * clicksInDiv.subscribe(() => console.log('div'));\n     *\n     * // By default events bubble UP in DOM tree, so normally\n     * // when we would click on div in document\n     * // \"div\" would be logged first and then \"document\".\n     * // Since we specified optional `capture` option, document\n     * // will catch event when it goes DOWN DOM tree, so console\n     * // will log \"document\" and then \"div\".\n     *\n     * @see {@link bindCallback}\n     * @see {@link bindNodeCallback}\n     * @see {@link fromEventPattern}\n     *\n     * @param {EventTargetLike} target The DOM EventTarget, Node.js\n     * EventEmitter, JQuery-like event target, NodeList or HTMLCollection to attach the event handler to.\n     * @param {string} eventName The event name of interest, being emitted by the\n     * `target`.\n     * @param {EventListenerOptions} [options] Options to pass through to addEventListener\n     * @param {SelectorMethodSignature<T>} [selector] An optional function to\n     * post-process results. It takes the arguments from the event handler and\n     * should return a single value.\n     * @return {Observable<T>}\n     * @static true\n     * @name fromEvent\n     * @owner Observable\n     */\n    FromEventObservable.create = function (target, eventName, options, selector) {\n        if (isFunction_1.isFunction(options)) {\n            selector = options;\n            options = undefined;\n        }\n        return new FromEventObservable(target, eventName, selector, options);\n    };\n    FromEventObservable.setupSubscription = function (sourceObj, eventName, handler, subscriber, options) {\n        var unsubscribe;\n        if (isNodeList(sourceObj) || isHTMLCollection(sourceObj)) {\n            for (var i = 0, len = sourceObj.length; i < len; i++) {\n                FromEventObservable.setupSubscription(sourceObj[i], eventName, handler, subscriber, options);\n            }\n        }\n        else if (isEventTarget(sourceObj)) {\n            var source_1 = sourceObj;\n            sourceObj.addEventListener(eventName, handler, options);\n            unsubscribe = function () { return source_1.removeEventListener(eventName, handler, options); };\n        }\n        else if (isJQueryStyleEventEmitter(sourceObj)) {\n            var source_2 = sourceObj;\n            sourceObj.on(eventName, handler);\n            unsubscribe = function () { return source_2.off(eventName, handler); };\n        }\n        else if (isNodeStyleEventEmitter(sourceObj)) {\n            var source_3 = sourceObj;\n            sourceObj.addListener(eventName, handler);\n            unsubscribe = function () { return source_3.removeListener(eventName, handler); };\n        }\n        else {\n            throw new TypeError('Invalid event target');\n        }\n        subscriber.add(new Subscription_1.Subscription(unsubscribe));\n    };\n    FromEventObservable.prototype._subscribe = function (subscriber) {\n        var sourceObj = this.sourceObj;\n        var eventName = this.eventName;\n        var options = this.options;\n        var selector = this.selector;\n        var handler = selector ? function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i - 0] = arguments[_i];\n            }\n            var result = tryCatch_1.tryCatch(selector).apply(void 0, args);\n            if (result === errorObject_1.errorObject) {\n                subscriber.error(errorObject_1.errorObject.e);\n            }\n            else {\n                subscriber.next(result);\n            }\n        } : function (e) { return subscriber.next(e); };\n        FromEventObservable.setupSubscription(sourceObj, eventName, handler, subscriber, options);\n    };\n    return FromEventObservable;\n}(Observable_1.Observable));\nexports.FromEventObservable = FromEventObservable;\n//# sourceMappingURL=FromEventObservable.js.map","\"use strict\";\nvar FromEventObservable_1 = require('./FromEventObservable');\nexports.fromEvent = FromEventObservable_1.FromEventObservable.create;\n//# sourceMappingURL=fromEvent.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar fromEvent_1 = require('../../observable/fromEvent');\nObservable_1.Observable.fromEvent = fromEvent_1.fromEvent;\n//# sourceMappingURL=fromEvent.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar from_1 = require('../../observable/from');\nObservable_1.Observable.from = from_1.from;\n//# sourceMappingURL=from.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar EmptyObservable_1 = require('./EmptyObservable');\nvar isArray_1 = require('../util/isArray');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar ForkJoinObservable = (function (_super) {\n    __extends(ForkJoinObservable, _super);\n    function ForkJoinObservable(sources, resultSelector) {\n        _super.call(this);\n        this.sources = sources;\n        this.resultSelector = resultSelector;\n    }\n    /* tslint:enable:max-line-length */\n    /**\n     * Joins last values emitted by passed Observables.\n     *\n     * <span class=\"informal\">Wait for Observables to complete and then combine last values they emitted.</span>\n     *\n     * <img src=\"./img/forkJoin.png\" width=\"100%\">\n     *\n     * `forkJoin` is an operator that takes any number of Observables which can be passed either as an array\n     * or directly as arguments. If no input Observables are provided, resulting stream will complete\n     * immediately.\n     *\n     * `forkJoin` will wait for all passed Observables to complete and then it will emit an array with last\n     * values from corresponding Observables. So if you pass `n` Observables to the operator, resulting\n     * array will have `n` values, where first value is the last thing emitted by the first Observable,\n     * second value is the last thing emitted by the second Observable and so on. That means `forkJoin` will\n     * not emit more than once and it will complete after that. If you need to emit combined values not only\n     * at the end of lifecycle of passed Observables, but also throughout it, try out {@link combineLatest}\n     * or {@link zip} instead.\n     *\n     * In order for resulting array to have the same length as the number of input Observables, whenever any of\n     * that Observables completes without emitting any value, `forkJoin` will complete at that moment as well\n     * and it will not emit anything either, even if it already has some last values from other Observables.\n     * Conversely, if there is an Observable that never completes, `forkJoin` will never complete as well,\n     * unless at any point some other Observable completes without emitting value, which brings us back to\n     * the previous case. Overall, in order for `forkJoin` to emit a value, all Observables passed as arguments\n     * have to emit something at least once and complete.\n     *\n     * If any input Observable errors at some point, `forkJoin` will error as well and all other Observables\n     * will be immediately unsubscribed.\n     *\n     * Optionally `forkJoin` accepts project function, that will be called with values which normally\n     * would land in emitted array. Whatever is returned by project function, will appear in output\n     * Observable instead. This means that default project can be thought of as a function that takes\n     * all its arguments and puts them into an array. Note that project function will be called only\n     * when output Observable is supposed to emit a result.\n     *\n     * @example <caption>Use forkJoin with operator emitting immediately</caption>\n     * const observable = Rx.Observable.forkJoin(\n     *   Rx.Observable.of(1, 2, 3, 4),\n     *   Rx.Observable.of(5, 6, 7, 8)\n     * );\n     * observable.subscribe(\n     *   value => console.log(value),\n     *   err => {},\n     *   () => console.log('This is how it ends!')\n     * );\n     *\n     * // Logs:\n     * // [4, 8]\n     * // \"This is how it ends!\"\n     *\n     *\n     * @example <caption>Use forkJoin with operator emitting after some time</caption>\n     * const observable = Rx.Observable.forkJoin(\n     *   Rx.Observable.interval(1000).take(3), // emit 0, 1, 2 every second and complete\n     *   Rx.Observable.interval(500).take(4) // emit 0, 1, 2, 3 every half a second and complete\n     * );\n     * observable.subscribe(\n     *   value => console.log(value),\n     *   err => {},\n     *   () => console.log('This is how it ends!')\n     * );\n     *\n     * // Logs:\n     * // [2, 3] after 3 seconds\n     * // \"This is how it ends!\" immediately after\n     *\n     *\n     * @example <caption>Use forkJoin with project function</caption>\n     * const observable = Rx.Observable.forkJoin(\n     *   Rx.Observable.interval(1000).take(3), // emit 0, 1, 2 every second and complete\n     *   Rx.Observable.interval(500).take(4), // emit 0, 1, 2, 3 every half a second and complete\n     *   (n, m) => n + m\n     * );\n     * observable.subscribe(\n     *   value => console.log(value),\n     *   err => {},\n     *   () => console.log('This is how it ends!')\n     * );\n     *\n     * // Logs:\n     * // 5 after 3 seconds\n     * // \"This is how it ends!\" immediately after\n     *\n     * @see {@link combineLatest}\n     * @see {@link zip}\n     *\n     * @param {...SubscribableOrPromise} sources Any number of Observables provided either as an array or as an arguments\n     * passed directly to the operator.\n     * @param {function} [project] Function that takes values emitted by input Observables and returns value\n     * that will appear in resulting Observable instead of default array.\n     * @return {Observable} Observable emitting either an array of last values emitted by passed Observables\n     * or value from project function.\n     * @static true\n     * @name forkJoin\n     * @owner Observable\n     */\n    ForkJoinObservable.create = function () {\n        var sources = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            sources[_i - 0] = arguments[_i];\n        }\n        if (sources === null || arguments.length === 0) {\n            return new EmptyObservable_1.EmptyObservable();\n        }\n        var resultSelector = null;\n        if (typeof sources[sources.length - 1] === 'function') {\n            resultSelector = sources.pop();\n        }\n        // if the first and only other argument besides the resultSelector is an array\n        // assume it's been called with `forkJoin([obs1, obs2, obs3], resultSelector)`\n        if (sources.length === 1 && isArray_1.isArray(sources[0])) {\n            sources = sources[0];\n        }\n        if (sources.length === 0) {\n            return new EmptyObservable_1.EmptyObservable();\n        }\n        return new ForkJoinObservable(sources, resultSelector);\n    };\n    ForkJoinObservable.prototype._subscribe = function (subscriber) {\n        return new ForkJoinSubscriber(subscriber, this.sources, this.resultSelector);\n    };\n    return ForkJoinObservable;\n}(Observable_1.Observable));\nexports.ForkJoinObservable = ForkJoinObservable;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ForkJoinSubscriber = (function (_super) {\n    __extends(ForkJoinSubscriber, _super);\n    function ForkJoinSubscriber(destination, sources, resultSelector) {\n        _super.call(this, destination);\n        this.sources = sources;\n        this.resultSelector = resultSelector;\n        this.completed = 0;\n        this.haveValues = 0;\n        var len = sources.length;\n        this.total = len;\n        this.values = new Array(len);\n        for (var i = 0; i < len; i++) {\n            var source = sources[i];\n            var innerSubscription = subscribeToResult_1.subscribeToResult(this, source, null, i);\n            if (innerSubscription) {\n                innerSubscription.outerIndex = i;\n                this.add(innerSubscription);\n            }\n        }\n    }\n    ForkJoinSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.values[outerIndex] = innerValue;\n        if (!innerSub._hasValue) {\n            innerSub._hasValue = true;\n            this.haveValues++;\n        }\n    };\n    ForkJoinSubscriber.prototype.notifyComplete = function (innerSub) {\n        var destination = this.destination;\n        var _a = this, haveValues = _a.haveValues, resultSelector = _a.resultSelector, values = _a.values;\n        var len = values.length;\n        if (!innerSub._hasValue) {\n            destination.complete();\n            return;\n        }\n        this.completed++;\n        if (this.completed !== len) {\n            return;\n        }\n        if (haveValues === len) {\n            var value = resultSelector ? resultSelector.apply(this, values) : values;\n            destination.next(value);\n        }\n        destination.complete();\n    };\n    return ForkJoinSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=ForkJoinObservable.js.map","\"use strict\";\nvar ForkJoinObservable_1 = require('./ForkJoinObservable');\nexports.forkJoin = ForkJoinObservable_1.ForkJoinObservable.create;\n//# sourceMappingURL=forkJoin.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar forkJoin_1 = require('../../observable/forkJoin');\nObservable_1.Observable.forkJoin = forkJoin_1.forkJoin;\n//# sourceMappingURL=forkJoin.js.map","\"use strict\";\nvar EmptyObservable_1 = require('./EmptyObservable');\nexports.empty = EmptyObservable_1.EmptyObservable.create;\n//# sourceMappingURL=empty.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar empty_1 = require('../../observable/empty');\nObservable_1.Observable.empty = empty_1.empty;\n//# sourceMappingURL=empty.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar DeferObservable = (function (_super) {\n    __extends(DeferObservable, _super);\n    function DeferObservable(observableFactory) {\n        _super.call(this);\n        this.observableFactory = observableFactory;\n    }\n    /**\n     * Creates an Observable that, on subscribe, calls an Observable factory to\n     * make an Observable for each new Observer.\n     *\n     * <span class=\"informal\">Creates the Observable lazily, that is, only when it\n     * is subscribed.\n     * </span>\n     *\n     * <img src=\"./img/defer.png\" width=\"100%\">\n     *\n     * `defer` allows you to create the Observable only when the Observer\n     * subscribes, and create a fresh Observable for each Observer. It waits until\n     * an Observer subscribes to it, and then it generates an Observable,\n     * typically with an Observable factory function. It does this afresh for each\n     * subscriber, so although each subscriber may think it is subscribing to the\n     * same Observable, in fact each subscriber gets its own individual\n     * Observable.\n     *\n     * @example <caption>Subscribe to either an Observable of clicks or an Observable of interval, at random</caption>\n     * var clicksOrInterval = Rx.Observable.defer(function () {\n     *   if (Math.random() > 0.5) {\n     *     return Rx.Observable.fromEvent(document, 'click');\n     *   } else {\n     *     return Rx.Observable.interval(1000);\n     *   }\n     * });\n     * clicksOrInterval.subscribe(x => console.log(x));\n     *\n     * // Results in the following behavior:\n     * // If the result of Math.random() is greater than 0.5 it will listen\n     * // for clicks anywhere on the \"document\"; when document is clicked it\n     * // will log a MouseEvent object to the console. If the result is less\n     * // than 0.5 it will emit ascending numbers, one every second(1000ms).\n     *\n     * @see {@link create}\n     *\n     * @param {function(): SubscribableOrPromise} observableFactory The Observable\n     * factory function to invoke for each Observer that subscribes to the output\n     * Observable. May also return a Promise, which will be converted on the fly\n     * to an Observable.\n     * @return {Observable} An Observable whose Observers' subscriptions trigger\n     * an invocation of the given Observable factory function.\n     * @static true\n     * @name defer\n     * @owner Observable\n     */\n    DeferObservable.create = function (observableFactory) {\n        return new DeferObservable(observableFactory);\n    };\n    DeferObservable.prototype._subscribe = function (subscriber) {\n        return new DeferSubscriber(subscriber, this.observableFactory);\n    };\n    return DeferObservable;\n}(Observable_1.Observable));\nexports.DeferObservable = DeferObservable;\nvar DeferSubscriber = (function (_super) {\n    __extends(DeferSubscriber, _super);\n    function DeferSubscriber(destination, factory) {\n        _super.call(this, destination);\n        this.factory = factory;\n        this.tryDefer();\n    }\n    DeferSubscriber.prototype.tryDefer = function () {\n        try {\n            this._callFactory();\n        }\n        catch (err) {\n            this._error(err);\n        }\n    };\n    DeferSubscriber.prototype._callFactory = function () {\n        var result = this.factory();\n        if (result) {\n            this.add(subscribeToResult_1.subscribeToResult(this, result));\n        }\n    };\n    return DeferSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n//# sourceMappingURL=DeferObservable.js.map","\"use strict\";\nvar DeferObservable_1 = require('./DeferObservable');\nexports.defer = DeferObservable_1.DeferObservable.create;\n//# sourceMappingURL=defer.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar defer_1 = require('../../observable/defer');\nObservable_1.Observable.defer = defer_1.defer;\n//# sourceMappingURL=defer.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar ScalarObservable_1 = require('./ScalarObservable');\nvar EmptyObservable_1 = require('./EmptyObservable');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar ArrayLikeObservable = (function (_super) {\n    __extends(ArrayLikeObservable, _super);\n    function ArrayLikeObservable(arrayLike, scheduler) {\n        _super.call(this);\n        this.arrayLike = arrayLike;\n        this.scheduler = scheduler;\n        if (!scheduler && arrayLike.length === 1) {\n            this._isScalar = true;\n            this.value = arrayLike[0];\n        }\n    }\n    ArrayLikeObservable.create = function (arrayLike, scheduler) {\n        var length = arrayLike.length;\n        if (length === 0) {\n            return new EmptyObservable_1.EmptyObservable();\n        }\n        else if (length === 1) {\n            return new ScalarObservable_1.ScalarObservable(arrayLike[0], scheduler);\n        }\n        else {\n            return new ArrayLikeObservable(arrayLike, scheduler);\n        }\n    };\n    ArrayLikeObservable.dispatch = function (state) {\n        var arrayLike = state.arrayLike, index = state.index, length = state.length, subscriber = state.subscriber;\n        if (subscriber.closed) {\n            return;\n        }\n        if (index >= length) {\n            subscriber.complete();\n            return;\n        }\n        subscriber.next(arrayLike[index]);\n        state.index = index + 1;\n        this.schedule(state);\n    };\n    ArrayLikeObservable.prototype._subscribe = function (subscriber) {\n        var index = 0;\n        var _a = this, arrayLike = _a.arrayLike, scheduler = _a.scheduler;\n        var length = arrayLike.length;\n        if (scheduler) {\n            return scheduler.schedule(ArrayLikeObservable.dispatch, 0, {\n                arrayLike: arrayLike, index: index, length: length, subscriber: subscriber\n            });\n        }\n        else {\n            for (var i = 0; i < length && !subscriber.closed; i++) {\n                subscriber.next(arrayLike[i]);\n            }\n            subscriber.complete();\n        }\n    };\n    return ArrayLikeObservable;\n}(Observable_1.Observable));\nexports.ArrayLikeObservable = ArrayLikeObservable;\n//# sourceMappingURL=ArrayLikeObservable.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar root_1 = require('../util/root');\nvar Observable_1 = require('../Observable');\nvar iterator_1 = require('../symbol/iterator');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar IteratorObservable = (function (_super) {\n    __extends(IteratorObservable, _super);\n    function IteratorObservable(iterator, scheduler) {\n        _super.call(this);\n        this.scheduler = scheduler;\n        if (iterator == null) {\n            throw new Error('iterator cannot be null.');\n        }\n        this.iterator = getIterator(iterator);\n    }\n    IteratorObservable.create = function (iterator, scheduler) {\n        return new IteratorObservable(iterator, scheduler);\n    };\n    IteratorObservable.dispatch = function (state) {\n        var index = state.index, hasError = state.hasError, iterator = state.iterator, subscriber = state.subscriber;\n        if (hasError) {\n            subscriber.error(state.error);\n            return;\n        }\n        var result = iterator.next();\n        if (result.done) {\n            subscriber.complete();\n            return;\n        }\n        subscriber.next(result.value);\n        state.index = index + 1;\n        if (subscriber.closed) {\n            if (typeof iterator.return === 'function') {\n                iterator.return();\n            }\n            return;\n        }\n        this.schedule(state);\n    };\n    IteratorObservable.prototype._subscribe = function (subscriber) {\n        var index = 0;\n        var _a = this, iterator = _a.iterator, scheduler = _a.scheduler;\n        if (scheduler) {\n            return scheduler.schedule(IteratorObservable.dispatch, 0, {\n                index: index, iterator: iterator, subscriber: subscriber\n            });\n        }\n        else {\n            do {\n                var result = iterator.next();\n                if (result.done) {\n                    subscriber.complete();\n                    break;\n                }\n                else {\n                    subscriber.next(result.value);\n                }\n                if (subscriber.closed) {\n                    if (typeof iterator.return === 'function') {\n                        iterator.return();\n                    }\n                    break;\n                }\n            } while (true);\n        }\n    };\n    return IteratorObservable;\n}(Observable_1.Observable));\nexports.IteratorObservable = IteratorObservable;\nvar StringIterator = (function () {\n    function StringIterator(str, idx, len) {\n        if (idx === void 0) { idx = 0; }\n        if (len === void 0) { len = str.length; }\n        this.str = str;\n        this.idx = idx;\n        this.len = len;\n    }\n    StringIterator.prototype[iterator_1.iterator] = function () { return (this); };\n    StringIterator.prototype.next = function () {\n        return this.idx < this.len ? {\n            done: false,\n            value: this.str.charAt(this.idx++)\n        } : {\n            done: true,\n            value: undefined\n        };\n    };\n    return StringIterator;\n}());\nvar ArrayIterator = (function () {\n    function ArrayIterator(arr, idx, len) {\n        if (idx === void 0) { idx = 0; }\n        if (len === void 0) { len = toLength(arr); }\n        this.arr = arr;\n        this.idx = idx;\n        this.len = len;\n    }\n    ArrayIterator.prototype[iterator_1.iterator] = function () { return this; };\n    ArrayIterator.prototype.next = function () {\n        return this.idx < this.len ? {\n            done: false,\n            value: this.arr[this.idx++]\n        } : {\n            done: true,\n            value: undefined\n        };\n    };\n    return ArrayIterator;\n}());\nfunction getIterator(obj) {\n    var i = obj[iterator_1.iterator];\n    if (!i && typeof obj === 'string') {\n        return new StringIterator(obj);\n    }\n    if (!i && obj.length !== undefined) {\n        return new ArrayIterator(obj);\n    }\n    if (!i) {\n        throw new TypeError('object is not iterable');\n    }\n    return obj[iterator_1.iterator]();\n}\nvar maxSafeInteger = Math.pow(2, 53) - 1;\nfunction toLength(o) {\n    var len = +o.length;\n    if (isNaN(len)) {\n        return 0;\n    }\n    if (len === 0 || !numberIsFinite(len)) {\n        return len;\n    }\n    len = sign(len) * Math.floor(Math.abs(len));\n    if (len <= 0) {\n        return 0;\n    }\n    if (len > maxSafeInteger) {\n        return maxSafeInteger;\n    }\n    return len;\n}\nfunction numberIsFinite(value) {\n    return typeof value === 'number' && root_1.root.isFinite(value);\n}\nfunction sign(value) {\n    var valueAsNumber = +value;\n    if (valueAsNumber === 0) {\n        return valueAsNumber;\n    }\n    if (isNaN(valueAsNumber)) {\n        return valueAsNumber;\n    }\n    return valueAsNumber < 0 ? -1 : 1;\n}\n//# sourceMappingURL=IteratorObservable.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar concat_1 = require('../../observable/concat');\nObservable_1.Observable.concat = concat_1.concat;\n//# sourceMappingURL=concat.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('./Subscriber');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar InnerSubscriber = (function (_super) {\n    __extends(InnerSubscriber, _super);\n    function InnerSubscriber(parent, outerValue, outerIndex) {\n        _super.call(this);\n        this.parent = parent;\n        this.outerValue = outerValue;\n        this.outerIndex = outerIndex;\n        this.index = 0;\n    }\n    InnerSubscriber.prototype._next = function (value) {\n        this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);\n    };\n    InnerSubscriber.prototype._error = function (error) {\n        this.parent.notifyError(error, this);\n        this.unsubscribe();\n    };\n    InnerSubscriber.prototype._complete = function () {\n        this.parent.notifyComplete(this);\n        this.unsubscribe();\n    };\n    return InnerSubscriber;\n}(Subscriber_1.Subscriber));\nexports.InnerSubscriber = InnerSubscriber;\n//# sourceMappingURL=InnerSubscriber.js.map","\"use strict\";\nvar isScheduler_1 = require('../util/isScheduler');\nvar isArray_1 = require('../util/isArray');\nvar ArrayObservable_1 = require('./ArrayObservable');\nvar combineLatest_1 = require('../operators/combineLatest');\n/* tslint:enable:max-line-length */\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from all the Observables passed as\n * arguments. This is done by subscribing to each Observable in order and,\n * whenever any Observable emits, collecting an array of the most recent\n * values from each Observable. So if you pass `n` Observables to operator,\n * returned Observable will always emit an array of `n` values, in order\n * corresponding to order of passed Observables (value from the first Observable\n * on the first place and so on).\n *\n * Static version of `combineLatest` accepts either an array of Observables\n * or each Observable can be put directly as an argument. Note that array of\n * Observables is good choice, if you don't know beforehand how many Observables\n * you will combine. Passing empty array will result in Observable that\n * completes immediately.\n *\n * To ensure output array has always the same length, `combineLatest` will\n * actually wait for all input Observables to emit at least once,\n * before it starts emitting results. This means if some Observable emits\n * values before other Observables started emitting, all that values but last\n * will be lost. On the other hand, is some Observable does not emit value but\n * completes, resulting Observable will complete at the same moment without\n * emitting anything, since it will be now impossible to include value from\n * completed Observable in resulting array. Also, if some input Observable does\n * not emit any value and never completes, `combineLatest` will also never emit\n * and never complete, since, again, it will wait for all streams to emit some\n * value.\n *\n * If at least one Observable was passed to `combineLatest` and all passed Observables\n * emitted something, resulting Observable will complete when all combined\n * streams complete. So even if some Observable completes, result of\n * `combineLatest` will still emit values when other Observables do. In case\n * of completed Observable, its value from now on will always be the last\n * emitted value. On the other hand, if any Observable errors, `combineLatest`\n * will error immediately as well, and all other Observables will be unsubscribed.\n *\n * `combineLatest` accepts as optional parameter `project` function, which takes\n * as arguments all values that would normally be emitted by resulting Observable.\n * `project` can return any kind of value, which will be then emitted by Observable\n * instead of default array. Note that `project` does not take as argument that array\n * of values, but values themselves. That means default `project` can be imagined\n * as function that takes all its arguments and puts them into an array.\n *\n *\n * @example <caption>Combine two timer Observables</caption>\n * const firstTimer = Rx.Observable.timer(0, 1000); // emit 0, 1, 2... after every second, starting from now\n * const secondTimer = Rx.Observable.timer(500, 1000); // emit 0, 1, 2... after every second, starting 0,5s from now\n * const combinedTimers = Rx.Observable.combineLatest(firstTimer, secondTimer);\n * combinedTimers.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0] after 0.5s\n * // [1, 0] after 1s\n * // [1, 1] after 1.5s\n * // [2, 1] after 2s\n *\n *\n * @example <caption>Combine an array of Observables</caption>\n * const observables = [1, 5, 10].map(\n *   n => Rx.Observable.of(n).delay(n * 1000).startWith(0) // emit 0 and then emit n after n seconds\n * );\n * const combined = Rx.Observable.combineLatest(observables);\n * combined.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0, 0] immediately\n * // [1, 0, 0] after 1s\n * // [1, 5, 0] after 5s\n * // [1, 5, 10] after 10s\n *\n *\n * @example <caption>Use project function to dynamically calculate the Body-Mass Index</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = Rx.Observable.combineLatest(weight, height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} observable1 An input Observable to combine with other Observables.\n * @param {ObservableInput} observable2 An input Observable to combine with other Observables.\n * More than one input Observables may be given as arguments\n * or an array of Observables may be given as the first argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each input Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @static true\n * @name combineLatest\n * @owner Observable\n */\nfunction combineLatest() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    var project = null;\n    var scheduler = null;\n    if (isScheduler_1.isScheduler(observables[observables.length - 1])) {\n        scheduler = observables.pop();\n    }\n    if (typeof observables[observables.length - 1] === 'function') {\n        project = observables.pop();\n    }\n    // if the first and only other argument besides the resultSelector is an array\n    // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n    if (observables.length === 1 && isArray_1.isArray(observables[0])) {\n        observables = observables[0];\n    }\n    return new ArrayObservable_1.ArrayObservable(observables, scheduler).lift(new combineLatest_1.CombineLatestOperator(project));\n}\nexports.combineLatest = combineLatest;\n//# sourceMappingURL=combineLatest.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar combineLatest_1 = require('../../observable/combineLatest');\nObservable_1.Observable.combineLatest = combineLatest_1.combineLatest;\n//# sourceMappingURL=combineLatest.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\nvar AsyncSubject_1 = require('../AsyncSubject');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar BoundNodeCallbackObservable = (function (_super) {\n    __extends(BoundNodeCallbackObservable, _super);\n    function BoundNodeCallbackObservable(callbackFunc, selector, args, context, scheduler) {\n        _super.call(this);\n        this.callbackFunc = callbackFunc;\n        this.selector = selector;\n        this.args = args;\n        this.context = context;\n        this.scheduler = scheduler;\n    }\n    /* tslint:enable:max-line-length */\n    /**\n     * Converts a Node.js-style callback API to a function that returns an\n     * Observable.\n     *\n     * <span class=\"informal\">It's just like {@link bindCallback}, but the\n     * callback is expected to be of type `callback(error, result)`.</span>\n     *\n     * `bindNodeCallback` is not an operator because its input and output are not\n     * Observables. The input is a function `func` with some parameters, but the\n     * last parameter must be a callback function that `func` calls when it is\n     * done. The callback function is expected to follow Node.js conventions,\n     * where the first argument to the callback is an error object, signaling\n     * whether call was successful. If that object is passed to callback, it means\n     * something went wrong.\n     *\n     * The output of `bindNodeCallback` is a function that takes the same\n     * parameters as `func`, except the last one (the callback). When the output\n     * function is called with arguments, it will return an Observable.\n     * If `func` calls its callback with error parameter present, Observable will\n     * error with that value as well. If error parameter is not passed, Observable will emit\n     * second parameter. If there are more parameters (third and so on),\n     * Observable will emit an array with all arguments, except first error argument.\n     *\n     * Optionally `bindNodeCallback` accepts selector function, which allows you to\n     * make resulting Observable emit value computed by selector, instead of regular\n     * callback arguments. It works similarly to {@link bindCallback} selector, but\n     * Node.js-style error argument will never be passed to that function.\n     *\n     * Note that `func` will not be called at the same time output function is,\n     * but rather whenever resulting Observable is subscribed. By default call to\n     * `func` will happen synchronously after subscription, but that can be changed\n     * with proper {@link Scheduler} provided as optional third parameter. Scheduler\n     * can also control when values from callback will be emitted by Observable.\n     * To find out more, check out documentation for {@link bindCallback}, where\n     * Scheduler works exactly the same.\n     *\n     * As in {@link bindCallback}, context (`this` property) of input function will be set to context\n     * of returned function, when it is called.\n     *\n     * After Observable emits value, it will complete immediately. This means\n     * even if `func` calls callback again, values from second and consecutive\n     * calls will never appear on the stream. If you need to handle functions\n     * that call callbacks multiple times, check out {@link fromEvent} or\n     * {@link fromEventPattern} instead.\n     *\n     * Note that `bindNodeCallback` can be used in non-Node.js environments as well.\n     * \"Node.js-style\" callbacks are just a convention, so if you write for\n     * browsers or any other environment and API you use implements that callback style,\n     * `bindNodeCallback` can be safely used on that API functions as well.\n     *\n     * Remember that Error object passed to callback does not have to be an instance\n     * of JavaScript built-in `Error` object. In fact, it does not even have to an object.\n     * Error parameter of callback function is interpreted as \"present\", when value\n     * of that parameter is truthy. It could be, for example, non-zero number, non-empty\n     * string or boolean `true`. In all of these cases resulting Observable would error\n     * with that value. This means usually regular style callbacks will fail very often when\n     * `bindNodeCallback` is used. If your Observable errors much more often then you\n     * would expect, check if callback really is called in Node.js-style and, if not,\n     * switch to {@link bindCallback} instead.\n     *\n     * Note that even if error parameter is technically present in callback, but its value\n     * is falsy, it still won't appear in array emitted by Observable or in selector function.\n     *\n     *\n     * @example <caption>Read a file from the filesystem and get the data as an Observable</caption>\n     * import * as fs from 'fs';\n     * var readFileAsObservable = Rx.Observable.bindNodeCallback(fs.readFile);\n     * var result = readFileAsObservable('./roadNames.txt', 'utf8');\n     * result.subscribe(x => console.log(x), e => console.error(e));\n     *\n     *\n     * @example <caption>Use on function calling callback with multiple arguments</caption>\n     * someFunction((err, a, b) => {\n     *   console.log(err); // null\n     *   console.log(a); // 5\n     *   console.log(b); // \"some string\"\n     * });\n     * var boundSomeFunction = Rx.Observable.bindNodeCallback(someFunction);\n     * boundSomeFunction()\n     * .subscribe(value => {\n     *   console.log(value); // [5, \"some string\"]\n     * });\n     *\n     *\n     * @example <caption>Use with selector function</caption>\n     * someFunction((err, a, b) => {\n     *   console.log(err); // undefined\n     *   console.log(a); // \"abc\"\n     *   console.log(b); // \"DEF\"\n     * });\n     * var boundSomeFunction = Rx.Observable.bindNodeCallback(someFunction, (a, b) => a + b);\n     * boundSomeFunction()\n     * .subscribe(value => {\n     *   console.log(value); // \"abcDEF\"\n     * });\n     *\n     *\n     * @example <caption>Use on function calling callback in regular style</caption>\n     * someFunction(a => {\n     *   console.log(a); // 5\n     * });\n     * var boundSomeFunction = Rx.Observable.bindNodeCallback(someFunction);\n     * boundSomeFunction()\n     * .subscribe(\n     *   value => {}             // never gets called\n     *   err => console.log(err) // 5\n     *);\n     *\n     *\n     * @see {@link bindCallback}\n     * @see {@link from}\n     * @see {@link fromPromise}\n     *\n     * @param {function} func Function with a Node.js-style callback as the last parameter.\n     * @param {function} [selector] A function which takes the arguments from the\n     * callback and maps those to a value to emit on the output Observable.\n     * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n     * callbacks.\n     * @return {function(...params: *): Observable} A function which returns the\n     * Observable that delivers the same values the Node.js callback would\n     * deliver.\n     * @static true\n     * @name bindNodeCallback\n     * @owner Observable\n     */\n    BoundNodeCallbackObservable.create = function (func, selector, scheduler) {\n        if (selector === void 0) { selector = undefined; }\n        return function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i - 0] = arguments[_i];\n            }\n            return new BoundNodeCallbackObservable(func, selector, args, this, scheduler);\n        };\n    };\n    BoundNodeCallbackObservable.prototype._subscribe = function (subscriber) {\n        var callbackFunc = this.callbackFunc;\n        var args = this.args;\n        var scheduler = this.scheduler;\n        var subject = this.subject;\n        if (!scheduler) {\n            if (!subject) {\n                subject = this.subject = new AsyncSubject_1.AsyncSubject();\n                var handler = function handlerFn() {\n                    var innerArgs = [];\n                    for (var _i = 0; _i < arguments.length; _i++) {\n                        innerArgs[_i - 0] = arguments[_i];\n                    }\n                    var source = handlerFn.source;\n                    var selector = source.selector, subject = source.subject;\n                    var err = innerArgs.shift();\n                    if (err) {\n                        subject.error(err);\n                    }\n                    else if (selector) {\n                        var result_1 = tryCatch_1.tryCatch(selector).apply(this, innerArgs);\n                        if (result_1 === errorObject_1.errorObject) {\n                            subject.error(errorObject_1.errorObject.e);\n                        }\n                        else {\n                            subject.next(result_1);\n                            subject.complete();\n                        }\n                    }\n                    else {\n                        subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);\n                        subject.complete();\n                    }\n                };\n                // use named function instance to avoid closure.\n                handler.source = this;\n                var result = tryCatch_1.tryCatch(callbackFunc).apply(this.context, args.concat(handler));\n                if (result === errorObject_1.errorObject) {\n                    subject.error(errorObject_1.errorObject.e);\n                }\n            }\n            return subject.subscribe(subscriber);\n        }\n        else {\n            return scheduler.schedule(dispatch, 0, { source: this, subscriber: subscriber, context: this.context });\n        }\n    };\n    return BoundNodeCallbackObservable;\n}(Observable_1.Observable));\nexports.BoundNodeCallbackObservable = BoundNodeCallbackObservable;\nfunction dispatch(state) {\n    var self = this;\n    var source = state.source, subscriber = state.subscriber, context = state.context;\n    // XXX: cast to `any` to access to the private field in `source`.\n    var _a = source, callbackFunc = _a.callbackFunc, args = _a.args, scheduler = _a.scheduler;\n    var subject = source.subject;\n    if (!subject) {\n        subject = source.subject = new AsyncSubject_1.AsyncSubject();\n        var handler = function handlerFn() {\n            var innerArgs = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                innerArgs[_i - 0] = arguments[_i];\n            }\n            var source = handlerFn.source;\n            var selector = source.selector, subject = source.subject;\n            var err = innerArgs.shift();\n            if (err) {\n                self.add(scheduler.schedule(dispatchError, 0, { err: err, subject: subject }));\n            }\n            else if (selector) {\n                var result_2 = tryCatch_1.tryCatch(selector).apply(this, innerArgs);\n                if (result_2 === errorObject_1.errorObject) {\n                    self.add(scheduler.schedule(dispatchError, 0, { err: errorObject_1.errorObject.e, subject: subject }));\n                }\n                else {\n                    self.add(scheduler.schedule(dispatchNext, 0, { value: result_2, subject: subject }));\n                }\n            }\n            else {\n                var value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;\n                self.add(scheduler.schedule(dispatchNext, 0, { value: value, subject: subject }));\n            }\n        };\n        // use named function to pass values in without closure\n        handler.source = source;\n        var result = tryCatch_1.tryCatch(callbackFunc).apply(context, args.concat(handler));\n        if (result === errorObject_1.errorObject) {\n            self.add(scheduler.schedule(dispatchError, 0, { err: errorObject_1.errorObject.e, subject: subject }));\n        }\n    }\n    self.add(subject.subscribe(subscriber));\n}\nfunction dispatchNext(arg) {\n    var value = arg.value, subject = arg.subject;\n    subject.next(value);\n    subject.complete();\n}\nfunction dispatchError(arg) {\n    var err = arg.err, subject = arg.subject;\n    subject.error(err);\n}\n//# sourceMappingURL=BoundNodeCallbackObservable.js.map","\"use strict\";\nvar BoundNodeCallbackObservable_1 = require('./BoundNodeCallbackObservable');\nexports.bindNodeCallback = BoundNodeCallbackObservable_1.BoundNodeCallbackObservable.create;\n//# sourceMappingURL=bindNodeCallback.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar bindNodeCallback_1 = require('../../observable/bindNodeCallback');\nObservable_1.Observable.bindNodeCallback = bindNodeCallback_1.bindNodeCallback;\n//# sourceMappingURL=bindNodeCallback.js.map","\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\nvar AsyncSubject_1 = require('../AsyncSubject');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar BoundCallbackObservable = (function (_super) {\n    __extends(BoundCallbackObservable, _super);\n    function BoundCallbackObservable(callbackFunc, selector, args, context, scheduler) {\n        _super.call(this);\n        this.callbackFunc = callbackFunc;\n        this.selector = selector;\n        this.args = args;\n        this.context = context;\n        this.scheduler = scheduler;\n    }\n    /* tslint:enable:max-line-length */\n    /**\n     * Converts a callback API to a function that returns an Observable.\n     *\n     * <span class=\"informal\">Give it a function `f` of type `f(x, callback)` and\n     * it will return a function `g` that when called as `g(x)` will output an\n     * Observable.</span>\n     *\n     * `bindCallback` is not an operator because its input and output are not\n     * Observables. The input is a function `func` with some parameters, the\n     * last parameter must be a callback function that `func` calls when it is\n     * done.\n     *\n     * The output of `bindCallback` is a function that takes the same parameters\n     * as `func`, except the last one (the callback). When the output function\n     * is called with arguments it will return an Observable. If function `func`\n     * calls its callback with one argument the Observable will emit that value.\n     * If on the other hand the callback is called with multiple values the resulting\n     * Observable will emit an array with said values as arguments.\n     *\n     * It is very important to remember that input function `func` is not called\n     * when the output function is, but rather when the Observable returned by the output\n     * function is subscribed. This means if `func` makes an AJAX request, that request\n     * will be made every time someone subscribes to the resulting Observable, but not before.\n     *\n     * Optionally, a selector function can be passed to `bindObservable`. The selector function\n     * takes the same arguments as the callback and returns the value that will be emitted by the Observable.\n     * Even though by default multiple arguments passed to callback appear in the stream as an array\n     * the selector function will be called with arguments directly, just as the callback would.\n     * This means you can imagine the default selector (when one is not provided explicitly)\n     * as a function that aggregates all its arguments into an array, or simply returns first argument\n     * if there is only one.\n     *\n     * The last optional parameter - {@link Scheduler} - can be used to control when the call\n     * to `func` happens after someone subscribes to Observable, as well as when results\n     * passed to callback will be emitted. By default, the subscription to  an Observable calls `func`\n     * synchronously, but using `Scheduler.async` as the last parameter will defer the call to `func`,\n     * just like wrapping the call in `setTimeout` with a timeout of `0` would. If you use the async Scheduler\n     * and call `subscribe` on the output Observable all function calls that are currently executing\n     * will end before `func` is invoked.\n     *\n     * By default results passed to the callback are emitted immediately after `func` invokes the callback.\n     * In particular, if the callback is called synchronously the subscription of the resulting Observable\n     * will call the `next` function synchronously as well.  If you want to defer that call,\n     * you may use `Scheduler.async` just as before.  This means that by using `Scheduler.async` you can\n     * ensure that `func` always calls its callback asynchronously, thus avoiding terrifying Zalgo.\n     *\n     * Note that the Observable created by the output function will always emit a single value\n     * and then complete immediately. If `func` calls the callback multiple times, values from subsequent\n     * calls will not appear in the stream. If you need to listen for multiple calls,\n     *  you probably want to use {@link fromEvent} or {@link fromEventPattern} instead.\n     *\n     * If `func` depends on some context (`this` property) and is not already bound the context of `func`\n     * will be the context that the output function has at call time. In particular, if `func`\n     * is called as a method of some objec and if `func` is not already bound, in order to preserve the context\n     * it is recommended that the context of the output function is set to that object as well.\n     *\n     * If the input function calls its callback in the \"node style\" (i.e. first argument to callback is\n     * optional error parameter signaling whether the call failed or not), {@link bindNodeCallback}\n     * provides convenient error handling and probably is a better choice.\n     * `bindCallback` will treat such functions the same as any other and error parameters\n     * (whether passed or not) will always be interpreted as regular callback argument.\n     *\n     *\n     * @example <caption>Convert jQuery's getJSON to an Observable API</caption>\n     * // Suppose we have jQuery.getJSON('/my/url', callback)\n     * var getJSONAsObservable = Rx.Observable.bindCallback(jQuery.getJSON);\n     * var result = getJSONAsObservable('/my/url');\n     * result.subscribe(x => console.log(x), e => console.error(e));\n     *\n     *\n     * @example <caption>Receive an array of arguments passed to a callback</caption>\n     * someFunction((a, b, c) => {\n     *   console.log(a); // 5\n     *   console.log(b); // 'some string'\n     *   console.log(c); // {someProperty: 'someValue'}\n     * });\n     *\n     * const boundSomeFunction = Rx.Observable.bindCallback(someFunction);\n     * boundSomeFunction().subscribe(values => {\n     *   console.log(values) // [5, 'some string', {someProperty: 'someValue'}]\n     * });\n     *\n     *\n     * @example <caption>Use bindCallback with a selector function</caption>\n     * someFunction((a, b, c) => {\n     *   console.log(a); // 'a'\n     *   console.log(b); // 'b'\n     *   console.log(c); // 'c'\n     * });\n     *\n     * const boundSomeFunction = Rx.Observable.bindCallback(someFunction, (a, b, c) => a + b + c);\n     * boundSomeFunction().subscribe(value => {\n     *   console.log(value) // 'abc'\n     * });\n     *\n     *\n     * @example <caption>Compare behaviour with and without async Scheduler</caption>\n     * function iCallMyCallbackSynchronously(cb) {\n     *   cb();\n     * }\n     *\n     * const boundSyncFn = Rx.Observable.bindCallback(iCallMyCallbackSynchronously);\n     * const boundAsyncFn = Rx.Observable.bindCallback(iCallMyCallbackSynchronously, null, Rx.Scheduler.async);\n     *\n     * boundSyncFn().subscribe(() => console.log('I was sync!'));\n     * boundAsyncFn().subscribe(() => console.log('I was async!'));\n     * console.log('This happened...');\n     *\n     * // Logs:\n     * // I was sync!\n     * // This happened...\n     * // I was async!\n     *\n     *\n     * @example <caption>Use bindCallback on an object method</caption>\n     * const boundMethod = Rx.Observable.bindCallback(someObject.methodWithCallback);\n     * boundMethod.call(someObject) // make sure methodWithCallback has access to someObject\n     * .subscribe(subscriber);\n     *\n     *\n     * @see {@link bindNodeCallback}\n     * @see {@link from}\n     * @see {@link fromPromise}\n     *\n     * @param {function} func A function with a callback as the last parameter.\n     * @param {function} [selector] A function which takes the arguments from the\n     * callback and maps them to a value that is emitted on the output Observable.\n     * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n     * callbacks.\n     * @return {function(...params: *): Observable} A function which returns the\n     * Observable that delivers the same values the callback would deliver.\n     * @static true\n     * @name bindCallback\n     * @owner Observable\n     */\n    BoundCallbackObservable.create = function (func, selector, scheduler) {\n        if (selector === void 0) { selector = undefined; }\n        return function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i - 0] = arguments[_i];\n            }\n            return new BoundCallbackObservable(func, selector, args, this, scheduler);\n        };\n    };\n    BoundCallbackObservable.prototype._subscribe = function (subscriber) {\n        var callbackFunc = this.callbackFunc;\n        var args = this.args;\n        var scheduler = this.scheduler;\n        var subject = this.subject;\n        if (!scheduler) {\n            if (!subject) {\n                subject = this.subject = new AsyncSubject_1.AsyncSubject();\n                var handler = function handlerFn() {\n                    var innerArgs = [];\n                    for (var _i = 0; _i < arguments.length; _i++) {\n                        innerArgs[_i - 0] = arguments[_i];\n                    }\n                    var source = handlerFn.source;\n                    var selector = source.selector, subject = source.subject;\n                    if (selector) {\n                        var result_1 = tryCatch_1.tryCatch(selector).apply(this, innerArgs);\n                        if (result_1 === errorObject_1.errorObject) {\n                            subject.error(errorObject_1.errorObject.e);\n                        }\n                        else {\n                            subject.next(result_1);\n                            subject.complete();\n                        }\n                    }\n                    else {\n                        subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);\n                        subject.complete();\n                    }\n                };\n                // use named function instance to avoid closure.\n                handler.source = this;\n                var result = tryCatch_1.tryCatch(callbackFunc).apply(this.context, args.concat(handler));\n                if (result === errorObject_1.errorObject) {\n                    subject.error(errorObject_1.errorObject.e);\n                }\n            }\n            return subject.subscribe(subscriber);\n        }\n        else {\n            return scheduler.schedule(BoundCallbackObservable.dispatch, 0, { source: this, subscriber: subscriber, context: this.context });\n        }\n    };\n    BoundCallbackObservable.dispatch = function (state) {\n        var self = this;\n        var source = state.source, subscriber = state.subscriber, context = state.context;\n        var callbackFunc = source.callbackFunc, args = source.args, scheduler = source.scheduler;\n        var subject = source.subject;\n        if (!subject) {\n            subject = source.subject = new AsyncSubject_1.AsyncSubject();\n            var handler = function handlerFn() {\n                var innerArgs = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    innerArgs[_i - 0] = arguments[_i];\n                }\n                var source = handlerFn.source;\n                var selector = source.selector, subject = source.subject;\n                if (selector) {\n                    var result_2 = tryCatch_1.tryCatch(selector).apply(this, innerArgs);\n                    if (result_2 === errorObject_1.errorObject) {\n                        self.add(scheduler.schedule(dispatchError, 0, { err: errorObject_1.errorObject.e, subject: subject }));\n                    }\n                    else {\n                        self.add(scheduler.schedule(dispatchNext, 0, { value: result_2, subject: subject }));\n                    }\n                }\n                else {\n                    var value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;\n                    self.add(scheduler.schedule(dispatchNext, 0, { value: value, subject: subject }));\n                }\n            };\n            // use named function to pass values in without closure\n            handler.source = source;\n            var result = tryCatch_1.tryCatch(callbackFunc).apply(context, args.concat(handler));\n            if (result === errorObject_1.errorObject) {\n                subject.error(errorObject_1.errorObject.e);\n            }\n        }\n        self.add(subject.subscribe(subscriber));\n    };\n    return BoundCallbackObservable;\n}(Observable_1.Observable));\nexports.BoundCallbackObservable = BoundCallbackObservable;\nfunction dispatchNext(arg) {\n    var value = arg.value, subject = arg.subject;\n    subject.next(value);\n    subject.complete();\n}\nfunction dispatchError(arg) {\n    var err = arg.err, subject = arg.subject;\n    subject.error(err);\n}\n//# sourceMappingURL=BoundCallbackObservable.js.map","\"use strict\";\nvar BoundCallbackObservable_1 = require('./BoundCallbackObservable');\nexports.bindCallback = BoundCallbackObservable_1.BoundCallbackObservable.create;\n//# sourceMappingURL=bindCallback.js.map","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar bindCallback_1 = require('../../observable/bindCallback');\nObservable_1.Observable.bindCallback = bindCallback_1.bindCallback;\n//# sourceMappingURL=bindCallback.js.map","\"use strict\";\nvar Subscriber_1 = require('../Subscriber');\nvar rxSubscriber_1 = require('../symbol/rxSubscriber');\nvar Observer_1 = require('../Observer');\nfunction toSubscriber(nextOrObserver, error, complete) {\n    if (nextOrObserver) {\n        if (nextOrObserver instanceof Subscriber_1.Subscriber) {\n            return nextOrObserver;\n        }\n        if (nextOrObserver[rxSubscriber_1.rxSubscriber]) {\n            return nextOrObserver[rxSubscriber_1.rxSubscriber]();\n        }\n    }\n    if (!nextOrObserver && !error && !complete) {\n        return new Subscriber_1.Subscriber(Observer_1.empty);\n    }\n    return new Subscriber_1.Subscriber(nextOrObserver, error, complete);\n}\nexports.toSubscriber = toSubscriber;\n//# sourceMappingURL=toSubscriber.js.map"],"sourceRoot":""}